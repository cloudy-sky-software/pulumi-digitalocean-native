# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'ListRegistryRepositoryTagsResult',
    'AwaitableListRegistryRepositoryTagsResult',
    'list_registry_repository_tags',
    'list_registry_repository_tags_output',
]

@pulumi.output_type
class ListRegistryRepositoryTagsResult:
    def __init__(__self__, items=None):
        if items and not isinstance(items, dict):
            raise TypeError("Expected argument 'items' to be a dict")
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> 'outputs.ListRegistryRepositoryTagsItems':
        return pulumi.get(self, "items")


class AwaitableListRegistryRepositoryTagsResult(ListRegistryRepositoryTagsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListRegistryRepositoryTagsResult(
            items=self.items)


def list_registry_repository_tags(registry_name: Optional[str] = None,
                                  repository_name: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListRegistryRepositoryTagsResult:
    """
    Use this data source to access information about an existing resource.

    :param str registry_name: The name of a container registry.
    :param str repository_name: The name of a container registry repository. If the name contains `/` characters, they must be URL-encoded, e.g. `%2F`.
    """
    __args__ = dict()
    __args__['registryName'] = registry_name
    __args__['repositoryName'] = repository_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:registry/v2:listRegistryRepositoryTags', __args__, opts=opts, typ=ListRegistryRepositoryTagsResult).value

    return AwaitableListRegistryRepositoryTagsResult(
        items=pulumi.get(__ret__, 'items'))


@_utilities.lift_output_func(list_registry_repository_tags)
def list_registry_repository_tags_output(registry_name: Optional[pulumi.Input[str]] = None,
                                         repository_name: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ListRegistryRepositoryTagsResult]:
    """
    Use this data source to access information about an existing resource.

    :param str registry_name: The name of a container registry.
    :param str repository_name: The name of a container registry repository. If the name contains `/` characters, they must be URL-encoded, e.g. `%2F`.
    """
    ...
