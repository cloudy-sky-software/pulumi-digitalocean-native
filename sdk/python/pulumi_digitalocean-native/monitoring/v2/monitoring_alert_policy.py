# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['MonitoringAlertPolicyArgs', 'MonitoringAlertPolicy']

@pulumi.input_type
class MonitoringAlertPolicyArgs:
    def __init__(__self__, *,
                 alerts: pulumi.Input['AlertsArgs'],
                 compare: pulumi.Input['Compare'],
                 description: pulumi.Input[str],
                 enabled: pulumi.Input[bool],
                 entities: pulumi.Input[Sequence[pulumi.Input[str]]],
                 tags: pulumi.Input[Sequence[pulumi.Input[str]]],
                 type: pulumi.Input['Type'],
                 value: pulumi.Input[float],
                 window: pulumi.Input['Window']):
        """
        The set of arguments for constructing a MonitoringAlertPolicy resource.
        """
        pulumi.set(__self__, "alerts", alerts)
        pulumi.set(__self__, "compare", compare)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "entities", entities)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def alerts(self) -> pulumi.Input['AlertsArgs']:
        return pulumi.get(self, "alerts")

    @alerts.setter
    def alerts(self, value: pulumi.Input['AlertsArgs']):
        pulumi.set(self, "alerts", value)

    @property
    @pulumi.getter
    def compare(self) -> pulumi.Input['Compare']:
        return pulumi.get(self, "compare")

    @compare.setter
    def compare(self, value: pulumi.Input['Compare']):
        pulumi.set(self, "compare", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def entities(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "entities")

    @entities.setter
    def entities(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "entities", value)

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['Type']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['Type']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def window(self) -> pulumi.Input['Window']:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: pulumi.Input['Window']):
        pulumi.set(self, "window", value)


class MonitoringAlertPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alerts: Optional[pulumi.Input[pulumi.InputType['AlertsArgs']]] = None,
                 compare: Optional[pulumi.Input['Compare']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 entities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input['Type']] = None,
                 value: Optional[pulumi.Input[float]] = None,
                 window: Optional[pulumi.Input['Window']] = None,
                 __props__=None):
        """
        Create a MonitoringAlertPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MonitoringAlertPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MonitoringAlertPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MonitoringAlertPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MonitoringAlertPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alerts: Optional[pulumi.Input[pulumi.InputType['AlertsArgs']]] = None,
                 compare: Optional[pulumi.Input['Compare']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 entities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input['Type']] = None,
                 value: Optional[pulumi.Input[float]] = None,
                 window: Optional[pulumi.Input['Window']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MonitoringAlertPolicyArgs.__new__(MonitoringAlertPolicyArgs)

            if alerts is None and not opts.urn:
                raise TypeError("Missing required property 'alerts'")
            __props__.__dict__["alerts"] = alerts
            if compare is None and not opts.urn:
                raise TypeError("Missing required property 'compare'")
            __props__.__dict__["compare"] = compare
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if entities is None and not opts.urn:
                raise TypeError("Missing required property 'entities'")
            __props__.__dict__["entities"] = entities
            if tags is None and not opts.urn:
                raise TypeError("Missing required property 'tags'")
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
            if window is None and not opts.urn:
                raise TypeError("Missing required property 'window'")
            __props__.__dict__["window"] = window
            __props__.__dict__["policy"] = None
        super(MonitoringAlertPolicy, __self__).__init__(
            'digitalocean-native:monitoring/v2:MonitoringAlertPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'MonitoringAlertPolicy':
        """
        Get an existing MonitoringAlertPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = MonitoringAlertPolicyArgs.__new__(MonitoringAlertPolicyArgs)

        __props__.__dict__["alerts"] = None
        __props__.__dict__["compare"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["entities"] = None
        __props__.__dict__["policy"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["value"] = None
        __props__.__dict__["window"] = None
        return MonitoringAlertPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def alerts(self) -> pulumi.Output['outputs.Alerts']:
        return pulumi.get(self, "alerts")

    @property
    @pulumi.getter
    def compare(self) -> pulumi.Output['Compare']:
        return pulumi.get(self, "compare")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def entities(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "entities")

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Output[Optional['outputs.AlertPolicy']]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output['Type']:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output[float]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def window(self) -> pulumi.Output['Window']:
        return pulumi.get(self, "window")

