# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'Action',
    'ActionLink',
    'ActionRegionSlug',
    'Droplet',
    'DropletNetworksProperties',
    'DropletNextBackupWindowProperties',
    'GetReservedIPProperties',
    'GetReservedIPsActionProperties',
    'GetReservedIPsActionPropertiesAction',
    'Image',
    'Kernel',
    'LinksProperties',
    'ListReservedIPsActionsItems',
    'ListReservedIPsItems',
    'MetaMeta',
    'NetworkV4',
    'NetworkV6',
    'PageLinks',
    'PageLinksPagesProperties',
    'Region',
    'ReservedIp',
    'ReservedIpRegion',
    'Size',
]

@pulumi.output_type
class Action(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "completedAt":
            suggest = "completed_at"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "regionSlug":
            suggest = "region_slug"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "startedAt":
            suggest = "started_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Action. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Action.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Action.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 completed_at: Optional[str] = None,
                 id: Optional[int] = None,
                 project_id: Optional[str] = None,
                 region: Optional['outputs.Region'] = None,
                 region_slug: Optional['outputs.ActionRegionSlug'] = None,
                 resource_id: Optional[int] = None,
                 resource_type: Optional[str] = None,
                 started_at: Optional[str] = None,
                 status: Optional['ActionStatus'] = None,
                 type: Optional[str] = None):
        """
        :param str completed_at: A time value given in ISO8601 combined date and time format that represents when the action was completed.
        :param int id: A unique numeric ID that can be used to identify and reference an action.
        :param str project_id: The UUID of the project to which the reserved IP currently belongs.
        :param int resource_id: A unique identifier for the resource that the action is associated with.
        :param str resource_type: The type of resource that the action is associated with.
        :param str started_at: A time value given in ISO8601 combined date and time format that represents when the action was initiated.
        :param 'ActionStatus' status: The current status of the action. This can be "in-progress", "completed", or "errored".
        :param str type: This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
        """
        if completed_at is not None:
            pulumi.set(__self__, "completed_at", completed_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if region_slug is not None:
            pulumi.set(__self__, "region_slug", region_slug)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)
        if status is None:
            status = 'in-progress'
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="completedAt")
    def completed_at(self) -> Optional[str]:
        """
        A time value given in ISO8601 combined date and time format that represents when the action was completed.
        """
        return pulumi.get(self, "completed_at")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        A unique numeric ID that can be used to identify and reference an action.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        The UUID of the project to which the reserved IP currently belongs.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> Optional['outputs.Region']:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionSlug")
    def region_slug(self) -> Optional['outputs.ActionRegionSlug']:
        return pulumi.get(self, "region_slug")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[int]:
        """
        A unique identifier for the resource that the action is associated with.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        The type of resource that the action is associated with.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        A time value given in ISO8601 combined date and time format that represents when the action was initiated.
        """
        return pulumi.get(self, "started_at")

    @property
    @pulumi.getter
    def status(self) -> Optional['ActionStatus']:
        """
        The current status of the action. This can be "in-progress", "completed", or "errored".
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ActionLink(dict):
    """
    The linked actions can be used to check the status of a Droplet's create event.
    """
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 id: Optional[int] = None,
                 rel: Optional[str] = None):
        """
        The linked actions can be used to check the status of a Droplet's create event.
        :param str href: A URL that can be used to access the action.
        :param int id: A unique numeric ID that can be used to identify and reference an action.
        :param str rel: A string specifying the type of the related action.
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if rel is not None:
            pulumi.set(__self__, "rel", rel)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        A URL that can be used to access the action.
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        A unique numeric ID that can be used to identify and reference an action.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def rel(self) -> Optional[str]:
        """
        A string specifying the type of the related action.
        """
        return pulumi.get(self, "rel")


@pulumi.output_type
class ActionRegionSlug(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class Droplet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupIds":
            suggest = "backup_ids"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "nextBackupWindow":
            suggest = "next_backup_window"
        elif key == "sizeSlug":
            suggest = "size_slug"
        elif key == "snapshotIds":
            suggest = "snapshot_ids"
        elif key == "volumeIds":
            suggest = "volume_ids"
        elif key == "vpcUuid":
            suggest = "vpc_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Droplet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Droplet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Droplet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_ids: Sequence[int],
                 created_at: str,
                 disk: int,
                 features: Sequence[str],
                 id: int,
                 image: 'outputs.Image',
                 locked: bool,
                 memory: int,
                 name: str,
                 networks: 'outputs.DropletNetworksProperties',
                 next_backup_window: 'outputs.DropletNextBackupWindowProperties',
                 region: 'outputs.Region',
                 size: 'outputs.Size',
                 size_slug: str,
                 snapshot_ids: Sequence[int],
                 status: 'DropletStatus',
                 tags: Sequence[str],
                 vcpus: int,
                 volume_ids: Sequence[str],
                 kernel: Optional['outputs.Kernel'] = None,
                 vpc_uuid: Optional[str] = None):
        """
        :param Sequence[int] backup_ids: An array of backup IDs of any backups that have been taken of the Droplet instance.  Droplet backups are enabled at the time of the instance creation.
        :param str created_at: A time value given in ISO8601 combined date and time format that represents when the Droplet was created.
        :param int disk: The size of the Droplet's disk in gigabytes.
        :param Sequence[str] features: An array of features enabled on this Droplet.
        :param int id: A unique identifier for each Droplet instance. This is automatically generated upon Droplet creation.
        :param bool locked: A boolean value indicating whether the Droplet has been locked, preventing actions by users.
        :param int memory: Memory of the Droplet in megabytes.
        :param str name: The human-readable name set for the Droplet instance.
        :param 'DropletNetworksProperties' networks: The details of the network that are configured for the Droplet instance.  This is an object that contains keys for IPv4 and IPv6.  The value of each of these is an array that contains objects describing an individual IP resource allocated to the Droplet.  These will define attributes like the IP address, netmask, and gateway of the specific network depending on the type of network it is.
        :param 'DropletNextBackupWindowProperties' next_backup_window: The details of the Droplet's backups feature, if backups are configured for the Droplet. This object contains keys for the start and end times of the window during which the backup will start.
        :param str size_slug: The unique slug identifier for the size of this Droplet.
        :param Sequence[int] snapshot_ids: An array of snapshot IDs of any snapshots created from the Droplet instance.
        :param 'DropletStatus' status: A status string indicating the state of the Droplet instance. This may be "new", "active", "off", or "archive".
        :param Sequence[str] tags: An array of Tags the Droplet has been tagged with.
        :param int vcpus: The number of virtual CPUs.
        :param Sequence[str] volume_ids: A flat array including the unique identifier for each Block Storage volume attached to the Droplet.
        :param 'Kernel' kernel: **Note**: All Droplets created after March 2017 use internal kernels by default.
               These Droplets will have this attribute set to `null`.
               
               The current [kernel](https://www.digitalocean.com/docs/droplets/how-to/kernel/)
               for Droplets with externally managed kernels. This will initially be set to
               the kernel of the base image when the Droplet is created.
        :param str vpc_uuid: A string specifying the UUID of the VPC to which the Droplet is assigned.
        """
        pulumi.set(__self__, "backup_ids", backup_ids)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "disk", disk)
        pulumi.set(__self__, "features", features)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "locked", locked)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "networks", networks)
        pulumi.set(__self__, "next_backup_window", next_backup_window)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "size_slug", size_slug)
        pulumi.set(__self__, "snapshot_ids", snapshot_ids)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vcpus", vcpus)
        pulumi.set(__self__, "volume_ids", volume_ids)
        if kernel is not None:
            pulumi.set(__self__, "kernel", kernel)
        if vpc_uuid is not None:
            pulumi.set(__self__, "vpc_uuid", vpc_uuid)

    @property
    @pulumi.getter(name="backupIds")
    def backup_ids(self) -> Sequence[int]:
        """
        An array of backup IDs of any backups that have been taken of the Droplet instance.  Droplet backups are enabled at the time of the instance creation.
        """
        return pulumi.get(self, "backup_ids")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        A time value given in ISO8601 combined date and time format that represents when the Droplet was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def disk(self) -> int:
        """
        The size of the Droplet's disk in gigabytes.
        """
        return pulumi.get(self, "disk")

    @property
    @pulumi.getter
    def features(self) -> Sequence[str]:
        """
        An array of features enabled on this Droplet.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier for each Droplet instance. This is automatically generated upon Droplet creation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def image(self) -> 'outputs.Image':
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def locked(self) -> bool:
        """
        A boolean value indicating whether the Droplet has been locked, preventing actions by users.
        """
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        Memory of the Droplet in megabytes.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The human-readable name set for the Droplet instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> 'outputs.DropletNetworksProperties':
        """
        The details of the network that are configured for the Droplet instance.  This is an object that contains keys for IPv4 and IPv6.  The value of each of these is an array that contains objects describing an individual IP resource allocated to the Droplet.  These will define attributes like the IP address, netmask, and gateway of the specific network depending on the type of network it is.
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="nextBackupWindow")
    def next_backup_window(self) -> 'outputs.DropletNextBackupWindowProperties':
        """
        The details of the Droplet's backups feature, if backups are configured for the Droplet. This object contains keys for the start and end times of the window during which the backup will start.
        """
        return pulumi.get(self, "next_backup_window")

    @property
    @pulumi.getter
    def region(self) -> 'outputs.Region':
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def size(self) -> 'outputs.Size':
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeSlug")
    def size_slug(self) -> str:
        """
        The unique slug identifier for the size of this Droplet.
        """
        return pulumi.get(self, "size_slug")

    @property
    @pulumi.getter(name="snapshotIds")
    def snapshot_ids(self) -> Sequence[int]:
        """
        An array of snapshot IDs of any snapshots created from the Droplet instance.
        """
        return pulumi.get(self, "snapshot_ids")

    @property
    @pulumi.getter
    def status(self) -> 'DropletStatus':
        """
        A status string indicating the state of the Droplet instance. This may be "new", "active", "off", or "archive".
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        An array of Tags the Droplet has been tagged with.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def vcpus(self) -> int:
        """
        The number of virtual CPUs.
        """
        return pulumi.get(self, "vcpus")

    @property
    @pulumi.getter(name="volumeIds")
    def volume_ids(self) -> Sequence[str]:
        """
        A flat array including the unique identifier for each Block Storage volume attached to the Droplet.
        """
        return pulumi.get(self, "volume_ids")

    @property
    @pulumi.getter
    def kernel(self) -> Optional['outputs.Kernel']:
        """
        **Note**: All Droplets created after March 2017 use internal kernels by default.
        These Droplets will have this attribute set to `null`.

        The current [kernel](https://www.digitalocean.com/docs/droplets/how-to/kernel/)
        for Droplets with externally managed kernels. This will initially be set to
        the kernel of the base image when the Droplet is created.
        """
        return pulumi.get(self, "kernel")

    @property
    @pulumi.getter(name="vpcUuid")
    def vpc_uuid(self) -> Optional[str]:
        """
        A string specifying the UUID of the VPC to which the Droplet is assigned.
        """
        return pulumi.get(self, "vpc_uuid")


@pulumi.output_type
class DropletNetworksProperties(dict):
    """
    The details of the network that are configured for the Droplet instance.  This is an object that contains keys for IPv4 and IPv6.  The value of each of these is an array that contains objects describing an individual IP resource allocated to the Droplet.  These will define attributes like the IP address, netmask, and gateway of the specific network depending on the type of network it is.
    """
    def __init__(__self__, *,
                 v4: Optional[Sequence['outputs.NetworkV4']] = None,
                 v6: Optional[Sequence['outputs.NetworkV6']] = None):
        """
        The details of the network that are configured for the Droplet instance.  This is an object that contains keys for IPv4 and IPv6.  The value of each of these is an array that contains objects describing an individual IP resource allocated to the Droplet.  These will define attributes like the IP address, netmask, and gateway of the specific network depending on the type of network it is.
        """
        if v4 is not None:
            pulumi.set(__self__, "v4", v4)
        if v6 is not None:
            pulumi.set(__self__, "v6", v6)

    @property
    @pulumi.getter
    def v4(self) -> Optional[Sequence['outputs.NetworkV4']]:
        return pulumi.get(self, "v4")

    @property
    @pulumi.getter
    def v6(self) -> Optional[Sequence['outputs.NetworkV6']]:
        return pulumi.get(self, "v6")


@pulumi.output_type
class DropletNextBackupWindowProperties(dict):
    """
    The details of the Droplet's backups feature, if backups are configured for the Droplet. This object contains keys for the start and end times of the window during which the backup will start.
    """
    def __init__(__self__, *,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        """
        The details of the Droplet's backups feature, if backups are configured for the Droplet. This object contains keys for the start and end times of the window during which the backup will start.
        :param str end: A time value given in ISO8601 combined date and time format specifying the end of the Droplet's backup window.
        :param str start: A time value given in ISO8601 combined date and time format specifying the start of the Droplet's backup window.
        """
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        """
        A time value given in ISO8601 combined date and time format specifying the end of the Droplet's backup window.
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        """
        A time value given in ISO8601 combined date and time format specifying the start of the Droplet's backup window.
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class GetReservedIPProperties(dict):
    def __init__(__self__, *,
                 reserved_ip: Optional['outputs.ReservedIp'] = None):
        if reserved_ip is not None:
            pulumi.set(__self__, "reserved_ip", reserved_ip)

    @property
    @pulumi.getter(name="reservedIp")
    def reserved_ip(self) -> Optional['outputs.ReservedIp']:
        return pulumi.get(self, "reserved_ip")


@pulumi.output_type
class GetReservedIPsActionProperties(dict):
    def __init__(__self__, *,
                 action: Optional['outputs.GetReservedIPsActionPropertiesAction'] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)

    @property
    @pulumi.getter
    def action(self) -> Optional['outputs.GetReservedIPsActionPropertiesAction']:
        return pulumi.get(self, "action")


@pulumi.output_type
class GetReservedIPsActionPropertiesAction(dict):
    def __init__(__self__, *,
                 completed_at: Optional[str] = None,
                 id: Optional[int] = None,
                 project_id: Optional[str] = None,
                 region: Optional['outputs.Region'] = None,
                 region_slug: Optional['outputs.ActionRegionSlug'] = None,
                 resource_id: Optional[int] = None,
                 resource_type: Optional[str] = None,
                 started_at: Optional[str] = None,
                 status: Optional['ActionStatus'] = None,
                 type: Optional[str] = None):
        """
        :param str completed_at: A time value given in ISO8601 combined date and time format that represents when the action was completed.
        :param int id: A unique numeric ID that can be used to identify and reference an action.
        :param str project_id: The UUID of the project to which the reserved IP currently belongs.
        :param int resource_id: A unique identifier for the resource that the action is associated with.
        :param str resource_type: The type of resource that the action is associated with.
        :param str started_at: A time value given in ISO8601 combined date and time format that represents when the action was initiated.
        :param 'ActionStatus' status: The current status of the action. This can be "in-progress", "completed", or "errored".
        :param str type: This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
        """
        if completed_at is not None:
            pulumi.set(__self__, "completed_at", completed_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if region_slug is not None:
            pulumi.set(__self__, "region_slug", region_slug)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)
        if status is None:
            status = 'in-progress'
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="completedAt")
    def completed_at(self) -> Optional[str]:
        """
        A time value given in ISO8601 combined date and time format that represents when the action was completed.
        """
        return pulumi.get(self, "completed_at")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        A unique numeric ID that can be used to identify and reference an action.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        The UUID of the project to which the reserved IP currently belongs.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> Optional['outputs.Region']:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionSlug")
    def region_slug(self) -> Optional['outputs.ActionRegionSlug']:
        return pulumi.get(self, "region_slug")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[int]:
        """
        A unique identifier for the resource that the action is associated with.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        The type of resource that the action is associated with.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        A time value given in ISO8601 combined date and time format that represents when the action was initiated.
        """
        return pulumi.get(self, "started_at")

    @property
    @pulumi.getter
    def status(self) -> Optional['ActionStatus']:
        """
        The current status of the action. This can be "in-progress", "completed", or "errored".
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class Image(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "minDiskSize":
            suggest = "min_disk_size"
        elif key == "sizeGigabytes":
            suggest = "size_gigabytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Image. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Image.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Image.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 description: Optional[str] = None,
                 distribution: Optional['ImageDistribution'] = None,
                 error_message: Optional[str] = None,
                 id: Optional[int] = None,
                 min_disk_size: Optional[int] = None,
                 name: Optional[str] = None,
                 public: Optional[bool] = None,
                 regions: Optional[Sequence['ImageRegionsItem']] = None,
                 size_gigabytes: Optional[float] = None,
                 slug: Optional[str] = None,
                 status: Optional['ImageStatus'] = None,
                 tags: Optional[Sequence[str]] = None,
                 type: Optional['ImageType'] = None):
        """
        :param str created_at: A time value given in ISO8601 combined date and time format that represents when the image was created.
        :param str description: An optional free-form text field to describe an image.
        :param 'ImageDistribution' distribution: The name of a custom image's distribution. Currently, the valid values are  `Arch Linux`, `CentOS`, `CoreOS`, `Debian`, `Fedora`, `Fedora Atomic`,  `FreeBSD`, `Gentoo`, `openSUSE`, `RancherOS`, `Rocky Linux`, `Ubuntu`, and `Unknown`.  Any other value will be accepted but ignored, and `Unknown` will be used in its place.
        :param str error_message: A string containing information about errors that may occur when importing
                a custom image.
        :param int id: A unique number that can be used to identify and reference a specific image.
        :param int min_disk_size: The minimum disk size in GB required for a Droplet to use this image.
        :param str name: The display name that has been given to an image.  This is what is shown in the control panel and is generally a descriptive title for the image in question.
        :param bool public: This is a boolean value that indicates whether the image in question is public or not. An image that is public is available to all accounts. A non-public image is only accessible from your account.
        :param Sequence['ImageRegionsItem'] regions: This attribute is an array of the regions that the image is available in. The regions are represented by their identifying slug values.
        :param float size_gigabytes: The size of the image in gigabytes.
        :param str slug: A uniquely identifying string that is associated with each of the DigitalOcean-provided public images. These can be used to reference a public image as an alternative to the numeric id.
        :param 'ImageStatus' status: A status string indicating the state of a custom image. This may be `NEW`,
                `available`, `pending`, `deleted`, or `retired`.
        :param Sequence[str] tags: A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
        :param 'ImageType' type: Describes the kind of image. It may be one of `base`, `snapshot`, `backup`, `custom`, or `admin`. Respectively, this specifies whether an image is a DigitalOcean base OS image, user-generated Droplet snapshot, automatically created Droplet backup, user-provided virtual machine image, or an image used for DigitalOcean managed resources (e.g. DOKS worker nodes).
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distribution is not None:
            pulumi.set(__self__, "distribution", distribution)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if min_disk_size is not None:
            pulumi.set(__self__, "min_disk_size", min_disk_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if public is not None:
            pulumi.set(__self__, "public", public)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if size_gigabytes is not None:
            pulumi.set(__self__, "size_gigabytes", size_gigabytes)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        A time value given in ISO8601 combined date and time format that represents when the image was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        An optional free-form text field to describe an image.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def distribution(self) -> Optional['ImageDistribution']:
        """
        The name of a custom image's distribution. Currently, the valid values are  `Arch Linux`, `CentOS`, `CoreOS`, `Debian`, `Fedora`, `Fedora Atomic`,  `FreeBSD`, `Gentoo`, `openSUSE`, `RancherOS`, `Rocky Linux`, `Ubuntu`, and `Unknown`.  Any other value will be accepted but ignored, and `Unknown` will be used in its place.
        """
        return pulumi.get(self, "distribution")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        A string containing information about errors that may occur when importing
         a custom image.
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        A unique number that can be used to identify and reference a specific image.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="minDiskSize")
    def min_disk_size(self) -> Optional[int]:
        """
        The minimum disk size in GB required for a Droplet to use this image.
        """
        return pulumi.get(self, "min_disk_size")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The display name that has been given to an image.  This is what is shown in the control panel and is generally a descriptive title for the image in question.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def public(self) -> Optional[bool]:
        """
        This is a boolean value that indicates whether the image in question is public or not. An image that is public is available to all accounts. A non-public image is only accessible from your account.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence['ImageRegionsItem']]:
        """
        This attribute is an array of the regions that the image is available in. The regions are represented by their identifying slug values.
        """
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="sizeGigabytes")
    def size_gigabytes(self) -> Optional[float]:
        """
        The size of the image in gigabytes.
        """
        return pulumi.get(self, "size_gigabytes")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        A uniquely identifying string that is associated with each of the DigitalOcean-provided public images. These can be used to reference a public image as an alternative to the numeric id.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def status(self) -> Optional['ImageStatus']:
        """
        A status string indicating the state of a custom image. This may be `NEW`,
         `available`, `pending`, `deleted`, or `retired`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional['ImageType']:
        """
        Describes the kind of image. It may be one of `base`, `snapshot`, `backup`, `custom`, or `admin`. Respectively, this specifies whether an image is a DigitalOcean base OS image, user-generated Droplet snapshot, automatically created Droplet backup, user-provided virtual machine image, or an image used for DigitalOcean managed resources (e.g. DOKS worker nodes).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class Kernel(dict):
    """
    **Note**: All Droplets created after March 2017 use internal kernels by default.
    These Droplets will have this attribute set to `null`.

    The current [kernel](https://www.digitalocean.com/docs/droplets/how-to/kernel/)
    for Droplets with externally managed kernels. This will initially be set to
    the kernel of the base image when the Droplet is created.
    """
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 version: Optional[str] = None):
        """
        **Note**: All Droplets created after March 2017 use internal kernels by default.
        These Droplets will have this attribute set to `null`.

        The current [kernel](https://www.digitalocean.com/docs/droplets/how-to/kernel/)
        for Droplets with externally managed kernels. This will initially be set to
        the kernel of the base image when the Droplet is created.

        :param int id: A unique number used to identify and reference a specific kernel.
        :param str name: The display name of the kernel. This is shown in the web UI and is generally a descriptive title for the kernel in question.
        :param str version: A standard kernel version string representing the version, patch, and release information.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        A unique number used to identify and reference a specific kernel.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The display name of the kernel. This is shown in the web UI and is generally a descriptive title for the kernel in question.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        A standard kernel version string representing the version, patch, and release information.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class LinksProperties(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.ActionLink']] = None,
                 droplets: Optional[Sequence['outputs.ActionLink']] = None):
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if droplets is not None:
            pulumi.set(__self__, "droplets", droplets)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.ActionLink']]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def droplets(self) -> Optional[Sequence['outputs.ActionLink']]:
        return pulumi.get(self, "droplets")


@pulumi.output_type
class ListReservedIPsActionsItems(dict):
    def __init__(__self__, *,
                 meta: 'outputs.MetaMeta',
                 actions: Optional[Sequence['outputs.Action']] = None,
                 links: Optional['outputs.PageLinks'] = None):
        pulumi.set(__self__, "meta", meta)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def meta(self) -> 'outputs.MetaMeta':
        return pulumi.get(self, "meta")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.Action']]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.PageLinks']:
        return pulumi.get(self, "links")


@pulumi.output_type
class ListReservedIPsItems(dict):
    def __init__(__self__, *,
                 meta: 'outputs.MetaMeta',
                 links: Optional['outputs.PageLinks'] = None,
                 reserved_ips: Optional[Sequence['outputs.ReservedIp']] = None):
        pulumi.set(__self__, "meta", meta)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if reserved_ips is not None:
            pulumi.set(__self__, "reserved_ips", reserved_ips)

    @property
    @pulumi.getter
    def meta(self) -> 'outputs.MetaMeta':
        return pulumi.get(self, "meta")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.PageLinks']:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter(name="reservedIps")
    def reserved_ips(self) -> Optional[Sequence['outputs.ReservedIp']]:
        return pulumi.get(self, "reserved_ips")


@pulumi.output_type
class MetaMeta(dict):
    def __init__(__self__, *,
                 total: Optional[int] = None):
        """
        :param int total: Number of objects returned by the request.
        """
        if total is not None:
            pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        """
        Number of objects returned by the request.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class NetworkV4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkV4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkV4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkV4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 netmask: Optional[str] = None,
                 type: Optional['NetworkV4Type'] = None):
        """
        :param str gateway: The gateway of the specified IPv4 network interface.
               
               For private interfaces, a gateway is not provided. This is denoted by
               returning `nil` as its value.
        :param str ip_address: The IP address of the IPv4 network interface.
        :param str netmask: The netmask of the IPv4 network interface.
        :param 'NetworkV4Type' type: The type of the IPv4 network interface.
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        The gateway of the specified IPv4 network interface.

        For private interfaces, a gateway is not provided. This is denoted by
        returning `nil` as its value.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        The IP address of the IPv4 network interface.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[str]:
        """
        The netmask of the IPv4 network interface.
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def type(self) -> Optional['NetworkV4Type']:
        """
        The type of the IPv4 network interface.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NetworkV6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkV6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkV6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkV6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 netmask: Optional[int] = None,
                 type: Optional['NetworkV6Type'] = None):
        """
        :param str gateway: The gateway of the specified IPv6 network interface.
        :param str ip_address: The IP address of the IPv6 network interface.
        :param int netmask: The netmask of the IPv6 network interface.
        :param 'NetworkV6Type' type: The type of the IPv6 network interface.
               
               **Note**: IPv6 private  networking is not currently supported.
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        The gateway of the specified IPv6 network interface.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        The IP address of the IPv6 network interface.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[int]:
        """
        The netmask of the IPv6 network interface.
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def type(self) -> Optional['NetworkV6Type']:
        """
        The type of the IPv6 network interface.

        **Note**: IPv6 private  networking is not currently supported.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class PageLinks(dict):
    def __init__(__self__, *,
                 pages: Optional['outputs.PageLinksPagesProperties'] = None):
        if pages is not None:
            pulumi.set(__self__, "pages", pages)

    @property
    @pulumi.getter
    def pages(self) -> Optional['outputs.PageLinksPagesProperties']:
        return pulumi.get(self, "pages")


@pulumi.output_type
class PageLinksPagesProperties(dict):
    def __init__(__self__, *,
                 first: Optional[str] = None,
                 last: Optional[str] = None,
                 next: Optional[str] = None,
                 prev: Optional[str] = None):
        if first is not None:
            pulumi.set(__self__, "first", first)
        if last is not None:
            pulumi.set(__self__, "last", last)
        if next is not None:
            pulumi.set(__self__, "next", next)
        if prev is not None:
            pulumi.set(__self__, "prev", prev)

    @property
    @pulumi.getter
    def first(self) -> Optional[str]:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter
    def last(self) -> Optional[str]:
        return pulumi.get(self, "last")

    @property
    @pulumi.getter
    def next(self) -> Optional[str]:
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def prev(self) -> Optional[str]:
        return pulumi.get(self, "prev")


@pulumi.output_type
class Region(dict):
    def __init__(__self__, *,
                 available: bool,
                 features: Sequence[str],
                 name: str,
                 sizes: Sequence[str],
                 slug: str):
        """
        :param bool available: This is a boolean value that represents whether new Droplets can be created in this region.
        :param Sequence[str] features: This attribute is set to an array which contains features available in this region
        :param str name: The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
        :param Sequence[str] sizes: This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
        :param str slug: A human-readable string that is used as a unique identifier for each region.
        """
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "features", features)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sizes", sizes)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def available(self) -> bool:
        """
        This is a boolean value that represents whether new Droplets can be created in this region.
        """
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def features(self) -> Sequence[str]:
        """
        This attribute is set to an array which contains features available in this region
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sizes(self) -> Sequence[str]:
        """
        This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
        """
        return pulumi.get(self, "sizes")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        A human-readable string that is used as a unique identifier for each region.
        """
        return pulumi.get(self, "slug")


@pulumi.output_type
class ReservedIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReservedIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReservedIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReservedIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 droplet: Optional['outputs.Droplet'] = None,
                 ip: Optional[str] = None,
                 locked: Optional[bool] = None,
                 project_id: Optional[str] = None,
                 region: Optional['outputs.ReservedIpRegion'] = None):
        """
        :param 'Droplet' droplet: The Droplet that the reserved IP has been assigned to. When you query a reserved IP, if it is assigned to a Droplet, the entire Droplet object will be returned. If it is not assigned, the value will be null.
        :param str ip: The public IP address of the reserved IP. It also serves as its identifier.
        :param bool locked: A boolean value indicating whether or not the reserved IP has pending actions preventing new ones from being submitted.
        :param str project_id: The UUID of the project to which the reserved IP currently belongs.
        """
        if droplet is not None:
            pulumi.set(__self__, "droplet", droplet)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def droplet(self) -> Optional['outputs.Droplet']:
        """
        The Droplet that the reserved IP has been assigned to. When you query a reserved IP, if it is assigned to a Droplet, the entire Droplet object will be returned. If it is not assigned, the value will be null.
        """
        return pulumi.get(self, "droplet")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        The public IP address of the reserved IP. It also serves as its identifier.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        """
        A boolean value indicating whether or not the reserved IP has pending actions preventing new ones from being submitted.
        """
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        The UUID of the project to which the reserved IP currently belongs.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> Optional['outputs.ReservedIpRegion']:
        return pulumi.get(self, "region")


@pulumi.output_type
class ReservedIpRegion(dict):
    def __init__(__self__, *,
                 available: bool,
                 features: Sequence[str],
                 name: str,
                 sizes: Sequence[str],
                 slug: str):
        """
        :param bool available: This is a boolean value that represents whether new Droplets can be created in this region.
        :param Sequence[str] features: This attribute is set to an array which contains features available in this region
        :param str name: The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
        :param Sequence[str] sizes: This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
        :param str slug: A human-readable string that is used as a unique identifier for each region.
        """
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "features", features)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sizes", sizes)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def available(self) -> bool:
        """
        This is a boolean value that represents whether new Droplets can be created in this region.
        """
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def features(self) -> Sequence[str]:
        """
        This attribute is set to an array which contains features available in this region
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sizes(self) -> Sequence[str]:
        """
        This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
        """
        return pulumi.get(self, "sizes")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        A human-readable string that is used as a unique identifier for each region.
        """
        return pulumi.get(self, "slug")


@pulumi.output_type
class Size(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "priceHourly":
            suggest = "price_hourly"
        elif key == "priceMonthly":
            suggest = "price_monthly"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Size. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Size.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Size.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 available: Optional[bool] = None,
                 description: str,
                 disk: int,
                 memory: int,
                 price_hourly: float,
                 price_monthly: float,
                 regions: Sequence[str],
                 slug: str,
                 transfer: float,
                 vcpus: int):
        """
        :param bool available: This is a boolean value that represents whether new Droplets can be created with this size.
        :param str description: A string describing the class of Droplets created from this size. For example: Basic, General Purpose, CPU-Optimized, Memory-Optimized, or Storage-Optimized.
        :param int disk: The amount of disk space set aside for Droplets of this size. The value is represented in gigabytes.
        :param int memory: The amount of RAM allocated to Droplets created of this size. The value is represented in megabytes.
        :param float price_hourly: This describes the price of the Droplet size as measured hourly. The value is measured in US dollars.
        :param float price_monthly: This attribute describes the monthly cost of this Droplet size if the Droplet is kept for an entire month. The value is measured in US dollars.
        :param Sequence[str] regions: An array containing the region slugs where this size is available for Droplet creates.
        :param str slug: A human-readable string that is used to uniquely identify each size.
        :param float transfer: The amount of transfer bandwidth that is available for Droplets created in this size. This only counts traffic on the public interface. The value is given in terabytes.
        :param int vcpus: The integer of number CPUs allocated to Droplets of this size.
        """
        if available is None:
            available = True
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "disk", disk)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "price_hourly", price_hourly)
        pulumi.set(__self__, "price_monthly", price_monthly)
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "transfer", transfer)
        pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter
    def available(self) -> bool:
        """
        This is a boolean value that represents whether new Droplets can be created with this size.
        """
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A string describing the class of Droplets created from this size. For example: Basic, General Purpose, CPU-Optimized, Memory-Optimized, or Storage-Optimized.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def disk(self) -> int:
        """
        The amount of disk space set aside for Droplets of this size. The value is represented in gigabytes.
        """
        return pulumi.get(self, "disk")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        The amount of RAM allocated to Droplets created of this size. The value is represented in megabytes.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="priceHourly")
    def price_hourly(self) -> float:
        """
        This describes the price of the Droplet size as measured hourly. The value is measured in US dollars.
        """
        return pulumi.get(self, "price_hourly")

    @property
    @pulumi.getter(name="priceMonthly")
    def price_monthly(self) -> float:
        """
        This attribute describes the monthly cost of this Droplet size if the Droplet is kept for an entire month. The value is measured in US dollars.
        """
        return pulumi.get(self, "price_monthly")

    @property
    @pulumi.getter
    def regions(self) -> Sequence[str]:
        """
        An array containing the region slugs where this size is available for Droplet creates.
        """
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        A human-readable string that is used to uniquely identify each size.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def transfer(self) -> float:
        """
        The amount of transfer bandwidth that is available for Droplets created in this size. This only counts traffic on the public interface. The value is given in terabytes.
        """
        return pulumi.get(self, "transfer")

    @property
    @pulumi.getter
    def vcpus(self) -> int:
        """
        The integer of number CPUs allocated to Droplets of this size.
        """
        return pulumi.get(self, "vcpus")


