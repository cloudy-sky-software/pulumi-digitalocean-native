# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = ['AppsListMetricsBandwidthDailyArgs', 'AppsListMetricsBandwidthDaily']

@pulumi.input_type
class AppsListMetricsBandwidthDailyArgs:
    def __init__(__self__, *,
                 app_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 date: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AppsListMetricsBandwidthDaily resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] app_ids: A list of app IDs to query bandwidth metrics for.
        :param pulumi.Input[str] date: Optional day to query. Only the date component of the timestamp will be considered. Default: yesterday.
        """
        pulumi.set(__self__, "app_ids", app_ids)
        if date is not None:
            pulumi.set(__self__, "date", date)

    @property
    @pulumi.getter(name="appIds")
    def app_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of app IDs to query bandwidth metrics for.
        """
        return pulumi.get(self, "app_ids")

    @app_ids.setter
    def app_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "app_ids", value)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[str]]:
        """
        Optional day to query. Only the date component of the timestamp will be considered. Default: yesterday.
        """
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date", value)


class AppsListMetricsBandwidthDaily(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 date: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a AppsListMetricsBandwidthDaily resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] app_ids: A list of app IDs to query bandwidth metrics for.
        :param pulumi.Input[str] date: Optional day to query. Only the date component of the timestamp will be considered. Default: yesterday.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppsListMetricsBandwidthDailyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppsListMetricsBandwidthDaily resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppsListMetricsBandwidthDailyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppsListMetricsBandwidthDailyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 date: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppsListMetricsBandwidthDailyArgs.__new__(AppsListMetricsBandwidthDailyArgs)

            if app_ids is None and not opts.urn:
                raise TypeError("Missing required property 'app_ids'")
            __props__.__dict__["app_ids"] = app_ids
            __props__.__dict__["date"] = date
            __props__.__dict__["app_bandwidth_usage"] = None
        super(AppsListMetricsBandwidthDaily, __self__).__init__(
            'digitalocean-native:apps/v2:AppsListMetricsBandwidthDaily',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AppsListMetricsBandwidthDaily':
        """
        Get an existing AppsListMetricsBandwidthDaily resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AppsListMetricsBandwidthDailyArgs.__new__(AppsListMetricsBandwidthDailyArgs)

        __props__.__dict__["app_bandwidth_usage"] = None
        __props__.__dict__["app_ids"] = None
        __props__.__dict__["date"] = None
        return AppsListMetricsBandwidthDaily(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appBandwidthUsage")
    def app_bandwidth_usage(self) -> pulumi.Output[Optional[Sequence['outputs.AppMetricsBandwidthUsageDetails']]]:
        """
        A list of bandwidth usage details by app.
        """
        return pulumi.get(self, "app_bandwidth_usage")

    @property
    @pulumi.getter(name="appIds")
    def app_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of app IDs to query bandwidth metrics for.
        """
        return pulumi.get(self, "app_ids")

    @property
    @pulumi.getter
    def date(self) -> pulumi.Output[Optional[str]]:
        """
        The date for the metrics data.
        """
        return pulumi.get(self, "date")

