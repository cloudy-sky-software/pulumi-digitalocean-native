# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = ['CertificateArgs', 'Certificate']

@pulumi.input_type
class CertificateArgs:
    def __init__(__self__, *,
                 dns_names: pulumi.Input[Sequence[pulumi.Input[str]]],
                 leaf_certificate: pulumi.Input[str],
                 name: pulumi.Input[str],
                 private_key: pulumi.Input[str],
                 certificate_chain: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input['CertificateCreateBaseType']] = None):
        """
        The set of arguments for constructing a Certificate resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names: An array of fully qualified domain names (FQDNs) for which the certificate was issued. A certificate covering all subdomains can be issued using a wildcard (e.g. `*.example.com`).
        :param pulumi.Input[str] leaf_certificate: The contents of a PEM-formatted public SSL certificate.
        :param pulumi.Input[str] name: A unique human-readable name referring to a certificate.
        :param pulumi.Input[str] private_key: The contents of a PEM-formatted private-key corresponding to the SSL certificate.
        :param pulumi.Input[str] certificate_chain: The full PEM-formatted trust chain between the certificate authority's certificate and your domain's SSL certificate.
        :param pulumi.Input['CertificateCreateBaseType'] type: A string representing the type of the certificate. The value will be `custom` for a user-uploaded certificate or `lets_encrypt` for one automatically generated with Let's Encrypt.
        """
        pulumi.set(__self__, "dns_names", dns_names)
        pulumi.set(__self__, "leaf_certificate", leaf_certificate)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_key", private_key)
        if certificate_chain is not None:
            pulumi.set(__self__, "certificate_chain", certificate_chain)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        An array of fully qualified domain names (FQDNs) for which the certificate was issued. A certificate covering all subdomains can be issued using a wildcard (e.g. `*.example.com`).
        """
        return pulumi.get(self, "dns_names")

    @dns_names.setter
    def dns_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "dns_names", value)

    @property
    @pulumi.getter(name="leafCertificate")
    def leaf_certificate(self) -> pulumi.Input[str]:
        """
        The contents of a PEM-formatted public SSL certificate.
        """
        return pulumi.get(self, "leaf_certificate")

    @leaf_certificate.setter
    def leaf_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "leaf_certificate", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        A unique human-readable name referring to a certificate.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        """
        The contents of a PEM-formatted private-key corresponding to the SSL certificate.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="certificateChain")
    def certificate_chain(self) -> Optional[pulumi.Input[str]]:
        """
        The full PEM-formatted trust chain between the certificate authority's certificate and your domain's SSL certificate.
        """
        return pulumi.get(self, "certificate_chain")

    @certificate_chain.setter
    def certificate_chain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_chain", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['CertificateCreateBaseType']]:
        """
        A string representing the type of the certificate. The value will be `custom` for a user-uploaded certificate or `lets_encrypt` for one automatically generated with Let's Encrypt.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['CertificateCreateBaseType']]):
        pulumi.set(self, "type", value)


class Certificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_chain: Optional[pulumi.Input[str]] = None,
                 dns_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 leaf_certificate: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input['CertificateCreateBaseType']] = None,
                 __props__=None):
        """
        Create a Certificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_chain: The full PEM-formatted trust chain between the certificate authority's certificate and your domain's SSL certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names: An array of fully qualified domain names (FQDNs) for which the certificate was issued. A certificate covering all subdomains can be issued using a wildcard (e.g. `*.example.com`).
        :param pulumi.Input[str] leaf_certificate: The contents of a PEM-formatted public SSL certificate.
        :param pulumi.Input[str] name: A unique human-readable name referring to a certificate.
        :param pulumi.Input[str] private_key: The contents of a PEM-formatted private-key corresponding to the SSL certificate.
        :param pulumi.Input['CertificateCreateBaseType'] type: A string representing the type of the certificate. The value will be `custom` for a user-uploaded certificate or `lets_encrypt` for one automatically generated with Let's Encrypt.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Certificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_chain: Optional[pulumi.Input[str]] = None,
                 dns_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 leaf_certificate: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input['CertificateCreateBaseType']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CertificateArgs.__new__(CertificateArgs)

            __props__.__dict__["certificate_chain"] = certificate_chain
            if dns_names is None and not opts.urn:
                raise TypeError("Missing required property 'dns_names'")
            __props__.__dict__["dns_names"] = dns_names
            if leaf_certificate is None and not opts.urn:
                raise TypeError("Missing required property 'leaf_certificate'")
            __props__.__dict__["leaf_certificate"] = leaf_certificate
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if private_key is None and not opts.urn:
                raise TypeError("Missing required property 'private_key'")
            __props__.__dict__["private_key"] = private_key
            __props__.__dict__["type"] = type
            __props__.__dict__["certificate"] = None
        super(Certificate, __self__).__init__(
            'digitalocean-native:certificates/v2:Certificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Certificate':
        """
        Get an existing Certificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CertificateArgs.__new__(CertificateArgs)

        __props__.__dict__["certificate"] = None
        __props__.__dict__["certificate_chain"] = None
        __props__.__dict__["dns_names"] = None
        __props__.__dict__["leaf_certificate"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["private_key"] = None
        __props__.__dict__["type"] = None
        return Certificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[Optional['outputs.Certificate']]:
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="certificateChain")
    def certificate_chain(self) -> pulumi.Output[Optional[str]]:
        """
        The full PEM-formatted trust chain between the certificate authority's certificate and your domain's SSL certificate.
        """
        return pulumi.get(self, "certificate_chain")

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        An array of fully qualified domain names (FQDNs) for which the certificate was issued. A certificate covering all subdomains can be issued using a wildcard (e.g. `*.example.com`).
        """
        return pulumi.get(self, "dns_names")

    @property
    @pulumi.getter(name="leafCertificate")
    def leaf_certificate(self) -> pulumi.Output[Optional[str]]:
        """
        The contents of a PEM-formatted public SSL certificate.
        """
        return pulumi.get(self, "leaf_certificate")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        """
        A unique human-readable name referring to a certificate.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[Optional[str]]:
        """
        The contents of a PEM-formatted private-key corresponding to the SSL certificate.
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional['CertificateCreateBaseType']]:
        """
        A string representing the type of the certificate. The value will be `custom` for a user-uploaded certificate or `lets_encrypt` for one automatically generated with Let's Encrypt.
        """
        return pulumi.get(self, "type")

