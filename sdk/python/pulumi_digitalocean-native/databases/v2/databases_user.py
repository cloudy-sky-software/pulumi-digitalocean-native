# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['DatabasesUserArgs', 'DatabasesUser']

@pulumi.input_type
class DatabasesUserArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 database_cluster_uuid: Optional[pulumi.Input[str]] = None,
                 mysql_settings: Optional[pulumi.Input['MysqlSettingsArgs']] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 readonly: Optional[pulumi.Input[bool]] = None,
                 role: Optional[pulumi.Input['DatabaseUserRole']] = None):
        """
        The set of arguments for constructing a DatabasesUser resource.
        :param pulumi.Input[str] name: The name of a database user.
        :param pulumi.Input[str] database_cluster_uuid: A unique identifier for a database cluster.
        :param pulumi.Input[str] password: A randomly generated password for the database user.
        :param pulumi.Input[bool] readonly: For MongoDB clusters, set to `true` to create a read-only user.
               This option is not currently supported for other database engines.
        :param pulumi.Input['DatabaseUserRole'] role: A string representing the database user's role. The value will be either
               "primary" or "normal".
        """
        pulumi.set(__self__, "name", name)
        if database_cluster_uuid is not None:
            pulumi.set(__self__, "database_cluster_uuid", database_cluster_uuid)
        if mysql_settings is not None:
            pulumi.set(__self__, "mysql_settings", mysql_settings)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of a database user.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="databaseClusterUuid")
    def database_cluster_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for a database cluster.
        """
        return pulumi.get(self, "database_cluster_uuid")

    @database_cluster_uuid.setter
    def database_cluster_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_cluster_uuid", value)

    @property
    @pulumi.getter(name="mysqlSettings")
    def mysql_settings(self) -> Optional[pulumi.Input['MysqlSettingsArgs']]:
        return pulumi.get(self, "mysql_settings")

    @mysql_settings.setter
    def mysql_settings(self, value: Optional[pulumi.Input['MysqlSettingsArgs']]):
        pulumi.set(self, "mysql_settings", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        A randomly generated password for the database user.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def readonly(self) -> Optional[pulumi.Input[bool]]:
        """
        For MongoDB clusters, set to `true` to create a read-only user.
        This option is not currently supported for other database engines.
        """
        return pulumi.get(self, "readonly")

    @readonly.setter
    def readonly(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "readonly", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input['DatabaseUserRole']]:
        """
        A string representing the database user's role. The value will be either
        "primary" or "normal".
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input['DatabaseUserRole']]):
        pulumi.set(self, "role", value)


class DatabasesUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database_cluster_uuid: Optional[pulumi.Input[str]] = None,
                 mysql_settings: Optional[pulumi.Input[pulumi.InputType['MysqlSettingsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 readonly: Optional[pulumi.Input[bool]] = None,
                 role: Optional[pulumi.Input['DatabaseUserRole']] = None,
                 __props__=None):
        """
        Create a DatabasesUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] database_cluster_uuid: A unique identifier for a database cluster.
        :param pulumi.Input[str] name: The name of a database user.
        :param pulumi.Input[str] password: A randomly generated password for the database user.
        :param pulumi.Input[bool] readonly: For MongoDB clusters, set to `true` to create a read-only user.
               This option is not currently supported for other database engines.
        :param pulumi.Input['DatabaseUserRole'] role: A string representing the database user's role. The value will be either
               "primary" or "normal".
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatabasesUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DatabasesUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DatabasesUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatabasesUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database_cluster_uuid: Optional[pulumi.Input[str]] = None,
                 mysql_settings: Optional[pulumi.Input[pulumi.InputType['MysqlSettingsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 readonly: Optional[pulumi.Input[bool]] = None,
                 role: Optional[pulumi.Input['DatabaseUserRole']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatabasesUserArgs.__new__(DatabasesUserArgs)

            __props__.__dict__["database_cluster_uuid"] = database_cluster_uuid
            __props__.__dict__["mysql_settings"] = mysql_settings
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["password"] = password
            __props__.__dict__["readonly"] = readonly
            __props__.__dict__["role"] = role
            __props__.__dict__["user"] = None
        super(DatabasesUser, __self__).__init__(
            'digitalocean-native:databases/v2:DatabasesUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DatabasesUser':
        """
        Get an existing DatabasesUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DatabasesUserArgs.__new__(DatabasesUserArgs)

        __props__.__dict__["mysql_settings"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["password"] = None
        __props__.__dict__["readonly"] = None
        __props__.__dict__["role"] = None
        __props__.__dict__["user"] = None
        return DatabasesUser(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="mysqlSettings")
    def mysql_settings(self) -> pulumi.Output[Optional['outputs.MysqlSettings']]:
        return pulumi.get(self, "mysql_settings")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of a database user.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        A randomly generated password for the database user.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def readonly(self) -> pulumi.Output[Optional[bool]]:
        """
        For MongoDB clusters, set to `true` to create a read-only user.
        This option is not currently supported for other database engines.
        """
        return pulumi.get(self, "readonly")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[Optional['DatabaseUserRole']]:
        """
        A string representing the database user's role. The value will be either
        "primary" or "normal".
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output['outputs.DatabaseUser']:
        return pulumi.get(self, "user")

