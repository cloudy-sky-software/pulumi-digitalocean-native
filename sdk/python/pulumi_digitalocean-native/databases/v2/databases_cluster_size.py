# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = ['DatabasesClusterSizeArgs', 'DatabasesClusterSize']

@pulumi.input_type
class DatabasesClusterSizeArgs:
    def __init__(__self__, *,
                 num_nodes: pulumi.Input[int],
                 size: pulumi.Input[str],
                 database_cluster_uuid: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DatabasesClusterSize resource.
        :param pulumi.Input[int] num_nodes: The number of nodes in the database cluster. Valid values are are 1-3. In addition to the primary node, up to two standby nodes may be added for highly available configurations.
        :param pulumi.Input[str] size: A slug identifier representing desired the size of the nodes in the database cluster.
        :param pulumi.Input[str] database_cluster_uuid: A unique identifier for a database cluster.
        """
        pulumi.set(__self__, "num_nodes", num_nodes)
        pulumi.set(__self__, "size", size)
        if database_cluster_uuid is not None:
            pulumi.set(__self__, "database_cluster_uuid", database_cluster_uuid)

    @property
    @pulumi.getter(name="numNodes")
    def num_nodes(self) -> pulumi.Input[int]:
        """
        The number of nodes in the database cluster. Valid values are are 1-3. In addition to the primary node, up to two standby nodes may be added for highly available configurations.
        """
        return pulumi.get(self, "num_nodes")

    @num_nodes.setter
    def num_nodes(self, value: pulumi.Input[int]):
        pulumi.set(self, "num_nodes", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[str]:
        """
        A slug identifier representing desired the size of the nodes in the database cluster.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[str]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="databaseClusterUuid")
    def database_cluster_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for a database cluster.
        """
        return pulumi.get(self, "database_cluster_uuid")

    @database_cluster_uuid.setter
    def database_cluster_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_cluster_uuid", value)


class DatabasesClusterSize(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database_cluster_uuid: Optional[pulumi.Input[str]] = None,
                 num_nodes: Optional[pulumi.Input[int]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a DatabasesClusterSize resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] database_cluster_uuid: A unique identifier for a database cluster.
        :param pulumi.Input[int] num_nodes: The number of nodes in the database cluster. Valid values are are 1-3. In addition to the primary node, up to two standby nodes may be added for highly available configurations.
        :param pulumi.Input[str] size: A slug identifier representing desired the size of the nodes in the database cluster.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatabasesClusterSizeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DatabasesClusterSize resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DatabasesClusterSizeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatabasesClusterSizeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database_cluster_uuid: Optional[pulumi.Input[str]] = None,
                 num_nodes: Optional[pulumi.Input[int]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatabasesClusterSizeArgs.__new__(DatabasesClusterSizeArgs)

            __props__.__dict__["database_cluster_uuid"] = database_cluster_uuid
            if num_nodes is None and not opts.urn:
                raise TypeError("Missing required property 'num_nodes'")
            __props__.__dict__["num_nodes"] = num_nodes
            if size is None and not opts.urn:
                raise TypeError("Missing required property 'size'")
            __props__.__dict__["size"] = size
        super(DatabasesClusterSize, __self__).__init__(
            'digitalocean-native:databases/v2:DatabasesClusterSize',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DatabasesClusterSize':
        """
        Get an existing DatabasesClusterSize resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DatabasesClusterSizeArgs.__new__(DatabasesClusterSizeArgs)

        __props__.__dict__["num_nodes"] = None
        __props__.__dict__["size"] = None
        return DatabasesClusterSize(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="numNodes")
    def num_nodes(self) -> pulumi.Output[int]:
        """
        The number of nodes in the database cluster. Valid values are are 1-3. In addition to the primary node, up to two standby nodes may be added for highly available configurations.
        """
        return pulumi.get(self, "num_nodes")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[str]:
        """
        A slug identifier representing desired the size of the nodes in the database cluster.
        """
        return pulumi.get(self, "size")

