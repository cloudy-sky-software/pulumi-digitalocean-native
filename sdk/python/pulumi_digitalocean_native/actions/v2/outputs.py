# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'Action',
    'ActionRegionSlug',
    'MetaMeta',
    'PageLinks',
    'PageLinksPagesProperties',
    'Region',
]

@pulumi.output_type
class Action(dict):
    def __init__(__self__, *,
                 completed_at: Optional[_builtins.str] = None,
                 id: Optional[_builtins.int] = None,
                 region: Optional['outputs.Region'] = None,
                 region_slug: Optional['outputs.ActionRegionSlug'] = None,
                 resource_id: Optional[_builtins.int] = None,
                 resource_type: Optional[_builtins.str] = None,
                 started_at: Optional[_builtins.str] = None,
                 status: Optional['ActionStatus'] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str completed_at: A time value given in ISO8601 combined date and time format that represents when the action was completed.
        :param _builtins.int id: A unique numeric ID that can be used to identify and reference an action.
        :param _builtins.int resource_id: A unique identifier for the resource that the action is associated with.
        :param _builtins.str resource_type: The type of resource that the action is associated with.
        :param _builtins.str started_at: A time value given in ISO8601 combined date and time format that represents when the action was initiated.
        :param 'ActionStatus' status: The current status of the action. This can be "in-progress", "completed", or "errored".
        :param _builtins.str type: This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
        """
        if completed_at is not None:
            pulumi.set(__self__, "completed_at", completed_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if region_slug is not None:
            pulumi.set(__self__, "region_slug", region_slug)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)
        if status is None:
            status = 'in-progress'
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="completedAt")
    def completed_at(self) -> Optional[_builtins.str]:
        """
        A time value given in ISO8601 combined date and time format that represents when the action was completed.
        """
        return pulumi.get(self, "completed_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.int]:
        """
        A unique numeric ID that can be used to identify and reference an action.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional['outputs.Region']:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="regionSlug")
    def region_slug(self) -> Optional['outputs.ActionRegionSlug']:
        return pulumi.get(self, "region_slug")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.int]:
        """
        A unique identifier for the resource that the action is associated with.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        """
        The type of resource that the action is associated with.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[_builtins.str]:
        """
        A time value given in ISO8601 combined date and time format that represents when the action was initiated.
        """
        return pulumi.get(self, "started_at")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional['ActionStatus']:
        """
        The current status of the action. This can be "in-progress", "completed", or "errored".
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ActionRegionSlug(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class MetaMeta(dict):
    def __init__(__self__, *,
                 total: Optional[_builtins.int] = None):
        """
        :param _builtins.int total: Number of objects returned by the request.
        """
        if total is not None:
            pulumi.set(__self__, "total", total)

    @_builtins.property
    @pulumi.getter
    def total(self) -> Optional[_builtins.int]:
        """
        Number of objects returned by the request.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class PageLinks(dict):
    def __init__(__self__, *,
                 pages: Optional['outputs.PageLinksPagesProperties'] = None):
        if pages is not None:
            pulumi.set(__self__, "pages", pages)

    @_builtins.property
    @pulumi.getter
    def pages(self) -> Optional['outputs.PageLinksPagesProperties']:
        return pulumi.get(self, "pages")


@pulumi.output_type
class PageLinksPagesProperties(dict):
    def __init__(__self__, *,
                 first: Optional[_builtins.str] = None,
                 last: Optional[_builtins.str] = None,
                 next: Optional[_builtins.str] = None,
                 prev: Optional[_builtins.str] = None):
        if first is not None:
            pulumi.set(__self__, "first", first)
        if last is not None:
            pulumi.set(__self__, "last", last)
        if next is not None:
            pulumi.set(__self__, "next", next)
        if prev is not None:
            pulumi.set(__self__, "prev", prev)

    @_builtins.property
    @pulumi.getter
    def first(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "first")

    @_builtins.property
    @pulumi.getter
    def last(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last")

    @_builtins.property
    @pulumi.getter
    def next(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "next")

    @_builtins.property
    @pulumi.getter
    def prev(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "prev")


@pulumi.output_type
class Region(dict):
    def __init__(__self__, *,
                 available: _builtins.bool,
                 features: Sequence[_builtins.str],
                 name: _builtins.str,
                 sizes: Sequence[_builtins.str],
                 slug: _builtins.str):
        """
        :param _builtins.bool available: This is a boolean value that represents whether new Droplets can be created in this region.
        :param Sequence[_builtins.str] features: This attribute is set to an array which contains features available in this region
        :param _builtins.str name: The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
        :param Sequence[_builtins.str] sizes: This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
        :param _builtins.str slug: A human-readable string that is used as a unique identifier for each region.
        """
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "features", features)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sizes", sizes)
        pulumi.set(__self__, "slug", slug)

    @_builtins.property
    @pulumi.getter
    def available(self) -> _builtins.bool:
        """
        This is a boolean value that represents whether new Droplets can be created in this region.
        """
        return pulumi.get(self, "available")

    @_builtins.property
    @pulumi.getter
    def features(self) -> Sequence[_builtins.str]:
        """
        This attribute is set to an array which contains features available in this region
        """
        return pulumi.get(self, "features")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def sizes(self) -> Sequence[_builtins.str]:
        """
        This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
        """
        return pulumi.get(self, "sizes")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> _builtins.str:
        """
        A human-readable string that is used as a unique identifier for each region.
        """
        return pulumi.get(self, "slug")


