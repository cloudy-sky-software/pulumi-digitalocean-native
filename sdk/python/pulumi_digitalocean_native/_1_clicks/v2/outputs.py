# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'ListOneClicksProperties',
    'OneClicks',
]

@pulumi.output_type
class ListOneClicksProperties(dict):
    def __init__(__self__, *,
                 _1_clicks: Optional[Sequence['outputs.OneClicks']] = None):
        if _1_clicks is not None:
            pulumi.set(__self__, "_1_clicks", _1_clicks)

    @property
    @pulumi.getter(name="_1Clicks")
    def _1_clicks(self) -> Optional[Sequence['outputs.OneClicks']]:
        return pulumi.get(self, "_1_clicks")


@pulumi.output_type
class OneClicks(dict):
    def __init__(__self__, *,
                 slug: str,
                 type: str):
        """
        :param str slug: The slug identifier for the 1-Click application.
        :param str type: The type of the 1-Click application.
        """
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The slug identifier for the 1-Click application.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the 1-Click application.
        """
        return pulumi.get(self, "type")


