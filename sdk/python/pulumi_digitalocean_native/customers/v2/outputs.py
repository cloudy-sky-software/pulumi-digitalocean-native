# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'BillingHistory',
    'InvoicePreview',
    'MetaMeta',
    'MetaProperties',
    'PageLinks',
    'PageLinksPagesProperties',
]

@pulumi.output_type
class BillingHistory(dict):
    def __init__(__self__, *,
                 amount: Optional[str] = None,
                 date: Optional[str] = None,
                 description: Optional[str] = None,
                 invoice_id: Optional[str] = None,
                 invoice_uuid: Optional[str] = None,
                 type: Optional['BillingHistoryType'] = None):
        """
        :param str amount: Amount of the billing history entry.
        :param str date: Time the billing history entry occurred.
        :param str description: Description of the billing history entry.
        :param str invoice_id: ID of the invoice associated with the billing history entry, if  applicable.
        :param str invoice_uuid: UUID of the invoice associated with the billing history entry, if  applicable.
        :param 'BillingHistoryType' type: Type of billing history entry.
        """
        if amount is not None:
            pulumi.set(__self__, "amount", amount)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if invoice_id is not None:
            pulumi.set(__self__, "invoice_id", invoice_id)
        if invoice_uuid is not None:
            pulumi.set(__self__, "invoice_uuid", invoice_uuid)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def amount(self) -> Optional[str]:
        """
        Amount of the billing history entry.
        """
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        """
        Time the billing history entry occurred.
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the billing history entry.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="invoiceId")
    def invoice_id(self) -> Optional[str]:
        """
        ID of the invoice associated with the billing history entry, if  applicable.
        """
        return pulumi.get(self, "invoice_id")

    @property
    @pulumi.getter(name="invoiceUuid")
    def invoice_uuid(self) -> Optional[str]:
        """
        UUID of the invoice associated with the billing history entry, if  applicable.
        """
        return pulumi.get(self, "invoice_uuid")

    @property
    @pulumi.getter
    def type(self) -> Optional['BillingHistoryType']:
        """
        Type of billing history entry.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class InvoicePreview(dict):
    """
    The invoice preview.
    """
    def __init__(__self__, *,
                 amount: Optional[str] = None,
                 invoice_period: Optional[str] = None,
                 invoice_uuid: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        The invoice preview.
        :param str amount: Total amount of the invoice, in USD.  This will reflect month-to-date usage in the invoice preview.
        :param str invoice_period: Billing period of usage for which the invoice is issued, in `YYYY-MM`  format.
        :param str invoice_uuid: The UUID of the invoice. The canonical reference for the invoice.
        :param str updated_at: Time the invoice was last updated.  This is only included with the invoice preview.
        """
        if amount is not None:
            pulumi.set(__self__, "amount", amount)
        if invoice_period is not None:
            pulumi.set(__self__, "invoice_period", invoice_period)
        if invoice_uuid is not None:
            pulumi.set(__self__, "invoice_uuid", invoice_uuid)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def amount(self) -> Optional[str]:
        """
        Total amount of the invoice, in USD.  This will reflect month-to-date usage in the invoice preview.
        """
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter(name="invoicePeriod")
    def invoice_period(self) -> Optional[str]:
        """
        Billing period of usage for which the invoice is issued, in `YYYY-MM`  format.
        """
        return pulumi.get(self, "invoice_period")

    @property
    @pulumi.getter(name="invoiceUuid")
    def invoice_uuid(self) -> Optional[str]:
        """
        The UUID of the invoice. The canonical reference for the invoice.
        """
        return pulumi.get(self, "invoice_uuid")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        Time the invoice was last updated.  This is only included with the invoice preview.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class MetaMeta(dict):
    def __init__(__self__, *,
                 total: Optional[int] = None):
        """
        :param int total: Number of objects returned by the request.
        """
        if total is not None:
            pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        """
        Number of objects returned by the request.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class MetaProperties(dict):
    """
    Information about the response itself.
    """
    def __init__(__self__, *,
                 total: Optional[int] = None):
        """
        Information about the response itself.
        :param int total: Number of objects returned by the request.
        """
        if total is not None:
            pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        """
        Number of objects returned by the request.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class PageLinks(dict):
    def __init__(__self__, *,
                 pages: Optional['outputs.PageLinksPagesProperties'] = None):
        if pages is not None:
            pulumi.set(__self__, "pages", pages)

    @property
    @pulumi.getter
    def pages(self) -> Optional['outputs.PageLinksPagesProperties']:
        return pulumi.get(self, "pages")


@pulumi.output_type
class PageLinksPagesProperties(dict):
    def __init__(__self__, *,
                 first: Optional[str] = None,
                 last: Optional[str] = None,
                 next: Optional[str] = None,
                 prev: Optional[str] = None):
        if first is not None:
            pulumi.set(__self__, "first", first)
        if last is not None:
            pulumi.set(__self__, "last", last)
        if next is not None:
            pulumi.set(__self__, "next", next)
        if prev is not None:
            pulumi.set(__self__, "prev", prev)

    @property
    @pulumi.getter
    def first(self) -> Optional[str]:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter
    def last(self) -> Optional[str]:
        return pulumi.get(self, "last")

    @property
    @pulumi.getter
    def next(self) -> Optional[str]:
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def prev(self) -> Optional[str]:
        return pulumi.get(self, "prev")


