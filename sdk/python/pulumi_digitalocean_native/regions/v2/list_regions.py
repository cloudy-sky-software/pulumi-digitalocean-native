# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'ListRegionsItems',
    'AwaitableListRegionsItems',
    'list_regions',
    'list_regions_output',
]

@pulumi.output_type
class ListRegionsItems:
    def __init__(__self__, links=None, meta=None, regions=None):
        if links and not isinstance(links, dict):
            raise TypeError("Expected argument 'links' to be a dict")
        pulumi.set(__self__, "links", links)
        if meta and not isinstance(meta, dict):
            raise TypeError("Expected argument 'meta' to be a dict")
        pulumi.set(__self__, "meta", meta)
        if regions and not isinstance(regions, list):
            raise TypeError("Expected argument 'regions' to be a list")
        pulumi.set(__self__, "regions", regions)

    @_builtins.property
    @pulumi.getter
    def links(self) -> Optional['outputs.PageLinks']:
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter
    def meta(self) -> 'outputs.MetaMeta':
        return pulumi.get(self, "meta")

    @_builtins.property
    @pulumi.getter
    def regions(self) -> Sequence['outputs.Region']:
        return pulumi.get(self, "regions")


class AwaitableListRegionsItems(ListRegionsItems):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListRegionsItems(
            links=self.links,
            meta=self.meta,
            regions=self.regions)


def list_regions(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListRegionsItems:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:regions/v2:listRegions', __args__, opts=opts, typ=ListRegionsItems).value

    return AwaitableListRegionsItems(
        links=pulumi.get(__ret__, 'links'),
        meta=pulumi.get(__ret__, 'meta'),
        regions=pulumi.get(__ret__, 'regions'))
def list_regions_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[ListRegionsItems]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('digitalocean-native:regions/v2:listRegions', __args__, opts=opts, typ=ListRegionsItems)
    return __ret__.apply(lambda __response__: ListRegionsItems(
        links=pulumi.get(__response__, 'links'),
        meta=pulumi.get(__response__, 'meta'),
        regions=pulumi.get(__response__, 'regions')))
