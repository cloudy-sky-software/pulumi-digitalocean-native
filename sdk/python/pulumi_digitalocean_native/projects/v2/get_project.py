# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetProjectProperties',
    'AwaitableGetProjectProperties',
    'get_project',
    'get_project_output',
]

@pulumi.output_type
class GetProjectProperties:
    def __init__(__self__, project=None):
        if project and not isinstance(project, dict):
            raise TypeError("Expected argument 'project' to be a dict")
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def project(self) -> Optional['outputs.Project']:
        return pulumi.get(self, "project")


class AwaitableGetProjectProperties(GetProjectProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectProperties(
            project=self.project)


def get_project(project_id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProjectProperties:
    """
    Use this data source to access information about an existing resource.

    :param str project_id: A unique identifier for a project.
    """
    __args__ = dict()
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:projects/v2:getProject', __args__, opts=opts, typ=GetProjectProperties).value

    return AwaitableGetProjectProperties(
        project=pulumi.get(__ret__, 'project'))


@_utilities.lift_output_func(get_project)
def get_project_output(project_id: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProjectProperties]:
    """
    Use this data source to access information about an existing resource.

    :param str project_id: A unique identifier for a project.
    """
    ...
