# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
from ... import _utilities
from . import outputs

__all__ = [
    'ListRegistryRepositoriesV2Items',
    'AwaitableListRegistryRepositoriesV2Items',
    'list_registry_repositories_v2',
    'list_registry_repositories_v2_output',
]

@pulumi.output_type
class ListRegistryRepositoriesV2Items:
    def __init__(__self__, links=None, meta=None, repositories=None):
        if links and not isinstance(links, dict):
            raise TypeError("Expected argument 'links' to be a dict")
        pulumi.set(__self__, "links", links)
        if meta and not isinstance(meta, dict):
            raise TypeError("Expected argument 'meta' to be a dict")
        pulumi.set(__self__, "meta", meta)
        if repositories and not isinstance(repositories, list):
            raise TypeError("Expected argument 'repositories' to be a list")
        pulumi.set(__self__, "repositories", repositories)

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.PageLinks']:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def meta(self) -> 'outputs.MetaMeta':
        return pulumi.get(self, "meta")

    @property
    @pulumi.getter
    def repositories(self) -> Optional[Sequence['outputs.RepositoryV2']]:
        return pulumi.get(self, "repositories")


class AwaitableListRegistryRepositoriesV2Items(ListRegistryRepositoriesV2Items):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListRegistryRepositoriesV2Items(
            links=self.links,
            meta=self.meta,
            repositories=self.repositories)


def list_registry_repositories_v2(registry_name: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListRegistryRepositoriesV2Items:
    """
    Use this data source to access information about an existing resource.

    :param str registry_name: The name of a container registry.
    """
    __args__ = dict()
    __args__['registryName'] = registry_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:registry/v2:listRegistryRepositoriesV2', __args__, opts=opts, typ=ListRegistryRepositoriesV2Items).value

    return AwaitableListRegistryRepositoriesV2Items(
        links=pulumi.get(__ret__, 'links'),
        meta=pulumi.get(__ret__, 'meta'),
        repositories=pulumi.get(__ret__, 'repositories'))


@_utilities.lift_output_func(list_registry_repositories_v2)
def list_registry_repositories_v2_output(registry_name: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ListRegistryRepositoriesV2Items]:
    """
    Use this data source to access information about an existing resource.

    :param str registry_name: The name of a container registry.
    """
    ...
