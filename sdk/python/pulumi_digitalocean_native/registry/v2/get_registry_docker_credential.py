# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
from ... import _utilities
from . import outputs

__all__ = [
    'DockerCredentials',
    'AwaitableDockerCredentials',
    'get_registry_docker_credential',
    'get_registry_docker_credential_output',
]

@pulumi.output_type
class DockerCredentials:
    def __init__(__self__, auths=None):
        if auths and not isinstance(auths, dict):
            raise TypeError("Expected argument 'auths' to be a dict")
        pulumi.set(__self__, "auths", auths)

    @property
    @pulumi.getter
    def auths(self) -> Optional['outputs.DockerCredentialsAuthsProperties']:
        return pulumi.get(self, "auths")


class AwaitableDockerCredentials(DockerCredentials):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return DockerCredentials(
            auths=self.auths)


def get_registry_docker_credential(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableDockerCredentials:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:registry/v2:getRegistryDockerCredential', __args__, opts=opts, typ=DockerCredentials).value

    return AwaitableDockerCredentials(
        auths=pulumi.get(__ret__, 'auths'))


@_utilities.lift_output_func(get_registry_docker_credential)
def get_registry_docker_credential_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[DockerCredentials]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
