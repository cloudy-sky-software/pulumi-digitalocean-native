# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
from ... import _utilities
from . import outputs

__all__ = [
    'ListRegistryRepositoryTagsItems',
    'AwaitableListRegistryRepositoryTagsItems',
    'list_registry_repository_tags',
    'list_registry_repository_tags_output',
]

@pulumi.output_type
class ListRegistryRepositoryTagsItems:
    def __init__(__self__, links=None, meta=None, tags=None):
        if links and not isinstance(links, dict):
            raise TypeError("Expected argument 'links' to be a dict")
        pulumi.set(__self__, "links", links)
        if meta and not isinstance(meta, dict):
            raise TypeError("Expected argument 'meta' to be a dict")
        pulumi.set(__self__, "meta", meta)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.PageLinks']:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def meta(self) -> 'outputs.MetaMeta':
        return pulumi.get(self, "meta")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.RepositoryTag']]:
        return pulumi.get(self, "tags")


class AwaitableListRegistryRepositoryTagsItems(ListRegistryRepositoryTagsItems):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListRegistryRepositoryTagsItems(
            links=self.links,
            meta=self.meta,
            tags=self.tags)


def list_registry_repository_tags(registry_name: Optional[str] = None,
                                  repository_name: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListRegistryRepositoryTagsItems:
    """
    Use this data source to access information about an existing resource.

    :param str registry_name: The name of a container registry.
    :param str repository_name: The name of a container registry repository. If the name contains `/` characters, they must be URL-encoded, e.g. `%2F`.
    """
    __args__ = dict()
    __args__['registryName'] = registry_name
    __args__['repositoryName'] = repository_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:registry/v2:listRegistryRepositoryTags', __args__, opts=opts, typ=ListRegistryRepositoryTagsItems).value

    return AwaitableListRegistryRepositoryTagsItems(
        links=pulumi.get(__ret__, 'links'),
        meta=pulumi.get(__ret__, 'meta'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(list_registry_repository_tags)
def list_registry_repository_tags_output(registry_name: Optional[pulumi.Input[str]] = None,
                                         repository_name: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ListRegistryRepositoryTagsItems]:
    """
    Use this data source to access information about an existing resource.

    :param str registry_name: The name of a container registry.
    :param str repository_name: The name of a container registry repository. If the name contains `/` characters, they must be URL-encoded, e.g. `%2F`.
    """
    ...
