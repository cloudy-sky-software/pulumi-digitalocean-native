# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
from ... import _utilities
from . import outputs

__all__ = [
    'GetRegistryProperties',
    'AwaitableGetRegistryProperties',
    'get_registry',
    'get_registry_output',
]

@pulumi.output_type
class GetRegistryProperties:
    def __init__(__self__, registry=None):
        if registry and not isinstance(registry, dict):
            raise TypeError("Expected argument 'registry' to be a dict")
        pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def registry(self) -> Optional['outputs.Registry']:
        return pulumi.get(self, "registry")


class AwaitableGetRegistryProperties(GetRegistryProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegistryProperties(
            registry=self.registry)


def get_registry(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRegistryProperties:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:registry/v2:getRegistry', __args__, opts=opts, typ=GetRegistryProperties).value

    return AwaitableGetRegistryProperties(
        registry=pulumi.get(__ret__, 'registry'))


@_utilities.lift_output_func(get_registry)
def get_registry_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRegistryProperties]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
