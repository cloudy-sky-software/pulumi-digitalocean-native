# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ActionRegionSlug',
    'GetVolumeActionProperties',
    'GetVolumeProperties',
    'GetVolumeSnapshotsByIdProperties',
    'ListVolumeActionsItems',
    'ListVolumeSnapshotsItems',
    'ListVolumesItems',
    'MetaMeta',
    'PageLinks',
    'PageLinksPagesProperties',
    'Region',
    'Snapshots',
    'VolumeAction',
    'VolumeFull',
    'VolumeFullPropertiesRegion',
]

@pulumi.output_type
class ActionRegionSlug(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class GetVolumeActionProperties(dict):
    def __init__(__self__, *,
                 action: Optional['outputs.VolumeAction'] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)

    @property
    @pulumi.getter
    def action(self) -> Optional['outputs.VolumeAction']:
        return pulumi.get(self, "action")


@pulumi.output_type
class GetVolumeProperties(dict):
    def __init__(__self__, *,
                 volume: Optional['outputs.VolumeFull'] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter
    def volume(self) -> Optional['outputs.VolumeFull']:
        return pulumi.get(self, "volume")


@pulumi.output_type
class GetVolumeSnapshotsByIdProperties(dict):
    def __init__(__self__, *,
                 snapshot: Optional['outputs.Snapshots'] = None):
        if snapshot is not None:
            pulumi.set(__self__, "snapshot", snapshot)

    @property
    @pulumi.getter
    def snapshot(self) -> Optional['outputs.Snapshots']:
        return pulumi.get(self, "snapshot")


@pulumi.output_type
class ListVolumeActionsItems(dict):
    def __init__(__self__, *,
                 meta: 'outputs.MetaMeta',
                 actions: Optional[Sequence['outputs.VolumeAction']] = None,
                 links: Optional['outputs.PageLinks'] = None):
        pulumi.set(__self__, "meta", meta)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def meta(self) -> 'outputs.MetaMeta':
        return pulumi.get(self, "meta")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VolumeAction']]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.PageLinks']:
        return pulumi.get(self, "links")


@pulumi.output_type
class ListVolumeSnapshotsItems(dict):
    def __init__(__self__, *,
                 meta: 'outputs.MetaMeta',
                 links: Optional['outputs.PageLinks'] = None,
                 snapshots: Optional[Sequence['outputs.Snapshots']] = None):
        pulumi.set(__self__, "meta", meta)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if snapshots is not None:
            pulumi.set(__self__, "snapshots", snapshots)

    @property
    @pulumi.getter
    def meta(self) -> 'outputs.MetaMeta':
        return pulumi.get(self, "meta")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.PageLinks']:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def snapshots(self) -> Optional[Sequence['outputs.Snapshots']]:
        return pulumi.get(self, "snapshots")


@pulumi.output_type
class ListVolumesItems(dict):
    def __init__(__self__, *,
                 meta: 'outputs.MetaMeta',
                 volumes: Sequence['outputs.VolumeFull'],
                 links: Optional['outputs.PageLinks'] = None):
        """
        :param Sequence['VolumeFull'] volumes: Array of volumes.
        """
        pulumi.set(__self__, "meta", meta)
        pulumi.set(__self__, "volumes", volumes)
        if links is not None:
            pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def meta(self) -> 'outputs.MetaMeta':
        return pulumi.get(self, "meta")

    @property
    @pulumi.getter
    def volumes(self) -> Sequence['outputs.VolumeFull']:
        """
        Array of volumes.
        """
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter
    def links(self) -> Optional['outputs.PageLinks']:
        return pulumi.get(self, "links")


@pulumi.output_type
class MetaMeta(dict):
    def __init__(__self__, *,
                 total: Optional[int] = None):
        """
        :param int total: Number of objects returned by the request.
        """
        if total is not None:
            pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        """
        Number of objects returned by the request.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class PageLinks(dict):
    def __init__(__self__, *,
                 pages: Optional['outputs.PageLinksPagesProperties'] = None):
        if pages is not None:
            pulumi.set(__self__, "pages", pages)

    @property
    @pulumi.getter
    def pages(self) -> Optional['outputs.PageLinksPagesProperties']:
        return pulumi.get(self, "pages")


@pulumi.output_type
class PageLinksPagesProperties(dict):
    def __init__(__self__, *,
                 first: Optional[str] = None,
                 last: Optional[str] = None,
                 next: Optional[str] = None,
                 prev: Optional[str] = None):
        if first is not None:
            pulumi.set(__self__, "first", first)
        if last is not None:
            pulumi.set(__self__, "last", last)
        if next is not None:
            pulumi.set(__self__, "next", next)
        if prev is not None:
            pulumi.set(__self__, "prev", prev)

    @property
    @pulumi.getter
    def first(self) -> Optional[str]:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter
    def last(self) -> Optional[str]:
        return pulumi.get(self, "last")

    @property
    @pulumi.getter
    def next(self) -> Optional[str]:
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def prev(self) -> Optional[str]:
        return pulumi.get(self, "prev")


@pulumi.output_type
class Region(dict):
    def __init__(__self__, *,
                 available: bool,
                 features: Sequence[str],
                 name: str,
                 sizes: Sequence[str],
                 slug: str):
        """
        :param bool available: This is a boolean value that represents whether new Droplets can be created in this region.
        :param Sequence[str] features: This attribute is set to an array which contains features available in this region
        :param str name: The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
        :param Sequence[str] sizes: This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
        :param str slug: A human-readable string that is used as a unique identifier for each region.
        """
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "features", features)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sizes", sizes)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def available(self) -> bool:
        """
        This is a boolean value that represents whether new Droplets can be created in this region.
        """
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def features(self) -> Sequence[str]:
        """
        This attribute is set to an array which contains features available in this region
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sizes(self) -> Sequence[str]:
        """
        This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
        """
        return pulumi.get(self, "sizes")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        A human-readable string that is used as a unique identifier for each region.
        """
        return pulumi.get(self, "slug")


@pulumi.output_type
class Snapshots(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "minDiskSize":
            suggest = "min_disk_size"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "sizeGigabytes":
            suggest = "size_gigabytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Snapshots. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Snapshots.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Snapshots.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: str,
                 min_disk_size: int,
                 name: str,
                 regions: Sequence[str],
                 resource_id: str,
                 resource_type: 'SnapshotsPropertiesResourceType',
                 size_gigabytes: float,
                 tags: Sequence[str]):
        """
        :param str created_at: A time value given in ISO8601 combined date and time format that represents when the snapshot was created.
        :param int min_disk_size: The minimum size in GB required for a volume or Droplet to use this snapshot.
        :param str name: A human-readable name for the snapshot.
        :param Sequence[str] regions: An array of the regions that the snapshot is available in. The regions are represented by their identifying slug values.
        :param str resource_id: The unique identifier for the resource that the snapshot originated from.
        :param 'SnapshotsPropertiesResourceType' resource_type: The type of resource that the snapshot originated from.
        :param float size_gigabytes: The billable size of the snapshot in gigabytes.
        :param Sequence[str] tags: An array of Tags the snapshot has been tagged with.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "min_disk_size", min_disk_size)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "size_gigabytes", size_gigabytes)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        A time value given in ISO8601 combined date and time format that represents when the snapshot was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="minDiskSize")
    def min_disk_size(self) -> int:
        """
        The minimum size in GB required for a volume or Droplet to use this snapshot.
        """
        return pulumi.get(self, "min_disk_size")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A human-readable name for the snapshot.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regions(self) -> Sequence[str]:
        """
        An array of the regions that the snapshot is available in. The regions are represented by their identifying slug values.
        """
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        The unique identifier for the resource that the snapshot originated from.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> 'SnapshotsPropertiesResourceType':
        """
        The type of resource that the snapshot originated from.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="sizeGigabytes")
    def size_gigabytes(self) -> float:
        """
        The billable size of the snapshot in gigabytes.
        """
        return pulumi.get(self, "size_gigabytes")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        An array of Tags the snapshot has been tagged with.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class VolumeAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "completedAt":
            suggest = "completed_at"
        elif key == "regionSlug":
            suggest = "region_slug"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "startedAt":
            suggest = "started_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 completed_at: Optional[str] = None,
                 id: Optional[int] = None,
                 region: Optional['outputs.Region'] = None,
                 region_slug: Optional['outputs.ActionRegionSlug'] = None,
                 resource_id: Optional[int] = None,
                 resource_type: Optional[str] = None,
                 started_at: Optional[str] = None,
                 status: Optional['ActionStatus'] = None,
                 type: Optional[str] = None):
        """
        :param str completed_at: A time value given in ISO8601 combined date and time format that represents when the action was completed.
        :param int id: A unique numeric ID that can be used to identify and reference an action.
        :param int resource_id: A unique identifier for the resource that the action is associated with.
        :param str resource_type: The type of resource that the action is associated with.
        :param str started_at: A time value given in ISO8601 combined date and time format that represents when the action was initiated.
        :param 'ActionStatus' status: The current status of the action. This can be "in-progress", "completed", or "errored".
        :param str type: This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
        """
        if completed_at is not None:
            pulumi.set(__self__, "completed_at", completed_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if region_slug is not None:
            pulumi.set(__self__, "region_slug", region_slug)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)
        if status is None:
            status = 'in-progress'
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="completedAt")
    def completed_at(self) -> Optional[str]:
        """
        A time value given in ISO8601 combined date and time format that represents when the action was completed.
        """
        return pulumi.get(self, "completed_at")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        A unique numeric ID that can be used to identify and reference an action.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def region(self) -> Optional['outputs.Region']:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionSlug")
    def region_slug(self) -> Optional['outputs.ActionRegionSlug']:
        return pulumi.get(self, "region_slug")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[int]:
        """
        A unique identifier for the resource that the action is associated with.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        The type of resource that the action is associated with.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        A time value given in ISO8601 combined date and time format that represents when the action was initiated.
        """
        return pulumi.get(self, "started_at")

    @property
    @pulumi.getter
    def status(self) -> Optional['ActionStatus']:
        """
        The current status of the action. This can be "in-progress", "completed", or "errored".
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VolumeFull(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "dropletIds":
            suggest = "droplet_ids"
        elif key == "filesystemLabel":
            suggest = "filesystem_label"
        elif key == "filesystemType":
            suggest = "filesystem_type"
        elif key == "sizeGigabytes":
            suggest = "size_gigabytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeFull. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeFull.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeFull.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 description: Optional[str] = None,
                 droplet_ids: Optional[Sequence[int]] = None,
                 filesystem_label: Optional[str] = None,
                 filesystem_type: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 region: Optional['outputs.VolumeFullPropertiesRegion'] = None,
                 size_gigabytes: Optional[int] = None,
                 tags: Optional[Sequence[str]] = None):
        """
        :param str created_at: A time value given in ISO8601 combined date and time format that represents when the block storage volume was created.
        :param str description: An optional free-form text field to describe a block storage volume.
        :param Sequence[int] droplet_ids: An array containing the IDs of the Droplets the volume is attached to. Note that at this time, a volume can only be attached to a single Droplet.
        :param str filesystem_label: The label currently applied to the filesystem.
        :param str filesystem_type: The type of filesystem currently in-use on the volume.
        :param str id: The unique identifier for the block storage volume.
        :param str name: A human-readable name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters. The name must begin with a letter.
        :param int size_gigabytes: The size of the block storage volume in GiB (1024^3). This field does not apply  when creating a volume from a snapshot.
        :param Sequence[str] tags: A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if droplet_ids is not None:
            pulumi.set(__self__, "droplet_ids", droplet_ids)
        if filesystem_label is not None:
            pulumi.set(__self__, "filesystem_label", filesystem_label)
        if filesystem_type is not None:
            pulumi.set(__self__, "filesystem_type", filesystem_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if size_gigabytes is not None:
            pulumi.set(__self__, "size_gigabytes", size_gigabytes)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        A time value given in ISO8601 combined date and time format that represents when the block storage volume was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        An optional free-form text field to describe a block storage volume.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dropletIds")
    def droplet_ids(self) -> Optional[Sequence[int]]:
        """
        An array containing the IDs of the Droplets the volume is attached to. Note that at this time, a volume can only be attached to a single Droplet.
        """
        return pulumi.get(self, "droplet_ids")

    @property
    @pulumi.getter(name="filesystemLabel")
    def filesystem_label(self) -> Optional[str]:
        """
        The label currently applied to the filesystem.
        """
        return pulumi.get(self, "filesystem_label")

    @property
    @pulumi.getter(name="filesystemType")
    def filesystem_type(self) -> Optional[str]:
        """
        The type of filesystem currently in-use on the volume.
        """
        return pulumi.get(self, "filesystem_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique identifier for the block storage volume.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A human-readable name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters. The name must begin with a letter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> Optional['outputs.VolumeFullPropertiesRegion']:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sizeGigabytes")
    def size_gigabytes(self) -> Optional[int]:
        """
        The size of the block storage volume in GiB (1024^3). This field does not apply  when creating a volume from a snapshot.
        """
        return pulumi.get(self, "size_gigabytes")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class VolumeFullPropertiesRegion(dict):
    def __init__(__self__, *,
                 available: bool,
                 features: Sequence[str],
                 name: str,
                 sizes: Sequence[str],
                 slug: str):
        """
        :param bool available: This is a boolean value that represents whether new Droplets can be created in this region.
        :param Sequence[str] features: This attribute is set to an array which contains features available in this region
        :param str name: The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
        :param Sequence[str] sizes: This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
        :param str slug: A human-readable string that is used as a unique identifier for each region.
        """
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "features", features)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sizes", sizes)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def available(self) -> bool:
        """
        This is a boolean value that represents whether new Droplets can be created in this region.
        """
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def features(self) -> Sequence[str]:
        """
        This attribute is set to an array which contains features available in this region
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sizes(self) -> Sequence[str]:
        """
        This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
        """
        return pulumi.get(self, "sizes")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        A human-readable string that is used as a unique identifier for each region.
        """
        return pulumi.get(self, "slug")


