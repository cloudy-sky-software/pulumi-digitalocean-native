# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetVolumeProperties',
    'AwaitableGetVolumeProperties',
    'get_volume',
    'get_volume_output',
]

@pulumi.output_type
class GetVolumeProperties:
    def __init__(__self__, volume=None):
        if volume and not isinstance(volume, dict):
            raise TypeError("Expected argument 'volume' to be a dict")
        pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter
    def volume(self) -> Optional['outputs.VolumeFull']:
        return pulumi.get(self, "volume")


class AwaitableGetVolumeProperties(GetVolumeProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVolumeProperties(
            volume=self.volume)


def get_volume(volume_id: Optional[builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVolumeProperties:
    """
    Use this data source to access information about an existing resource.

    :param builtins.str volume_id: The ID of the block storage volume.
    """
    __args__ = dict()
    __args__['volumeId'] = volume_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:volumes/v2:getVolume', __args__, opts=opts, typ=GetVolumeProperties).value

    return AwaitableGetVolumeProperties(
        volume=pulumi.get(__ret__, 'volume'))
def get_volume_output(volume_id: Optional[pulumi.Input[builtins.str]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVolumeProperties]:
    """
    Use this data source to access information about an existing resource.

    :param builtins.str volume_id: The ID of the block storage volume.
    """
    __args__ = dict()
    __args__['volumeId'] = volume_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('digitalocean-native:volumes/v2:getVolume', __args__, opts=opts, typ=GetVolumeProperties)
    return __ret__.apply(lambda __response__: GetVolumeProperties(
        volume=pulumi.get(__response__, 'volume')))
