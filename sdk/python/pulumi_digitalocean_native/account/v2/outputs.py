# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'Account',
    'AccountTeamProperties',
    'MetaMeta',
    'PageLinks',
    'PageLinksPagesProperties',
    'SshKeys',
]

@pulumi.output_type
class Account(dict):
    def __init__(__self__, *,
                 droplet_limit: builtins.int,
                 email: builtins.str,
                 email_verified: Optional[builtins.bool] = None,
                 floating_ip_limit: builtins.int,
                 status: Optional['AccountStatus'] = None,
                 status_message: builtins.str,
                 uuid: builtins.str,
                 name: Optional[builtins.str] = None,
                 team: Optional['outputs.AccountTeamProperties'] = None):
        """
        :param builtins.int droplet_limit: The total number of Droplets current user or team may have active at one time.
        :param builtins.str email: The email address used by the current user to register for DigitalOcean.
        :param builtins.bool email_verified: If true, the user has verified their account via email. False otherwise.
        :param builtins.int floating_ip_limit: The total number of Floating IPs the current user or team may have.
        :param 'AccountStatus' status: This value is one of "active", "warning" or "locked".
        :param builtins.str status_message: A human-readable message giving more details about the status of the account.
        :param builtins.str uuid: The unique universal identifier for the current user.
        :param builtins.str name: The display name for the current user.
        :param 'AccountTeamProperties' team: When authorized in a team context, includes information about the current team.
        """
        pulumi.set(__self__, "droplet_limit", droplet_limit)
        pulumi.set(__self__, "email", email)
        if email_verified is None:
            email_verified = False
        pulumi.set(__self__, "email_verified", email_verified)
        pulumi.set(__self__, "floating_ip_limit", floating_ip_limit)
        if status is None:
            status = 'active'
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_message", status_message)
        pulumi.set(__self__, "uuid", uuid)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if team is not None:
            pulumi.set(__self__, "team", team)

    @property
    @pulumi.getter(name="dropletLimit")
    def droplet_limit(self) -> builtins.int:
        """
        The total number of Droplets current user or team may have active at one time.
        """
        return pulumi.get(self, "droplet_limit")

    @property
    @pulumi.getter
    def email(self) -> builtins.str:
        """
        The email address used by the current user to register for DigitalOcean.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="emailVerified")
    def email_verified(self) -> builtins.bool:
        """
        If true, the user has verified their account via email. False otherwise.
        """
        return pulumi.get(self, "email_verified")

    @property
    @pulumi.getter(name="floatingIpLimit")
    def floating_ip_limit(self) -> builtins.int:
        """
        The total number of Floating IPs the current user or team may have.
        """
        return pulumi.get(self, "floating_ip_limit")

    @property
    @pulumi.getter
    def status(self) -> 'AccountStatus':
        """
        This value is one of "active", "warning" or "locked".
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> builtins.str:
        """
        A human-readable message giving more details about the status of the account.
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter
    def uuid(self) -> builtins.str:
        """
        The unique universal identifier for the current user.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The display name for the current user.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def team(self) -> Optional['outputs.AccountTeamProperties']:
        """
        When authorized in a team context, includes information about the current team.
        """
        return pulumi.get(self, "team")


@pulumi.output_type
class AccountTeamProperties(dict):
    """
    When authorized in a team context, includes information about the current team.
    """
    def __init__(__self__, *,
                 name: Optional[builtins.str] = None,
                 uuid: Optional[builtins.str] = None):
        """
        When authorized in a team context, includes information about the current team.
        :param builtins.str name: The name for the current team.
        :param builtins.str uuid: The unique universal identifier for the current team.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name for the current team.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[builtins.str]:
        """
        The unique universal identifier for the current team.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class MetaMeta(dict):
    def __init__(__self__, *,
                 total: Optional[builtins.int] = None):
        """
        :param builtins.int total: Number of objects returned by the request.
        """
        if total is not None:
            pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def total(self) -> Optional[builtins.int]:
        """
        Number of objects returned by the request.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class PageLinks(dict):
    def __init__(__self__, *,
                 pages: Optional['outputs.PageLinksPagesProperties'] = None):
        if pages is not None:
            pulumi.set(__self__, "pages", pages)

    @property
    @pulumi.getter
    def pages(self) -> Optional['outputs.PageLinksPagesProperties']:
        return pulumi.get(self, "pages")


@pulumi.output_type
class PageLinksPagesProperties(dict):
    def __init__(__self__, *,
                 first: Optional[builtins.str] = None,
                 last: Optional[builtins.str] = None,
                 next: Optional[builtins.str] = None,
                 prev: Optional[builtins.str] = None):
        if first is not None:
            pulumi.set(__self__, "first", first)
        if last is not None:
            pulumi.set(__self__, "last", last)
        if next is not None:
            pulumi.set(__self__, "next", next)
        if prev is not None:
            pulumi.set(__self__, "prev", prev)

    @property
    @pulumi.getter
    def first(self) -> Optional[builtins.str]:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter
    def last(self) -> Optional[builtins.str]:
        return pulumi.get(self, "last")

    @property
    @pulumi.getter
    def next(self) -> Optional[builtins.str]:
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def prev(self) -> Optional[builtins.str]:
        return pulumi.get(self, "prev")


@pulumi.output_type
class SshKeys(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicKey":
            suggest = "public_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshKeys. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshKeys.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshKeys.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 public_key: builtins.str,
                 fingerprint: Optional[builtins.str] = None,
                 id: Optional[builtins.int] = None):
        """
        :param builtins.str name: A human-readable display name for this key, used to easily identify the SSH keys when they are displayed.
        :param builtins.str public_key: The entire public key string that was uploaded. Embedded into the root user's `authorized_keys` file if you include this key during Droplet creation.
        :param builtins.str fingerprint: A unique identifier that differentiates this key from other keys using  a format that SSH recognizes. The fingerprint is created when the key is added to your account.
        :param builtins.int id: A unique identification number for this key. Can be used to embed a  specific SSH key into a Droplet.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_key", public_key)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A human-readable display name for this key, used to easily identify the SSH keys when they are displayed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> builtins.str:
        """
        The entire public key string that was uploaded. Embedded into the root user's `authorized_keys` file if you include this key during Droplet creation.
        """
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[builtins.str]:
        """
        A unique identifier that differentiates this key from other keys using  a format that SSH recognizes. The fingerprint is created when the key is added to your account.
        """
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        A unique identification number for this key. Can be used to embed a  specific SSH key into a Droplet.
        """
        return pulumi.get(self, "id")


