# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
from ... import _utilities
from . import outputs

__all__ = [
    'GetSshKeyProperties',
    'AwaitableGetSshKeyProperties',
    'get_ssh_key',
    'get_ssh_key_output',
]

@pulumi.output_type
class GetSshKeyProperties:
    def __init__(__self__, ssh_key=None):
        if ssh_key and not isinstance(ssh_key, dict):
            raise TypeError("Expected argument 'ssh_key' to be a dict")
        pulumi.set(__self__, "ssh_key", ssh_key)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> Optional['outputs.SshKeys']:
        return pulumi.get(self, "ssh_key")


class AwaitableGetSshKeyProperties(GetSshKeyProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSshKeyProperties(
            ssh_key=self.ssh_key)


def get_ssh_key(ssh_key_identifier: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSshKeyProperties:
    """
    Use this data source to access information about an existing resource.

    :param str ssh_key_identifier: Either the ID or the fingerprint of an existing SSH key.
    """
    __args__ = dict()
    __args__['sshKeyIdentifier'] = ssh_key_identifier
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:account/v2:getSshKey', __args__, opts=opts, typ=GetSshKeyProperties).value

    return AwaitableGetSshKeyProperties(
        ssh_key=pulumi.get(__ret__, 'ssh_key'))


@_utilities.lift_output_func(get_ssh_key)
def get_ssh_key_output(ssh_key_identifier: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSshKeyProperties]:
    """
    Use this data source to access information about an existing resource.

    :param str ssh_key_identifier: Either the ID or the fingerprint of an existing SSH key.
    """
    ...
