# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
from ... import _utilities
from . import outputs

__all__ = [
    'GetVpcProperties',
    'AwaitableGetVpcProperties',
    'get_vpc',
    'get_vpc_output',
]

@pulumi.output_type
class GetVpcProperties:
    def __init__(__self__, vpc=None):
        if vpc and not isinstance(vpc, dict):
            raise TypeError("Expected argument 'vpc' to be a dict")
        pulumi.set(__self__, "vpc", vpc)

    @property
    @pulumi.getter
    def vpc(self) -> Optional['outputs.Vpc']:
        return pulumi.get(self, "vpc")


class AwaitableGetVpcProperties(GetVpcProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVpcProperties(
            vpc=self.vpc)


def get_vpc(vpc_id: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVpcProperties:
    """
    Use this data source to access information about an existing resource.

    :param str vpc_id: A unique identifier for a VPC.
    """
    __args__ = dict()
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:vpcs/v2:getVpc', __args__, opts=opts, typ=GetVpcProperties).value

    return AwaitableGetVpcProperties(
        vpc=pulumi.get(__ret__, 'vpc'))


@_utilities.lift_output_func(get_vpc)
def get_vpc_output(vpc_id: Optional[pulumi.Input[str]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVpcProperties]:
    """
    Use this data source to access information about an existing resource.

    :param str vpc_id: A unique identifier for a VPC.
    """
    ...
