# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AssociatedKubernetesResource',
    'Cluster',
    'ClusterStatusProperties',
    'ClusterlintResultsDiagnosticsItemProperties',
    'ClusterlintResultsDiagnosticsItemPropertiesObjectProperties',
    'KubernetesNodePool',
    'KubernetesNodePoolTaint',
    'KubernetesOptionsOptionsProperties',
    'KubernetesRegion',
    'KubernetesSize',
    'KubernetesVersion',
    'MaintenancePolicy',
    'MetaMeta',
    'Node',
    'NodeStatusProperties',
    'PageLinks',
    'PageLinksPagesProperties',
    'StatusProperties',
    'UserKubernetesClusterUserProperties',
]

@pulumi.output_type
class AssociatedKubernetesResource(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: The ID of a resource associated with a Kubernetes cluster.
        :param _builtins.str name: The name of a resource associated with a Kubernetes cluster.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of a resource associated with a Kubernetes cluster.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of a resource associated with a Kubernetes cluster.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class Cluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodePools":
            suggest = "node_pools"
        elif key == "autoUpgrade":
            suggest = "auto_upgrade"
        elif key == "clusterSubnet":
            suggest = "cluster_subnet"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "maintenancePolicy":
            suggest = "maintenance_policy"
        elif key == "registryEnabled":
            suggest = "registry_enabled"
        elif key == "serviceSubnet":
            suggest = "service_subnet"
        elif key == "surgeUpgrade":
            suggest = "surge_upgrade"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "vpcUuid":
            suggest = "vpc_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Cluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Cluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Cluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 node_pools: Sequence['outputs.KubernetesNodePool'],
                 region: _builtins.str,
                 version: _builtins.str,
                 auto_upgrade: Optional[_builtins.bool] = None,
                 cluster_subnet: Optional[_builtins.str] = None,
                 created_at: Optional[_builtins.str] = None,
                 endpoint: Optional[_builtins.str] = None,
                 ha: Optional[_builtins.bool] = None,
                 id: Optional[_builtins.str] = None,
                 ipv4: Optional[_builtins.str] = None,
                 maintenance_policy: Optional['outputs.MaintenancePolicy'] = None,
                 registry_enabled: Optional[_builtins.bool] = None,
                 service_subnet: Optional[_builtins.str] = None,
                 status: Optional['outputs.ClusterStatusProperties'] = None,
                 surge_upgrade: Optional[_builtins.bool] = None,
                 tags: Optional[Sequence[_builtins.str]] = None,
                 updated_at: Optional[_builtins.str] = None,
                 vpc_uuid: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: A human-readable name for a Kubernetes cluster.
        :param Sequence['KubernetesNodePool'] node_pools: An object specifying the details of the worker nodes available to the Kubernetes cluster.
        :param _builtins.str region: The slug identifier for the region where the Kubernetes cluster is located.
        :param _builtins.str version: The slug identifier for the version of Kubernetes used for the cluster. If set to a minor version (e.g. "1.14"), the latest version within it will be used (e.g. "1.14.6-do.1"); if set to "latest", the latest published version will be used. See the `/v2/kubernetes/options` endpoint to find all currently available versions.
        :param _builtins.bool auto_upgrade: A boolean value indicating whether the cluster will be automatically upgraded to new patch releases during its maintenance window.
        :param _builtins.str cluster_subnet: The range of IP addresses in the overlay network of the Kubernetes cluster in CIDR notation.
        :param _builtins.str created_at: A time value given in ISO8601 combined date and time format that represents when the Kubernetes cluster was created.
        :param _builtins.str endpoint: The base URL of the API server on the Kubernetes master node.
        :param _builtins.bool ha: A boolean value indicating whether the control plane is run in a highly available configuration in the cluster. Highly available control planes incur less downtime. The property cannot be disabled.
        :param _builtins.str id: A unique ID that can be used to identify and reference a Kubernetes cluster.
        :param _builtins.str ipv4: The public IPv4 address of the Kubernetes master node. This will not be set if high availability is configured on the cluster (v1.21+)
        :param 'MaintenancePolicy' maintenance_policy: An object specifying the maintenance window policy for the Kubernetes cluster.
        :param _builtins.bool registry_enabled: A read-only boolean value indicating if a container registry is integrated with the cluster.
        :param _builtins.str service_subnet: The range of assignable IP addresses for services running in the Kubernetes cluster in CIDR notation.
        :param 'ClusterStatusProperties' status: An object containing a `state` attribute whose value is set to a string indicating the current status of the cluster.
        :param _builtins.bool surge_upgrade: A boolean value indicating whether surge upgrade is enabled/disabled for the cluster. Surge upgrade makes cluster upgrades fast and reliable by bringing up new nodes before destroying the outdated nodes.
        :param Sequence[_builtins.str] tags: An array of tags applied to the Kubernetes cluster. All clusters are automatically tagged `k8s` and `k8s:$K8S_CLUSTER_ID`.
        :param _builtins.str updated_at: A time value given in ISO8601 combined date and time format that represents when the Kubernetes cluster was last updated.
        :param _builtins.str vpc_uuid: A string specifying the UUID of the VPC to which the Kubernetes cluster is assigned.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_pools", node_pools)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "version", version)
        if auto_upgrade is None:
            auto_upgrade = False
        if auto_upgrade is not None:
            pulumi.set(__self__, "auto_upgrade", auto_upgrade)
        if cluster_subnet is not None:
            pulumi.set(__self__, "cluster_subnet", cluster_subnet)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if ha is None:
            ha = False
        if ha is not None:
            pulumi.set(__self__, "ha", ha)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if maintenance_policy is not None:
            pulumi.set(__self__, "maintenance_policy", maintenance_policy)
        if registry_enabled is not None:
            pulumi.set(__self__, "registry_enabled", registry_enabled)
        if service_subnet is not None:
            pulumi.set(__self__, "service_subnet", service_subnet)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if surge_upgrade is None:
            surge_upgrade = False
        if surge_upgrade is not None:
            pulumi.set(__self__, "surge_upgrade", surge_upgrade)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vpc_uuid is not None:
            pulumi.set(__self__, "vpc_uuid", vpc_uuid)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        A human-readable name for a Kubernetes cluster.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Sequence['outputs.KubernetesNodePool']:
        """
        An object specifying the details of the worker nodes available to the Kubernetes cluster.
        """
        return pulumi.get(self, "node_pools")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The slug identifier for the region where the Kubernetes cluster is located.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The slug identifier for the version of Kubernetes used for the cluster. If set to a minor version (e.g. "1.14"), the latest version within it will be used (e.g. "1.14.6-do.1"); if set to "latest", the latest published version will be used. See the `/v2/kubernetes/options` endpoint to find all currently available versions.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> Optional[_builtins.bool]:
        """
        A boolean value indicating whether the cluster will be automatically upgraded to new patch releases during its maintenance window.
        """
        return pulumi.get(self, "auto_upgrade")

    @_builtins.property
    @pulumi.getter(name="clusterSubnet")
    def cluster_subnet(self) -> Optional[_builtins.str]:
        """
        The range of IP addresses in the overlay network of the Kubernetes cluster in CIDR notation.
        """
        return pulumi.get(self, "cluster_subnet")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        A time value given in ISO8601 combined date and time format that represents when the Kubernetes cluster was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> Optional[_builtins.str]:
        """
        The base URL of the API server on the Kubernetes master node.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def ha(self) -> Optional[_builtins.bool]:
        """
        A boolean value indicating whether the control plane is run in a highly available configuration in the cluster. Highly available control planes incur less downtime. The property cannot be disabled.
        """
        return pulumi.get(self, "ha")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        A unique ID that can be used to identify and reference a Kubernetes cluster.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ipv4(self) -> Optional[_builtins.str]:
        """
        The public IPv4 address of the Kubernetes master node. This will not be set if high availability is configured on the cluster (v1.21+)
        """
        return pulumi.get(self, "ipv4")

    @_builtins.property
    @pulumi.getter(name="maintenancePolicy")
    def maintenance_policy(self) -> Optional['outputs.MaintenancePolicy']:
        """
        An object specifying the maintenance window policy for the Kubernetes cluster.
        """
        return pulumi.get(self, "maintenance_policy")

    @_builtins.property
    @pulumi.getter(name="registryEnabled")
    def registry_enabled(self) -> Optional[_builtins.bool]:
        """
        A read-only boolean value indicating if a container registry is integrated with the cluster.
        """
        return pulumi.get(self, "registry_enabled")

    @_builtins.property
    @pulumi.getter(name="serviceSubnet")
    def service_subnet(self) -> Optional[_builtins.str]:
        """
        The range of assignable IP addresses for services running in the Kubernetes cluster in CIDR notation.
        """
        return pulumi.get(self, "service_subnet")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional['outputs.ClusterStatusProperties']:
        """
        An object containing a `state` attribute whose value is set to a string indicating the current status of the cluster.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="surgeUpgrade")
    def surge_upgrade(self) -> Optional[_builtins.bool]:
        """
        A boolean value indicating whether surge upgrade is enabled/disabled for the cluster. Surge upgrade makes cluster upgrades fast and reliable by bringing up new nodes before destroying the outdated nodes.
        """
        return pulumi.get(self, "surge_upgrade")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[_builtins.str]]:
        """
        An array of tags applied to the Kubernetes cluster. All clusters are automatically tagged `k8s` and `k8s:$K8S_CLUSTER_ID`.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        A time value given in ISO8601 combined date and time format that represents when the Kubernetes cluster was last updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpcUuid")
    def vpc_uuid(self) -> Optional[_builtins.str]:
        """
        A string specifying the UUID of the VPC to which the Kubernetes cluster is assigned.
        """
        return pulumi.get(self, "vpc_uuid")


@pulumi.output_type
class ClusterStatusProperties(dict):
    """
    An object containing a `state` attribute whose value is set to a string indicating the current status of the cluster.
    """
    def __init__(__self__, *,
                 message: Optional[_builtins.str] = None,
                 state: Optional['ClusterStatusPropertiesState'] = None):
        """
        An object containing a `state` attribute whose value is set to a string indicating the current status of the cluster.
        :param _builtins.str message: An optional message providing additional information about the current cluster state.
        :param 'ClusterStatusPropertiesState' state: A string indicating the current status of the cluster.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        """
        An optional message providing additional information about the current cluster state.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional['ClusterStatusPropertiesState']:
        """
        A string indicating the current status of the cluster.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ClusterlintResultsDiagnosticsItemProperties(dict):
    def __init__(__self__, *,
                 check_name: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None,
                 object: Optional['outputs.ClusterlintResultsDiagnosticsItemPropertiesObjectProperties'] = None,
                 severity: Optional[_builtins.str] = None):
        """
        :param _builtins.str check_name: The clusterlint check that resulted in the diagnostic.
        :param _builtins.str message: Feedback about the object for users to fix.
        :param 'ClusterlintResultsDiagnosticsItemPropertiesObjectProperties' object: Metadata about the Kubernetes API object the diagnostic is reported on.
        :param _builtins.str severity: Can be one of error, warning or suggestion.
        """
        if check_name is not None:
            pulumi.set(__self__, "check_name", check_name)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter(name="checkName")
    def check_name(self) -> Optional[_builtins.str]:
        """
        The clusterlint check that resulted in the diagnostic.
        """
        return pulumi.get(self, "check_name")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        """
        Feedback about the object for users to fix.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def object(self) -> Optional['outputs.ClusterlintResultsDiagnosticsItemPropertiesObjectProperties']:
        """
        Metadata about the Kubernetes API object the diagnostic is reported on.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> Optional[_builtins.str]:
        """
        Can be one of error, warning or suggestion.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class ClusterlintResultsDiagnosticsItemPropertiesObjectProperties(dict):
    """
    Metadata about the Kubernetes API object the diagnostic is reported on.
    """
    def __init__(__self__, *,
                 kind: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None):
        """
        Metadata about the Kubernetes API object the diagnostic is reported on.
        :param _builtins.str kind: The kind of Kubernetes API object
        :param _builtins.str name: Name of the object
        :param _builtins.str namespace: The namespace the object resides in the cluster.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[_builtins.str]:
        """
        The kind of Kubernetes API object
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of the object
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        """
        The namespace the object resides in the cluster.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class KubernetesNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoScale":
            suggest = "auto_scale"
        elif key == "maxNodes":
            suggest = "max_nodes"
        elif key == "minNodes":
            suggest = "min_nodes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_scale: Optional[_builtins.bool] = None,
                 count: Optional[_builtins.int] = None,
                 id: Optional[_builtins.str] = None,
                 labels: Optional[Any] = None,
                 max_nodes: Optional[_builtins.int] = None,
                 min_nodes: Optional[_builtins.int] = None,
                 name: Optional[_builtins.str] = None,
                 nodes: Optional[Sequence['outputs.Node']] = None,
                 size: Optional[_builtins.str] = None,
                 tags: Optional[Sequence[_builtins.str]] = None,
                 taints: Optional[Sequence['outputs.KubernetesNodePoolTaint']] = None):
        """
        :param _builtins.bool auto_scale: A boolean value indicating whether auto-scaling is enabled for this node pool.
        :param _builtins.int count: The number of Droplet instances in the node pool.
        :param _builtins.str id: A unique ID that can be used to identify and reference a specific node pool.
        :param Any labels: An object of key/value mappings specifying labels to apply to all nodes in a pool. Labels will automatically be applied to all existing nodes and any subsequent nodes added to the pool. Note that when a label is removed, it is not deleted from the nodes in the pool.
        :param _builtins.int max_nodes: The maximum number of nodes that this node pool can be auto-scaled to. The value will be `0` if `auto_scale` is set to `false`.
        :param _builtins.int min_nodes: The minimum number of nodes that this node pool can be auto-scaled to. The value will be `0` if `auto_scale` is set to `false`.
        :param _builtins.str name: A human-readable name for the node pool.
        :param Sequence['Node'] nodes: An object specifying the details of a specific worker node in a node pool.
        :param _builtins.str size: The slug identifier for the type of Droplet used as workers in the node pool.
        :param Sequence[_builtins.str] tags: An array containing the tags applied to the node pool. All node pools are automatically tagged `k8s`, `k8s-worker`, and `k8s:$K8S_CLUSTER_ID`.
        :param Sequence['KubernetesNodePoolTaint'] taints: An array of taints to apply to all nodes in a pool. Taints will automatically be applied to all existing nodes and any subsequent nodes added to the pool. When a taint is removed, it is deleted from all nodes in the pool.
        """
        if auto_scale is not None:
            pulumi.set(__self__, "auto_scale", auto_scale)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_nodes is not None:
            pulumi.set(__self__, "max_nodes", max_nodes)
        if min_nodes is not None:
            pulumi.set(__self__, "min_nodes", min_nodes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @_builtins.property
    @pulumi.getter(name="autoScale")
    def auto_scale(self) -> Optional[_builtins.bool]:
        """
        A boolean value indicating whether auto-scaling is enabled for this node pool.
        """
        return pulumi.get(self, "auto_scale")

    @_builtins.property
    @pulumi.getter
    def count(self) -> Optional[_builtins.int]:
        """
        The number of Droplet instances in the node pool.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        A unique ID that can be used to identify and reference a specific node pool.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Any]:
        """
        An object of key/value mappings specifying labels to apply to all nodes in a pool. Labels will automatically be applied to all existing nodes and any subsequent nodes added to the pool. Note that when a label is removed, it is not deleted from the nodes in the pool.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="maxNodes")
    def max_nodes(self) -> Optional[_builtins.int]:
        """
        The maximum number of nodes that this node pool can be auto-scaled to. The value will be `0` if `auto_scale` is set to `false`.
        """
        return pulumi.get(self, "max_nodes")

    @_builtins.property
    @pulumi.getter(name="minNodes")
    def min_nodes(self) -> Optional[_builtins.int]:
        """
        The minimum number of nodes that this node pool can be auto-scaled to. The value will be `0` if `auto_scale` is set to `false`.
        """
        return pulumi.get(self, "min_nodes")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        A human-readable name for the node pool.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.Node']]:
        """
        An object specifying the details of a specific worker node in a node pool.
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.str]:
        """
        The slug identifier for the type of Droplet used as workers in the node pool.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[_builtins.str]]:
        """
        An array containing the tags applied to the node pool. All node pools are automatically tagged `k8s`, `k8s-worker`, and `k8s:$K8S_CLUSTER_ID`.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.KubernetesNodePoolTaint']]:
        """
        An array of taints to apply to all nodes in a pool. Taints will automatically be applied to all existing nodes and any subsequent nodes added to the pool. When a taint is removed, it is deleted from all nodes in the pool.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class KubernetesNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: Optional['KubernetesNodePoolTaintEffect'] = None,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param 'KubernetesNodePoolTaintEffect' effect: How the node reacts to pods that it won't tolerate. Available effect values are `NoSchedule`, `PreferNoSchedule`, and `NoExecute`.
        :param _builtins.str key: An arbitrary string. The `key` and `value` fields of the `taint` object form a key-value pair. For example, if the value of the `key` field is "special" and the value of the `value` field is "gpu", the key value pair would be `special=gpu`.
        :param _builtins.str value: An arbitrary string. The `key` and `value` fields of the `taint` object form a key-value pair. For example, if the value of the `key` field is "special" and the value of the `value` field is "gpu", the key value pair would be `special=gpu`.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional['KubernetesNodePoolTaintEffect']:
        """
        How the node reacts to pods that it won't tolerate. Available effect values are `NoSchedule`, `PreferNoSchedule`, and `NoExecute`.
        """
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        An arbitrary string. The `key` and `value` fields of the `taint` object form a key-value pair. For example, if the value of the `key` field is "special" and the value of the `value` field is "gpu", the key value pair would be `special=gpu`.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        An arbitrary string. The `key` and `value` fields of the `taint` object form a key-value pair. For example, if the value of the `key` field is "special" and the value of the `value` field is "gpu", the key value pair would be `special=gpu`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class KubernetesOptionsOptionsProperties(dict):
    def __init__(__self__, *,
                 regions: Optional[Sequence['outputs.KubernetesRegion']] = None,
                 sizes: Optional[Sequence['outputs.KubernetesSize']] = None,
                 versions: Optional[Sequence['outputs.KubernetesVersion']] = None):
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if sizes is not None:
            pulumi.set(__self__, "sizes", sizes)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @_builtins.property
    @pulumi.getter
    def regions(self) -> Optional[Sequence['outputs.KubernetesRegion']]:
        return pulumi.get(self, "regions")

    @_builtins.property
    @pulumi.getter
    def sizes(self) -> Optional[Sequence['outputs.KubernetesSize']]:
        return pulumi.get(self, "sizes")

    @_builtins.property
    @pulumi.getter
    def versions(self) -> Optional[Sequence['outputs.KubernetesVersion']]:
        return pulumi.get(self, "versions")


@pulumi.output_type
class KubernetesRegion(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 slug: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: A DigitalOcean region where Kubernetes is available.
        :param _builtins.str slug: The identifier for a region for use when creating a new cluster.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        A DigitalOcean region where Kubernetes is available.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[_builtins.str]:
        """
        The identifier for a region for use when creating a new cluster.
        """
        return pulumi.get(self, "slug")


@pulumi.output_type
class KubernetesSize(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 slug: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: A Droplet size available for use in a Kubernetes node pool.
        :param _builtins.str slug: The identifier for a size for use when creating a new cluster.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        A Droplet size available for use in a Kubernetes node pool.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[_builtins.str]:
        """
        The identifier for a size for use when creating a new cluster.
        """
        return pulumi.get(self, "slug")


@pulumi.output_type
class KubernetesVersion(dict):
    def __init__(__self__, *,
                 kubernetes_version: Optional[_builtins.str] = None,
                 slug: Optional[_builtins.str] = None,
                 supported_features: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str kubernetes_version: The upstream version string for the version of Kubernetes provided by a given slug.
        :param _builtins.str slug: The slug identifier for an available version of Kubernetes for use when creating or updating a cluster. The string contains both the upstream version of Kubernetes as well as the DigitalOcean revision.
        :param Sequence[_builtins.str] supported_features: The features available with the version of Kubernetes provided by a given slug.
        """
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if supported_features is not None:
            pulumi.set(__self__, "supported_features", supported_features)

    @_builtins.property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[_builtins.str]:
        """
        The upstream version string for the version of Kubernetes provided by a given slug.
        """
        return pulumi.get(self, "kubernetes_version")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[_builtins.str]:
        """
        The slug identifier for an available version of Kubernetes for use when creating or updating a cluster. The string contains both the upstream version of Kubernetes as well as the DigitalOcean revision.
        """
        return pulumi.get(self, "slug")

    @_builtins.property
    @pulumi.getter(name="supportedFeatures")
    def supported_features(self) -> Optional[Sequence[_builtins.str]]:
        """
        The features available with the version of Kubernetes provided by a given slug.
        """
        return pulumi.get(self, "supported_features")


@pulumi.output_type
class MaintenancePolicy(dict):
    """
    An object specifying the maintenance window policy for the Kubernetes cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MaintenancePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MaintenancePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MaintenancePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day: Optional['MaintenancePolicyDay'] = None,
                 duration: Optional[_builtins.str] = None,
                 start_time: Optional[_builtins.str] = None):
        """
        An object specifying the maintenance window policy for the Kubernetes cluster.
        :param 'MaintenancePolicyDay' day: The day of the maintenance window policy. May be one of `monday` through `sunday`, or `any` to indicate an arbitrary week day.
        :param _builtins.str duration: The duration of the maintenance window policy in human-readable format.
        :param _builtins.str start_time: The start time in UTC of the maintenance window policy in 24-hour clock format / HH:MM notation (e.g., `15:00`).
        """
        if day is not None:
            pulumi.set(__self__, "day", day)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter
    def day(self) -> Optional['MaintenancePolicyDay']:
        """
        The day of the maintenance window policy. May be one of `monday` through `sunday`, or `any` to indicate an arbitrary week day.
        """
        return pulumi.get(self, "day")

    @_builtins.property
    @pulumi.getter
    def duration(self) -> Optional[_builtins.str]:
        """
        The duration of the maintenance window policy in human-readable format.
        """
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        """
        The start time in UTC of the maintenance window policy in 24-hour clock format / HH:MM notation (e.g., `15:00`).
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class MetaMeta(dict):
    def __init__(__self__, *,
                 total: Optional[_builtins.int] = None):
        """
        :param _builtins.int total: Number of objects returned by the request.
        """
        if total is not None:
            pulumi.set(__self__, "total", total)

    @_builtins.property
    @pulumi.getter
    def total(self) -> Optional[_builtins.int]:
        """
        Number of objects returned by the request.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class Node(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "dropletId":
            suggest = "droplet_id"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Node. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Node.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Node.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 droplet_id: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 status: Optional['outputs.NodeStatusProperties'] = None,
                 updated_at: Optional[_builtins.str] = None):
        """
        :param _builtins.str created_at: A time value given in ISO8601 combined date and time format that represents when the node was created.
        :param _builtins.str droplet_id: The ID of the Droplet used for the worker node.
        :param _builtins.str id: A unique ID that can be used to identify and reference the node.
        :param _builtins.str name: An automatically generated, human-readable name for the node.
        :param 'NodeStatusProperties' status: An object containing a `state` attribute whose value is set to a string indicating the current status of the node.
        :param _builtins.str updated_at: A time value given in ISO8601 combined date and time format that represents when the node was last updated.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if droplet_id is not None:
            pulumi.set(__self__, "droplet_id", droplet_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        A time value given in ISO8601 combined date and time format that represents when the node was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dropletId")
    def droplet_id(self) -> Optional[_builtins.str]:
        """
        The ID of the Droplet used for the worker node.
        """
        return pulumi.get(self, "droplet_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        A unique ID that can be used to identify and reference the node.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        An automatically generated, human-readable name for the node.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional['outputs.NodeStatusProperties']:
        """
        An object containing a `state` attribute whose value is set to a string indicating the current status of the node.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        A time value given in ISO8601 combined date and time format that represents when the node was last updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class NodeStatusProperties(dict):
    """
    An object containing a `state` attribute whose value is set to a string indicating the current status of the node.
    """
    def __init__(__self__, *,
                 state: Optional['NodeStatusPropertiesState'] = None):
        """
        An object containing a `state` attribute whose value is set to a string indicating the current status of the node.
        :param 'NodeStatusPropertiesState' state: A string indicating the current status of the node.
        """
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional['NodeStatusPropertiesState']:
        """
        A string indicating the current status of the node.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class PageLinks(dict):
    def __init__(__self__, *,
                 pages: Optional['outputs.PageLinksPagesProperties'] = None):
        if pages is not None:
            pulumi.set(__self__, "pages", pages)

    @_builtins.property
    @pulumi.getter
    def pages(self) -> Optional['outputs.PageLinksPagesProperties']:
        return pulumi.get(self, "pages")


@pulumi.output_type
class PageLinksPagesProperties(dict):
    def __init__(__self__, *,
                 first: Optional[_builtins.str] = None,
                 last: Optional[_builtins.str] = None,
                 next: Optional[_builtins.str] = None,
                 prev: Optional[_builtins.str] = None):
        if first is not None:
            pulumi.set(__self__, "first", first)
        if last is not None:
            pulumi.set(__self__, "last", last)
        if next is not None:
            pulumi.set(__self__, "next", next)
        if prev is not None:
            pulumi.set(__self__, "prev", prev)

    @_builtins.property
    @pulumi.getter
    def first(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "first")

    @_builtins.property
    @pulumi.getter
    def last(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last")

    @_builtins.property
    @pulumi.getter
    def next(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "next")

    @_builtins.property
    @pulumi.getter
    def prev(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "prev")


@pulumi.output_type
class StatusProperties(dict):
    """
    An object containing a `state` attribute whose value is set to a string indicating the current status of the cluster.
    """
    def __init__(__self__, *,
                 message: Optional[_builtins.str] = None,
                 state: Optional['StatusPropertiesState'] = None):
        """
        An object containing a `state` attribute whose value is set to a string indicating the current status of the cluster.
        :param _builtins.str message: An optional message providing additional information about the current cluster state.
        :param 'StatusPropertiesState' state: A string indicating the current status of the cluster.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        """
        An optional message providing additional information about the current cluster state.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional['StatusPropertiesState']:
        """
        A string indicating the current status of the cluster.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class UserKubernetesClusterUserProperties(dict):
    def __init__(__self__, *,
                 groups: Optional[Sequence[_builtins.str]] = None,
                 username: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] groups: A list of in-cluster groups that the user belongs to.
        :param _builtins.str username: The username for the cluster admin user.
        """
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[Sequence[_builtins.str]]:
        """
        A list of in-cluster groups that the user belongs to.
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[_builtins.str]:
        """
        The username for the cluster admin user.
        """
        return pulumi.get(self, "username")


