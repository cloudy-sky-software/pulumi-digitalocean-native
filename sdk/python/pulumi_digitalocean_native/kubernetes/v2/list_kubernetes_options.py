# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
from ... import _utilities
from . import outputs

__all__ = [
    'KubernetesOptions',
    'AwaitableKubernetesOptions',
    'list_kubernetes_options',
    'list_kubernetes_options_output',
]

@pulumi.output_type
class KubernetesOptions:
    def __init__(__self__, options=None):
        if options and not isinstance(options, dict):
            raise TypeError("Expected argument 'options' to be a dict")
        pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.KubernetesOptionsOptionsProperties']:
        return pulumi.get(self, "options")


class AwaitableKubernetesOptions(KubernetesOptions):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return KubernetesOptions(
            options=self.options)


def list_kubernetes_options(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableKubernetesOptions:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:kubernetes/v2:listKubernetesOptions', __args__, opts=opts, typ=KubernetesOptions).value

    return AwaitableKubernetesOptions(
        options=pulumi.get(__ret__, 'options'))


@_utilities.lift_output_func(list_kubernetes_options)
def list_kubernetes_options_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[KubernetesOptions]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
