# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FunctionsTriggerArgs', 'FunctionsTrigger']

@pulumi.input_type
class FunctionsTriggerArgs:
    def __init__(__self__, *,
                 function: pulumi.Input[str],
                 is_enabled: pulumi.Input[bool],
                 scheduled_details: pulumi.Input['ScheduledDetailsArgs'],
                 type: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FunctionsTrigger resource.
        :param pulumi.Input[str] function: Name of function(action) that exists in the given namespace.
        :param pulumi.Input[bool] is_enabled: Indicates weather the trigger is paused or unpaused.
        :param pulumi.Input['ScheduledDetailsArgs'] scheduled_details: Trigger details for SCHEDULED type, where body is optional.
        :param pulumi.Input[str] type: One of different type of triggers. Currently only SCHEDULED is supported.
        :param pulumi.Input[str] name: The trigger's unique name within the namespace.
        :param pulumi.Input[str] namespace_id: The ID of the namespace to be managed.
        """
        pulumi.set(__self__, "function", function)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "scheduled_details", scheduled_details)
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)

    @property
    @pulumi.getter
    def function(self) -> pulumi.Input[str]:
        """
        Name of function(action) that exists in the given namespace.
        """
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: pulumi.Input[str]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        """
        Indicates weather the trigger is paused or unpaused.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="scheduledDetails")
    def scheduled_details(self) -> pulumi.Input['ScheduledDetailsArgs']:
        """
        Trigger details for SCHEDULED type, where body is optional.
        """
        return pulumi.get(self, "scheduled_details")

    @scheduled_details.setter
    def scheduled_details(self, value: pulumi.Input['ScheduledDetailsArgs']):
        pulumi.set(self, "scheduled_details", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        One of different type of triggers. Currently only SCHEDULED is supported.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The trigger's unique name within the namespace.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the namespace to be managed.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_id", value)


class FunctionsTrigger(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 function: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 scheduled_details: Optional[pulumi.Input[pulumi.InputType['ScheduledDetailsArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FunctionsTrigger resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] function: Name of function(action) that exists in the given namespace.
        :param pulumi.Input[bool] is_enabled: Indicates weather the trigger is paused or unpaused.
        :param pulumi.Input[str] name: The trigger's unique name within the namespace.
        :param pulumi.Input[str] namespace_id: The ID of the namespace to be managed.
        :param pulumi.Input[pulumi.InputType['ScheduledDetailsArgs']] scheduled_details: Trigger details for SCHEDULED type, where body is optional.
        :param pulumi.Input[str] type: One of different type of triggers. Currently only SCHEDULED is supported.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FunctionsTriggerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FunctionsTrigger resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FunctionsTriggerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FunctionsTriggerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 function: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 scheduled_details: Optional[pulumi.Input[pulumi.InputType['ScheduledDetailsArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FunctionsTriggerArgs.__new__(FunctionsTriggerArgs)

            if function is None and not opts.urn:
                raise TypeError("Missing required property 'function'")
            __props__.__dict__["function"] = function
            if is_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'is_enabled'")
            __props__.__dict__["is_enabled"] = is_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["namespace_id"] = namespace_id
            if scheduled_details is None and not opts.urn:
                raise TypeError("Missing required property 'scheduled_details'")
            __props__.__dict__["scheduled_details"] = scheduled_details
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["trigger"] = None
        super(FunctionsTrigger, __self__).__init__(
            'digitalocean-native:functions/v2:FunctionsTrigger',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'FunctionsTrigger':
        """
        Get an existing FunctionsTrigger resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = FunctionsTriggerArgs.__new__(FunctionsTriggerArgs)

        __props__.__dict__["function"] = None
        __props__.__dict__["is_enabled"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["scheduled_details"] = None
        __props__.__dict__["trigger"] = None
        __props__.__dict__["type"] = None
        return FunctionsTrigger(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def function(self) -> pulumi.Output[str]:
        """
        Name of function(action) that exists in the given namespace.
        """
        return pulumi.get(self, "function")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Output[bool]:
        """
        Indicates weather the trigger is paused or unpaused.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The trigger's unique name within the namespace.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scheduledDetails")
    def scheduled_details(self) -> pulumi.Output['outputs.ScheduledDetails']:
        """
        Trigger details for SCHEDULED type, where body is optional.
        """
        return pulumi.get(self, "scheduled_details")

    @property
    @pulumi.getter
    def trigger(self) -> pulumi.Output[Optional['outputs.TriggerInfo']]:
        return pulumi.get(self, "trigger")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        One of different type of triggers. Currently only SCHEDULED is supported.
        """
        return pulumi.get(self, "type")

