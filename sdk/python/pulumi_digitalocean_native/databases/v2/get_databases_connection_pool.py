# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
from ... import _utilities
from . import outputs

__all__ = [
    'GetDatabasesConnectionPoolProperties',
    'AwaitableGetDatabasesConnectionPoolProperties',
    'get_databases_connection_pool',
    'get_databases_connection_pool_output',
]

@pulumi.output_type
class GetDatabasesConnectionPoolProperties:
    def __init__(__self__, pool=None):
        if pool and not isinstance(pool, dict):
            raise TypeError("Expected argument 'pool' to be a dict")
        pulumi.set(__self__, "pool", pool)

    @property
    @pulumi.getter
    def pool(self) -> 'outputs.ConnectionPool':
        return pulumi.get(self, "pool")


class AwaitableGetDatabasesConnectionPoolProperties(GetDatabasesConnectionPoolProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabasesConnectionPoolProperties(
            pool=self.pool)


def get_databases_connection_pool(database_cluster_uuid: Optional[str] = None,
                                  pool_name: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabasesConnectionPoolProperties:
    """
    Use this data source to access information about an existing resource.

    :param str database_cluster_uuid: A unique identifier for a database cluster.
    :param str pool_name: The name used to identify the connection pool.
    """
    __args__ = dict()
    __args__['databaseClusterUuid'] = database_cluster_uuid
    __args__['poolName'] = pool_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:databases/v2:getDatabasesConnectionPool', __args__, opts=opts, typ=GetDatabasesConnectionPoolProperties).value

    return AwaitableGetDatabasesConnectionPoolProperties(
        pool=pulumi.get(__ret__, 'pool'))


@_utilities.lift_output_func(get_databases_connection_pool)
def get_databases_connection_pool_output(database_cluster_uuid: Optional[pulumi.Input[str]] = None,
                                         pool_name: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDatabasesConnectionPoolProperties]:
    """
    Use this data source to access information about an existing resource.

    :param str database_cluster_uuid: A unique identifier for a database cluster.
    :param str pool_name: The name used to identify the connection pool.
    """
    ...
