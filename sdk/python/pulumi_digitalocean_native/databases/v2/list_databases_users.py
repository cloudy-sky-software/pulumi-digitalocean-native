# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ListDatabasesUsersProperties',
    'AwaitableListDatabasesUsersProperties',
    'list_databases_users',
    'list_databases_users_output',
]

@pulumi.output_type
class ListDatabasesUsersProperties:
    def __init__(__self__, users=None):
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.DatabaseUser']]:
        return pulumi.get(self, "users")


class AwaitableListDatabasesUsersProperties(ListDatabasesUsersProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListDatabasesUsersProperties(
            users=self.users)


def list_databases_users(database_cluster_uuid: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListDatabasesUsersProperties:
    """
    Use this data source to access information about an existing resource.

    :param str database_cluster_uuid: A unique identifier for a database cluster.
    """
    __args__ = dict()
    __args__['databaseClusterUuid'] = database_cluster_uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:databases/v2:listDatabasesUsers', __args__, opts=opts, typ=ListDatabasesUsersProperties).value

    return AwaitableListDatabasesUsersProperties(
        users=pulumi.get(__ret__, 'users'))


@_utilities.lift_output_func(list_databases_users)
def list_databases_users_output(database_cluster_uuid: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ListDatabasesUsersProperties]:
    """
    Use this data source to access information about an existing resource.

    :param str database_cluster_uuid: A unique identifier for a database cluster.
    """
    ...
