# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
from ... import _utilities
from . import outputs

__all__ = [
    'ListDatabasesProperties',
    'AwaitableListDatabasesProperties',
    'list_databases',
    'list_databases_output',
]

@pulumi.output_type
class ListDatabasesProperties:
    def __init__(__self__, dbs=None):
        if dbs and not isinstance(dbs, list):
            raise TypeError("Expected argument 'dbs' to be a list")
        pulumi.set(__self__, "dbs", dbs)

    @property
    @pulumi.getter
    def dbs(self) -> Optional[Sequence['outputs.Database']]:
        return pulumi.get(self, "dbs")


class AwaitableListDatabasesProperties(ListDatabasesProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListDatabasesProperties(
            dbs=self.dbs)


def list_databases(database_cluster_uuid: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListDatabasesProperties:
    """
    Use this data source to access information about an existing resource.

    :param str database_cluster_uuid: A unique identifier for a database cluster.
    """
    __args__ = dict()
    __args__['databaseClusterUuid'] = database_cluster_uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:databases/v2:listDatabases', __args__, opts=opts, typ=ListDatabasesProperties).value

    return AwaitableListDatabasesProperties(
        dbs=pulumi.get(__ret__, 'dbs'))


@_utilities.lift_output_func(list_databases)
def list_databases_output(database_cluster_uuid: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ListDatabasesProperties]:
    """
    Use this data source to access information about an existing resource.

    :param str database_cluster_uuid: A unique identifier for a database cluster.
    """
    ...
