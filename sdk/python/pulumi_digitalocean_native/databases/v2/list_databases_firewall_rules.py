# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ListDatabasesFirewallRulesProperties',
    'AwaitableListDatabasesFirewallRulesProperties',
    'list_databases_firewall_rules',
    'list_databases_firewall_rules_output',
]

@pulumi.output_type
class ListDatabasesFirewallRulesProperties:
    def __init__(__self__, rules=None):
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.FirewallRule']]:
        return pulumi.get(self, "rules")


class AwaitableListDatabasesFirewallRulesProperties(ListDatabasesFirewallRulesProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListDatabasesFirewallRulesProperties(
            rules=self.rules)


def list_databases_firewall_rules(database_cluster_uuid: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListDatabasesFirewallRulesProperties:
    """
    Use this data source to access information about an existing resource.

    :param str database_cluster_uuid: A unique identifier for a database cluster.
    """
    __args__ = dict()
    __args__['databaseClusterUuid'] = database_cluster_uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:databases/v2:listDatabasesFirewallRules', __args__, opts=opts, typ=ListDatabasesFirewallRulesProperties).value

    return AwaitableListDatabasesFirewallRulesProperties(
        rules=pulumi.get(__ret__, 'rules'))


@_utilities.lift_output_func(list_databases_firewall_rules)
def list_databases_firewall_rules_output(database_cluster_uuid: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ListDatabasesFirewallRulesProperties]:
    """
    Use this data source to access information about an existing resource.

    :param str database_cluster_uuid: A unique identifier for a database cluster.
    """
    ...
