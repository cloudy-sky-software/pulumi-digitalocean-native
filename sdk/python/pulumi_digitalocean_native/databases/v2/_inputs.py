# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'ConnectionArgs',
    'ConnectionArgsDict',
    'DatabaseBackupArgs',
    'DatabaseBackupArgsDict',
    'DatabaseClusterConnectionArgs',
    'DatabaseClusterConnectionArgsDict',
    'DatabaseClusterMaintenanceWindowArgs',
    'DatabaseClusterMaintenanceWindowArgsDict',
    'DatabaseClusterPrivateConnectionArgs',
    'DatabaseClusterPrivateConnectionArgsDict',
    'DatabaseReplicaConnectionArgs',
    'DatabaseReplicaConnectionArgsDict',
    'DatabaseReplicaPrivateConnectionArgs',
    'DatabaseReplicaPrivateConnectionArgsDict',
    'DatabaseUserArgs',
    'DatabaseUserArgsDict',
    'FirewallRuleArgs',
    'FirewallRuleArgsDict',
    'MysqlSettingsArgs',
    'MysqlSettingsArgsDict',
    'PrivateConnectionArgs',
    'PrivateConnectionArgsDict',
    'SourcePropertiesArgs',
    'SourcePropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class ConnectionArgsDict(TypedDict):
        database: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of the default database.
        """
        host: NotRequired[pulumi.Input[builtins.str]]
        """
        The FQDN pointing to the database cluster's current primary node.
        """
        password: NotRequired[pulumi.Input[builtins.str]]
        """
        The randomly generated password for the default user.
        """
        port: NotRequired[pulumi.Input[builtins.int]]
        """
        The port on which the database cluster is listening.
        """
        ssl: NotRequired[pulumi.Input[builtins.bool]]
        """
        A boolean value indicating if the connection should be made over SSL.
        """
        uri: NotRequired[pulumi.Input[builtins.str]]
        """
        A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        """
        user: NotRequired[pulumi.Input[builtins.str]]
        """
        The default user for the database.
        """
elif False:
    ConnectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionArgs:
    def __init__(__self__, *,
                 database: Optional[pulumi.Input[builtins.str]] = None,
                 host: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 ssl: Optional[pulumi.Input[builtins.bool]] = None,
                 uri: Optional[pulumi.Input[builtins.str]] = None,
                 user: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] database: The name of the default database.
        :param pulumi.Input[builtins.str] host: The FQDN pointing to the database cluster's current primary node.
        :param pulumi.Input[builtins.str] password: The randomly generated password for the default user.
        :param pulumi.Input[builtins.int] port: The port on which the database cluster is listening.
        :param pulumi.Input[builtins.bool] ssl: A boolean value indicating if the connection should be made over SSL.
        :param pulumi.Input[builtins.str] uri: A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        :param pulumi.Input[builtins.str] user: The default user for the database.
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the default database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The FQDN pointing to the database cluster's current primary node.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The randomly generated password for the default user.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The port on which the database cluster is listening.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A boolean value indicating if the connection should be made over SSL.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The default user for the database.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class DatabaseBackupArgsDict(TypedDict):
        database_name: pulumi.Input[builtins.str]
        """
        The name of an existing database cluster from which the backup will be restored.
        """
        backup_created_at: NotRequired[pulumi.Input[builtins.str]]
        """
        The timestamp of an existing database cluster backup in ISO8601 combined date and time format. The most recent backup will be used if excluded.
        """
elif False:
    DatabaseBackupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseBackupArgs:
    def __init__(__self__, *,
                 database_name: pulumi.Input[builtins.str],
                 backup_created_at: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] database_name: The name of an existing database cluster from which the backup will be restored.
        :param pulumi.Input[builtins.str] backup_created_at: The timestamp of an existing database cluster backup in ISO8601 combined date and time format. The most recent backup will be used if excluded.
        """
        pulumi.set(__self__, "database_name", database_name)
        if backup_created_at is not None:
            pulumi.set(__self__, "backup_created_at", backup_created_at)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of an existing database cluster from which the backup will be restored.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="backupCreatedAt")
    def backup_created_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The timestamp of an existing database cluster backup in ISO8601 combined date and time format. The most recent backup will be used if excluded.
        """
        return pulumi.get(self, "backup_created_at")

    @backup_created_at.setter
    def backup_created_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "backup_created_at", value)


if not MYPY:
    class DatabaseClusterConnectionArgsDict(TypedDict):
        database: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of the default database.
        """
        host: NotRequired[pulumi.Input[builtins.str]]
        """
        The FQDN pointing to the database cluster's current primary node.
        """
        password: NotRequired[pulumi.Input[builtins.str]]
        """
        The randomly generated password for the default user.
        """
        port: NotRequired[pulumi.Input[builtins.int]]
        """
        The port on which the database cluster is listening.
        """
        ssl: NotRequired[pulumi.Input[builtins.bool]]
        """
        A boolean value indicating if the connection should be made over SSL.
        """
        uri: NotRequired[pulumi.Input[builtins.str]]
        """
        A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        """
        user: NotRequired[pulumi.Input[builtins.str]]
        """
        The default user for the database.
        """
elif False:
    DatabaseClusterConnectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseClusterConnectionArgs:
    def __init__(__self__, *,
                 database: Optional[pulumi.Input[builtins.str]] = None,
                 host: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 ssl: Optional[pulumi.Input[builtins.bool]] = None,
                 uri: Optional[pulumi.Input[builtins.str]] = None,
                 user: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] database: The name of the default database.
        :param pulumi.Input[builtins.str] host: The FQDN pointing to the database cluster's current primary node.
        :param pulumi.Input[builtins.str] password: The randomly generated password for the default user.
        :param pulumi.Input[builtins.int] port: The port on which the database cluster is listening.
        :param pulumi.Input[builtins.bool] ssl: A boolean value indicating if the connection should be made over SSL.
        :param pulumi.Input[builtins.str] uri: A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        :param pulumi.Input[builtins.str] user: The default user for the database.
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the default database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The FQDN pointing to the database cluster's current primary node.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The randomly generated password for the default user.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The port on which the database cluster is listening.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A boolean value indicating if the connection should be made over SSL.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The default user for the database.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class DatabaseClusterMaintenanceWindowArgsDict(TypedDict):
        day: pulumi.Input[builtins.str]
        """
        The day of the week on which to apply maintenance updates.
        """
        hour: pulumi.Input[builtins.str]
        """
        The hour in UTC at which maintenance updates will be applied in 24 hour format.
        """
        description: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        A list of strings, each containing information about a pending maintenance update.
        """
        pending: NotRequired[pulumi.Input[builtins.bool]]
        """
        A boolean value indicating whether any maintenance is scheduled to be performed in the next window.
        """
elif False:
    DatabaseClusterMaintenanceWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseClusterMaintenanceWindowArgs:
    def __init__(__self__, *,
                 day: pulumi.Input[builtins.str],
                 hour: pulumi.Input[builtins.str],
                 description: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 pending: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] day: The day of the week on which to apply maintenance updates.
        :param pulumi.Input[builtins.str] hour: The hour in UTC at which maintenance updates will be applied in 24 hour format.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] description: A list of strings, each containing information about a pending maintenance update.
        :param pulumi.Input[builtins.bool] pending: A boolean value indicating whether any maintenance is scheduled to be performed in the next window.
        """
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "hour", hour)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if pending is not None:
            pulumi.set(__self__, "pending", pending)

    @property
    @pulumi.getter
    def day(self) -> pulumi.Input[builtins.str]:
        """
        The day of the week on which to apply maintenance updates.
        """
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "day", value)

    @property
    @pulumi.getter
    def hour(self) -> pulumi.Input[builtins.str]:
        """
        The hour in UTC at which maintenance updates will be applied in 24 hour format.
        """
        return pulumi.get(self, "hour")

    @hour.setter
    def hour(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "hour", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        A list of strings, each containing information about a pending maintenance update.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def pending(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A boolean value indicating whether any maintenance is scheduled to be performed in the next window.
        """
        return pulumi.get(self, "pending")

    @pending.setter
    def pending(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "pending", value)


if not MYPY:
    class DatabaseClusterPrivateConnectionArgsDict(TypedDict):
        database: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of the default database.
        """
        host: NotRequired[pulumi.Input[builtins.str]]
        """
        The FQDN pointing to the database cluster's current primary node.
        """
        password: NotRequired[pulumi.Input[builtins.str]]
        """
        The randomly generated password for the default user.
        """
        port: NotRequired[pulumi.Input[builtins.int]]
        """
        The port on which the database cluster is listening.
        """
        ssl: NotRequired[pulumi.Input[builtins.bool]]
        """
        A boolean value indicating if the connection should be made over SSL.
        """
        uri: NotRequired[pulumi.Input[builtins.str]]
        """
        A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        """
        user: NotRequired[pulumi.Input[builtins.str]]
        """
        The default user for the database.
        """
elif False:
    DatabaseClusterPrivateConnectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseClusterPrivateConnectionArgs:
    def __init__(__self__, *,
                 database: Optional[pulumi.Input[builtins.str]] = None,
                 host: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 ssl: Optional[pulumi.Input[builtins.bool]] = None,
                 uri: Optional[pulumi.Input[builtins.str]] = None,
                 user: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] database: The name of the default database.
        :param pulumi.Input[builtins.str] host: The FQDN pointing to the database cluster's current primary node.
        :param pulumi.Input[builtins.str] password: The randomly generated password for the default user.
        :param pulumi.Input[builtins.int] port: The port on which the database cluster is listening.
        :param pulumi.Input[builtins.bool] ssl: A boolean value indicating if the connection should be made over SSL.
        :param pulumi.Input[builtins.str] uri: A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        :param pulumi.Input[builtins.str] user: The default user for the database.
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the default database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The FQDN pointing to the database cluster's current primary node.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The randomly generated password for the default user.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The port on which the database cluster is listening.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A boolean value indicating if the connection should be made over SSL.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The default user for the database.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class DatabaseReplicaConnectionArgsDict(TypedDict):
        database: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of the default database.
        """
        host: NotRequired[pulumi.Input[builtins.str]]
        """
        The FQDN pointing to the database cluster's current primary node.
        """
        password: NotRequired[pulumi.Input[builtins.str]]
        """
        The randomly generated password for the default user.
        """
        port: NotRequired[pulumi.Input[builtins.int]]
        """
        The port on which the database cluster is listening.
        """
        ssl: NotRequired[pulumi.Input[builtins.bool]]
        """
        A boolean value indicating if the connection should be made over SSL.
        """
        uri: NotRequired[pulumi.Input[builtins.str]]
        """
        A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        """
        user: NotRequired[pulumi.Input[builtins.str]]
        """
        The default user for the database.
        """
elif False:
    DatabaseReplicaConnectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseReplicaConnectionArgs:
    def __init__(__self__, *,
                 database: Optional[pulumi.Input[builtins.str]] = None,
                 host: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 ssl: Optional[pulumi.Input[builtins.bool]] = None,
                 uri: Optional[pulumi.Input[builtins.str]] = None,
                 user: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] database: The name of the default database.
        :param pulumi.Input[builtins.str] host: The FQDN pointing to the database cluster's current primary node.
        :param pulumi.Input[builtins.str] password: The randomly generated password for the default user.
        :param pulumi.Input[builtins.int] port: The port on which the database cluster is listening.
        :param pulumi.Input[builtins.bool] ssl: A boolean value indicating if the connection should be made over SSL.
        :param pulumi.Input[builtins.str] uri: A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        :param pulumi.Input[builtins.str] user: The default user for the database.
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the default database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The FQDN pointing to the database cluster's current primary node.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The randomly generated password for the default user.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The port on which the database cluster is listening.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A boolean value indicating if the connection should be made over SSL.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The default user for the database.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class DatabaseReplicaPrivateConnectionArgsDict(TypedDict):
        database: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of the default database.
        """
        host: NotRequired[pulumi.Input[builtins.str]]
        """
        The FQDN pointing to the database cluster's current primary node.
        """
        password: NotRequired[pulumi.Input[builtins.str]]
        """
        The randomly generated password for the default user.
        """
        port: NotRequired[pulumi.Input[builtins.int]]
        """
        The port on which the database cluster is listening.
        """
        ssl: NotRequired[pulumi.Input[builtins.bool]]
        """
        A boolean value indicating if the connection should be made over SSL.
        """
        uri: NotRequired[pulumi.Input[builtins.str]]
        """
        A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        """
        user: NotRequired[pulumi.Input[builtins.str]]
        """
        The default user for the database.
        """
elif False:
    DatabaseReplicaPrivateConnectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseReplicaPrivateConnectionArgs:
    def __init__(__self__, *,
                 database: Optional[pulumi.Input[builtins.str]] = None,
                 host: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 ssl: Optional[pulumi.Input[builtins.bool]] = None,
                 uri: Optional[pulumi.Input[builtins.str]] = None,
                 user: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] database: The name of the default database.
        :param pulumi.Input[builtins.str] host: The FQDN pointing to the database cluster's current primary node.
        :param pulumi.Input[builtins.str] password: The randomly generated password for the default user.
        :param pulumi.Input[builtins.int] port: The port on which the database cluster is listening.
        :param pulumi.Input[builtins.bool] ssl: A boolean value indicating if the connection should be made over SSL.
        :param pulumi.Input[builtins.str] uri: A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        :param pulumi.Input[builtins.str] user: The default user for the database.
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the default database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The FQDN pointing to the database cluster's current primary node.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The randomly generated password for the default user.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The port on which the database cluster is listening.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A boolean value indicating if the connection should be made over SSL.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The default user for the database.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class DatabaseUserArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        The name of a database user.
        """
        mysql_settings: NotRequired[pulumi.Input['MysqlSettingsArgsDict']]
        password: NotRequired[pulumi.Input[builtins.str]]
        """
        A randomly generated password for the database user.
        """
        role: NotRequired[pulumi.Input['DatabaseUserRole']]
        """
        A string representing the database user's role. The value will be either
        "primary" or "normal".
        """
elif False:
    DatabaseUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseUserArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 mysql_settings: Optional[pulumi.Input['MysqlSettingsArgs']] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 role: Optional[pulumi.Input['DatabaseUserRole']] = None):
        """
        :param pulumi.Input[builtins.str] name: The name of a database user.
        :param pulumi.Input[builtins.str] password: A randomly generated password for the database user.
        :param pulumi.Input['DatabaseUserRole'] role: A string representing the database user's role. The value will be either
               "primary" or "normal".
        """
        pulumi.set(__self__, "name", name)
        if mysql_settings is not None:
            pulumi.set(__self__, "mysql_settings", mysql_settings)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The name of a database user.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mysqlSettings")
    def mysql_settings(self) -> Optional[pulumi.Input['MysqlSettingsArgs']]:
        return pulumi.get(self, "mysql_settings")

    @mysql_settings.setter
    def mysql_settings(self, value: Optional[pulumi.Input['MysqlSettingsArgs']]):
        pulumi.set(self, "mysql_settings", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A randomly generated password for the database user.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input['DatabaseUserRole']]:
        """
        A string representing the database user's role. The value will be either
        "primary" or "normal".
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input['DatabaseUserRole']]):
        pulumi.set(self, "role", value)


if not MYPY:
    class FirewallRuleArgsDict(TypedDict):
        type: pulumi.Input['FirewallRuleType']
        """
        The type of resource that the firewall rule allows to access the database cluster.
        """
        value: pulumi.Input[builtins.str]
        """
        The ID of the specific resource, the name of a tag applied to a group of resources, or the IP address that the firewall rule allows to access the database cluster.
        """
        cluster_uuid: NotRequired[pulumi.Input[builtins.str]]
        """
        A unique ID for the database cluster to which the rule is applied.
        """
        created_at: NotRequired[pulumi.Input[builtins.str]]
        """
        A time value given in ISO8601 combined date and time format that represents when the firewall rule was created.
        """
        uuid: NotRequired[pulumi.Input[builtins.str]]
        """
        A unique ID for the firewall rule itself.
        """
elif False:
    FirewallRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FirewallRuleArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['FirewallRuleType'],
                 value: pulumi.Input[builtins.str],
                 cluster_uuid: Optional[pulumi.Input[builtins.str]] = None,
                 created_at: Optional[pulumi.Input[builtins.str]] = None,
                 uuid: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input['FirewallRuleType'] type: The type of resource that the firewall rule allows to access the database cluster.
        :param pulumi.Input[builtins.str] value: The ID of the specific resource, the name of a tag applied to a group of resources, or the IP address that the firewall rule allows to access the database cluster.
        :param pulumi.Input[builtins.str] cluster_uuid: A unique ID for the database cluster to which the rule is applied.
        :param pulumi.Input[builtins.str] created_at: A time value given in ISO8601 combined date and time format that represents when the firewall rule was created.
        :param pulumi.Input[builtins.str] uuid: A unique ID for the firewall rule itself.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if cluster_uuid is not None:
            pulumi.set(__self__, "cluster_uuid", cluster_uuid)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['FirewallRuleType']:
        """
        The type of resource that the firewall rule allows to access the database cluster.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['FirewallRuleType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        The ID of the specific resource, the name of a tag applied to a group of resources, or the IP address that the firewall rule allows to access the database cluster.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="clusterUuid")
    def cluster_uuid(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A unique ID for the database cluster to which the rule is applied.
        """
        return pulumi.get(self, "cluster_uuid")

    @cluster_uuid.setter
    def cluster_uuid(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cluster_uuid", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A time value given in ISO8601 combined date and time format that represents when the firewall rule was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A unique ID for the firewall rule itself.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uuid", value)


if not MYPY:
    class MysqlSettingsArgsDict(TypedDict):
        auth_plugin: pulumi.Input['MysqlSettingsAuthPlugin']
        """
        A string specifying the authentication method to be used for connections
        to the MySQL user account. The valid values are `mysql_native_password`
        or `caching_sha2_password`. If excluded when creating a new user, the
        default for the version of MySQL in use will be used. As of MySQL 8.0, the
        default is `caching_sha2_password`.
        """
elif False:
    MysqlSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MysqlSettingsArgs:
    def __init__(__self__, *,
                 auth_plugin: pulumi.Input['MysqlSettingsAuthPlugin']):
        """
        :param pulumi.Input['MysqlSettingsAuthPlugin'] auth_plugin: A string specifying the authentication method to be used for connections
               to the MySQL user account. The valid values are `mysql_native_password`
               or `caching_sha2_password`. If excluded when creating a new user, the
               default for the version of MySQL in use will be used. As of MySQL 8.0, the
               default is `caching_sha2_password`.
        """
        pulumi.set(__self__, "auth_plugin", auth_plugin)

    @property
    @pulumi.getter(name="authPlugin")
    def auth_plugin(self) -> pulumi.Input['MysqlSettingsAuthPlugin']:
        """
        A string specifying the authentication method to be used for connections
        to the MySQL user account. The valid values are `mysql_native_password`
        or `caching_sha2_password`. If excluded when creating a new user, the
        default for the version of MySQL in use will be used. As of MySQL 8.0, the
        default is `caching_sha2_password`.
        """
        return pulumi.get(self, "auth_plugin")

    @auth_plugin.setter
    def auth_plugin(self, value: pulumi.Input['MysqlSettingsAuthPlugin']):
        pulumi.set(self, "auth_plugin", value)


if not MYPY:
    class PrivateConnectionArgsDict(TypedDict):
        database: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of the default database.
        """
        host: NotRequired[pulumi.Input[builtins.str]]
        """
        The FQDN pointing to the database cluster's current primary node.
        """
        password: NotRequired[pulumi.Input[builtins.str]]
        """
        The randomly generated password for the default user.
        """
        port: NotRequired[pulumi.Input[builtins.int]]
        """
        The port on which the database cluster is listening.
        """
        ssl: NotRequired[pulumi.Input[builtins.bool]]
        """
        A boolean value indicating if the connection should be made over SSL.
        """
        uri: NotRequired[pulumi.Input[builtins.str]]
        """
        A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        """
        user: NotRequired[pulumi.Input[builtins.str]]
        """
        The default user for the database.
        """
elif False:
    PrivateConnectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateConnectionArgs:
    def __init__(__self__, *,
                 database: Optional[pulumi.Input[builtins.str]] = None,
                 host: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 ssl: Optional[pulumi.Input[builtins.bool]] = None,
                 uri: Optional[pulumi.Input[builtins.str]] = None,
                 user: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] database: The name of the default database.
        :param pulumi.Input[builtins.str] host: The FQDN pointing to the database cluster's current primary node.
        :param pulumi.Input[builtins.str] password: The randomly generated password for the default user.
        :param pulumi.Input[builtins.int] port: The port on which the database cluster is listening.
        :param pulumi.Input[builtins.bool] ssl: A boolean value indicating if the connection should be made over SSL.
        :param pulumi.Input[builtins.str] uri: A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        :param pulumi.Input[builtins.str] user: The default user for the database.
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the default database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The FQDN pointing to the database cluster's current primary node.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The randomly generated password for the default user.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The port on which the database cluster is listening.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A boolean value indicating if the connection should be made over SSL.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The default user for the database.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class SourcePropertiesArgsDict(TypedDict):
        dbname: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of the default database.
        """
        host: NotRequired[pulumi.Input[builtins.str]]
        """
        The FQDN pointing to the database cluster's current primary node.
        """
        password: NotRequired[pulumi.Input[builtins.str]]
        """
        The randomly generated password for the default user.
        """
        port: NotRequired[pulumi.Input[builtins.int]]
        """
        The port on which the database cluster is listening.
        """
        username: NotRequired[pulumi.Input[builtins.str]]
        """
        The default user for the database.
        """
elif False:
    SourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SourcePropertiesArgs:
    def __init__(__self__, *,
                 dbname: Optional[pulumi.Input[builtins.str]] = None,
                 host: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] dbname: The name of the default database.
        :param pulumi.Input[builtins.str] host: The FQDN pointing to the database cluster's current primary node.
        :param pulumi.Input[builtins.str] password: The randomly generated password for the default user.
        :param pulumi.Input[builtins.int] port: The port on which the database cluster is listening.
        :param pulumi.Input[builtins.str] username: The default user for the database.
        """
        if dbname is not None:
            pulumi.set(__self__, "dbname", dbname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def dbname(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the default database.
        """
        return pulumi.get(self, "dbname")

    @dbname.setter
    def dbname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dbname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The FQDN pointing to the database cluster's current primary node.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The randomly generated password for the default user.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The port on which the database cluster is listening.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The default user for the database.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "username", value)


