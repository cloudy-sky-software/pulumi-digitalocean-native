# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
from ... import _utilities

__all__ = [
    'SqlMode',
    'AwaitableSqlMode',
    'get_databases_sql_mode',
    'get_databases_sql_mode_output',
]

@pulumi.output_type
class SqlMode:
    def __init__(__self__, sql_mode=None):
        if sql_mode and not isinstance(sql_mode, str):
            raise TypeError("Expected argument 'sql_mode' to be a str")
        pulumi.set(__self__, "sql_mode", sql_mode)

    @property
    @pulumi.getter(name="sqlMode")
    def sql_mode(self) -> str:
        """
        A string specifying the configured SQL modes for the MySQL cluster.
        """
        return pulumi.get(self, "sql_mode")


class AwaitableSqlMode(SqlMode):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return SqlMode(
            sql_mode=self.sql_mode)


def get_databases_sql_mode(database_cluster_uuid: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableSqlMode:
    """
    Use this data source to access information about an existing resource.

    :param str database_cluster_uuid: A unique identifier for a database cluster.
    """
    __args__ = dict()
    __args__['databaseClusterUuid'] = database_cluster_uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:databases/v2:getDatabasesSqlMode', __args__, opts=opts, typ=SqlMode).value

    return AwaitableSqlMode(
        sql_mode=pulumi.get(__ret__, 'sql_mode'))


@_utilities.lift_output_func(get_databases_sql_mode)
def get_databases_sql_mode_output(database_cluster_uuid: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[SqlMode]:
    """
    Use this data source to access information about an existing resource.

    :param str database_cluster_uuid: A unique identifier for a database cluster.
    """
    ...
