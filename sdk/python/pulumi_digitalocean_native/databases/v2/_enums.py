# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'CreategresDefaultToastCompression',
    'CreategresLogErrorVerbosity',
    'CreategresLogLinePrefix',
    'CreategresPgStatStatementsTrack',
    'CreategresSynchronousReplication',
    'CreategresTrackCommitTimestamp',
    'CreategresTrackFunctions',
    'CreategresTrackIoTiming',
    'DatabaseClusterEngine',
    'DatabaseClusterStatus',
    'DatabaseReplicaStatus',
    'DatabaseUserRole',
    'EvictionPolicy',
    'FirewallRuleType',
    'GetDatabasesEvictionPolicyPropertiesEvictionPolicy',
    'MysqlInternalTmpMemStorageEngine',
    'MysqlSettingsAuthPlugin',
    'OnlineMigrationStatus',
    'PgbouncerAutodbPoolMode',
    'PgbouncerIgnoreStartupParametersItem',
    'RedisRedisAclChannelsDefault',
    'RedisRedisMaxmemoryPolicy',
    'RedisRedisPersistence',
]


class CreategresDefaultToastCompression(str, Enum):
    """
    Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
    """
    LZ4 = "lz4"
    PGLZ = "pglz"


class CreategresLogErrorVerbosity(str, Enum):
    """
    Controls the amount of detail written in the server log for each message that is logged.
    """
    TERSE = "TERSE"
    DEFAULT = "DEFAULT"
    VERBOSE = "VERBOSE"


class CreategresLogLinePrefix(str, Enum):
    """
    Selects one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze, etc.
    """
    PIDPUSERUDBDAPPACLIENTH = "pid=%p,user=%u,db=%d,app=%a,client=%h"
    MPQUSERUDBDAPPA = "%m [%p] %q[user=%u,db=%d,app=%a]"
    TPL1_USERUDBDAPPACLIENTH = "%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h"


class CreategresPgStatStatementsTrack(str, Enum):
    """
    Controls which statements are counted. Specify 'top' to track top-level statements (those issued directly by clients), 'all' to also track nested statements (such as statements invoked within functions), or 'none' to disable statement statistics collection. The default value is top.
    """
    ALL = "all"
    TOP = "top"
    NONE = "none"


class CreategresSynchronousReplication(str, Enum):
    """
    Synchronous replication type. Note that the service plan also needs to support synchronous replication.
    """
    OFF = "off"
    QUORUM = "quorum"


class CreategresTrackCommitTimestamp(str, Enum):
    """
    Record commit time of transactions.
    """
    OFF = "off"
    ON = "on"


class CreategresTrackFunctions(str, Enum):
    """
    Enables tracking of function call counts and time used.
    """
    ALL = "all"
    PL = "pl"
    NONE = "none"


class CreategresTrackIoTiming(str, Enum):
    """
    Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
    """
    OFF = "off"
    ON = "on"


class DatabaseClusterEngine(str, Enum):
    """
    A slug representing the database engine used for the cluster. The possible values are: "pg" for PostgreSQL, "mysql" for MySQL, "redis" for Redis, and "mongodb" for MongoDB.
    """
    PG = "pg"
    MYSQL = "mysql"
    REDIS = "redis"
    MONGODB = "mongodb"


class DatabaseClusterStatus(str, Enum):
    """
    A string representing the current status of the database cluster.
    """
    CREATING = "creating"
    ONLINE = "online"
    RESIZING = "resizing"
    MIGRATING = "migrating"
    FORKING = "forking"


class DatabaseReplicaStatus(str, Enum):
    """
    A string representing the current status of the database cluster.
    """
    CREATING = "creating"
    ONLINE = "online"
    RESIZING = "resizing"
    MIGRATING = "migrating"
    FORKING = "forking"


class DatabaseUserRole(str, Enum):
    """
    A string representing the database user's role. The value will be either
    "primary" or "normal".
    """
    PRIMARY = "primary"
    NORMAL = "normal"


class EvictionPolicy(str, Enum):
    """
    A string specifying the desired eviction policy for the Redis cluster.

    - `noeviction`: Don't evict any data, returns error when memory limit is reached.
    - `allkeys_lru:` Evict any key, least recently used (LRU) first.
    - `allkeys_random`: Evict keys in a random order.
    - `volatile_lru`: Evict keys with expiration only, least recently used (LRU) first.
    - `volatile_random`: Evict keys with expiration only in a random order.
    - `volatile_ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.
    """
    NOEVICTION = "noeviction"
    ALLKEYS_LRU = "allkeys_lru"
    ALLKEYS_RANDOM = "allkeys_random"
    VOLATILE_LRU = "volatile_lru"
    VOLATILE_RANDOM = "volatile_random"
    VOLATILE_TTL = "volatile_ttl"


class FirewallRuleType(str, Enum):
    """
    The type of resource that the firewall rule allows to access the database cluster.
    """
    DROPLET = "droplet"
    K8S = "k8s"
    IP_ADDR = "ip_addr"
    TAG = "tag"
    APP = "app"


class GetDatabasesEvictionPolicyPropertiesEvictionPolicy(str, Enum):
    """
    A string specifying the desired eviction policy for the Redis cluster.

    - `noeviction`: Don't evict any data, returns error when memory limit is reached.
    - `allkeys_lru:` Evict any key, least recently used (LRU) first.
    - `allkeys_random`: Evict keys in a random order.
    - `volatile_lru`: Evict keys with expiration only, least recently used (LRU) first.
    - `volatile_random`: Evict keys with expiration only in a random order.
    - `volatile_ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.
    """
    NOEVICTION = "noeviction"
    ALLKEYS_LRU = "allkeys_lru"
    ALLKEYS_RANDOM = "allkeys_random"
    VOLATILE_LRU = "volatile_lru"
    VOLATILE_RANDOM = "volatile_random"
    VOLATILE_TTL = "volatile_ttl"


class MysqlInternalTmpMemStorageEngine(str, Enum):
    """
    The storage engine for in-memory internal temporary tables.
    """
    TEMP_TABLE = "TempTable"
    MEMORY = "MEMORY"


class MysqlSettingsAuthPlugin(str, Enum):
    """
    A string specifying the authentication method to be used for connections
    to the MySQL user account. The valid values are `mysql_native_password`
    or `caching_sha2_password`. If excluded when creating a new user, the
    default for the version of MySQL in use will be used. As of MySQL 8.0, the
    default is `caching_sha2_password`.
    """
    MYSQL_NATIVE_PASSWORD = "mysql_native_password"
    CACHING_SHA2_PASSWORD = "caching_sha2_password"


class OnlineMigrationStatus(str, Enum):
    """
    The current status of the migration.
    """
    RUNNING = "running"
    CANCELED = "canceled"
    ERROR = "error"
    DONE = "done"


class PgbouncerAutodbPoolMode(str, Enum):
    """
    PGBouncer pool mode
    """
    SESSION = "session"
    TRANSACTION = "transaction"
    STATEMENT = "statement"


class PgbouncerIgnoreStartupParametersItem(str, Enum):
    """
    Enum of parameters to ignore when given in startup packet.
    """
    EXTRA_FLOAT_DIGITS = "extra_float_digits"
    SEARCH_PATH = "search_path"


class RedisRedisAclChannelsDefault(str, Enum):
    """
    Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn't affect Redis configuration acl-pubsub-default.
    """
    ALLCHANNELS = "allchannels"
    RESETCHANNELS = "resetchannels"


class RedisRedisMaxmemoryPolicy(str, Enum):
    """
    A string specifying the desired eviction policy for the Redis cluster.

    - `noeviction`: Don't evict any data, returns error when memory limit is reached.
    - `allkeys_lru:` Evict any key, least recently used (LRU) first.
    - `allkeys_random`: Evict keys in a random order.
    - `volatile_lru`: Evict keys with expiration only, least recently used (LRU) first.
    - `volatile_random`: Evict keys with expiration only in a random order.
    - `volatile_ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.
    """
    NOEVICTION = "noeviction"
    ALLKEYS_LRU = "allkeys_lru"
    ALLKEYS_RANDOM = "allkeys_random"
    VOLATILE_LRU = "volatile_lru"
    VOLATILE_RANDOM = "volatile_random"
    VOLATILE_TTL = "volatile_ttl"


class RedisRedisPersistence(str, Enum):
    """
    When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
    """
    OFF = "off"
    RDB = "rdb"
