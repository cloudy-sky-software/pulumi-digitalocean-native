# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = ['DatabasesMaintenanceWindowArgs', 'DatabasesMaintenanceWindow']

@pulumi.input_type
class DatabasesMaintenanceWindowArgs:
    def __init__(__self__, *,
                 day: pulumi.Input[str],
                 hour: pulumi.Input[str],
                 database_cluster_uuid: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DatabasesMaintenanceWindow resource.
        :param pulumi.Input[str] day: The day of the week on which to apply maintenance updates.
        :param pulumi.Input[str] hour: The hour in UTC at which maintenance updates will be applied in 24 hour format.
        :param pulumi.Input[str] database_cluster_uuid: A unique identifier for a database cluster.
        """
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "hour", hour)
        if database_cluster_uuid is not None:
            pulumi.set(__self__, "database_cluster_uuid", database_cluster_uuid)

    @property
    @pulumi.getter
    def day(self) -> pulumi.Input[str]:
        """
        The day of the week on which to apply maintenance updates.
        """
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: pulumi.Input[str]):
        pulumi.set(self, "day", value)

    @property
    @pulumi.getter
    def hour(self) -> pulumi.Input[str]:
        """
        The hour in UTC at which maintenance updates will be applied in 24 hour format.
        """
        return pulumi.get(self, "hour")

    @hour.setter
    def hour(self, value: pulumi.Input[str]):
        pulumi.set(self, "hour", value)

    @property
    @pulumi.getter(name="databaseClusterUuid")
    def database_cluster_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for a database cluster.
        """
        return pulumi.get(self, "database_cluster_uuid")

    @database_cluster_uuid.setter
    def database_cluster_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_cluster_uuid", value)


class DatabasesMaintenanceWindow(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database_cluster_uuid: Optional[pulumi.Input[str]] = None,
                 day: Optional[pulumi.Input[str]] = None,
                 hour: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a DatabasesMaintenanceWindow resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] database_cluster_uuid: A unique identifier for a database cluster.
        :param pulumi.Input[str] day: The day of the week on which to apply maintenance updates.
        :param pulumi.Input[str] hour: The hour in UTC at which maintenance updates will be applied in 24 hour format.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatabasesMaintenanceWindowArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DatabasesMaintenanceWindow resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DatabasesMaintenanceWindowArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatabasesMaintenanceWindowArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database_cluster_uuid: Optional[pulumi.Input[str]] = None,
                 day: Optional[pulumi.Input[str]] = None,
                 hour: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatabasesMaintenanceWindowArgs.__new__(DatabasesMaintenanceWindowArgs)

            __props__.__dict__["database_cluster_uuid"] = database_cluster_uuid
            if day is None and not opts.urn:
                raise TypeError("Missing required property 'day'")
            __props__.__dict__["day"] = day
            if hour is None and not opts.urn:
                raise TypeError("Missing required property 'hour'")
            __props__.__dict__["hour"] = hour
            __props__.__dict__["description"] = None
            __props__.__dict__["pending"] = None
        super(DatabasesMaintenanceWindow, __self__).__init__(
            'digitalocean-native:databases/v2:DatabasesMaintenanceWindow',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DatabasesMaintenanceWindow':
        """
        Get an existing DatabasesMaintenanceWindow resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DatabasesMaintenanceWindowArgs.__new__(DatabasesMaintenanceWindowArgs)

        __props__.__dict__["day"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["hour"] = None
        __props__.__dict__["pending"] = None
        return DatabasesMaintenanceWindow(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def day(self) -> pulumi.Output[str]:
        """
        The day of the week on which to apply maintenance updates.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of strings, each containing information about a pending maintenance update.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hour(self) -> pulumi.Output[str]:
        """
        The hour in UTC at which maintenance updates will be applied in 24 hour format.
        """
        return pulumi.get(self, "hour")

    @property
    @pulumi.getter
    def pending(self) -> pulumi.Output[Optional[bool]]:
        """
        A boolean value indicating whether any maintenance is scheduled to be performed in the next window.
        """
        return pulumi.get(self, "pending")

