# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ListDatabasesReplicasProperties',
    'AwaitableListDatabasesReplicasProperties',
    'list_databases_replicas',
    'list_databases_replicas_output',
]

@pulumi.output_type
class ListDatabasesReplicasProperties:
    def __init__(__self__, replicas=None):
        if replicas and not isinstance(replicas, list):
            raise TypeError("Expected argument 'replicas' to be a list")
        pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[Sequence['outputs.DatabaseReplica']]:
        return pulumi.get(self, "replicas")


class AwaitableListDatabasesReplicasProperties(ListDatabasesReplicasProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListDatabasesReplicasProperties(
            replicas=self.replicas)


def list_databases_replicas(database_cluster_uuid: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListDatabasesReplicasProperties:
    """
    Use this data source to access information about an existing resource.

    :param str database_cluster_uuid: A unique identifier for a database cluster.
    """
    __args__ = dict()
    __args__['databaseClusterUuid'] = database_cluster_uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:databases/v2:listDatabasesReplicas', __args__, opts=opts, typ=ListDatabasesReplicasProperties).value

    return AwaitableListDatabasesReplicasProperties(
        replicas=pulumi.get(__ret__, 'replicas'))


@_utilities.lift_output_func(list_databases_replicas)
def list_databases_replicas_output(database_cluster_uuid: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ListDatabasesReplicasProperties]:
    """
    Use this data source to access information about an existing resource.

    :param str database_cluster_uuid: A unique identifier for a database cluster.
    """
    ...
