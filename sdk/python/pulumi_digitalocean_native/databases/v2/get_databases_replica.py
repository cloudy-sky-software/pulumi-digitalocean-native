# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetDatabasesReplicaProperties',
    'AwaitableGetDatabasesReplicaProperties',
    'get_databases_replica',
    'get_databases_replica_output',
]

@pulumi.output_type
class GetDatabasesReplicaProperties:
    def __init__(__self__, replica=None):
        if replica and not isinstance(replica, dict):
            raise TypeError("Expected argument 'replica' to be a dict")
        pulumi.set(__self__, "replica", replica)

    @property
    @pulumi.getter
    def replica(self) -> Optional['outputs.DatabaseReplica']:
        return pulumi.get(self, "replica")


class AwaitableGetDatabasesReplicaProperties(GetDatabasesReplicaProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabasesReplicaProperties(
            replica=self.replica)


def get_databases_replica(database_cluster_uuid: Optional[builtins.str] = None,
                          replica_name: Optional[builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabasesReplicaProperties:
    """
    Use this data source to access information about an existing resource.

    :param builtins.str database_cluster_uuid: A unique identifier for a database cluster.
    :param builtins.str replica_name: The name of the database replica.
    """
    __args__ = dict()
    __args__['databaseClusterUuid'] = database_cluster_uuid
    __args__['replicaName'] = replica_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:databases/v2:getDatabasesReplica', __args__, opts=opts, typ=GetDatabasesReplicaProperties).value

    return AwaitableGetDatabasesReplicaProperties(
        replica=pulumi.get(__ret__, 'replica'))
def get_databases_replica_output(database_cluster_uuid: Optional[pulumi.Input[builtins.str]] = None,
                                 replica_name: Optional[pulumi.Input[builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatabasesReplicaProperties]:
    """
    Use this data source to access information about an existing resource.

    :param builtins.str database_cluster_uuid: A unique identifier for a database cluster.
    :param builtins.str replica_name: The name of the database replica.
    """
    __args__ = dict()
    __args__['databaseClusterUuid'] = database_cluster_uuid
    __args__['replicaName'] = replica_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('digitalocean-native:databases/v2:getDatabasesReplica', __args__, opts=opts, typ=GetDatabasesReplicaProperties)
    return __ret__.apply(lambda __response__: GetDatabasesReplicaProperties(
        replica=pulumi.get(__response__, 'replica')))
