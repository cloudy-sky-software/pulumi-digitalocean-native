# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'AlertsArgs',
    'AlertsArgsDict',
    'SlackDetailsArgs',
    'SlackDetailsArgsDict',
]

MYPY = False

if not MYPY:
    class AlertsArgsDict(TypedDict):
        email: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        An email to notify on an alert trigger.
        """
        slack: pulumi.Input[Sequence[pulumi.Input['SlackDetailsArgsDict']]]
        """
        Slack integration details.
        """
elif False:
    AlertsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertsArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 slack: pulumi.Input[Sequence[pulumi.Input['SlackDetailsArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] email: An email to notify on an alert trigger.
        :param pulumi.Input[Sequence[pulumi.Input['SlackDetailsArgs']]] slack: Slack integration details.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "slack", slack)

    @_builtins.property
    @pulumi.getter
    def email(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        An email to notify on an alert trigger.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter
    def slack(self) -> pulumi.Input[Sequence[pulumi.Input['SlackDetailsArgs']]]:
        """
        Slack integration details.
        """
        return pulumi.get(self, "slack")

    @slack.setter
    def slack(self, value: pulumi.Input[Sequence[pulumi.Input['SlackDetailsArgs']]]):
        pulumi.set(self, "slack", value)


if not MYPY:
    class SlackDetailsArgsDict(TypedDict):
        channel: pulumi.Input[_builtins.str]
        """
        Slack channel to notify of an alert trigger.
        """
        url: pulumi.Input[_builtins.str]
        """
        Slack Webhook URL.
        """
elif False:
    SlackDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SlackDetailsArgs:
    def __init__(__self__, *,
                 channel: pulumi.Input[_builtins.str],
                 url: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] channel: Slack channel to notify of an alert trigger.
        :param pulumi.Input[_builtins.str] url: Slack Webhook URL.
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def channel(self) -> pulumi.Input[_builtins.str]:
        """
        Slack channel to notify of an alert trigger.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "channel", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Input[_builtins.str]:
        """
        Slack Webhook URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "url", value)


