# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AlertPolicy',
    'Alerts',
    'MetaMeta',
    'MetricsData',
    'MetricsResult',
    'PageLinks',
    'PageLinksPagesProperties',
    'SlackDetails',
]

@pulumi.output_type
class AlertPolicy(dict):
    def __init__(__self__, *,
                 alerts: 'outputs.Alerts',
                 compare: 'AlertPolicyCompare',
                 description: _builtins.str,
                 enabled: _builtins.bool,
                 entities: Sequence[_builtins.str],
                 tags: Sequence[_builtins.str],
                 type: 'AlertPolicyType',
                 uuid: _builtins.str,
                 value: _builtins.float,
                 window: 'AlertPolicyWindow'):
        pulumi.set(__self__, "alerts", alerts)
        pulumi.set(__self__, "compare", compare)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "entities", entities)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "window", window)

    @_builtins.property
    @pulumi.getter
    def alerts(self) -> 'outputs.Alerts':
        return pulumi.get(self, "alerts")

    @_builtins.property
    @pulumi.getter
    def compare(self) -> 'AlertPolicyCompare':
        return pulumi.get(self, "compare")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def entities(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "entities")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> 'AlertPolicyType':
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> _builtins.str:
        return pulumi.get(self, "uuid")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.float:
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter
    def window(self) -> 'AlertPolicyWindow':
        return pulumi.get(self, "window")


@pulumi.output_type
class Alerts(dict):
    def __init__(__self__, *,
                 email: Sequence[_builtins.str],
                 slack: Sequence['outputs.SlackDetails']):
        """
        :param Sequence[_builtins.str] email: An email to notify on an alert trigger.
        :param Sequence['SlackDetails'] slack: Slack integration details.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "slack", slack)

    @_builtins.property
    @pulumi.getter
    def email(self) -> Sequence[_builtins.str]:
        """
        An email to notify on an alert trigger.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter
    def slack(self) -> Sequence['outputs.SlackDetails']:
        """
        Slack integration details.
        """
        return pulumi.get(self, "slack")


@pulumi.output_type
class MetaMeta(dict):
    def __init__(__self__, *,
                 total: Optional[_builtins.int] = None):
        """
        :param _builtins.int total: Number of objects returned by the request.
        """
        if total is not None:
            pulumi.set(__self__, "total", total)

    @_builtins.property
    @pulumi.getter
    def total(self) -> Optional[_builtins.int]:
        """
        Number of objects returned by the request.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class MetricsData(dict):
    def __init__(__self__, *,
                 result: Sequence['outputs.MetricsResult'],
                 result_type: 'MetricsDataResultType'):
        """
        :param Sequence['MetricsResult'] result: Result of query.
        """
        pulumi.set(__self__, "result", result)
        pulumi.set(__self__, "result_type", result_type)

    @_builtins.property
    @pulumi.getter
    def result(self) -> Sequence['outputs.MetricsResult']:
        """
        Result of query.
        """
        return pulumi.get(self, "result")

    @_builtins.property
    @pulumi.getter(name="resultType")
    def result_type(self) -> 'MetricsDataResultType':
        return pulumi.get(self, "result_type")


@pulumi.output_type
class MetricsResult(dict):
    def __init__(__self__, *,
                 metric: Any,
                 values: Sequence[Sequence[Any]]):
        """
        :param Any metric: An object containing the metric labels.
        """
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Any:
        """
        An object containing the metric labels.
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[Sequence[Any]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class PageLinks(dict):
    def __init__(__self__, *,
                 pages: Optional['outputs.PageLinksPagesProperties'] = None):
        if pages is not None:
            pulumi.set(__self__, "pages", pages)

    @_builtins.property
    @pulumi.getter
    def pages(self) -> Optional['outputs.PageLinksPagesProperties']:
        return pulumi.get(self, "pages")


@pulumi.output_type
class PageLinksPagesProperties(dict):
    def __init__(__self__, *,
                 first: Optional[_builtins.str] = None,
                 last: Optional[_builtins.str] = None,
                 next: Optional[_builtins.str] = None,
                 prev: Optional[_builtins.str] = None):
        if first is not None:
            pulumi.set(__self__, "first", first)
        if last is not None:
            pulumi.set(__self__, "last", last)
        if next is not None:
            pulumi.set(__self__, "next", next)
        if prev is not None:
            pulumi.set(__self__, "prev", prev)

    @_builtins.property
    @pulumi.getter
    def first(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "first")

    @_builtins.property
    @pulumi.getter
    def last(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "last")

    @_builtins.property
    @pulumi.getter
    def next(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "next")

    @_builtins.property
    @pulumi.getter
    def prev(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "prev")


@pulumi.output_type
class SlackDetails(dict):
    def __init__(__self__, *,
                 channel: _builtins.str,
                 url: _builtins.str):
        """
        :param _builtins.str channel: Slack channel to notify of an alert trigger.
        :param _builtins.str url: Slack Webhook URL.
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def channel(self) -> _builtins.str:
        """
        Slack channel to notify of an alert trigger.
        """
        return pulumi.get(self, "channel")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        Slack Webhook URL.
        """
        return pulumi.get(self, "url")


