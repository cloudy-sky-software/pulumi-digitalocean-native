# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetAppsLogResult',
    'AwaitableGetAppsLogResult',
    'get_apps_log',
    'get_apps_log_output',
]

@pulumi.output_type
class GetAppsLogResult:
    def __init__(__self__, items=None):
        if items and not isinstance(items, dict):
            raise TypeError("Expected argument 'items' to be a dict")
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> 'outputs.AppsGetLogsResponse':
        return pulumi.get(self, "items")


class AwaitableGetAppsLogResult(GetAppsLogResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppsLogResult(
            items=self.items)


def get_apps_log(app_id: Optional[str] = None,
                 component_name: Optional[str] = None,
                 deployment_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppsLogResult:
    """
    Use this data source to access information about an existing resource.

    :param str app_id: The app ID
    :param str component_name: An optional component name. If set, logs will be limited to this component only.
    :param str deployment_id: The deployment ID
    """
    __args__ = dict()
    __args__['appId'] = app_id
    __args__['componentName'] = component_name
    __args__['deploymentId'] = deployment_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:apps/v2:getAppsLog', __args__, opts=opts, typ=GetAppsLogResult).value

    return AwaitableGetAppsLogResult(
        items=pulumi.get(__ret__, 'items'))


@_utilities.lift_output_func(get_apps_log)
def get_apps_log_output(app_id: Optional[pulumi.Input[str]] = None,
                        component_name: Optional[pulumi.Input[str]] = None,
                        deployment_id: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAppsLogResult]:
    """
    Use this data source to access information about an existing resource.

    :param str app_id: The app ID
    :param str component_name: An optional component name. If set, logs will be limited to this component only.
    :param str deployment_id: The deployment ID
    """
    ...
