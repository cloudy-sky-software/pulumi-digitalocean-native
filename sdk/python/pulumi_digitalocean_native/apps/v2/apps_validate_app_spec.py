# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['AppsValidateAppSpecArgs', 'AppsValidateAppSpec']

@pulumi.input_type
class AppsValidateAppSpecArgs:
    def __init__(__self__, *,
                 spec: pulumi.Input['AppSpecArgs'],
                 app_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AppsValidateAppSpec resource.
        :param pulumi.Input['AppSpecArgs'] spec: The desired configuration of an application.
        :param pulumi.Input[str] app_id: An optional ID of an existing app. If set, the spec will be treated as a proposed update to the specified app. The existing app is not modified using this method.
        """
        pulumi.set(__self__, "spec", spec)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input['AppSpecArgs']:
        """
        The desired configuration of an application.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input['AppSpecArgs']):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        An optional ID of an existing app. If set, the spec will be treated as a proposed update to the specified app. The existing app is not modified using this method.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)


class AppsValidateAppSpec(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 spec: Optional[pulumi.Input[pulumi.InputType['AppSpecArgs']]] = None,
                 __props__=None):
        """
        Create a AppsValidateAppSpec resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_id: An optional ID of an existing app. If set, the spec will be treated as a proposed update to the specified app. The existing app is not modified using this method.
        :param pulumi.Input[pulumi.InputType['AppSpecArgs']] spec: The desired configuration of an application.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppsValidateAppSpecArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppsValidateAppSpec resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppsValidateAppSpecArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppsValidateAppSpecArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 spec: Optional[pulumi.Input[pulumi.InputType['AppSpecArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppsValidateAppSpecArgs.__new__(AppsValidateAppSpecArgs)

            __props__.__dict__["app_id"] = app_id
            if spec is None and not opts.urn:
                raise TypeError("Missing required property 'spec'")
            __props__.__dict__["spec"] = spec
            __props__.__dict__["app_cost"] = None
            __props__.__dict__["app_is_static"] = None
            __props__.__dict__["app_name_available"] = None
            __props__.__dict__["app_name_suggestion"] = None
            __props__.__dict__["app_tier_downgrade_cost"] = None
            __props__.__dict__["existing_static_apps"] = None
        super(AppsValidateAppSpec, __self__).__init__(
            'digitalocean-native:apps/v2:AppsValidateAppSpec',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AppsValidateAppSpec':
        """
        Get an existing AppsValidateAppSpec resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AppsValidateAppSpecArgs.__new__(AppsValidateAppSpecArgs)

        __props__.__dict__["app_cost"] = None
        __props__.__dict__["app_id"] = None
        __props__.__dict__["app_is_static"] = None
        __props__.__dict__["app_name_available"] = None
        __props__.__dict__["app_name_suggestion"] = None
        __props__.__dict__["app_tier_downgrade_cost"] = None
        __props__.__dict__["existing_static_apps"] = None
        __props__.__dict__["spec"] = None
        return AppsValidateAppSpec(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appCost")
    def app_cost(self) -> pulumi.Output[Optional[int]]:
        """
        The monthly cost of the proposed app in USD using the next pricing plan tier. For example, if you propose an app that uses the Basic tier, the `app_tier_upgrade_cost` field displays the monthly cost of the app if it were to use the Professional tier. If the proposed app already uses the most expensive tier, the field is empty.
        """
        return pulumi.get(self, "app_cost")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[Optional[str]]:
        """
        An optional ID of an existing app. If set, the spec will be treated as a proposed update to the specified app. The existing app is not modified using this method.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appIsStatic")
    def app_is_static(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether the app is a static app.
        """
        return pulumi.get(self, "app_is_static")

    @property
    @pulumi.getter(name="appNameAvailable")
    def app_name_available(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether the app name is available.
        """
        return pulumi.get(self, "app_name_available")

    @property
    @pulumi.getter(name="appNameSuggestion")
    def app_name_suggestion(self) -> pulumi.Output[Optional[str]]:
        """
        The suggested name if the proposed app name is unavailable.
        """
        return pulumi.get(self, "app_name_suggestion")

    @property
    @pulumi.getter(name="appTierDowngradeCost")
    def app_tier_downgrade_cost(self) -> pulumi.Output[Optional[int]]:
        """
        The monthly cost of the proposed app in USD using the previous pricing plan tier. For example, if you propose an app that uses the Professional tier, the `app_tier_downgrade_cost` field displays the monthly cost of the app if it were to use the Basic tier. If the proposed app already uses the lest expensive tier, the field is empty.
        """
        return pulumi.get(self, "app_tier_downgrade_cost")

    @property
    @pulumi.getter(name="existingStaticApps")
    def existing_static_apps(self) -> pulumi.Output[Optional[str]]:
        """
        The maximum number of free static apps the account can have. We will charge you for any additional static apps.
        """
        return pulumi.get(self, "existing_static_apps")

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Output['outputs.AppSpec']:
        """
        The desired configuration of an application.
        """
        return pulumi.get(self, "spec")

