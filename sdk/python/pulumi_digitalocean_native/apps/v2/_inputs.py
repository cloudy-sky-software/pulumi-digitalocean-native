# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AppAlertSlackWebhookArgs',
    'AppAlertSpecArgs',
    'AppDatabaseSpecArgs',
    'AppDomainSpecArgs',
    'AppFunctionsSpecArgs',
    'AppIngressSpecRuleMatchArgs',
    'AppIngressSpecRuleRoutingComponentArgs',
    'AppIngressSpecRuleRoutingRedirectArgs',
    'AppIngressSpecRuleStringMatchArgs',
    'AppIngressSpecRuleArgs',
    'AppIngressSpecArgs',
    'AppJobSpecArgs',
    'AppLogDestinationDatadogSpecArgs',
    'AppLogDestinationDefinitionArgs',
    'AppLogDestinationLogtailSpecArgs',
    'AppLogDestinationPapertrailSpecArgs',
    'AppRouteSpecArgs',
    'AppServiceSpecHealthCheckArgs',
    'AppServiceSpecArgs',
    'AppSpecArgs',
    'AppStaticSiteSpecArgs',
    'AppVariableDefinitionArgs',
    'AppWorkerSpecArgs',
    'AppsCorsPolicyArgs',
    'AppsGitSourceSpecArgs',
    'AppsGithubSourceSpecArgs',
    'AppsGitlabSourceSpecArgs',
    'AppsImageSourceSpecArgs',
    'AppsStringMatchArgs',
]

@pulumi.input_type
class AppAlertSlackWebhookArgs:
    def __init__(__self__, *,
                 channel: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class AppAlertSpecArgs:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 operator: Optional[pulumi.Input['AppAlertSpecOperator']] = None,
                 rule: Optional[pulumi.Input['AppAlertSpecRule']] = None,
                 value: Optional[pulumi.Input[float]] = None,
                 window: Optional[pulumi.Input['AppAlertSpecWindow']] = None):
        """
        :param pulumi.Input[bool] disabled: Is the alert disabled?
        :param pulumi.Input[float] value: Threshold value for alert
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if operator is None:
            operator = 'UNSPECIFIED_OPERATOR'
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if rule is None:
            rule = 'UNSPECIFIED_RULE'
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if window is None:
            window = 'UNSPECIFIED_WINDOW'
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the alert disabled?
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input['AppAlertSpecOperator']]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input['AppAlertSpecOperator']]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input['AppAlertSpecRule']]:
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input['AppAlertSpecRule']]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        """
        Threshold value for alert
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input['AppAlertSpecWindow']]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input['AppAlertSpecWindow']]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class AppDatabaseSpecArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 db_user: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input['AppDatabaseSpecEngine']] = None,
                 production: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name. Must be unique across all components within the same app.
        :param pulumi.Input[str] cluster_name: The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
        :param pulumi.Input[str] db_name: The name of the MySQL or PostgreSQL database to configure.
        :param pulumi.Input[str] db_user: The name of the MySQL or PostgreSQL user to configure.
        :param pulumi.Input['AppDatabaseSpecEngine'] engine: - MYSQL: MySQL
               - PG: PostgreSQL
               - REDIS: Redis
        :param pulumi.Input[bool] production: Whether this is a production or dev database.
        :param pulumi.Input[str] version: The version of the database engine
        """
        pulumi.set(__self__, "name", name)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if db_user is not None:
            pulumi.set(__self__, "db_user", db_user)
        if engine is None:
            engine = 'UNSET'
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if production is not None:
            pulumi.set(__self__, "production", production)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name. Must be unique across all components within the same app.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the MySQL or PostgreSQL database to configure.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter(name="dbUser")
    def db_user(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the MySQL or PostgreSQL user to configure.
        """
        return pulumi.get(self, "db_user")

    @db_user.setter
    def db_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_user", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input['AppDatabaseSpecEngine']]:
        """
        - MYSQL: MySQL
        - PG: PostgreSQL
        - REDIS: Redis
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input['AppDatabaseSpecEngine']]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter
    def production(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this is a production or dev database.
        """
        return pulumi.get(self, "production")

    @production.setter
    def production(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "production", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the database engine
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class AppDomainSpecArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 minimum_tls_version: Optional[pulumi.Input['AppDomainSpecMinimumTlsVersion']] = None,
                 type: Optional[pulumi.Input['AppDomainSpecType']] = None,
                 wildcard: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] domain: The hostname for the domain
        :param pulumi.Input['AppDomainSpecMinimumTlsVersion'] minimum_tls_version: The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
        :param pulumi.Input['AppDomainSpecType'] type: - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
               - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
               - ALIAS: A non-primary domain
        :param pulumi.Input[bool] wildcard: Indicates whether the domain includes all sub-domains, in addition to the given domain
        :param pulumi.Input[str] zone: Optional. If the domain uses DigitalOcean DNS and you would like App
               Platform to automatically manage it for you, set this to the name of the
               domain on your account.
               
               For example, If the domain you are adding is `app.domain.com`, the zone
               could be `domain.com`.
        """
        pulumi.set(__self__, "domain", domain)
        if minimum_tls_version is not None:
            pulumi.set(__self__, "minimum_tls_version", minimum_tls_version)
        if type is None:
            type = 'UNSPECIFIED'
        if type is not None:
            pulumi.set(__self__, "type", type)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        The hostname for the domain
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="minimumTlsVersion")
    def minimum_tls_version(self) -> Optional[pulumi.Input['AppDomainSpecMinimumTlsVersion']]:
        """
        The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.
        """
        return pulumi.get(self, "minimum_tls_version")

    @minimum_tls_version.setter
    def minimum_tls_version(self, value: Optional[pulumi.Input['AppDomainSpecMinimumTlsVersion']]):
        pulumi.set(self, "minimum_tls_version", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['AppDomainSpecType']]:
        """
        - DEFAULT: The default `.ondigitalocean.app` domain assigned to this app
        - PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.
        - ALIAS: A non-primary domain
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['AppDomainSpecType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the domain includes all sub-domains, in addition to the given domain
        """
        return pulumi.get(self, "wildcard")

    @wildcard.setter
    def wildcard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wildcard", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. If the domain uses DigitalOcean DNS and you would like App
        Platform to automatically manage it for you, set this to the name of the
        domain on your account.

        For example, If the domain you are adding is `app.domain.com`, the zone
        could be `domain.com`.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class AppFunctionsSpecArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 alerts: Optional[pulumi.Input[Sequence[pulumi.Input['AppAlertSpecArgs']]]] = None,
                 cors: Optional[pulumi.Input['AppsCorsPolicyArgs']] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]]] = None,
                 git: Optional[pulumi.Input['AppsGitSourceSpecArgs']] = None,
                 github: Optional[pulumi.Input['AppsGithubSourceSpecArgs']] = None,
                 gitlab: Optional[pulumi.Input['AppsGitlabSourceSpecArgs']] = None,
                 log_destinations: Optional[pulumi.Input['AppLogDestinationDefinitionArgs']] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['AppRouteSpecArgs']]]] = None,
                 source_dir: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name. Must be unique across all components within the same app.
        :param pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]] envs: A list of environment variables made available to the component.
        :param pulumi.Input[Sequence[pulumi.Input['AppRouteSpecArgs']]] routes: A list of HTTP routes that should be routed to this component.
        :param pulumi.Input[str] source_dir: An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
        """
        pulumi.set(__self__, "name", name)
        if alerts is not None:
            pulumi.set(__self__, "alerts", alerts)
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if git is not None:
            pulumi.set(__self__, "git", git)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if log_destinations is not None:
            pulumi.set(__self__, "log_destinations", log_destinations)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if source_dir is not None:
            pulumi.set(__self__, "source_dir", source_dir)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name. Must be unique across all components within the same app.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def alerts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppAlertSpecArgs']]]]:
        return pulumi.get(self, "alerts")

    @alerts.setter
    def alerts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppAlertSpecArgs']]]]):
        pulumi.set(self, "alerts", value)

    @property
    @pulumi.getter
    def cors(self) -> Optional[pulumi.Input['AppsCorsPolicyArgs']]:
        return pulumi.get(self, "cors")

    @cors.setter
    def cors(self, value: Optional[pulumi.Input['AppsCorsPolicyArgs']]):
        pulumi.set(self, "cors", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]]]:
        """
        A list of environment variables made available to the component.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter
    def git(self) -> Optional[pulumi.Input['AppsGitSourceSpecArgs']]:
        return pulumi.get(self, "git")

    @git.setter
    def git(self, value: Optional[pulumi.Input['AppsGitSourceSpecArgs']]):
        pulumi.set(self, "git", value)

    @property
    @pulumi.getter
    def github(self) -> Optional[pulumi.Input['AppsGithubSourceSpecArgs']]:
        return pulumi.get(self, "github")

    @github.setter
    def github(self, value: Optional[pulumi.Input['AppsGithubSourceSpecArgs']]):
        pulumi.set(self, "github", value)

    @property
    @pulumi.getter
    def gitlab(self) -> Optional[pulumi.Input['AppsGitlabSourceSpecArgs']]:
        return pulumi.get(self, "gitlab")

    @gitlab.setter
    def gitlab(self, value: Optional[pulumi.Input['AppsGitlabSourceSpecArgs']]):
        pulumi.set(self, "gitlab", value)

    @property
    @pulumi.getter(name="logDestinations")
    def log_destinations(self) -> Optional[pulumi.Input['AppLogDestinationDefinitionArgs']]:
        return pulumi.get(self, "log_destinations")

    @log_destinations.setter
    def log_destinations(self, value: Optional[pulumi.Input['AppLogDestinationDefinitionArgs']]):
        pulumi.set(self, "log_destinations", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppRouteSpecArgs']]]]:
        """
        A list of HTTP routes that should be routed to this component.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppRouteSpecArgs']]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter(name="sourceDir")
    def source_dir(self) -> Optional[pulumi.Input[str]]:
        """
        An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
        """
        return pulumi.get(self, "source_dir")

    @source_dir.setter
    def source_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_dir", value)


@pulumi.input_type
class AppIngressSpecRuleMatchArgs:
    def __init__(__self__, *,
                 path: pulumi.Input['AppIngressSpecRuleStringMatchArgs']):
        """
        The match configuration for the rule.
        :param pulumi.Input['AppIngressSpecRuleStringMatchArgs'] path: The path to match on.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input['AppIngressSpecRuleStringMatchArgs']:
        """
        The path to match on.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input['AppIngressSpecRuleStringMatchArgs']):
        pulumi.set(self, "path", value)


@pulumi.input_type
class AppIngressSpecRuleRoutingComponentArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 preserve_path_prefix: Optional[pulumi.Input[str]] = None,
                 rewrite: Optional[pulumi.Input[str]] = None):
        """
        The component to route to. Only one of `component` or `redirect` may be set.
        :param pulumi.Input[str] name: The name of the component to route to.
        :param pulumi.Input[str] preserve_path_prefix: An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
        :param pulumi.Input[str] rewrite: An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
        """
        pulumi.set(__self__, "name", name)
        if preserve_path_prefix is not None:
            pulumi.set(__self__, "preserve_path_prefix", preserve_path_prefix)
        if rewrite is not None:
            pulumi.set(__self__, "rewrite", rewrite)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the component to route to.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="preservePathPrefix")
    def preserve_path_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`. Note: this is not applicable for Functions Components and is mutually exclusive with `rewrite`.
        """
        return pulumi.get(self, "preserve_path_prefix")

    @preserve_path_prefix.setter
    def preserve_path_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preserve_path_prefix", value)

    @property
    @pulumi.getter
    def rewrite(self) -> Optional[pulumi.Input[str]]:
        """
        An optional field that will rewrite the path of the component to be what is specified here. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If you specified the rewrite to be `/v1/`, requests to `/api/list` would be rewritten to `/v1/list`. Note: this is mutually exclusive with `preserve_path_prefix`.
        """
        return pulumi.get(self, "rewrite")

    @rewrite.setter
    def rewrite(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rewrite", value)


@pulumi.input_type
class AppIngressSpecRuleRoutingRedirectArgs:
    def __init__(__self__, *,
                 authority: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 redirect_code: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
        :param pulumi.Input[str] authority: The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
        :param pulumi.Input[int] port: The port to redirect to.
        :param pulumi.Input[int] redirect_code: The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
        :param pulumi.Input[str] scheme: The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
        :param pulumi.Input[str] uri: An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
        """
        if authority is not None:
            pulumi.set(__self__, "authority", authority)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if redirect_code is not None:
            pulumi.set(__self__, "redirect_code", redirect_code)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def authority(self) -> Optional[pulumi.Input[str]]:
        """
        The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.
        """
        return pulumi.get(self, "authority")

    @authority.setter
    def authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authority", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port to redirect to.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="redirectCode")
    def redirect_code(self) -> Optional[pulumi.Input[int]]:
        """
        The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.
        """
        return pulumi.get(self, "redirect_code")

    @redirect_code.setter
    def redirect_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "redirect_code", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class AppIngressSpecRuleStringMatchArgs:
    def __init__(__self__, *,
                 prefix: pulumi.Input[str]):
        """
        The path to match on.
        :param pulumi.Input[str] prefix: Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
        """
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        """
        Prefix-based match. For example, `/api` will match `/api`, `/api/`, and any nested paths such as `/api/v1/endpoint`.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class AppIngressSpecRuleArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input['AppIngressSpecRuleRoutingComponentArgs']] = None,
                 cors: Optional[pulumi.Input['AppsCorsPolicyArgs']] = None,
                 match: Optional[pulumi.Input['AppIngressSpecRuleMatchArgs']] = None,
                 redirect: Optional[pulumi.Input['AppIngressSpecRuleRoutingRedirectArgs']] = None):
        """
        :param pulumi.Input['AppIngressSpecRuleRoutingComponentArgs'] component: The component to route to. Only one of `component` or `redirect` may be set.
        :param pulumi.Input['AppIngressSpecRuleMatchArgs'] match: The match configuration for the rule.
        :param pulumi.Input['AppIngressSpecRuleRoutingRedirectArgs'] redirect: The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
        """
        if component is not None:
            pulumi.set(__self__, "component", component)
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input['AppIngressSpecRuleRoutingComponentArgs']]:
        """
        The component to route to. Only one of `component` or `redirect` may be set.
        """
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input['AppIngressSpecRuleRoutingComponentArgs']]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def cors(self) -> Optional[pulumi.Input['AppsCorsPolicyArgs']]:
        return pulumi.get(self, "cors")

    @cors.setter
    def cors(self, value: Optional[pulumi.Input['AppsCorsPolicyArgs']]):
        pulumi.set(self, "cors", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input['AppIngressSpecRuleMatchArgs']]:
        """
        The match configuration for the rule.
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input['AppIngressSpecRuleMatchArgs']]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['AppIngressSpecRuleRoutingRedirectArgs']]:
        """
        The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['AppIngressSpecRuleRoutingRedirectArgs']]):
        pulumi.set(self, "redirect", value)


@pulumi.input_type
class AppIngressSpecArgs:
    def __init__(__self__, *,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['AppIngressSpecRuleArgs']]]] = None):
        """
        Specification for app ingress configurations.
        :param pulumi.Input[Sequence[pulumi.Input['AppIngressSpecRuleArgs']]] rules: Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
        """
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppIngressSpecRuleArgs']]]]:
        """
        Rules for configuring HTTP ingress for component routes, CORS, rewrites, and redirects.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppIngressSpecRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class AppJobSpecArgs:
    def __init__(__self__, *,
                 build_command: Optional[pulumi.Input[str]] = None,
                 dockerfile_path: Optional[pulumi.Input[str]] = None,
                 environment_slug: Optional[pulumi.Input[str]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]]] = None,
                 git: Optional[pulumi.Input['AppsGitSourceSpecArgs']] = None,
                 github: Optional[pulumi.Input['AppsGithubSourceSpecArgs']] = None,
                 gitlab: Optional[pulumi.Input['AppsGitlabSourceSpecArgs']] = None,
                 image: Optional[pulumi.Input['AppsImageSourceSpecArgs']] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 instance_size_slug: Optional[pulumi.Input['AppComponentInstanceBaseInstanceSizeSlug']] = None,
                 kind: Optional[pulumi.Input['AppJobSpecPropertiesKind']] = None,
                 log_destinations: Optional[pulumi.Input['AppLogDestinationDefinitionArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 run_command: Optional[pulumi.Input[str]] = None,
                 source_dir: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] build_command: An optional build command to run while building this component from source.
        :param pulumi.Input[str] dockerfile_path: The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
        :param pulumi.Input[str] environment_slug: An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
        :param pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]] envs: A list of environment variables made available to the component.
        :param pulumi.Input[int] instance_count: The amount of instances that this component should be scaled to. Default: 1
        :param pulumi.Input['AppComponentInstanceBaseInstanceSizeSlug'] instance_size_slug: The instance size to use for this component. Default: `basic-xxs`
        :param pulumi.Input['AppJobSpecPropertiesKind'] kind: - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
               - PRE_DEPLOY: Indicates a job that runs before an app deployment.
               - POST_DEPLOY: Indicates a job that runs after an app deployment.
               - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
        :param pulumi.Input[str] name: The name. Must be unique across all components within the same app.
        :param pulumi.Input[str] run_command: An optional run command to override the component's default.
        :param pulumi.Input[str] source_dir: An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
        """
        if build_command is not None:
            pulumi.set(__self__, "build_command", build_command)
        if dockerfile_path is not None:
            pulumi.set(__self__, "dockerfile_path", dockerfile_path)
        if environment_slug is not None:
            pulumi.set(__self__, "environment_slug", environment_slug)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if git is not None:
            pulumi.set(__self__, "git", git)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if instance_count is None:
            instance_count = 1
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if instance_size_slug is None:
            instance_size_slug = 'basic-xxs'
        if instance_size_slug is not None:
            pulumi.set(__self__, "instance_size_slug", instance_size_slug)
        if kind is None:
            kind = 'UNSPECIFIED'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if log_destinations is not None:
            pulumi.set(__self__, "log_destinations", log_destinations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if run_command is not None:
            pulumi.set(__self__, "run_command", run_command)
        if source_dir is not None:
            pulumi.set(__self__, "source_dir", source_dir)

    @property
    @pulumi.getter(name="buildCommand")
    def build_command(self) -> Optional[pulumi.Input[str]]:
        """
        An optional build command to run while building this component from source.
        """
        return pulumi.get(self, "build_command")

    @build_command.setter
    def build_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "build_command", value)

    @property
    @pulumi.getter(name="dockerfilePath")
    def dockerfile_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
        """
        return pulumi.get(self, "dockerfile_path")

    @dockerfile_path.setter
    def dockerfile_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dockerfile_path", value)

    @property
    @pulumi.getter(name="environmentSlug")
    def environment_slug(self) -> Optional[pulumi.Input[str]]:
        """
        An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
        """
        return pulumi.get(self, "environment_slug")

    @environment_slug.setter
    def environment_slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_slug", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]]]:
        """
        A list of environment variables made available to the component.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter
    def git(self) -> Optional[pulumi.Input['AppsGitSourceSpecArgs']]:
        return pulumi.get(self, "git")

    @git.setter
    def git(self, value: Optional[pulumi.Input['AppsGitSourceSpecArgs']]):
        pulumi.set(self, "git", value)

    @property
    @pulumi.getter
    def github(self) -> Optional[pulumi.Input['AppsGithubSourceSpecArgs']]:
        return pulumi.get(self, "github")

    @github.setter
    def github(self, value: Optional[pulumi.Input['AppsGithubSourceSpecArgs']]):
        pulumi.set(self, "github", value)

    @property
    @pulumi.getter
    def gitlab(self) -> Optional[pulumi.Input['AppsGitlabSourceSpecArgs']]:
        return pulumi.get(self, "gitlab")

    @gitlab.setter
    def gitlab(self, value: Optional[pulumi.Input['AppsGitlabSourceSpecArgs']]):
        pulumi.set(self, "gitlab", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['AppsImageSourceSpecArgs']]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['AppsImageSourceSpecArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of instances that this component should be scaled to. Default: 1
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="instanceSizeSlug")
    def instance_size_slug(self) -> Optional[pulumi.Input['AppComponentInstanceBaseInstanceSizeSlug']]:
        """
        The instance size to use for this component. Default: `basic-xxs`
        """
        return pulumi.get(self, "instance_size_slug")

    @instance_size_slug.setter
    def instance_size_slug(self, value: Optional[pulumi.Input['AppComponentInstanceBaseInstanceSizeSlug']]):
        pulumi.set(self, "instance_size_slug", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input['AppJobSpecPropertiesKind']]:
        """
        - UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
        - PRE_DEPLOY: Indicates a job that runs before an app deployment.
        - POST_DEPLOY: Indicates a job that runs after an app deployment.
        - FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input['AppJobSpecPropertiesKind']]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="logDestinations")
    def log_destinations(self) -> Optional[pulumi.Input['AppLogDestinationDefinitionArgs']]:
        return pulumi.get(self, "log_destinations")

    @log_destinations.setter
    def log_destinations(self, value: Optional[pulumi.Input['AppLogDestinationDefinitionArgs']]):
        pulumi.set(self, "log_destinations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name. Must be unique across all components within the same app.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="runCommand")
    def run_command(self) -> Optional[pulumi.Input[str]]:
        """
        An optional run command to override the component's default.
        """
        return pulumi.get(self, "run_command")

    @run_command.setter
    def run_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_command", value)

    @property
    @pulumi.getter(name="sourceDir")
    def source_dir(self) -> Optional[pulumi.Input[str]]:
        """
        An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
        """
        return pulumi.get(self, "source_dir")

    @source_dir.setter
    def source_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_dir", value)


@pulumi.input_type
class AppLogDestinationDatadogSpecArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 endpoint: Optional[pulumi.Input[str]] = None):
        """
        DataDog configuration.
        :param pulumi.Input[str] api_key: Datadog API key.
        :param pulumi.Input[str] endpoint: Datadog HTTP log intake endpoint.
        """
        pulumi.set(__self__, "api_key", api_key)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        """
        Datadog API key.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Datadog HTTP log intake endpoint.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)


@pulumi.input_type
class AppLogDestinationDefinitionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 datadog: Optional[pulumi.Input['AppLogDestinationDatadogSpecArgs']] = None,
                 logtail: Optional[pulumi.Input['AppLogDestinationLogtailSpecArgs']] = None,
                 papertrail: Optional[pulumi.Input['AppLogDestinationPapertrailSpecArgs']] = None):
        """
        :param pulumi.Input['AppLogDestinationDatadogSpecArgs'] datadog: DataDog configuration.
        :param pulumi.Input['AppLogDestinationLogtailSpecArgs'] logtail: Logtail configuration.
        :param pulumi.Input['AppLogDestinationPapertrailSpecArgs'] papertrail: Papertrail configuration.
        """
        pulumi.set(__self__, "name", name)
        if datadog is not None:
            pulumi.set(__self__, "datadog", datadog)
        if logtail is not None:
            pulumi.set(__self__, "logtail", logtail)
        if papertrail is not None:
            pulumi.set(__self__, "papertrail", papertrail)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def datadog(self) -> Optional[pulumi.Input['AppLogDestinationDatadogSpecArgs']]:
        """
        DataDog configuration.
        """
        return pulumi.get(self, "datadog")

    @datadog.setter
    def datadog(self, value: Optional[pulumi.Input['AppLogDestinationDatadogSpecArgs']]):
        pulumi.set(self, "datadog", value)

    @property
    @pulumi.getter
    def logtail(self) -> Optional[pulumi.Input['AppLogDestinationLogtailSpecArgs']]:
        """
        Logtail configuration.
        """
        return pulumi.get(self, "logtail")

    @logtail.setter
    def logtail(self, value: Optional[pulumi.Input['AppLogDestinationLogtailSpecArgs']]):
        pulumi.set(self, "logtail", value)

    @property
    @pulumi.getter
    def papertrail(self) -> Optional[pulumi.Input['AppLogDestinationPapertrailSpecArgs']]:
        """
        Papertrail configuration.
        """
        return pulumi.get(self, "papertrail")

    @papertrail.setter
    def papertrail(self, value: Optional[pulumi.Input['AppLogDestinationPapertrailSpecArgs']]):
        pulumi.set(self, "papertrail", value)


@pulumi.input_type
class AppLogDestinationLogtailSpecArgs:
    def __init__(__self__, *,
                 token: Optional[pulumi.Input[str]] = None):
        """
        Logtail configuration.
        :param pulumi.Input[str] token: Logtail token.
        """
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Logtail token.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class AppLogDestinationPapertrailSpecArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str]):
        """
        Papertrail configuration.
        :param pulumi.Input[str] endpoint: Papertrail syslog endpoint.
        """
        pulumi.set(__self__, "endpoint", endpoint)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        Papertrail syslog endpoint.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)


@pulumi.input_type
class AppRouteSpecArgs:
    def __init__(__self__, *,
                 path: Optional[pulumi.Input[str]] = None,
                 preserve_path_prefix: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] path: An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
        :param pulumi.Input[bool] preserve_path_prefix: An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
        """
        if path is not None:
            pulumi.set(__self__, "path", path)
        if preserve_path_prefix is not None:
            pulumi.set(__self__, "preserve_path_prefix", preserve_path_prefix)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        An HTTP path prefix. Paths must start with / and must be unique across all components within an app.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="preservePathPrefix")
    def preserve_path_prefix(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.
        """
        return pulumi.get(self, "preserve_path_prefix")

    @preserve_path_prefix.setter
    def preserve_path_prefix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_path_prefix", value)


@pulumi.input_type
class AppServiceSpecHealthCheckArgs:
    def __init__(__self__, *,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 http_path: Optional[pulumi.Input[str]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] failure_threshold: The number of failed health checks before considered unhealthy.
        :param pulumi.Input[str] http_path: The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
        :param pulumi.Input[int] initial_delay_seconds: The number of seconds to wait before beginning health checks.
        :param pulumi.Input[int] period_seconds: The number of seconds to wait between health checks.
        :param pulumi.Input[int] port: The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
        :param pulumi.Input[int] success_threshold: The number of successful health checks before considered healthy.
        :param pulumi.Input[int] timeout_seconds: The number of seconds after which the check times out.
        """
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_path is not None:
            pulumi.set(__self__, "http_path", http_path)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The number of failed health checks before considered unhealthy.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="httpPath")
    def http_path(self) -> Optional[pulumi.Input[str]]:
        """
        The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.
        """
        return pulumi.get(self, "http_path")

    @http_path.setter
    def http_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_path", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The number of seconds to wait before beginning health checks.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The number of seconds to wait between health checks.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The number of successful health checks before considered healthy.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The number of seconds after which the check times out.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class AppServiceSpecArgs:
    def __init__(__self__, *,
                 build_command: Optional[pulumi.Input[str]] = None,
                 cors: Optional[pulumi.Input['AppsCorsPolicyArgs']] = None,
                 dockerfile_path: Optional[pulumi.Input[str]] = None,
                 environment_slug: Optional[pulumi.Input[str]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]]] = None,
                 git: Optional[pulumi.Input['AppsGitSourceSpecArgs']] = None,
                 github: Optional[pulumi.Input['AppsGithubSourceSpecArgs']] = None,
                 gitlab: Optional[pulumi.Input['AppsGitlabSourceSpecArgs']] = None,
                 health_check: Optional[pulumi.Input['AppServiceSpecHealthCheckArgs']] = None,
                 http_port: Optional[pulumi.Input[int]] = None,
                 image: Optional[pulumi.Input['AppsImageSourceSpecArgs']] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 instance_size_slug: Optional[pulumi.Input['AppComponentInstanceBaseInstanceSizeSlug']] = None,
                 internal_ports: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 log_destinations: Optional[pulumi.Input['AppLogDestinationDefinitionArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['AppRouteSpecArgs']]]] = None,
                 run_command: Optional[pulumi.Input[str]] = None,
                 source_dir: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] build_command: An optional build command to run while building this component from source.
        :param pulumi.Input[str] dockerfile_path: The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
        :param pulumi.Input[str] environment_slug: An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
        :param pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]] envs: A list of environment variables made available to the component.
        :param pulumi.Input[int] http_port: The internal port on which this service's run command will listen. Default: 8080
               If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
        :param pulumi.Input[int] instance_count: The amount of instances that this component should be scaled to. Default: 1
        :param pulumi.Input['AppComponentInstanceBaseInstanceSizeSlug'] instance_size_slug: The instance size to use for this component. Default: `basic-xxs`
        :param pulumi.Input[Sequence[pulumi.Input[int]]] internal_ports: The ports on which this service will listen for internal traffic.
        :param pulumi.Input[str] name: The name. Must be unique across all components within the same app.
        :param pulumi.Input[Sequence[pulumi.Input['AppRouteSpecArgs']]] routes: A list of HTTP routes that should be routed to this component.
        :param pulumi.Input[str] run_command: An optional run command to override the component's default.
        :param pulumi.Input[str] source_dir: An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
        """
        if build_command is not None:
            pulumi.set(__self__, "build_command", build_command)
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if dockerfile_path is not None:
            pulumi.set(__self__, "dockerfile_path", dockerfile_path)
        if environment_slug is not None:
            pulumi.set(__self__, "environment_slug", environment_slug)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if git is not None:
            pulumi.set(__self__, "git", git)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if instance_count is None:
            instance_count = 1
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if instance_size_slug is None:
            instance_size_slug = 'basic-xxs'
        if instance_size_slug is not None:
            pulumi.set(__self__, "instance_size_slug", instance_size_slug)
        if internal_ports is not None:
            pulumi.set(__self__, "internal_ports", internal_ports)
        if log_destinations is not None:
            pulumi.set(__self__, "log_destinations", log_destinations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if run_command is not None:
            pulumi.set(__self__, "run_command", run_command)
        if source_dir is not None:
            pulumi.set(__self__, "source_dir", source_dir)

    @property
    @pulumi.getter(name="buildCommand")
    def build_command(self) -> Optional[pulumi.Input[str]]:
        """
        An optional build command to run while building this component from source.
        """
        return pulumi.get(self, "build_command")

    @build_command.setter
    def build_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "build_command", value)

    @property
    @pulumi.getter
    def cors(self) -> Optional[pulumi.Input['AppsCorsPolicyArgs']]:
        return pulumi.get(self, "cors")

    @cors.setter
    def cors(self, value: Optional[pulumi.Input['AppsCorsPolicyArgs']]):
        pulumi.set(self, "cors", value)

    @property
    @pulumi.getter(name="dockerfilePath")
    def dockerfile_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
        """
        return pulumi.get(self, "dockerfile_path")

    @dockerfile_path.setter
    def dockerfile_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dockerfile_path", value)

    @property
    @pulumi.getter(name="environmentSlug")
    def environment_slug(self) -> Optional[pulumi.Input[str]]:
        """
        An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
        """
        return pulumi.get(self, "environment_slug")

    @environment_slug.setter
    def environment_slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_slug", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]]]:
        """
        A list of environment variables made available to the component.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter
    def git(self) -> Optional[pulumi.Input['AppsGitSourceSpecArgs']]:
        return pulumi.get(self, "git")

    @git.setter
    def git(self, value: Optional[pulumi.Input['AppsGitSourceSpecArgs']]):
        pulumi.set(self, "git", value)

    @property
    @pulumi.getter
    def github(self) -> Optional[pulumi.Input['AppsGithubSourceSpecArgs']]:
        return pulumi.get(self, "github")

    @github.setter
    def github(self, value: Optional[pulumi.Input['AppsGithubSourceSpecArgs']]):
        pulumi.set(self, "github", value)

    @property
    @pulumi.getter
    def gitlab(self) -> Optional[pulumi.Input['AppsGitlabSourceSpecArgs']]:
        return pulumi.get(self, "gitlab")

    @gitlab.setter
    def gitlab(self, value: Optional[pulumi.Input['AppsGitlabSourceSpecArgs']]):
        pulumi.set(self, "gitlab", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['AppServiceSpecHealthCheckArgs']]:
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['AppServiceSpecHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[int]]:
        """
        The internal port on which this service's run command will listen. Default: 8080
        If there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.
        """
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['AppsImageSourceSpecArgs']]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['AppsImageSourceSpecArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of instances that this component should be scaled to. Default: 1
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="instanceSizeSlug")
    def instance_size_slug(self) -> Optional[pulumi.Input['AppComponentInstanceBaseInstanceSizeSlug']]:
        """
        The instance size to use for this component. Default: `basic-xxs`
        """
        return pulumi.get(self, "instance_size_slug")

    @instance_size_slug.setter
    def instance_size_slug(self, value: Optional[pulumi.Input['AppComponentInstanceBaseInstanceSizeSlug']]):
        pulumi.set(self, "instance_size_slug", value)

    @property
    @pulumi.getter(name="internalPorts")
    def internal_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The ports on which this service will listen for internal traffic.
        """
        return pulumi.get(self, "internal_ports")

    @internal_ports.setter
    def internal_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "internal_ports", value)

    @property
    @pulumi.getter(name="logDestinations")
    def log_destinations(self) -> Optional[pulumi.Input['AppLogDestinationDefinitionArgs']]:
        return pulumi.get(self, "log_destinations")

    @log_destinations.setter
    def log_destinations(self, value: Optional[pulumi.Input['AppLogDestinationDefinitionArgs']]):
        pulumi.set(self, "log_destinations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name. Must be unique across all components within the same app.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppRouteSpecArgs']]]]:
        """
        A list of HTTP routes that should be routed to this component.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppRouteSpecArgs']]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter(name="runCommand")
    def run_command(self) -> Optional[pulumi.Input[str]]:
        """
        An optional run command to override the component's default.
        """
        return pulumi.get(self, "run_command")

    @run_command.setter
    def run_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_command", value)

    @property
    @pulumi.getter(name="sourceDir")
    def source_dir(self) -> Optional[pulumi.Input[str]]:
        """
        An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
        """
        return pulumi.get(self, "source_dir")

    @source_dir.setter
    def source_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_dir", value)


@pulumi.input_type
class AppSpecArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input['AppDatabaseSpecArgs']]]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input['AppDomainSpecArgs']]]] = None,
                 functions: Optional[pulumi.Input[Sequence[pulumi.Input['AppFunctionsSpecArgs']]]] = None,
                 ingress: Optional[pulumi.Input['AppIngressSpecArgs']] = None,
                 jobs: Optional[pulumi.Input[Sequence[pulumi.Input['AppJobSpecArgs']]]] = None,
                 region: Optional[pulumi.Input['AppSpecRegion']] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['AppServiceSpecArgs']]]] = None,
                 static_sites: Optional[pulumi.Input[Sequence[pulumi.Input['AppStaticSiteSpecArgs']]]] = None,
                 workers: Optional[pulumi.Input[Sequence[pulumi.Input['AppWorkerSpecArgs']]]] = None):
        """
        The desired configuration of an application.
        :param pulumi.Input[str] name: The name of the app. Must be unique across all apps in the same account.
        :param pulumi.Input[Sequence[pulumi.Input['AppDatabaseSpecArgs']]] databases: Database instances which can provide persistence to workloads within the
               application.
        :param pulumi.Input[Sequence[pulumi.Input['AppDomainSpecArgs']]] domains: A set of hostnames where the application will be available.
        :param pulumi.Input[Sequence[pulumi.Input['AppFunctionsSpecArgs']]] functions: Workloads which expose publicly-accessible HTTP services via Functions Components.
        :param pulumi.Input['AppIngressSpecArgs'] ingress: Specification for app ingress configurations.
        :param pulumi.Input[Sequence[pulumi.Input['AppJobSpecArgs']]] jobs: Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
        :param pulumi.Input['AppSpecRegion'] region: The slug form of the geographical origin of the app. Default: `nearest available`
        :param pulumi.Input[Sequence[pulumi.Input['AppServiceSpecArgs']]] services: Workloads which expose publicly-accessible HTTP services.
        :param pulumi.Input[Sequence[pulumi.Input['AppStaticSiteSpecArgs']]] static_sites: Content which can be rendered to static web assets.
        :param pulumi.Input[Sequence[pulumi.Input['AppWorkerSpecArgs']]] workers: Workloads which do not expose publicly-accessible HTTP services.
        """
        pulumi.set(__self__, "name", name)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if functions is not None:
            pulumi.set(__self__, "functions", functions)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if jobs is not None:
            pulumi.set(__self__, "jobs", jobs)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if static_sites is not None:
            pulumi.set(__self__, "static_sites", static_sites)
        if workers is not None:
            pulumi.set(__self__, "workers", workers)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the app. Must be unique across all apps in the same account.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppDatabaseSpecArgs']]]]:
        """
        Database instances which can provide persistence to workloads within the
        application.
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppDatabaseSpecArgs']]]]):
        pulumi.set(self, "databases", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppDomainSpecArgs']]]]:
        """
        A set of hostnames where the application will be available.
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppDomainSpecArgs']]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def functions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppFunctionsSpecArgs']]]]:
        """
        Workloads which expose publicly-accessible HTTP services via Functions Components.
        """
        return pulumi.get(self, "functions")

    @functions.setter
    def functions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppFunctionsSpecArgs']]]]):
        pulumi.set(self, "functions", value)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['AppIngressSpecArgs']]:
        """
        Specification for app ingress configurations.
        """
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['AppIngressSpecArgs']]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter
    def jobs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppJobSpecArgs']]]]:
        """
        Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.
        """
        return pulumi.get(self, "jobs")

    @jobs.setter
    def jobs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppJobSpecArgs']]]]):
        pulumi.set(self, "jobs", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input['AppSpecRegion']]:
        """
        The slug form of the geographical origin of the app. Default: `nearest available`
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input['AppSpecRegion']]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppServiceSpecArgs']]]]:
        """
        Workloads which expose publicly-accessible HTTP services.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppServiceSpecArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="staticSites")
    def static_sites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppStaticSiteSpecArgs']]]]:
        """
        Content which can be rendered to static web assets.
        """
        return pulumi.get(self, "static_sites")

    @static_sites.setter
    def static_sites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppStaticSiteSpecArgs']]]]):
        pulumi.set(self, "static_sites", value)

    @property
    @pulumi.getter
    def workers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppWorkerSpecArgs']]]]:
        """
        Workloads which do not expose publicly-accessible HTTP services.
        """
        return pulumi.get(self, "workers")

    @workers.setter
    def workers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppWorkerSpecArgs']]]]):
        pulumi.set(self, "workers", value)


@pulumi.input_type
class AppStaticSiteSpecArgs:
    def __init__(__self__, *,
                 build_command: Optional[pulumi.Input[str]] = None,
                 catchall_document: Optional[pulumi.Input[str]] = None,
                 cors: Optional[pulumi.Input['AppsCorsPolicyArgs']] = None,
                 dockerfile_path: Optional[pulumi.Input[str]] = None,
                 environment_slug: Optional[pulumi.Input[str]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]]] = None,
                 error_document: Optional[pulumi.Input[str]] = None,
                 git: Optional[pulumi.Input['AppsGitSourceSpecArgs']] = None,
                 github: Optional[pulumi.Input['AppsGithubSourceSpecArgs']] = None,
                 gitlab: Optional[pulumi.Input['AppsGitlabSourceSpecArgs']] = None,
                 image: Optional[pulumi.Input['AppsImageSourceSpecArgs']] = None,
                 index_document: Optional[pulumi.Input[str]] = None,
                 log_destinations: Optional[pulumi.Input['AppLogDestinationDefinitionArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output_dir: Optional[pulumi.Input[str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['AppRouteSpecArgs']]]] = None,
                 run_command: Optional[pulumi.Input[str]] = None,
                 source_dir: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] build_command: An optional build command to run while building this component from source.
        :param pulumi.Input[str] catchall_document: The name of the document to use as the fallback for any requests to documents that are not found when serving this static site. Only 1 of `catchall_document` or `error_document` can be set.
        :param pulumi.Input[str] dockerfile_path: The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
        :param pulumi.Input[str] environment_slug: An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
        :param pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]] envs: A list of environment variables made available to the component.
        :param pulumi.Input[str] error_document: The name of the error document to use when serving this static site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
        :param pulumi.Input[str] index_document: The name of the index document to use when serving this static site. Default: index.html
        :param pulumi.Input[str] name: The name. Must be unique across all components within the same app.
        :param pulumi.Input[str] output_dir: An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
        :param pulumi.Input[Sequence[pulumi.Input['AppRouteSpecArgs']]] routes: A list of HTTP routes that should be routed to this component.
        :param pulumi.Input[str] run_command: An optional run command to override the component's default.
        :param pulumi.Input[str] source_dir: An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
        """
        if build_command is not None:
            pulumi.set(__self__, "build_command", build_command)
        if catchall_document is not None:
            pulumi.set(__self__, "catchall_document", catchall_document)
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if dockerfile_path is not None:
            pulumi.set(__self__, "dockerfile_path", dockerfile_path)
        if environment_slug is not None:
            pulumi.set(__self__, "environment_slug", environment_slug)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if error_document is None:
            error_document = '404.html'
        if error_document is not None:
            pulumi.set(__self__, "error_document", error_document)
        if git is not None:
            pulumi.set(__self__, "git", git)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if index_document is None:
            index_document = 'index.html'
        if index_document is not None:
            pulumi.set(__self__, "index_document", index_document)
        if log_destinations is not None:
            pulumi.set(__self__, "log_destinations", log_destinations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if output_dir is not None:
            pulumi.set(__self__, "output_dir", output_dir)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if run_command is not None:
            pulumi.set(__self__, "run_command", run_command)
        if source_dir is not None:
            pulumi.set(__self__, "source_dir", source_dir)

    @property
    @pulumi.getter(name="buildCommand")
    def build_command(self) -> Optional[pulumi.Input[str]]:
        """
        An optional build command to run while building this component from source.
        """
        return pulumi.get(self, "build_command")

    @build_command.setter
    def build_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "build_command", value)

    @property
    @pulumi.getter(name="catchallDocument")
    def catchall_document(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the document to use as the fallback for any requests to documents that are not found when serving this static site. Only 1 of `catchall_document` or `error_document` can be set.
        """
        return pulumi.get(self, "catchall_document")

    @catchall_document.setter
    def catchall_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catchall_document", value)

    @property
    @pulumi.getter
    def cors(self) -> Optional[pulumi.Input['AppsCorsPolicyArgs']]:
        return pulumi.get(self, "cors")

    @cors.setter
    def cors(self, value: Optional[pulumi.Input['AppsCorsPolicyArgs']]):
        pulumi.set(self, "cors", value)

    @property
    @pulumi.getter(name="dockerfilePath")
    def dockerfile_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
        """
        return pulumi.get(self, "dockerfile_path")

    @dockerfile_path.setter
    def dockerfile_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dockerfile_path", value)

    @property
    @pulumi.getter(name="environmentSlug")
    def environment_slug(self) -> Optional[pulumi.Input[str]]:
        """
        An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
        """
        return pulumi.get(self, "environment_slug")

    @environment_slug.setter
    def environment_slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_slug", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]]]:
        """
        A list of environment variables made available to the component.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="errorDocument")
    def error_document(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the error document to use when serving this static site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.
        """
        return pulumi.get(self, "error_document")

    @error_document.setter
    def error_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_document", value)

    @property
    @pulumi.getter
    def git(self) -> Optional[pulumi.Input['AppsGitSourceSpecArgs']]:
        return pulumi.get(self, "git")

    @git.setter
    def git(self, value: Optional[pulumi.Input['AppsGitSourceSpecArgs']]):
        pulumi.set(self, "git", value)

    @property
    @pulumi.getter
    def github(self) -> Optional[pulumi.Input['AppsGithubSourceSpecArgs']]:
        return pulumi.get(self, "github")

    @github.setter
    def github(self, value: Optional[pulumi.Input['AppsGithubSourceSpecArgs']]):
        pulumi.set(self, "github", value)

    @property
    @pulumi.getter
    def gitlab(self) -> Optional[pulumi.Input['AppsGitlabSourceSpecArgs']]:
        return pulumi.get(self, "gitlab")

    @gitlab.setter
    def gitlab(self, value: Optional[pulumi.Input['AppsGitlabSourceSpecArgs']]):
        pulumi.set(self, "gitlab", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['AppsImageSourceSpecArgs']]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['AppsImageSourceSpecArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the index document to use when serving this static site. Default: index.html
        """
        return pulumi.get(self, "index_document")

    @index_document.setter
    def index_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_document", value)

    @property
    @pulumi.getter(name="logDestinations")
    def log_destinations(self) -> Optional[pulumi.Input['AppLogDestinationDefinitionArgs']]:
        return pulumi.get(self, "log_destinations")

    @log_destinations.setter
    def log_destinations(self, value: Optional[pulumi.Input['AppLogDestinationDefinitionArgs']]):
        pulumi.set(self, "log_destinations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name. Must be unique across all components within the same app.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="outputDir")
    def output_dir(self) -> Optional[pulumi.Input[str]]:
        """
        An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.
        """
        return pulumi.get(self, "output_dir")

    @output_dir.setter
    def output_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_dir", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppRouteSpecArgs']]]]:
        """
        A list of HTTP routes that should be routed to this component.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppRouteSpecArgs']]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter(name="runCommand")
    def run_command(self) -> Optional[pulumi.Input[str]]:
        """
        An optional run command to override the component's default.
        """
        return pulumi.get(self, "run_command")

    @run_command.setter
    def run_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_command", value)

    @property
    @pulumi.getter(name="sourceDir")
    def source_dir(self) -> Optional[pulumi.Input[str]]:
        """
        An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
        """
        return pulumi.get(self, "source_dir")

    @source_dir.setter
    def source_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_dir", value)


@pulumi.input_type
class AppVariableDefinitionArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 scope: Optional[pulumi.Input['AppVariableDefinitionScope']] = None,
                 type: Optional[pulumi.Input['AppVariableDefinitionType']] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The variable name
        :param pulumi.Input['AppVariableDefinitionScope'] scope: - RUN_TIME: Made available only at run-time
               - BUILD_TIME: Made available only at build-time
               - RUN_AND_BUILD_TIME: Made available at both build and run-time
        :param pulumi.Input['AppVariableDefinitionType'] type: - GENERAL: A plain-text environment variable
               - SECRET: A secret encrypted environment variable
        :param pulumi.Input[str] value: The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
        """
        pulumi.set(__self__, "key", key)
        if scope is None:
            scope = 'RUN_AND_BUILD_TIME'
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if type is None:
            type = 'GENERAL'
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The variable name
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['AppVariableDefinitionScope']]:
        """
        - RUN_TIME: Made available only at run-time
        - BUILD_TIME: Made available only at build-time
        - RUN_AND_BUILD_TIME: Made available at both build and run-time
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['AppVariableDefinitionScope']]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['AppVariableDefinitionType']]:
        """
        - GENERAL: A plain-text environment variable
        - SECRET: A secret encrypted environment variable
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['AppVariableDefinitionType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AppWorkerSpecArgs:
    def __init__(__self__, *,
                 build_command: Optional[pulumi.Input[str]] = None,
                 dockerfile_path: Optional[pulumi.Input[str]] = None,
                 environment_slug: Optional[pulumi.Input[str]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]]] = None,
                 git: Optional[pulumi.Input['AppsGitSourceSpecArgs']] = None,
                 github: Optional[pulumi.Input['AppsGithubSourceSpecArgs']] = None,
                 gitlab: Optional[pulumi.Input['AppsGitlabSourceSpecArgs']] = None,
                 image: Optional[pulumi.Input['AppsImageSourceSpecArgs']] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 instance_size_slug: Optional[pulumi.Input['AppComponentInstanceBaseInstanceSizeSlug']] = None,
                 log_destinations: Optional[pulumi.Input['AppLogDestinationDefinitionArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 run_command: Optional[pulumi.Input[str]] = None,
                 source_dir: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] build_command: An optional build command to run while building this component from source.
        :param pulumi.Input[str] dockerfile_path: The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
        :param pulumi.Input[str] environment_slug: An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
        :param pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]] envs: A list of environment variables made available to the component.
        :param pulumi.Input[int] instance_count: The amount of instances that this component should be scaled to. Default: 1
        :param pulumi.Input['AppComponentInstanceBaseInstanceSizeSlug'] instance_size_slug: The instance size to use for this component. Default: `basic-xxs`
        :param pulumi.Input[str] name: The name. Must be unique across all components within the same app.
        :param pulumi.Input[str] run_command: An optional run command to override the component's default.
        :param pulumi.Input[str] source_dir: An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
        """
        if build_command is not None:
            pulumi.set(__self__, "build_command", build_command)
        if dockerfile_path is not None:
            pulumi.set(__self__, "dockerfile_path", dockerfile_path)
        if environment_slug is not None:
            pulumi.set(__self__, "environment_slug", environment_slug)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if git is not None:
            pulumi.set(__self__, "git", git)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if instance_count is None:
            instance_count = 1
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if instance_size_slug is None:
            instance_size_slug = 'basic-xxs'
        if instance_size_slug is not None:
            pulumi.set(__self__, "instance_size_slug", instance_size_slug)
        if log_destinations is not None:
            pulumi.set(__self__, "log_destinations", log_destinations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if run_command is not None:
            pulumi.set(__self__, "run_command", run_command)
        if source_dir is not None:
            pulumi.set(__self__, "source_dir", source_dir)

    @property
    @pulumi.getter(name="buildCommand")
    def build_command(self) -> Optional[pulumi.Input[str]]:
        """
        An optional build command to run while building this component from source.
        """
        return pulumi.get(self, "build_command")

    @build_command.setter
    def build_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "build_command", value)

    @property
    @pulumi.getter(name="dockerfilePath")
    def dockerfile_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.
        """
        return pulumi.get(self, "dockerfile_path")

    @dockerfile_path.setter
    def dockerfile_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dockerfile_path", value)

    @property
    @pulumi.getter(name="environmentSlug")
    def environment_slug(self) -> Optional[pulumi.Input[str]]:
        """
        An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).
        """
        return pulumi.get(self, "environment_slug")

    @environment_slug.setter
    def environment_slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_slug", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]]]:
        """
        A list of environment variables made available to the component.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppVariableDefinitionArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter
    def git(self) -> Optional[pulumi.Input['AppsGitSourceSpecArgs']]:
        return pulumi.get(self, "git")

    @git.setter
    def git(self, value: Optional[pulumi.Input['AppsGitSourceSpecArgs']]):
        pulumi.set(self, "git", value)

    @property
    @pulumi.getter
    def github(self) -> Optional[pulumi.Input['AppsGithubSourceSpecArgs']]:
        return pulumi.get(self, "github")

    @github.setter
    def github(self, value: Optional[pulumi.Input['AppsGithubSourceSpecArgs']]):
        pulumi.set(self, "github", value)

    @property
    @pulumi.getter
    def gitlab(self) -> Optional[pulumi.Input['AppsGitlabSourceSpecArgs']]:
        return pulumi.get(self, "gitlab")

    @gitlab.setter
    def gitlab(self, value: Optional[pulumi.Input['AppsGitlabSourceSpecArgs']]):
        pulumi.set(self, "gitlab", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['AppsImageSourceSpecArgs']]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['AppsImageSourceSpecArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of instances that this component should be scaled to. Default: 1
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="instanceSizeSlug")
    def instance_size_slug(self) -> Optional[pulumi.Input['AppComponentInstanceBaseInstanceSizeSlug']]:
        """
        The instance size to use for this component. Default: `basic-xxs`
        """
        return pulumi.get(self, "instance_size_slug")

    @instance_size_slug.setter
    def instance_size_slug(self, value: Optional[pulumi.Input['AppComponentInstanceBaseInstanceSizeSlug']]):
        pulumi.set(self, "instance_size_slug", value)

    @property
    @pulumi.getter(name="logDestinations")
    def log_destinations(self) -> Optional[pulumi.Input['AppLogDestinationDefinitionArgs']]:
        return pulumi.get(self, "log_destinations")

    @log_destinations.setter
    def log_destinations(self, value: Optional[pulumi.Input['AppLogDestinationDefinitionArgs']]):
        pulumi.set(self, "log_destinations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name. Must be unique across all components within the same app.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="runCommand")
    def run_command(self) -> Optional[pulumi.Input[str]]:
        """
        An optional run command to override the component's default.
        """
        return pulumi.get(self, "run_command")

    @run_command.setter
    def run_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_command", value)

    @property
    @pulumi.getter(name="sourceDir")
    def source_dir(self) -> Optional[pulumi.Input[str]]:
        """
        An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.
        """
        return pulumi.get(self, "source_dir")

    @source_dir.setter
    def source_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_dir", value)


@pulumi.input_type
class AppsCorsPolicyArgs:
    def __init__(__self__, *,
                 allow_credentials: Optional[pulumi.Input[bool]] = None,
                 allow_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allow_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allow_origins: Optional[pulumi.Input[Sequence[pulumi.Input['AppsStringMatchArgs']]]] = None,
                 expose_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_age: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] allow_credentials: Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allow_headers: The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allow_methods: The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
        :param pulumi.Input[Sequence[pulumi.Input['AppsStringMatchArgs']]] allow_origins: The set of allowed CORS origins.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] expose_headers: The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
        :param pulumi.Input[str] max_age: An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
        """
        if allow_credentials is not None:
            pulumi.set(__self__, "allow_credentials", allow_credentials)
        if allow_headers is not None:
            pulumi.set(__self__, "allow_headers", allow_headers)
        if allow_methods is not None:
            pulumi.set(__self__, "allow_methods", allow_methods)
        if allow_origins is not None:
            pulumi.set(__self__, "allow_origins", allow_origins)
        if expose_headers is not None:
            pulumi.set(__self__, "expose_headers", expose_headers)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.
        """
        return pulumi.get(self, "allow_credentials")

    @allow_credentials.setter
    def allow_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_credentials", value)

    @property
    @pulumi.getter(name="allowHeaders")
    def allow_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.
        """
        return pulumi.get(self, "allow_headers")

    @allow_headers.setter
    def allow_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_headers", value)

    @property
    @pulumi.getter(name="allowMethods")
    def allow_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.
        """
        return pulumi.get(self, "allow_methods")

    @allow_methods.setter
    def allow_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_methods", value)

    @property
    @pulumi.getter(name="allowOrigins")
    def allow_origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppsStringMatchArgs']]]]:
        """
        The set of allowed CORS origins.
        """
        return pulumi.get(self, "allow_origins")

    @allow_origins.setter
    def allow_origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppsStringMatchArgs']]]]):
        pulumi.set(self, "allow_origins", value)

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.
        """
        return pulumi.get(self, "expose_headers")

    @expose_headers.setter
    def expose_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "expose_headers", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[str]]:
        """
        An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_age", value)


@pulumi.input_type
class AppsGitSourceSpecArgs:
    def __init__(__self__, *,
                 branch: Optional[pulumi.Input[str]] = None,
                 repo_clone_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] branch: The name of the branch to use
        :param pulumi.Input[str] repo_clone_url: The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
        """
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if repo_clone_url is not None:
            pulumi.set(__self__, "repo_clone_url", repo_clone_url)

    @property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the branch to use
        """
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter(name="repoCloneUrl")
    def repo_clone_url(self) -> Optional[pulumi.Input[str]]:
        """
        The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`
        """
        return pulumi.get(self, "repo_clone_url")

    @repo_clone_url.setter
    def repo_clone_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_clone_url", value)


@pulumi.input_type
class AppsGithubSourceSpecArgs:
    def __init__(__self__, *,
                 branch: Optional[pulumi.Input[str]] = None,
                 deploy_on_push: Optional[pulumi.Input[bool]] = None,
                 repo: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] branch: The name of the branch to use
        :param pulumi.Input[bool] deploy_on_push: Whether to automatically deploy new commits made to the repo
        :param pulumi.Input[str] repo: The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
        """
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if deploy_on_push is not None:
            pulumi.set(__self__, "deploy_on_push", deploy_on_push)
        if repo is not None:
            pulumi.set(__self__, "repo", repo)

    @property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the branch to use
        """
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter(name="deployOnPush")
    def deploy_on_push(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically deploy new commits made to the repo
        """
        return pulumi.get(self, "deploy_on_push")

    @deploy_on_push.setter
    def deploy_on_push(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deploy_on_push", value)

    @property
    @pulumi.getter
    def repo(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
        """
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo", value)


@pulumi.input_type
class AppsGitlabSourceSpecArgs:
    def __init__(__self__, *,
                 branch: Optional[pulumi.Input[str]] = None,
                 deploy_on_push: Optional[pulumi.Input[bool]] = None,
                 repo: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] branch: The name of the branch to use
        :param pulumi.Input[bool] deploy_on_push: Whether to automatically deploy new commits made to the repo
        :param pulumi.Input[str] repo: The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
        """
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if deploy_on_push is not None:
            pulumi.set(__self__, "deploy_on_push", deploy_on_push)
        if repo is not None:
            pulumi.set(__self__, "repo", repo)

    @property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the branch to use
        """
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter(name="deployOnPush")
    def deploy_on_push(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically deploy new commits made to the repo
        """
        return pulumi.get(self, "deploy_on_push")

    @deploy_on_push.setter
    def deploy_on_push(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deploy_on_push", value)

    @property
    @pulumi.getter
    def repo(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`
        """
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo", value)


@pulumi.input_type
class AppsImageSourceSpecArgs:
    def __init__(__self__, *,
                 registry: Optional[pulumi.Input[str]] = None,
                 registry_type: Optional[pulumi.Input['AppsImageSourceSpecRegistryType']] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] registry: The registry name. Must be left empty for the `DOCR` registry type.
        :param pulumi.Input['AppsImageSourceSpecRegistryType'] registry_type: - DOCKER_HUB: The DockerHub container registry type.
               - DOCR: The DigitalOcean container registry type.
        :param pulumi.Input[str] repository: The repository name.
        :param pulumi.Input[str] tag: The repository tag. Defaults to `latest` if not provided.
        """
        if registry is not None:
            pulumi.set(__self__, "registry", registry)
        if registry_type is not None:
            pulumi.set(__self__, "registry_type", registry_type)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if tag is None:
            tag = 'latest'
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        """
        The registry name. Must be left empty for the `DOCR` registry type.
        """
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter(name="registryType")
    def registry_type(self) -> Optional[pulumi.Input['AppsImageSourceSpecRegistryType']]:
        """
        - DOCKER_HUB: The DockerHub container registry type.
        - DOCR: The DigitalOcean container registry type.
        """
        return pulumi.get(self, "registry_type")

    @registry_type.setter
    def registry_type(self, value: Optional[pulumi.Input['AppsImageSourceSpecRegistryType']]):
        pulumi.set(self, "registry_type", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        The repository name.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        The repository tag. Defaults to `latest` if not provided.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class AppsStringMatchArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] exact: Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
        :param pulumi.Input[str] prefix: Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
        :param pulumi.Input[str] regex: RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
        """
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        """
        Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.
        """
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        """
        RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax
        """
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)


