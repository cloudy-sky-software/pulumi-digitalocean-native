# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AppResponse',
    'AwaitableAppResponse',
    'get_app',
    'get_app_output',
]

@pulumi.output_type
class AppResponse:
    def __init__(__self__, app=None):
        if app and not isinstance(app, dict):
            raise TypeError("Expected argument 'app' to be a dict")
        pulumi.set(__self__, "app", app)

    @property
    @pulumi.getter
    def app(self) -> Optional['outputs.App']:
        """
        An application's configuration and status.
        """
        return pulumi.get(self, "app")


class AwaitableAppResponse(AppResponse):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return AppResponse(
            app=self.app)


def get_app(id: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableAppResponse:
    """
    Use this data source to access information about an existing resource.

    :param str id: The ID of the app
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean-native:apps/v2:getApp', __args__, opts=opts, typ=AppResponse).value

    return AwaitableAppResponse(
        app=pulumi.get(__ret__, 'app'))


@_utilities.lift_output_func(get_app)
def get_app_output(id: Optional[pulumi.Input[str]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[AppResponse]:
    """
    Use this data source to access information about an existing resource.

    :param str id: The ID of the app
    """
    ...
