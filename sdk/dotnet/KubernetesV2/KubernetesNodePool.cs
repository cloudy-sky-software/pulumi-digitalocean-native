// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOceanNative.KubernetesV2
{
    [DigitalOceanNativeResourceType("digitalocean-native:kubernetes/v2:KubernetesNodePool")]
    public partial class KubernetesNodePool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A boolean value indicating whether auto-scaling is enabled for this node pool.
        /// </summary>
        [Output("autoScale")]
        public Output<bool?> AutoScale { get; private set; } = null!;

        /// <summary>
        /// The number of Droplet instances in the node pool.
        /// </summary>
        [Output("count")]
        public Output<int> Count { get; private set; } = null!;

        /// <summary>
        /// An object of key/value mappings specifying labels to apply to all nodes in a pool. Labels will automatically be applied to all existing nodes and any subsequent nodes added to the pool. Note that when a label is removed, it is not deleted from the nodes in the pool.
        /// </summary>
        [Output("labels")]
        public Output<object?> Labels { get; private set; } = null!;

        /// <summary>
        /// The maximum number of nodes that this node pool can be auto-scaled to. The value will be `0` if `auto_scale` is set to `false`.
        /// </summary>
        [Output("maxNodes")]
        public Output<int?> MaxNodes { get; private set; } = null!;

        /// <summary>
        /// The minimum number of nodes that this node pool can be auto-scaled to. The value will be `0` if `auto_scale` is set to `false`.
        /// </summary>
        [Output("minNodes")]
        public Output<int?> MinNodes { get; private set; } = null!;

        /// <summary>
        /// A human-readable name for the node pool.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("nodePool")]
        public Output<Outputs.KubernetesNodePool?> NodePool { get; private set; } = null!;

        /// <summary>
        /// An object specifying the details of a specific worker node in a node pool.
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<Outputs.Node>> Nodes { get; private set; } = null!;

        /// <summary>
        /// The slug identifier for the type of Droplet used as workers in the node pool.
        /// </summary>
        [Output("size")]
        public Output<string> Size { get; private set; } = null!;

        /// <summary>
        /// An array containing the tags applied to the node pool. All node pools are automatically tagged `k8s`, `k8s-worker`, and `k8s:$K8S_CLUSTER_ID`.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// An array of taints to apply to all nodes in a pool. Taints will automatically be applied to all existing nodes and any subsequent nodes added to the pool. When a taint is removed, it is deleted from all nodes in the pool.
        /// </summary>
        [Output("taints")]
        public Output<ImmutableArray<Outputs.KubernetesNodePoolTaint>> Taints { get; private set; } = null!;


        /// <summary>
        /// Create a KubernetesNodePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KubernetesNodePool(string name, KubernetesNodePoolArgs? args = null, CustomResourceOptions? options = null)
            : base("digitalocean-native:kubernetes/v2:KubernetesNodePool", name, args ?? new KubernetesNodePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KubernetesNodePool(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("digitalocean-native:kubernetes/v2:KubernetesNodePool", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/cloudy-sky-software/pulumi-digitalocean-native",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KubernetesNodePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KubernetesNodePool Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new KubernetesNodePool(name, id, options);
        }
    }

    public sealed class KubernetesNodePoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A boolean value indicating whether auto-scaling is enabled for this node pool.
        /// </summary>
        [Input("autoScale")]
        public Input<bool>? AutoScale { get; set; }

        /// <summary>
        /// A unique ID that can be used to reference a Kubernetes cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The number of Droplet instances in the node pool.
        /// </summary>
        [Input("count")]
        public Input<int>? Count { get; set; }

        /// <summary>
        /// An object of key/value mappings specifying labels to apply to all nodes in a pool. Labels will automatically be applied to all existing nodes and any subsequent nodes added to the pool. Note that when a label is removed, it is not deleted from the nodes in the pool.
        /// </summary>
        [Input("labels")]
        public Input<object>? Labels { get; set; }

        /// <summary>
        /// The maximum number of nodes that this node pool can be auto-scaled to. The value will be `0` if `auto_scale` is set to `false`.
        /// </summary>
        [Input("maxNodes")]
        public Input<int>? MaxNodes { get; set; }

        /// <summary>
        /// The minimum number of nodes that this node pool can be auto-scaled to. The value will be `0` if `auto_scale` is set to `false`.
        /// </summary>
        [Input("minNodes")]
        public Input<int>? MinNodes { get; set; }

        /// <summary>
        /// A human-readable name for the node pool.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodes")]
        private InputList<Inputs.NodeArgs>? _nodes;

        /// <summary>
        /// An object specifying the details of a specific worker node in a node pool.
        /// </summary>
        public InputList<Inputs.NodeArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.NodeArgs>());
            set => _nodes = value;
        }

        /// <summary>
        /// The slug identifier for the type of Droplet used as workers in the node pool.
        /// </summary>
        [Input("size")]
        public Input<string>? Size { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// An array containing the tags applied to the node pool. All node pools are automatically tagged `k8s`, `k8s-worker`, and `k8s:$K8S_CLUSTER_ID`.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("taints")]
        private InputList<Inputs.KubernetesNodePoolTaintArgs>? _taints;

        /// <summary>
        /// An array of taints to apply to all nodes in a pool. Taints will automatically be applied to all existing nodes and any subsequent nodes added to the pool. When a taint is removed, it is deleted from all nodes in the pool.
        /// </summary>
        public InputList<Inputs.KubernetesNodePoolTaintArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.KubernetesNodePoolTaintArgs>());
            set => _taints = value;
        }

        public KubernetesNodePoolArgs()
        {
        }
        public static new KubernetesNodePoolArgs Empty => new KubernetesNodePoolArgs();
    }
}
