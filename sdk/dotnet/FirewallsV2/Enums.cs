// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.DigitalOceanNative.FirewallsV2
{
    /// <summary>
    /// A status string indicating the current state of the firewall. This can be "waiting", "succeeded", or "failed".
    /// </summary>
    [EnumType]
    public readonly struct FirewallPropertiesStatus : IEquatable<FirewallPropertiesStatus>
    {
        private readonly string _value;

        private FirewallPropertiesStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPropertiesStatus Waiting { get; } = new FirewallPropertiesStatus("waiting");
        public static FirewallPropertiesStatus Succeeded { get; } = new FirewallPropertiesStatus("succeeded");
        public static FirewallPropertiesStatus Failed { get; } = new FirewallPropertiesStatus("failed");

        public static bool operator ==(FirewallPropertiesStatus left, FirewallPropertiesStatus right) => left.Equals(right);
        public static bool operator !=(FirewallPropertiesStatus left, FirewallPropertiesStatus right) => !left.Equals(right);

        public static explicit operator string(FirewallPropertiesStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPropertiesStatus other && Equals(other);
        public bool Equals(FirewallPropertiesStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of traffic to be allowed. This may be one of `tcp`, `udp`, or `icmp`.
    /// </summary>
    [EnumType]
    public readonly struct FirewallRuleBaseProtocol : IEquatable<FirewallRuleBaseProtocol>
    {
        private readonly string _value;

        private FirewallRuleBaseProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallRuleBaseProtocol Tcp { get; } = new FirewallRuleBaseProtocol("tcp");
        public static FirewallRuleBaseProtocol Udp { get; } = new FirewallRuleBaseProtocol("udp");
        public static FirewallRuleBaseProtocol Icmp { get; } = new FirewallRuleBaseProtocol("icmp");

        public static bool operator ==(FirewallRuleBaseProtocol left, FirewallRuleBaseProtocol right) => left.Equals(right);
        public static bool operator !=(FirewallRuleBaseProtocol left, FirewallRuleBaseProtocol right) => !left.Equals(right);

        public static explicit operator string(FirewallRuleBaseProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallRuleBaseProtocol other && Equals(other);
        public bool Equals(FirewallRuleBaseProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of traffic to be allowed. This may be one of `tcp`, `udp`, or `icmp`.
    /// </summary>
    [EnumType]
    public readonly struct FirewallsRulesFirewallRuleBaseProtocol : IEquatable<FirewallsRulesFirewallRuleBaseProtocol>
    {
        private readonly string _value;

        private FirewallsRulesFirewallRuleBaseProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallsRulesFirewallRuleBaseProtocol Tcp { get; } = new FirewallsRulesFirewallRuleBaseProtocol("tcp");
        public static FirewallsRulesFirewallRuleBaseProtocol Udp { get; } = new FirewallsRulesFirewallRuleBaseProtocol("udp");
        public static FirewallsRulesFirewallRuleBaseProtocol Icmp { get; } = new FirewallsRulesFirewallRuleBaseProtocol("icmp");

        public static bool operator ==(FirewallsRulesFirewallRuleBaseProtocol left, FirewallsRulesFirewallRuleBaseProtocol right) => left.Equals(right);
        public static bool operator !=(FirewallsRulesFirewallRuleBaseProtocol left, FirewallsRulesFirewallRuleBaseProtocol right) => !left.Equals(right);

        public static explicit operator string(FirewallsRulesFirewallRuleBaseProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallsRulesFirewallRuleBaseProtocol other && Equals(other);
        public bool Equals(FirewallsRulesFirewallRuleBaseProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
