// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.DigitalOceanNative.DropletsV2
{
    /// <summary>
    /// The type of action to initiate for the Droplet.
    /// </summary>
    [EnumType]
    public readonly struct ChangeKernelDropletActionType : IEquatable<ChangeKernelDropletActionType>
    {
        private readonly string _value;

        private ChangeKernelDropletActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ChangeKernelDropletActionType EnableBackups { get; } = new ChangeKernelDropletActionType("enable_backups");
        public static ChangeKernelDropletActionType DisableBackups { get; } = new ChangeKernelDropletActionType("disable_backups");
        public static ChangeKernelDropletActionType Reboot { get; } = new ChangeKernelDropletActionType("reboot");
        public static ChangeKernelDropletActionType PowerCycle { get; } = new ChangeKernelDropletActionType("power_cycle");
        public static ChangeKernelDropletActionType Shutdown { get; } = new ChangeKernelDropletActionType("shutdown");
        public static ChangeKernelDropletActionType PowerOff { get; } = new ChangeKernelDropletActionType("power_off");
        public static ChangeKernelDropletActionType PowerOn { get; } = new ChangeKernelDropletActionType("power_on");
        public static ChangeKernelDropletActionType Restore { get; } = new ChangeKernelDropletActionType("restore");
        public static ChangeKernelDropletActionType PasswordReset { get; } = new ChangeKernelDropletActionType("password_reset");
        public static ChangeKernelDropletActionType Resize { get; } = new ChangeKernelDropletActionType("resize");
        public static ChangeKernelDropletActionType Rebuild { get; } = new ChangeKernelDropletActionType("rebuild");
        public static ChangeKernelDropletActionType Rename { get; } = new ChangeKernelDropletActionType("rename");
        public static ChangeKernelDropletActionType ChangeKernel { get; } = new ChangeKernelDropletActionType("change_kernel");
        public static ChangeKernelDropletActionType EnableIpv6 { get; } = new ChangeKernelDropletActionType("enable_ipv6");
        public static ChangeKernelDropletActionType Snapshot { get; } = new ChangeKernelDropletActionType("snapshot");

        public static bool operator ==(ChangeKernelDropletActionType left, ChangeKernelDropletActionType right) => left.Equals(right);
        public static bool operator !=(ChangeKernelDropletActionType left, ChangeKernelDropletActionType right) => !left.Equals(right);

        public static explicit operator string(ChangeKernelDropletActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ChangeKernelDropletActionType other && Equals(other);
        public bool Equals(ChangeKernelDropletActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current status of the action. This can be "in-progress", "completed", or "errored".
    /// </summary>
    [EnumType]
    public readonly struct DisableBackupsActionStatus : IEquatable<DisableBackupsActionStatus>
    {
        private readonly string _value;

        private DisableBackupsActionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DisableBackupsActionStatus InProgress { get; } = new DisableBackupsActionStatus("in-progress");
        public static DisableBackupsActionStatus Completed { get; } = new DisableBackupsActionStatus("completed");
        public static DisableBackupsActionStatus Errored { get; } = new DisableBackupsActionStatus("errored");

        public static bool operator ==(DisableBackupsActionStatus left, DisableBackupsActionStatus right) => left.Equals(right);
        public static bool operator !=(DisableBackupsActionStatus left, DisableBackupsActionStatus right) => !left.Equals(right);

        public static explicit operator string(DisableBackupsActionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DisableBackupsActionStatus other && Equals(other);
        public bool Equals(DisableBackupsActionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action to initiate for the Droplet.
    /// </summary>
    [EnumType]
    public readonly struct DisableBackupsType : IEquatable<DisableBackupsType>
    {
        private readonly string _value;

        private DisableBackupsType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DisableBackupsType EnableBackups { get; } = new DisableBackupsType("enable_backups");
        public static DisableBackupsType DisableBackups { get; } = new DisableBackupsType("disable_backups");
        public static DisableBackupsType Reboot { get; } = new DisableBackupsType("reboot");
        public static DisableBackupsType PowerCycle { get; } = new DisableBackupsType("power_cycle");
        public static DisableBackupsType Shutdown { get; } = new DisableBackupsType("shutdown");
        public static DisableBackupsType PowerOff { get; } = new DisableBackupsType("power_off");
        public static DisableBackupsType PowerOn { get; } = new DisableBackupsType("power_on");
        public static DisableBackupsType Restore { get; } = new DisableBackupsType("restore");
        public static DisableBackupsType PasswordReset { get; } = new DisableBackupsType("password_reset");
        public static DisableBackupsType Resize { get; } = new DisableBackupsType("resize");
        public static DisableBackupsType Rebuild { get; } = new DisableBackupsType("rebuild");
        public static DisableBackupsType Rename { get; } = new DisableBackupsType("rename");
        public static DisableBackupsType ChangeKernel { get; } = new DisableBackupsType("change_kernel");
        public static DisableBackupsType EnableIpv6 { get; } = new DisableBackupsType("enable_ipv6");
        public static DisableBackupsType Snapshot { get; } = new DisableBackupsType("snapshot");

        public static bool operator ==(DisableBackupsType left, DisableBackupsType right) => left.Equals(right);
        public static bool operator !=(DisableBackupsType left, DisableBackupsType right) => !left.Equals(right);

        public static explicit operator string(DisableBackupsType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DisableBackupsType other && Equals(other);
        public bool Equals(DisableBackupsType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the kind of image. It may be one of `snapshot` or `backup`. This specifies whether an image is a user-generated Droplet snapshot or automatically created Droplet backup.
    /// </summary>
    [EnumType]
    public readonly struct DropletSnapshotPropertiesType : IEquatable<DropletSnapshotPropertiesType>
    {
        private readonly string _value;

        private DropletSnapshotPropertiesType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DropletSnapshotPropertiesType Snapshot { get; } = new DropletSnapshotPropertiesType("snapshot");
        public static DropletSnapshotPropertiesType Backup { get; } = new DropletSnapshotPropertiesType("backup");

        public static bool operator ==(DropletSnapshotPropertiesType left, DropletSnapshotPropertiesType right) => left.Equals(right);
        public static bool operator !=(DropletSnapshotPropertiesType left, DropletSnapshotPropertiesType right) => !left.Equals(right);

        public static explicit operator string(DropletSnapshotPropertiesType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DropletSnapshotPropertiesType other && Equals(other);
        public bool Equals(DropletSnapshotPropertiesType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A status string indicating the state of the Droplet instance. This may be "new", "active", "off", or "archive".
    /// </summary>
    [EnumType]
    public readonly struct DropletStatus : IEquatable<DropletStatus>
    {
        private readonly string _value;

        private DropletStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DropletStatus New { get; } = new DropletStatus("new");
        public static DropletStatus Active { get; } = new DropletStatus("active");
        public static DropletStatus Off { get; } = new DropletStatus("off");
        public static DropletStatus Archive { get; } = new DropletStatus("archive");

        public static bool operator ==(DropletStatus left, DropletStatus right) => left.Equals(right);
        public static bool operator !=(DropletStatus left, DropletStatus right) => !left.Equals(right);

        public static explicit operator string(DropletStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DropletStatus other && Equals(other);
        public bool Equals(DropletStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action to initiate for the Droplet.
    /// </summary>
    [EnumType]
    public readonly struct EnableBackupsType : IEquatable<EnableBackupsType>
    {
        private readonly string _value;

        private EnableBackupsType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnableBackupsType EnableBackups { get; } = new EnableBackupsType("enable_backups");
        public static EnableBackupsType DisableBackups { get; } = new EnableBackupsType("disable_backups");
        public static EnableBackupsType Reboot { get; } = new EnableBackupsType("reboot");
        public static EnableBackupsType PowerCycle { get; } = new EnableBackupsType("power_cycle");
        public static EnableBackupsType Shutdown { get; } = new EnableBackupsType("shutdown");
        public static EnableBackupsType PowerOff { get; } = new EnableBackupsType("power_off");
        public static EnableBackupsType PowerOn { get; } = new EnableBackupsType("power_on");
        public static EnableBackupsType Restore { get; } = new EnableBackupsType("restore");
        public static EnableBackupsType PasswordReset { get; } = new EnableBackupsType("password_reset");
        public static EnableBackupsType Resize { get; } = new EnableBackupsType("resize");
        public static EnableBackupsType Rebuild { get; } = new EnableBackupsType("rebuild");
        public static EnableBackupsType Rename { get; } = new EnableBackupsType("rename");
        public static EnableBackupsType ChangeKernel { get; } = new EnableBackupsType("change_kernel");
        public static EnableBackupsType EnableIpv6 { get; } = new EnableBackupsType("enable_ipv6");
        public static EnableBackupsType Snapshot { get; } = new EnableBackupsType("snapshot");

        public static bool operator ==(EnableBackupsType left, EnableBackupsType right) => left.Equals(right);
        public static bool operator !=(EnableBackupsType left, EnableBackupsType right) => !left.Equals(right);

        public static explicit operator string(EnableBackupsType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnableBackupsType other && Equals(other);
        public bool Equals(EnableBackupsType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action to initiate for the Droplet.
    /// </summary>
    [EnumType]
    public readonly struct EnableIpv6Type : IEquatable<EnableIpv6Type>
    {
        private readonly string _value;

        private EnableIpv6Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnableIpv6Type EnableBackups { get; } = new EnableIpv6Type("enable_backups");
        public static EnableIpv6Type DisableBackups { get; } = new EnableIpv6Type("disable_backups");
        public static EnableIpv6Type Reboot { get; } = new EnableIpv6Type("reboot");
        public static EnableIpv6Type PowerCycle { get; } = new EnableIpv6Type("power_cycle");
        public static EnableIpv6Type Shutdown { get; } = new EnableIpv6Type("shutdown");
        public static EnableIpv6Type PowerOff { get; } = new EnableIpv6Type("power_off");
        public static EnableIpv6Type PowerOn { get; } = new EnableIpv6Type("power_on");
        public static EnableIpv6Type Restore { get; } = new EnableIpv6Type("restore");
        public static EnableIpv6Type PasswordReset { get; } = new EnableIpv6Type("password_reset");
        public static EnableIpv6Type Resize { get; } = new EnableIpv6Type("resize");
        public static EnableIpv6Type Rebuild { get; } = new EnableIpv6Type("rebuild");
        public static EnableIpv6Type Rename { get; } = new EnableIpv6Type("rename");
        public static EnableIpv6Type ChangeKernel { get; } = new EnableIpv6Type("change_kernel");
        public static EnableIpv6Type EnableIpv6 { get; } = new EnableIpv6Type("enable_ipv6");
        public static EnableIpv6Type Snapshot { get; } = new EnableIpv6Type("snapshot");

        public static bool operator ==(EnableIpv6Type left, EnableIpv6Type right) => left.Equals(right);
        public static bool operator !=(EnableIpv6Type left, EnableIpv6Type right) => !left.Equals(right);

        public static explicit operator string(EnableIpv6Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnableIpv6Type other && Equals(other);
        public bool Equals(EnableIpv6Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A status string indicating the current state of the firewall. This can be "waiting", "succeeded", or "failed".
    /// </summary>
    [EnumType]
    public readonly struct FirewallPropertiesStatus : IEquatable<FirewallPropertiesStatus>
    {
        private readonly string _value;

        private FirewallPropertiesStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPropertiesStatus Waiting { get; } = new FirewallPropertiesStatus("waiting");
        public static FirewallPropertiesStatus Succeeded { get; } = new FirewallPropertiesStatus("succeeded");
        public static FirewallPropertiesStatus Failed { get; } = new FirewallPropertiesStatus("failed");

        public static bool operator ==(FirewallPropertiesStatus left, FirewallPropertiesStatus right) => left.Equals(right);
        public static bool operator !=(FirewallPropertiesStatus left, FirewallPropertiesStatus right) => !left.Equals(right);

        public static explicit operator string(FirewallPropertiesStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPropertiesStatus other && Equals(other);
        public bool Equals(FirewallPropertiesStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of traffic to be allowed. This may be one of `tcp`, `udp`, or `icmp`.
    /// </summary>
    [EnumType]
    public readonly struct FirewallRuleBaseProtocol : IEquatable<FirewallRuleBaseProtocol>
    {
        private readonly string _value;

        private FirewallRuleBaseProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallRuleBaseProtocol Tcp { get; } = new FirewallRuleBaseProtocol("tcp");
        public static FirewallRuleBaseProtocol Udp { get; } = new FirewallRuleBaseProtocol("udp");
        public static FirewallRuleBaseProtocol Icmp { get; } = new FirewallRuleBaseProtocol("icmp");

        public static bool operator ==(FirewallRuleBaseProtocol left, FirewallRuleBaseProtocol right) => left.Equals(right);
        public static bool operator !=(FirewallRuleBaseProtocol left, FirewallRuleBaseProtocol right) => !left.Equals(right);

        public static explicit operator string(FirewallRuleBaseProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallRuleBaseProtocol other && Equals(other);
        public bool Equals(FirewallRuleBaseProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of a custom image's distribution. Currently, the valid values are  `Arch Linux`, `CentOS`, `CoreOS`, `Debian`, `Fedora`, `Fedora Atomic`,  `FreeBSD`, `Gentoo`, `openSUSE`, `RancherOS`, `Rocky Linux`, `Ubuntu`, and `Unknown`.  Any other value will be accepted but ignored, and `Unknown` will be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct ImageDistribution : IEquatable<ImageDistribution>
    {
        private readonly string _value;

        private ImageDistribution(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageDistribution ArchLinux { get; } = new ImageDistribution("Arch Linux");
        public static ImageDistribution CentOS { get; } = new ImageDistribution("CentOS");
        public static ImageDistribution CoreOS { get; } = new ImageDistribution("CoreOS");
        public static ImageDistribution Debian { get; } = new ImageDistribution("Debian");
        public static ImageDistribution Fedora { get; } = new ImageDistribution("Fedora");
        public static ImageDistribution FedoraAtomic { get; } = new ImageDistribution("Fedora Atomic");
        public static ImageDistribution FreeBSD { get; } = new ImageDistribution("FreeBSD");
        public static ImageDistribution Gentoo { get; } = new ImageDistribution("Gentoo");
        public static ImageDistribution OpenSUSE { get; } = new ImageDistribution("openSUSE");
        public static ImageDistribution RancherOS { get; } = new ImageDistribution("RancherOS");
        public static ImageDistribution RockyLinux { get; } = new ImageDistribution("Rocky Linux");
        public static ImageDistribution Ubuntu { get; } = new ImageDistribution("Ubuntu");
        public static ImageDistribution Unknown { get; } = new ImageDistribution("Unknown");

        public static bool operator ==(ImageDistribution left, ImageDistribution right) => left.Equals(right);
        public static bool operator !=(ImageDistribution left, ImageDistribution right) => !left.Equals(right);

        public static explicit operator string(ImageDistribution value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageDistribution other && Equals(other);
        public bool Equals(ImageDistribution other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The slug identifier for the region where the resource will initially be  available.
    /// </summary>
    [EnumType]
    public readonly struct ImageRegionsItem : IEquatable<ImageRegionsItem>
    {
        private readonly string _value;

        private ImageRegionsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageRegionsItem Ams1 { get; } = new ImageRegionsItem("ams1");
        public static ImageRegionsItem Ams2 { get; } = new ImageRegionsItem("ams2");
        public static ImageRegionsItem Ams3 { get; } = new ImageRegionsItem("ams3");
        public static ImageRegionsItem Blr1 { get; } = new ImageRegionsItem("blr1");
        public static ImageRegionsItem Fra1 { get; } = new ImageRegionsItem("fra1");
        public static ImageRegionsItem Lon1 { get; } = new ImageRegionsItem("lon1");
        public static ImageRegionsItem Nyc1 { get; } = new ImageRegionsItem("nyc1");
        public static ImageRegionsItem Nyc2 { get; } = new ImageRegionsItem("nyc2");
        public static ImageRegionsItem Nyc3 { get; } = new ImageRegionsItem("nyc3");
        public static ImageRegionsItem Sfo1 { get; } = new ImageRegionsItem("sfo1");
        public static ImageRegionsItem Sfo2 { get; } = new ImageRegionsItem("sfo2");
        public static ImageRegionsItem Sfo3 { get; } = new ImageRegionsItem("sfo3");
        public static ImageRegionsItem Sgp1 { get; } = new ImageRegionsItem("sgp1");
        public static ImageRegionsItem Tor1 { get; } = new ImageRegionsItem("tor1");

        public static bool operator ==(ImageRegionsItem left, ImageRegionsItem right) => left.Equals(right);
        public static bool operator !=(ImageRegionsItem left, ImageRegionsItem right) => !left.Equals(right);

        public static explicit operator string(ImageRegionsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageRegionsItem other && Equals(other);
        public bool Equals(ImageRegionsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A status string indicating the state of a custom image. This may be `NEW`,
    ///  `available`, `pending`, `deleted`, or `retired`.
    /// </summary>
    [EnumType]
    public readonly struct ImageStatus : IEquatable<ImageStatus>
    {
        private readonly string _value;

        private ImageStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageStatus New { get; } = new ImageStatus("NEW");
        public static ImageStatus Available { get; } = new ImageStatus("available");
        public static ImageStatus Pending { get; } = new ImageStatus("pending");
        public static ImageStatus Deleted { get; } = new ImageStatus("deleted");
        public static ImageStatus Retired { get; } = new ImageStatus("retired");

        public static bool operator ==(ImageStatus left, ImageStatus right) => left.Equals(right);
        public static bool operator !=(ImageStatus left, ImageStatus right) => !left.Equals(right);

        public static explicit operator string(ImageStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageStatus other && Equals(other);
        public bool Equals(ImageStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the kind of image. It may be one of `base`, `snapshot`, `backup`, `custom`, or `admin`. Respectively, this specifies whether an image is a DigitalOcean base OS image, user-generated Droplet snapshot, automatically created Droplet backup, user-provided virtual machine image, or an image used for DigitalOcean managed resources (e.g. DOKS worker nodes).
    /// </summary>
    [EnumType]
    public readonly struct ImageType : IEquatable<ImageType>
    {
        private readonly string _value;

        private ImageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageType Base { get; } = new ImageType("base");
        public static ImageType Snapshot { get; } = new ImageType("snapshot");
        public static ImageType Backup { get; } = new ImageType("backup");
        public static ImageType Custom { get; } = new ImageType("custom");
        public static ImageType Admin { get; } = new ImageType("admin");

        public static bool operator ==(ImageType left, ImageType right) => left.Equals(right);
        public static bool operator !=(ImageType left, ImageType right) => !left.Equals(right);

        public static explicit operator string(ImageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageType other && Equals(other);
        public bool Equals(ImageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the IPv4 network interface.
    /// </summary>
    [EnumType]
    public readonly struct NetworkV4Type : IEquatable<NetworkV4Type>
    {
        private readonly string _value;

        private NetworkV4Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkV4Type Public { get; } = new NetworkV4Type("public");
        public static NetworkV4Type Private { get; } = new NetworkV4Type("private");

        public static bool operator ==(NetworkV4Type left, NetworkV4Type right) => left.Equals(right);
        public static bool operator !=(NetworkV4Type left, NetworkV4Type right) => !left.Equals(right);

        public static explicit operator string(NetworkV4Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkV4Type other && Equals(other);
        public bool Equals(NetworkV4Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the IPv6 network interface.
    /// 
    /// **Note**: IPv6 private  networking is not currently supported.
    /// </summary>
    [EnumType]
    public readonly struct NetworkV6Type : IEquatable<NetworkV6Type>
    {
        private readonly string _value;

        private NetworkV6Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkV6Type Public { get; } = new NetworkV6Type("public");

        public static bool operator ==(NetworkV6Type left, NetworkV6Type right) => left.Equals(right);
        public static bool operator !=(NetworkV6Type left, NetworkV6Type right) => !left.Equals(right);

        public static explicit operator string(NetworkV6Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkV6Type other && Equals(other);
        public bool Equals(NetworkV6Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action to initiate for the Droplet.
    /// </summary>
    [EnumType]
    public readonly struct PasswordResetType : IEquatable<PasswordResetType>
    {
        private readonly string _value;

        private PasswordResetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PasswordResetType EnableBackups { get; } = new PasswordResetType("enable_backups");
        public static PasswordResetType DisableBackups { get; } = new PasswordResetType("disable_backups");
        public static PasswordResetType Reboot { get; } = new PasswordResetType("reboot");
        public static PasswordResetType PowerCycle { get; } = new PasswordResetType("power_cycle");
        public static PasswordResetType Shutdown { get; } = new PasswordResetType("shutdown");
        public static PasswordResetType PowerOff { get; } = new PasswordResetType("power_off");
        public static PasswordResetType PowerOn { get; } = new PasswordResetType("power_on");
        public static PasswordResetType Restore { get; } = new PasswordResetType("restore");
        public static PasswordResetType PasswordReset { get; } = new PasswordResetType("password_reset");
        public static PasswordResetType Resize { get; } = new PasswordResetType("resize");
        public static PasswordResetType Rebuild { get; } = new PasswordResetType("rebuild");
        public static PasswordResetType Rename { get; } = new PasswordResetType("rename");
        public static PasswordResetType ChangeKernel { get; } = new PasswordResetType("change_kernel");
        public static PasswordResetType EnableIpv6 { get; } = new PasswordResetType("enable_ipv6");
        public static PasswordResetType Snapshot { get; } = new PasswordResetType("snapshot");

        public static bool operator ==(PasswordResetType left, PasswordResetType right) => left.Equals(right);
        public static bool operator !=(PasswordResetType left, PasswordResetType right) => !left.Equals(right);

        public static explicit operator string(PasswordResetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PasswordResetType other && Equals(other);
        public bool Equals(PasswordResetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action to initiate for the Droplet.
    /// </summary>
    [EnumType]
    public readonly struct PowerCycleType : IEquatable<PowerCycleType>
    {
        private readonly string _value;

        private PowerCycleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PowerCycleType EnableBackups { get; } = new PowerCycleType("enable_backups");
        public static PowerCycleType DisableBackups { get; } = new PowerCycleType("disable_backups");
        public static PowerCycleType Reboot { get; } = new PowerCycleType("reboot");
        public static PowerCycleType PowerCycle { get; } = new PowerCycleType("power_cycle");
        public static PowerCycleType Shutdown { get; } = new PowerCycleType("shutdown");
        public static PowerCycleType PowerOff { get; } = new PowerCycleType("power_off");
        public static PowerCycleType PowerOn { get; } = new PowerCycleType("power_on");
        public static PowerCycleType Restore { get; } = new PowerCycleType("restore");
        public static PowerCycleType PasswordReset { get; } = new PowerCycleType("password_reset");
        public static PowerCycleType Resize { get; } = new PowerCycleType("resize");
        public static PowerCycleType Rebuild { get; } = new PowerCycleType("rebuild");
        public static PowerCycleType Rename { get; } = new PowerCycleType("rename");
        public static PowerCycleType ChangeKernel { get; } = new PowerCycleType("change_kernel");
        public static PowerCycleType EnableIpv6 { get; } = new PowerCycleType("enable_ipv6");
        public static PowerCycleType Snapshot { get; } = new PowerCycleType("snapshot");

        public static bool operator ==(PowerCycleType left, PowerCycleType right) => left.Equals(right);
        public static bool operator !=(PowerCycleType left, PowerCycleType right) => !left.Equals(right);

        public static explicit operator string(PowerCycleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PowerCycleType other && Equals(other);
        public bool Equals(PowerCycleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action to initiate for the Droplet.
    /// </summary>
    [EnumType]
    public readonly struct PowerOffType : IEquatable<PowerOffType>
    {
        private readonly string _value;

        private PowerOffType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PowerOffType EnableBackups { get; } = new PowerOffType("enable_backups");
        public static PowerOffType DisableBackups { get; } = new PowerOffType("disable_backups");
        public static PowerOffType Reboot { get; } = new PowerOffType("reboot");
        public static PowerOffType PowerCycle { get; } = new PowerOffType("power_cycle");
        public static PowerOffType Shutdown { get; } = new PowerOffType("shutdown");
        public static PowerOffType PowerOff { get; } = new PowerOffType("power_off");
        public static PowerOffType PowerOn { get; } = new PowerOffType("power_on");
        public static PowerOffType Restore { get; } = new PowerOffType("restore");
        public static PowerOffType PasswordReset { get; } = new PowerOffType("password_reset");
        public static PowerOffType Resize { get; } = new PowerOffType("resize");
        public static PowerOffType Rebuild { get; } = new PowerOffType("rebuild");
        public static PowerOffType Rename { get; } = new PowerOffType("rename");
        public static PowerOffType ChangeKernel { get; } = new PowerOffType("change_kernel");
        public static PowerOffType EnableIpv6 { get; } = new PowerOffType("enable_ipv6");
        public static PowerOffType Snapshot { get; } = new PowerOffType("snapshot");

        public static bool operator ==(PowerOffType left, PowerOffType right) => left.Equals(right);
        public static bool operator !=(PowerOffType left, PowerOffType right) => !left.Equals(right);

        public static explicit operator string(PowerOffType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PowerOffType other && Equals(other);
        public bool Equals(PowerOffType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action to initiate for the Droplet.
    /// </summary>
    [EnumType]
    public readonly struct PowerOnType : IEquatable<PowerOnType>
    {
        private readonly string _value;

        private PowerOnType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PowerOnType EnableBackups { get; } = new PowerOnType("enable_backups");
        public static PowerOnType DisableBackups { get; } = new PowerOnType("disable_backups");
        public static PowerOnType Reboot { get; } = new PowerOnType("reboot");
        public static PowerOnType PowerCycle { get; } = new PowerOnType("power_cycle");
        public static PowerOnType Shutdown { get; } = new PowerOnType("shutdown");
        public static PowerOnType PowerOff { get; } = new PowerOnType("power_off");
        public static PowerOnType PowerOn { get; } = new PowerOnType("power_on");
        public static PowerOnType Restore { get; } = new PowerOnType("restore");
        public static PowerOnType PasswordReset { get; } = new PowerOnType("password_reset");
        public static PowerOnType Resize { get; } = new PowerOnType("resize");
        public static PowerOnType Rebuild { get; } = new PowerOnType("rebuild");
        public static PowerOnType Rename { get; } = new PowerOnType("rename");
        public static PowerOnType ChangeKernel { get; } = new PowerOnType("change_kernel");
        public static PowerOnType EnableIpv6 { get; } = new PowerOnType("enable_ipv6");
        public static PowerOnType Snapshot { get; } = new PowerOnType("snapshot");

        public static bool operator ==(PowerOnType left, PowerOnType right) => left.Equals(right);
        public static bool operator !=(PowerOnType left, PowerOnType right) => !left.Equals(right);

        public static explicit operator string(PowerOnType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PowerOnType other && Equals(other);
        public bool Equals(PowerOnType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action to initiate for the Droplet.
    /// </summary>
    [EnumType]
    public readonly struct RebootType : IEquatable<RebootType>
    {
        private readonly string _value;

        private RebootType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RebootType EnableBackups { get; } = new RebootType("enable_backups");
        public static RebootType DisableBackups { get; } = new RebootType("disable_backups");
        public static RebootType Reboot { get; } = new RebootType("reboot");
        public static RebootType PowerCycle { get; } = new RebootType("power_cycle");
        public static RebootType Shutdown { get; } = new RebootType("shutdown");
        public static RebootType PowerOff { get; } = new RebootType("power_off");
        public static RebootType PowerOn { get; } = new RebootType("power_on");
        public static RebootType Restore { get; } = new RebootType("restore");
        public static RebootType PasswordReset { get; } = new RebootType("password_reset");
        public static RebootType Resize { get; } = new RebootType("resize");
        public static RebootType Rebuild { get; } = new RebootType("rebuild");
        public static RebootType Rename { get; } = new RebootType("rename");
        public static RebootType ChangeKernel { get; } = new RebootType("change_kernel");
        public static RebootType EnableIpv6 { get; } = new RebootType("enable_ipv6");
        public static RebootType Snapshot { get; } = new RebootType("snapshot");

        public static bool operator ==(RebootType left, RebootType right) => left.Equals(right);
        public static bool operator !=(RebootType left, RebootType right) => !left.Equals(right);

        public static explicit operator string(RebootType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RebootType other && Equals(other);
        public bool Equals(RebootType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action to initiate for the Droplet.
    /// </summary>
    [EnumType]
    public readonly struct RebuildDropletActionType : IEquatable<RebuildDropletActionType>
    {
        private readonly string _value;

        private RebuildDropletActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RebuildDropletActionType EnableBackups { get; } = new RebuildDropletActionType("enable_backups");
        public static RebuildDropletActionType DisableBackups { get; } = new RebuildDropletActionType("disable_backups");
        public static RebuildDropletActionType Reboot { get; } = new RebuildDropletActionType("reboot");
        public static RebuildDropletActionType PowerCycle { get; } = new RebuildDropletActionType("power_cycle");
        public static RebuildDropletActionType Shutdown { get; } = new RebuildDropletActionType("shutdown");
        public static RebuildDropletActionType PowerOff { get; } = new RebuildDropletActionType("power_off");
        public static RebuildDropletActionType PowerOn { get; } = new RebuildDropletActionType("power_on");
        public static RebuildDropletActionType Restore { get; } = new RebuildDropletActionType("restore");
        public static RebuildDropletActionType PasswordReset { get; } = new RebuildDropletActionType("password_reset");
        public static RebuildDropletActionType Resize { get; } = new RebuildDropletActionType("resize");
        public static RebuildDropletActionType Rebuild { get; } = new RebuildDropletActionType("rebuild");
        public static RebuildDropletActionType Rename { get; } = new RebuildDropletActionType("rename");
        public static RebuildDropletActionType ChangeKernel { get; } = new RebuildDropletActionType("change_kernel");
        public static RebuildDropletActionType EnableIpv6 { get; } = new RebuildDropletActionType("enable_ipv6");
        public static RebuildDropletActionType Snapshot { get; } = new RebuildDropletActionType("snapshot");

        public static bool operator ==(RebuildDropletActionType left, RebuildDropletActionType right) => left.Equals(right);
        public static bool operator !=(RebuildDropletActionType left, RebuildDropletActionType right) => !left.Equals(right);

        public static explicit operator string(RebuildDropletActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RebuildDropletActionType other && Equals(other);
        public bool Equals(RebuildDropletActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action to initiate for the Droplet.
    /// </summary>
    [EnumType]
    public readonly struct RenameDropletActionType : IEquatable<RenameDropletActionType>
    {
        private readonly string _value;

        private RenameDropletActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RenameDropletActionType EnableBackups { get; } = new RenameDropletActionType("enable_backups");
        public static RenameDropletActionType DisableBackups { get; } = new RenameDropletActionType("disable_backups");
        public static RenameDropletActionType Reboot { get; } = new RenameDropletActionType("reboot");
        public static RenameDropletActionType PowerCycle { get; } = new RenameDropletActionType("power_cycle");
        public static RenameDropletActionType Shutdown { get; } = new RenameDropletActionType("shutdown");
        public static RenameDropletActionType PowerOff { get; } = new RenameDropletActionType("power_off");
        public static RenameDropletActionType PowerOn { get; } = new RenameDropletActionType("power_on");
        public static RenameDropletActionType Restore { get; } = new RenameDropletActionType("restore");
        public static RenameDropletActionType PasswordReset { get; } = new RenameDropletActionType("password_reset");
        public static RenameDropletActionType Resize { get; } = new RenameDropletActionType("resize");
        public static RenameDropletActionType Rebuild { get; } = new RenameDropletActionType("rebuild");
        public static RenameDropletActionType Rename { get; } = new RenameDropletActionType("rename");
        public static RenameDropletActionType ChangeKernel { get; } = new RenameDropletActionType("change_kernel");
        public static RenameDropletActionType EnableIpv6 { get; } = new RenameDropletActionType("enable_ipv6");
        public static RenameDropletActionType Snapshot { get; } = new RenameDropletActionType("snapshot");

        public static bool operator ==(RenameDropletActionType left, RenameDropletActionType right) => left.Equals(right);
        public static bool operator !=(RenameDropletActionType left, RenameDropletActionType right) => !left.Equals(right);

        public static explicit operator string(RenameDropletActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RenameDropletActionType other && Equals(other);
        public bool Equals(RenameDropletActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action to initiate for the Droplet.
    /// </summary>
    [EnumType]
    public readonly struct ResizeDropletActionType : IEquatable<ResizeDropletActionType>
    {
        private readonly string _value;

        private ResizeDropletActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResizeDropletActionType EnableBackups { get; } = new ResizeDropletActionType("enable_backups");
        public static ResizeDropletActionType DisableBackups { get; } = new ResizeDropletActionType("disable_backups");
        public static ResizeDropletActionType Reboot { get; } = new ResizeDropletActionType("reboot");
        public static ResizeDropletActionType PowerCycle { get; } = new ResizeDropletActionType("power_cycle");
        public static ResizeDropletActionType Shutdown { get; } = new ResizeDropletActionType("shutdown");
        public static ResizeDropletActionType PowerOff { get; } = new ResizeDropletActionType("power_off");
        public static ResizeDropletActionType PowerOn { get; } = new ResizeDropletActionType("power_on");
        public static ResizeDropletActionType Restore { get; } = new ResizeDropletActionType("restore");
        public static ResizeDropletActionType PasswordReset { get; } = new ResizeDropletActionType("password_reset");
        public static ResizeDropletActionType Resize { get; } = new ResizeDropletActionType("resize");
        public static ResizeDropletActionType Rebuild { get; } = new ResizeDropletActionType("rebuild");
        public static ResizeDropletActionType Rename { get; } = new ResizeDropletActionType("rename");
        public static ResizeDropletActionType ChangeKernel { get; } = new ResizeDropletActionType("change_kernel");
        public static ResizeDropletActionType EnableIpv6 { get; } = new ResizeDropletActionType("enable_ipv6");
        public static ResizeDropletActionType Snapshot { get; } = new ResizeDropletActionType("snapshot");

        public static bool operator ==(ResizeDropletActionType left, ResizeDropletActionType right) => left.Equals(right);
        public static bool operator !=(ResizeDropletActionType left, ResizeDropletActionType right) => !left.Equals(right);

        public static explicit operator string(ResizeDropletActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResizeDropletActionType other && Equals(other);
        public bool Equals(ResizeDropletActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action to initiate for the Droplet.
    /// </summary>
    [EnumType]
    public readonly struct RestoreDropletActionType : IEquatable<RestoreDropletActionType>
    {
        private readonly string _value;

        private RestoreDropletActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RestoreDropletActionType EnableBackups { get; } = new RestoreDropletActionType("enable_backups");
        public static RestoreDropletActionType DisableBackups { get; } = new RestoreDropletActionType("disable_backups");
        public static RestoreDropletActionType Reboot { get; } = new RestoreDropletActionType("reboot");
        public static RestoreDropletActionType PowerCycle { get; } = new RestoreDropletActionType("power_cycle");
        public static RestoreDropletActionType Shutdown { get; } = new RestoreDropletActionType("shutdown");
        public static RestoreDropletActionType PowerOff { get; } = new RestoreDropletActionType("power_off");
        public static RestoreDropletActionType PowerOn { get; } = new RestoreDropletActionType("power_on");
        public static RestoreDropletActionType Restore { get; } = new RestoreDropletActionType("restore");
        public static RestoreDropletActionType PasswordReset { get; } = new RestoreDropletActionType("password_reset");
        public static RestoreDropletActionType Resize { get; } = new RestoreDropletActionType("resize");
        public static RestoreDropletActionType Rebuild { get; } = new RestoreDropletActionType("rebuild");
        public static RestoreDropletActionType Rename { get; } = new RestoreDropletActionType("rename");
        public static RestoreDropletActionType ChangeKernel { get; } = new RestoreDropletActionType("change_kernel");
        public static RestoreDropletActionType EnableIpv6 { get; } = new RestoreDropletActionType("enable_ipv6");
        public static RestoreDropletActionType Snapshot { get; } = new RestoreDropletActionType("snapshot");

        public static bool operator ==(RestoreDropletActionType left, RestoreDropletActionType right) => left.Equals(right);
        public static bool operator !=(RestoreDropletActionType left, RestoreDropletActionType right) => !left.Equals(right);

        public static explicit operator string(RestoreDropletActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RestoreDropletActionType other && Equals(other);
        public bool Equals(RestoreDropletActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action to initiate for the Droplet.
    /// </summary>
    [EnumType]
    public readonly struct ShutdownType : IEquatable<ShutdownType>
    {
        private readonly string _value;

        private ShutdownType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ShutdownType EnableBackups { get; } = new ShutdownType("enable_backups");
        public static ShutdownType DisableBackups { get; } = new ShutdownType("disable_backups");
        public static ShutdownType Reboot { get; } = new ShutdownType("reboot");
        public static ShutdownType PowerCycle { get; } = new ShutdownType("power_cycle");
        public static ShutdownType Shutdown { get; } = new ShutdownType("shutdown");
        public static ShutdownType PowerOff { get; } = new ShutdownType("power_off");
        public static ShutdownType PowerOn { get; } = new ShutdownType("power_on");
        public static ShutdownType Restore { get; } = new ShutdownType("restore");
        public static ShutdownType PasswordReset { get; } = new ShutdownType("password_reset");
        public static ShutdownType Resize { get; } = new ShutdownType("resize");
        public static ShutdownType Rebuild { get; } = new ShutdownType("rebuild");
        public static ShutdownType Rename { get; } = new ShutdownType("rename");
        public static ShutdownType ChangeKernel { get; } = new ShutdownType("change_kernel");
        public static ShutdownType EnableIpv6 { get; } = new ShutdownType("enable_ipv6");
        public static ShutdownType Snapshot { get; } = new ShutdownType("snapshot");

        public static bool operator ==(ShutdownType left, ShutdownType right) => left.Equals(right);
        public static bool operator !=(ShutdownType left, ShutdownType right) => !left.Equals(right);

        public static explicit operator string(ShutdownType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ShutdownType other && Equals(other);
        public bool Equals(ShutdownType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action to initiate for the Droplet.
    /// </summary>
    [EnumType]
    public readonly struct SnapshotDropletActionType : IEquatable<SnapshotDropletActionType>
    {
        private readonly string _value;

        private SnapshotDropletActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SnapshotDropletActionType EnableBackups { get; } = new SnapshotDropletActionType("enable_backups");
        public static SnapshotDropletActionType DisableBackups { get; } = new SnapshotDropletActionType("disable_backups");
        public static SnapshotDropletActionType Reboot { get; } = new SnapshotDropletActionType("reboot");
        public static SnapshotDropletActionType PowerCycle { get; } = new SnapshotDropletActionType("power_cycle");
        public static SnapshotDropletActionType Shutdown { get; } = new SnapshotDropletActionType("shutdown");
        public static SnapshotDropletActionType PowerOff { get; } = new SnapshotDropletActionType("power_off");
        public static SnapshotDropletActionType PowerOn { get; } = new SnapshotDropletActionType("power_on");
        public static SnapshotDropletActionType Restore { get; } = new SnapshotDropletActionType("restore");
        public static SnapshotDropletActionType PasswordReset { get; } = new SnapshotDropletActionType("password_reset");
        public static SnapshotDropletActionType Resize { get; } = new SnapshotDropletActionType("resize");
        public static SnapshotDropletActionType Rebuild { get; } = new SnapshotDropletActionType("rebuild");
        public static SnapshotDropletActionType Rename { get; } = new SnapshotDropletActionType("rename");
        public static SnapshotDropletActionType ChangeKernel { get; } = new SnapshotDropletActionType("change_kernel");
        public static SnapshotDropletActionType EnableIpv6 { get; } = new SnapshotDropletActionType("enable_ipv6");
        public static SnapshotDropletActionType Snapshot { get; } = new SnapshotDropletActionType("snapshot");

        public static bool operator ==(SnapshotDropletActionType left, SnapshotDropletActionType right) => left.Equals(right);
        public static bool operator !=(SnapshotDropletActionType left, SnapshotDropletActionType right) => !left.Equals(right);

        public static explicit operator string(SnapshotDropletActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SnapshotDropletActionType other && Equals(other);
        public bool Equals(SnapshotDropletActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
