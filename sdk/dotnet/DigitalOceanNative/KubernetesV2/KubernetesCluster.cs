// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CloudySkySoftware.Pulumi.DigitalOceanNative.KubernetesV2
{
    [DigitalOceanNativeResourceType("digitalocean-native:kubernetes/v2:KubernetesCluster")]
    public partial class KubernetesCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A boolean value indicating whether the cluster will be automatically upgraded to new patch releases during its maintenance window.
        /// </summary>
        [Output("autoUpgrade")]
        public Output<bool?> AutoUpgrade { get; private set; } = null!;

        /// <summary>
        /// The range of IP addresses in the overlay network of the Kubernetes cluster in CIDR notation.
        /// </summary>
        [Output("clusterSubnet")]
        public Output<string?> ClusterSubnet { get; private set; } = null!;

        /// <summary>
        /// A time value given in ISO8601 combined date and time format that represents when the Kubernetes cluster was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string?> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The base URL of the API server on the Kubernetes master node.
        /// </summary>
        [Output("endpoint")]
        public Output<string?> Endpoint { get; private set; } = null!;

        /// <summary>
        /// A boolean value indicating whether the control plane is run in a highly available configuration in the cluster. Highly available control planes incur less downtime. The property cannot be disabled.
        /// </summary>
        [Output("ha")]
        public Output<bool?> Ha { get; private set; } = null!;

        /// <summary>
        /// The public IPv4 address of the Kubernetes master node. This will not be set if high availability is configured on the cluster (v1.21+)
        /// </summary>
        [Output("ipv4")]
        public Output<string?> Ipv4 { get; private set; } = null!;

        [Output("kubernetesCluster")]
        public Output<Outputs.Cluster?> KubernetesClusterValue { get; private set; } = null!;

        /// <summary>
        /// An object specifying the maintenance window policy for the Kubernetes cluster.
        /// </summary>
        [Output("maintenancePolicy")]
        public Output<Outputs.MaintenancePolicy?> MaintenancePolicy { get; private set; } = null!;

        /// <summary>
        /// A human-readable name for a Kubernetes cluster.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An object specifying the details of the worker nodes available to the Kubernetes cluster.
        /// </summary>
        [Output("nodePools")]
        public Output<ImmutableArray<Outputs.KubernetesNodePool>> NodePools { get; private set; } = null!;

        /// <summary>
        /// The slug identifier for the region where the Kubernetes cluster is located.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// A read-only boolean value indicating if a container registry is integrated with the cluster.
        /// </summary>
        [Output("registryEnabled")]
        public Output<bool?> RegistryEnabled { get; private set; } = null!;

        /// <summary>
        /// The range of assignable IP addresses for services running in the Kubernetes cluster in CIDR notation.
        /// </summary>
        [Output("serviceSubnet")]
        public Output<string?> ServiceSubnet { get; private set; } = null!;

        /// <summary>
        /// An object containing a `state` attribute whose value is set to a string indicating the current status of the cluster.
        /// </summary>
        [Output("status")]
        public Output<Outputs.StatusProperties?> Status { get; private set; } = null!;

        /// <summary>
        /// A boolean value indicating whether surge upgrade is enabled/disabled for the cluster. Surge upgrade makes cluster upgrades fast and reliable by bringing up new nodes before destroying the outdated nodes.
        /// </summary>
        [Output("surgeUpgrade")]
        public Output<bool?> SurgeUpgrade { get; private set; } = null!;

        /// <summary>
        /// An array of tags applied to the Kubernetes cluster. All clusters are automatically tagged `k8s` and `k8s:$K8S_CLUSTER_ID`.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// A time value given in ISO8601 combined date and time format that represents when the Kubernetes cluster was last updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<string?> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The slug identifier for the version of Kubernetes used for the cluster. If set to a minor version (e.g. "1.14"), the latest version within it will be used (e.g. "1.14.6-do.1"); if set to "latest", the latest published version will be used. See the `/v2/kubernetes/options` endpoint to find all currently available versions.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        /// <summary>
        /// A string specifying the UUID of the VPC to which the Kubernetes cluster is assigned.
        /// </summary>
        [Output("vpcUuid")]
        public Output<string?> VpcUuid { get; private set; } = null!;


        /// <summary>
        /// Create a KubernetesCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KubernetesCluster(string name, KubernetesClusterArgs args, CustomResourceOptions? options = null)
            : base("digitalocean-native:kubernetes/v2:KubernetesCluster", name, args ?? new KubernetesClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KubernetesCluster(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("digitalocean-native:kubernetes/v2:KubernetesCluster", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/cloudy-sky-software/pulumi-digitalocean-native",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KubernetesCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KubernetesCluster Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new KubernetesCluster(name, id, options);
        }
    }

    public sealed class KubernetesClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A boolean value indicating whether the cluster will be automatically upgraded to new patch releases during its maintenance window.
        /// </summary>
        [Input("autoUpgrade")]
        public Input<bool>? AutoUpgrade { get; set; }

        /// <summary>
        /// A boolean value indicating whether the control plane is run in a highly available configuration in the cluster. Highly available control planes incur less downtime. The property cannot be disabled.
        /// </summary>
        [Input("ha")]
        public Input<bool>? Ha { get; set; }

        /// <summary>
        /// An object specifying the maintenance window policy for the Kubernetes cluster.
        /// </summary>
        [Input("maintenancePolicy")]
        public Input<Inputs.MaintenancePolicyArgs>? MaintenancePolicy { get; set; }

        /// <summary>
        /// A human-readable name for a Kubernetes cluster.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodePools", required: true)]
        private InputList<Inputs.KubernetesNodePoolArgs>? _nodePools;

        /// <summary>
        /// An object specifying the details of the worker nodes available to the Kubernetes cluster.
        /// </summary>
        public InputList<Inputs.KubernetesNodePoolArgs> NodePools
        {
            get => _nodePools ?? (_nodePools = new InputList<Inputs.KubernetesNodePoolArgs>());
            set => _nodePools = value;
        }

        /// <summary>
        /// The slug identifier for the region where the Kubernetes cluster is located.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// A boolean value indicating whether surge upgrade is enabled/disabled for the cluster. Surge upgrade makes cluster upgrades fast and reliable by bringing up new nodes before destroying the outdated nodes.
        /// </summary>
        [Input("surgeUpgrade")]
        public Input<bool>? SurgeUpgrade { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// An array of tags applied to the Kubernetes cluster. All clusters are automatically tagged `k8s` and `k8s:$K8S_CLUSTER_ID`.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The slug identifier for the version of Kubernetes used for the cluster. If set to a minor version (e.g. "1.14"), the latest version within it will be used (e.g. "1.14.6-do.1"); if set to "latest", the latest published version will be used. See the `/v2/kubernetes/options` endpoint to find all currently available versions.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        /// <summary>
        /// A string specifying the UUID of the VPC to which the Kubernetes cluster is assigned.
        /// </summary>
        [Input("vpcUuid")]
        public Input<string>? VpcUuid { get; set; }

        public KubernetesClusterArgs()
        {
            AutoUpgrade = false;
            Ha = false;
            SurgeUpgrade = false;
        }
        public static new KubernetesClusterArgs Empty => new KubernetesClusterArgs();
    }
}
