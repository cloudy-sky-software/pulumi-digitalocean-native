// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CloudySkySoftware.Pulumi.DigitalOceanNative.MonitoringV2
{
    public static class GetMonitoringAlertPolicy
    {
        public static Task<GetMonitoringAlertPolicyResult> InvokeAsync(GetMonitoringAlertPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMonitoringAlertPolicyResult>("digitalocean-native:monitoring/v2:getMonitoringAlertPolicy", args ?? new GetMonitoringAlertPolicyArgs(), options.WithDefaults());

        public static Output<GetMonitoringAlertPolicyResult> Invoke(GetMonitoringAlertPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMonitoringAlertPolicyResult>("digitalocean-native:monitoring/v2:getMonitoringAlertPolicy", args ?? new GetMonitoringAlertPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMonitoringAlertPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique identifier for an alert policy.
        /// </summary>
        [Input("alertUuid", required: true)]
        public string AlertUuid { get; set; } = null!;

        public GetMonitoringAlertPolicyArgs()
        {
        }
        public static new GetMonitoringAlertPolicyArgs Empty => new GetMonitoringAlertPolicyArgs();
    }

    public sealed class GetMonitoringAlertPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique identifier for an alert policy.
        /// </summary>
        [Input("alertUuid", required: true)]
        public Input<string> AlertUuid { get; set; } = null!;

        public GetMonitoringAlertPolicyInvokeArgs()
        {
        }
        public static new GetMonitoringAlertPolicyInvokeArgs Empty => new GetMonitoringAlertPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetMonitoringAlertPolicyResult
    {
        public readonly Outputs.GetMonitoringAlertPolicyProperties Items;

        [OutputConstructor]
        private GetMonitoringAlertPolicyResult(Outputs.GetMonitoringAlertPolicyProperties items)
        {
            Items = items;
        }
    }
}
