// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CloudySkySoftware.Pulumi.DigitalOceanNative.DatabasesV2.Outputs
{

    [OutputType]
    public sealed class ConnectionPool
    {
        public readonly Outputs.ConnectionPoolConnection? Connection;
        /// <summary>
        /// The database for use with the connection pool.
        /// </summary>
        public readonly string Db;
        /// <summary>
        /// The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
        /// </summary>
        public readonly string Mode;
        /// <summary>
        /// A unique name for the connection pool. Must be between 3 and 60 characters.
        /// </summary>
        public readonly string Name;
        public readonly Outputs.ConnectionPoolPrivateConnection? PrivateConnection;
        /// <summary>
        /// The desired size of the PGBouncer connection pool. The maximum allowed size is determined by the size of the cluster's primary node. 25 backend server connections are allowed for every 1GB of RAM. Three are reserved for maintenance. For example, a primary node with 1 GB of RAM allows for a maximum of 22 backend server connections while one with 4 GB would allow for 97. Note that these are shared across all connection pools in a cluster.
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// The name of the user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
        /// </summary>
        public readonly string? User;

        [OutputConstructor]
        private ConnectionPool(
            Outputs.ConnectionPoolConnection? connection,

            string db,

            string mode,

            string name,

            Outputs.ConnectionPoolPrivateConnection? privateConnection,

            int size,

            string? user)
        {
            Connection = connection;
            Db = db;
            Mode = mode;
            Name = name;
            PrivateConnection = privateConnection;
            Size = size;
            User = user;
        }
    }
}
