// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CloudySkySoftware.Pulumi.DigitalOceanNative.DatabasesV2
{
    [DigitalOceanNativeResourceType("digitalocean-native:databases/v2:DatabasesClusterSize")]
    public partial class DatabasesClusterSize : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The number of nodes in the database cluster. Valid values are are 1-3. In addition to the primary node, up to two standby nodes may be added for highly available configurations.
        /// </summary>
        [Output("numNodes")]
        public Output<int> NumNodes { get; private set; } = null!;

        /// <summary>
        /// A slug identifier representing desired the size of the nodes in the database cluster.
        /// </summary>
        [Output("size")]
        public Output<string> Size { get; private set; } = null!;


        /// <summary>
        /// Create a DatabasesClusterSize resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabasesClusterSize(string name, DatabasesClusterSizeArgs args, CustomResourceOptions? options = null)
            : base("digitalocean-native:databases/v2:DatabasesClusterSize", name, args ?? new DatabasesClusterSizeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabasesClusterSize(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("digitalocean-native:databases/v2:DatabasesClusterSize", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/cloudy-sky-software/pulumi-digitalocean-native",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabasesClusterSize resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabasesClusterSize Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DatabasesClusterSize(name, id, options);
        }
    }

    public sealed class DatabasesClusterSizeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A unique identifier for a database cluster.
        /// </summary>
        [Input("databaseClusterUuid")]
        public Input<string>? DatabaseClusterUuid { get; set; }

        /// <summary>
        /// The number of nodes in the database cluster. Valid values are are 1-3. In addition to the primary node, up to two standby nodes may be added for highly available configurations.
        /// </summary>
        [Input("numNodes", required: true)]
        public Input<int> NumNodes { get; set; } = null!;

        /// <summary>
        /// A slug identifier representing desired the size of the nodes in the database cluster.
        /// </summary>
        [Input("size", required: true)]
        public Input<string> Size { get; set; } = null!;

        public DatabasesClusterSizeArgs()
        {
        }
        public static new DatabasesClusterSizeArgs Empty => new DatabasesClusterSizeArgs();
    }
}
