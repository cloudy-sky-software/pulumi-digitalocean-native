// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace CloudySkySoftware.Pulumi.DigitalOceanNative.CertificatesV2
{
    /// <summary>
    /// A string representing the type of the certificate. The value will be `custom` for a user-uploaded certificate or `lets_encrypt` for one automatically generated with Let's Encrypt.
    /// </summary>
    [EnumType]
    public readonly struct CertificateCreateBaseType : IEquatable<CertificateCreateBaseType>
    {
        private readonly string _value;

        private CertificateCreateBaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CertificateCreateBaseType Custom { get; } = new CertificateCreateBaseType("custom");
        public static CertificateCreateBaseType LetsEncrypt { get; } = new CertificateCreateBaseType("lets_encrypt");

        public static bool operator ==(CertificateCreateBaseType left, CertificateCreateBaseType right) => left.Equals(right);
        public static bool operator !=(CertificateCreateBaseType left, CertificateCreateBaseType right) => !left.Equals(right);

        public static explicit operator string(CertificateCreateBaseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CertificateCreateBaseType other && Equals(other);
        public bool Equals(CertificateCreateBaseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A string representing the current state of the certificate. It may be `pending`, `verified`, or `error`.
    /// </summary>
    [EnumType]
    public readonly struct CertificateState : IEquatable<CertificateState>
    {
        private readonly string _value;

        private CertificateState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CertificateState Pending { get; } = new CertificateState("pending");
        public static CertificateState Verified { get; } = new CertificateState("verified");
        public static CertificateState Error { get; } = new CertificateState("error");

        public static bool operator ==(CertificateState left, CertificateState right) => left.Equals(right);
        public static bool operator !=(CertificateState left, CertificateState right) => !left.Equals(right);

        public static explicit operator string(CertificateState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CertificateState other && Equals(other);
        public bool Equals(CertificateState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A string representing the type of the certificate. The value will be `custom` for a user-uploaded certificate or `lets_encrypt` for one automatically generated with Let's Encrypt.
    /// </summary>
    [EnumType]
    public readonly struct CertificateType : IEquatable<CertificateType>
    {
        private readonly string _value;

        private CertificateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CertificateType Custom { get; } = new CertificateType("custom");
        public static CertificateType LetsEncrypt { get; } = new CertificateType("lets_encrypt");

        public static bool operator ==(CertificateType left, CertificateType right) => left.Equals(right);
        public static bool operator !=(CertificateType left, CertificateType right) => !left.Equals(right);

        public static explicit operator string(CertificateType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CertificateType other && Equals(other);
        public bool Equals(CertificateType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
