// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CloudySkySoftware.Pulumi.DigitalOceanNative.ImagesV2
{
    public static class GetImage
    {
        public static Task<Outputs.GetImageProperties> InvokeAsync(GetImageArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<Outputs.GetImageProperties>("digitalocean-native:images/v2:getImage", args ?? new GetImageArgs(), options.WithDefaults());

        public static Output<Outputs.GetImageProperties> Invoke(GetImageInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<Outputs.GetImageProperties>("digitalocean-native:images/v2:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique number (id) or string (slug) used to identify and reference a
        /// specific image.
        /// 
        /// **Public** images can be identified by image `id` or `slug`.
        /// 
        /// **Private** images *must* be identified by image `id`.
        /// </summary>
        [Input("imageId", required: true)]
        public string ImageId { get; set; } = null!;

        public GetImageArgs()
        {
        }
        public static new GetImageArgs Empty => new GetImageArgs();
    }

    public sealed class GetImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique number (id) or string (slug) used to identify and reference a
        /// specific image.
        /// 
        /// **Public** images can be identified by image `id` or `slug`.
        /// 
        /// **Private** images *must* be identified by image `id`.
        /// </summary>
        [Input("imageId", required: true)]
        public Input<string> ImageId { get; set; } = null!;

        public GetImageInvokeArgs()
        {
        }
        public static new GetImageInvokeArgs Empty => new GetImageInvokeArgs();
    }
}
