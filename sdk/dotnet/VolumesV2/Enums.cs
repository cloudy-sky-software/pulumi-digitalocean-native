// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.DigitalOceanNative.VolumesV2
{
    /// <summary>
    /// The current status of the action. This can be "in-progress", "completed", or "errored".
    /// </summary>
    [EnumType]
    public readonly struct ActionStatus : IEquatable<ActionStatus>
    {
        private readonly string _value;

        private ActionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActionStatus InProgress { get; } = new ActionStatus("in-progress");
        public static ActionStatus Completed { get; } = new ActionStatus("completed");
        public static ActionStatus Errored { get; } = new ActionStatus("errored");

        public static bool operator ==(ActionStatus left, ActionStatus right) => left.Equals(right);
        public static bool operator !=(ActionStatus left, ActionStatus right) => !left.Equals(right);

        public static explicit operator string(ActionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionStatus other && Equals(other);
        public bool Equals(ActionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of resource that the snapshot originated from.
    /// </summary>
    [EnumType]
    public readonly struct SnapshotsPropertiesResourceType : IEquatable<SnapshotsPropertiesResourceType>
    {
        private readonly string _value;

        private SnapshotsPropertiesResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SnapshotsPropertiesResourceType Droplet { get; } = new SnapshotsPropertiesResourceType("droplet");
        public static SnapshotsPropertiesResourceType Volume { get; } = new SnapshotsPropertiesResourceType("volume");

        public static bool operator ==(SnapshotsPropertiesResourceType left, SnapshotsPropertiesResourceType right) => left.Equals(right);
        public static bool operator !=(SnapshotsPropertiesResourceType left, SnapshotsPropertiesResourceType right) => !left.Equals(right);

        public static explicit operator string(SnapshotsPropertiesResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SnapshotsPropertiesResourceType other && Equals(other);
        public bool Equals(SnapshotsPropertiesResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The slug identifier for the region where the resource will initially be  available.
    /// </summary>
    [EnumType]
    public readonly struct VolumeActionPostBaseRegion : IEquatable<VolumeActionPostBaseRegion>
    {
        private readonly string _value;

        private VolumeActionPostBaseRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VolumeActionPostBaseRegion Ams1 { get; } = new VolumeActionPostBaseRegion("ams1");
        public static VolumeActionPostBaseRegion Ams2 { get; } = new VolumeActionPostBaseRegion("ams2");
        public static VolumeActionPostBaseRegion Ams3 { get; } = new VolumeActionPostBaseRegion("ams3");
        public static VolumeActionPostBaseRegion Blr1 { get; } = new VolumeActionPostBaseRegion("blr1");
        public static VolumeActionPostBaseRegion Fra1 { get; } = new VolumeActionPostBaseRegion("fra1");
        public static VolumeActionPostBaseRegion Lon1 { get; } = new VolumeActionPostBaseRegion("lon1");
        public static VolumeActionPostBaseRegion Nyc1 { get; } = new VolumeActionPostBaseRegion("nyc1");
        public static VolumeActionPostBaseRegion Nyc2 { get; } = new VolumeActionPostBaseRegion("nyc2");
        public static VolumeActionPostBaseRegion Nyc3 { get; } = new VolumeActionPostBaseRegion("nyc3");
        public static VolumeActionPostBaseRegion Sfo1 { get; } = new VolumeActionPostBaseRegion("sfo1");
        public static VolumeActionPostBaseRegion Sfo2 { get; } = new VolumeActionPostBaseRegion("sfo2");
        public static VolumeActionPostBaseRegion Sfo3 { get; } = new VolumeActionPostBaseRegion("sfo3");
        public static VolumeActionPostBaseRegion Sgp1 { get; } = new VolumeActionPostBaseRegion("sgp1");
        public static VolumeActionPostBaseRegion Tor1 { get; } = new VolumeActionPostBaseRegion("tor1");

        public static bool operator ==(VolumeActionPostBaseRegion left, VolumeActionPostBaseRegion right) => left.Equals(right);
        public static bool operator !=(VolumeActionPostBaseRegion left, VolumeActionPostBaseRegion right) => !left.Equals(right);

        public static explicit operator string(VolumeActionPostBaseRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VolumeActionPostBaseRegion other && Equals(other);
        public bool Equals(VolumeActionPostBaseRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The volume action to initiate.
    /// </summary>
    [EnumType]
    public readonly struct VolumeActionPostBaseType : IEquatable<VolumeActionPostBaseType>
    {
        private readonly string _value;

        private VolumeActionPostBaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VolumeActionPostBaseType Attach { get; } = new VolumeActionPostBaseType("attach");
        public static VolumeActionPostBaseType Detach { get; } = new VolumeActionPostBaseType("detach");
        public static VolumeActionPostBaseType Resize { get; } = new VolumeActionPostBaseType("resize");

        public static bool operator ==(VolumeActionPostBaseType left, VolumeActionPostBaseType right) => left.Equals(right);
        public static bool operator !=(VolumeActionPostBaseType left, VolumeActionPostBaseType right) => !left.Equals(right);

        public static explicit operator string(VolumeActionPostBaseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VolumeActionPostBaseType other && Equals(other);
        public bool Equals(VolumeActionPostBaseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
