// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOceanNative.VolumesV2
{
    [DigitalOceanNativeResourceType("digitalocean-native:volumes/v2:Xfs")]
    public partial class Xfs : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A time value given in ISO8601 combined date and time format that represents when the block storage volume was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string?> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// An optional free-form text field to describe a block storage volume.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// An array containing the IDs of the Droplets the volume is attached to. Note that at this time, a volume can only be attached to a single Droplet.
        /// </summary>
        [Output("dropletIds")]
        public Output<ImmutableArray<int>> DropletIds { get; private set; } = null!;

        [Output("filesystemLabel")]
        public Output<string?> FilesystemLabel { get; private set; } = null!;

        /// <summary>
        /// The name of the filesystem type to be used on the volume. When provided, the volume will automatically be formatted to the specified filesystem type. Currently, the available options are `ext4` and `xfs`. Pre-formatted volumes are automatically mounted when attached to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS Droplets created on or after April 26, 2018. Attaching pre-formatted volumes to other Droplets is not recommended.
        /// </summary>
        [Output("filesystemType")]
        public Output<string?> FilesystemType { get; private set; } = null!;

        /// <summary>
        /// A human-readable name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters. The name must begin with a letter.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// The slug identifier for the region where the resource will initially be  available.
        /// </summary>
        [Output("region")]
        public Output<Pulumi.DigitalOceanNative.VolumesV2.XfsPropertiesRegion?> Region { get; private set; } = null!;

        /// <summary>
        /// The size of the block storage volume in GiB (1024^3). This field does not apply  when creating a volume from a snapshot.
        /// </summary>
        [Output("sizeGigabytes")]
        public Output<int?> SizeGigabytes { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the volume snapshot from which to create the volume.
        /// </summary>
        [Output("snapshotId")]
        public Output<string?> SnapshotId { get; private set; } = null!;

        /// <summary>
        /// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("volume")]
        public Output<Outputs.VolumeFull?> Volume { get; private set; } = null!;


        /// <summary>
        /// Create a Xfs resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Xfs(string name, XfsArgs args, CustomResourceOptions? options = null)
            : base("digitalocean-native:volumes/v2:Xfs", name, args ?? new XfsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Xfs(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("digitalocean-native:volumes/v2:Xfs", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/cloudy-sky-software/pulumi-digitalocean-native",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Xfs resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Xfs Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Xfs(name, id, options);
        }
    }

    public sealed class XfsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A time value given in ISO8601 combined date and time format that represents when the block storage volume was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// An optional free-form text field to describe a block storage volume.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dropletIds")]
        private InputList<int>? _dropletIds;

        /// <summary>
        /// An array containing the IDs of the Droplets the volume is attached to. Note that at this time, a volume can only be attached to a single Droplet.
        /// </summary>
        public InputList<int> DropletIds
        {
            get => _dropletIds ?? (_dropletIds = new InputList<int>());
            set => _dropletIds = value;
        }

        [Input("filesystemLabel")]
        public Input<string>? FilesystemLabel { get; set; }

        /// <summary>
        /// The name of the filesystem type to be used on the volume. When provided, the volume will automatically be formatted to the specified filesystem type. Currently, the available options are `ext4` and `xfs`. Pre-formatted volumes are automatically mounted when attached to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS Droplets created on or after April 26, 2018. Attaching pre-formatted volumes to other Droplets is not recommended.
        /// </summary>
        [Input("filesystemType")]
        public Input<string>? FilesystemType { get; set; }

        /// <summary>
        /// A human-readable name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters. The name must begin with a letter.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The slug identifier for the region where the resource will initially be  available.
        /// </summary>
        [Input("region", required: true)]
        public Input<Pulumi.DigitalOceanNative.VolumesV2.XfsPropertiesRegion> Region { get; set; } = null!;

        /// <summary>
        /// The size of the block storage volume in GiB (1024^3). This field does not apply  when creating a volume from a snapshot.
        /// </summary>
        [Input("sizeGigabytes")]
        public Input<int>? SizeGigabytes { get; set; }

        /// <summary>
        /// The unique identifier for the volume snapshot from which to create the volume.
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public XfsArgs()
        {
        }
        public static new XfsArgs Empty => new XfsArgs();
    }
}
