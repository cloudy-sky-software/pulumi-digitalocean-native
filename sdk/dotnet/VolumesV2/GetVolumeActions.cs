// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOceanNative.VolumesV2
{
    public static class GetVolumeActions
    {
        public static Task<GetVolumeActionsResult> InvokeAsync(GetVolumeActionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVolumeActionsResult>("digitalocean-native:volumes/v2:getVolumeActions", args ?? new GetVolumeActionsArgs(), options.WithDefaults());

        public static Output<GetVolumeActionsResult> Invoke(GetVolumeActionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeActionsResult>("digitalocean-native:volumes/v2:getVolumeActions", args ?? new GetVolumeActionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumeActionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique numeric ID that can be used to identify and reference an action.
        /// </summary>
        [Input("actionId", required: true)]
        public string ActionId { get; set; } = null!;

        /// <summary>
        /// The ID of the block storage volume.
        /// </summary>
        [Input("volumeId", required: true)]
        public string VolumeId { get; set; } = null!;

        public GetVolumeActionsArgs()
        {
        }
        public static new GetVolumeActionsArgs Empty => new GetVolumeActionsArgs();
    }

    public sealed class GetVolumeActionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique numeric ID that can be used to identify and reference an action.
        /// </summary>
        [Input("actionId", required: true)]
        public Input<string> ActionId { get; set; } = null!;

        /// <summary>
        /// The ID of the block storage volume.
        /// </summary>
        [Input("volumeId", required: true)]
        public Input<string> VolumeId { get; set; } = null!;

        public GetVolumeActionsInvokeArgs()
        {
        }
        public static new GetVolumeActionsInvokeArgs Empty => new GetVolumeActionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetVolumeActionsResult
    {
        public readonly Outputs.GetVolumeActionsProperties Items;

        [OutputConstructor]
        private GetVolumeActionsResult(Outputs.GetVolumeActionsProperties items)
        {
            Items = items;
        }
    }
}
