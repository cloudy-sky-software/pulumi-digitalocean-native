// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOceanNative.FunctionsV2
{
    public static class GetFunctionsTrigger
    {
        public static Task<GetFunctionsTriggerResult> InvokeAsync(GetFunctionsTriggerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFunctionsTriggerResult>("digitalocean-native:functions/v2:getFunctionsTrigger", args ?? new GetFunctionsTriggerArgs(), options.WithDefaults());

        public static Output<GetFunctionsTriggerResult> Invoke(GetFunctionsTriggerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFunctionsTriggerResult>("digitalocean-native:functions/v2:getFunctionsTrigger", args ?? new GetFunctionsTriggerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFunctionsTriggerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the namespace to be managed.
        /// </summary>
        [Input("namespaceId", required: true)]
        public string NamespaceId { get; set; } = null!;

        /// <summary>
        /// The name of the trigger to be managed.
        /// </summary>
        [Input("triggerName", required: true)]
        public string TriggerName { get; set; } = null!;

        public GetFunctionsTriggerArgs()
        {
        }
        public static new GetFunctionsTriggerArgs Empty => new GetFunctionsTriggerArgs();
    }

    public sealed class GetFunctionsTriggerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the namespace to be managed.
        /// </summary>
        [Input("namespaceId", required: true)]
        public Input<string> NamespaceId { get; set; } = null!;

        /// <summary>
        /// The name of the trigger to be managed.
        /// </summary>
        [Input("triggerName", required: true)]
        public Input<string> TriggerName { get; set; } = null!;

        public GetFunctionsTriggerInvokeArgs()
        {
        }
        public static new GetFunctionsTriggerInvokeArgs Empty => new GetFunctionsTriggerInvokeArgs();
    }


    [OutputType]
    public sealed class GetFunctionsTriggerResult
    {
        public readonly Outputs.GetFunctionsTriggerProperties Items;

        [OutputConstructor]
        private GetFunctionsTriggerResult(Outputs.GetFunctionsTriggerProperties items)
        {
            Items = items;
        }
    }
}
