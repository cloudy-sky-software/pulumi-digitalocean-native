// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOceanNative.DatabasesV2
{
    public static class GetDatabasesConfig
    {
        public static Task<GetDatabasesConfigResult> InvokeAsync(GetDatabasesConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabasesConfigResult>("digitalocean-native:databases/v2:getDatabasesConfig", args ?? new GetDatabasesConfigArgs(), options.WithDefaults());

        public static Output<GetDatabasesConfigResult> Invoke(GetDatabasesConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabasesConfigResult>("digitalocean-native:databases/v2:getDatabasesConfig", args ?? new GetDatabasesConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabasesConfigArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique identifier for a database cluster.
        /// </summary>
        [Input("databaseClusterUuid", required: true)]
        public string DatabaseClusterUuid { get; set; } = null!;

        public GetDatabasesConfigArgs()
        {
        }
        public static new GetDatabasesConfigArgs Empty => new GetDatabasesConfigArgs();
    }

    public sealed class GetDatabasesConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique identifier for a database cluster.
        /// </summary>
        [Input("databaseClusterUuid", required: true)]
        public Input<string> DatabaseClusterUuid { get; set; } = null!;

        public GetDatabasesConfigInvokeArgs()
        {
        }
        public static new GetDatabasesConfigInvokeArgs Empty => new GetDatabasesConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabasesConfigResult
    {
        public readonly Outputs.DatabaseConfig Items;

        [OutputConstructor]
        private GetDatabasesConfigResult(Outputs.DatabaseConfig items)
        {
            Items = items;
        }
    }
}
