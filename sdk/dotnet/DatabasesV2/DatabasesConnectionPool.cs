// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOceanNative.DatabasesV2
{
    [DigitalOceanNativeResourceType("digitalocean-native:databases/v2:DatabasesConnectionPool")]
    public partial class DatabasesConnectionPool : global::Pulumi.CustomResource
    {
        [Output("connection")]
        public Output<Outputs.Connection?> Connection { get; private set; } = null!;

        /// <summary>
        /// The database for use with the connection pool.
        /// </summary>
        [Output("db")]
        public Output<string> Db { get; private set; } = null!;

        /// <summary>
        /// The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// A unique name for the connection pool. Must be between 3 and 60 characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("pool")]
        public Output<Outputs.ConnectionPool> Pool { get; private set; } = null!;

        [Output("privateConnection")]
        public Output<Outputs.PrivateConnection?> PrivateConnection { get; private set; } = null!;

        /// <summary>
        /// The desired size of the PGBouncer connection pool. The maximum allowed size is determined by the size of the cluster's primary node. 25 backend server connections are allowed for every 1GB of RAM. Three are reserved for maintenance. For example, a primary node with 1 GB of RAM allows for a maximum of 22 backend server connections while one with 4 GB would allow for 97. Note that these are shared across all connection pools in a cluster.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// The name of the user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
        /// </summary>
        [Output("user")]
        public Output<string?> User { get; private set; } = null!;


        /// <summary>
        /// Create a DatabasesConnectionPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabasesConnectionPool(string name, DatabasesConnectionPoolArgs args, CustomResourceOptions? options = null)
            : base("digitalocean-native:databases/v2:DatabasesConnectionPool", name, args ?? new DatabasesConnectionPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabasesConnectionPool(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("digitalocean-native:databases/v2:DatabasesConnectionPool", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/cloudy-sky-software/pulumi-digitalocean-native",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabasesConnectionPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabasesConnectionPool Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DatabasesConnectionPool(name, id, options);
        }
    }

    public sealed class DatabasesConnectionPoolArgs : global::Pulumi.ResourceArgs
    {
        [Input("connection")]
        public Input<Inputs.ConnectionArgs>? Connection { get; set; }

        /// <summary>
        /// A unique identifier for a database cluster.
        /// </summary>
        [Input("databaseClusterUuid")]
        public Input<string>? DatabaseClusterUuid { get; set; }

        /// <summary>
        /// The database for use with the connection pool.
        /// </summary>
        [Input("db", required: true)]
        public Input<string> Db { get; set; } = null!;

        /// <summary>
        /// The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
        /// </summary>
        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        /// <summary>
        /// A unique name for the connection pool. Must be between 3 and 60 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateConnection")]
        public Input<Inputs.PrivateConnectionArgs>? PrivateConnection { get; set; }

        /// <summary>
        /// The desired size of the PGBouncer connection pool. The maximum allowed size is determined by the size of the cluster's primary node. 25 backend server connections are allowed for every 1GB of RAM. Three are reserved for maintenance. For example, a primary node with 1 GB of RAM allows for a maximum of 22 backend server connections while one with 4 GB would allow for 97. Note that these are shared across all connection pools in a cluster.
        /// </summary>
        [Input("size", required: true)]
        public Input<int> Size { get; set; } = null!;

        /// <summary>
        /// The name of the user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public DatabasesConnectionPoolArgs()
        {
        }
        public static new DatabasesConnectionPoolArgs Empty => new DatabasesConnectionPoolArgs();
    }
}
