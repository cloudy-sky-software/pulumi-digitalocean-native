// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOceanNative.ImagesV2
{
    public static class GetImageActions
    {
        public static Task<GetImageActionsResult> InvokeAsync(GetImageActionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImageActionsResult>("digitalocean-native:images/v2:getImageActions", args ?? new GetImageActionsArgs(), options.WithDefaults());

        public static Output<GetImageActionsResult> Invoke(GetImageActionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageActionsResult>("digitalocean-native:images/v2:getImageActions", args ?? new GetImageActionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageActionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique numeric ID that can be used to identify and reference an action.
        /// </summary>
        [Input("actionId", required: true)]
        public string ActionId { get; set; } = null!;

        /// <summary>
        /// A unique number that can be used to identify and reference a specific image.
        /// </summary>
        [Input("imageId", required: true)]
        public string ImageId { get; set; } = null!;

        public GetImageActionsArgs()
        {
        }
        public static new GetImageActionsArgs Empty => new GetImageActionsArgs();
    }

    public sealed class GetImageActionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique numeric ID that can be used to identify and reference an action.
        /// </summary>
        [Input("actionId", required: true)]
        public Input<string> ActionId { get; set; } = null!;

        /// <summary>
        /// A unique number that can be used to identify and reference a specific image.
        /// </summary>
        [Input("imageId", required: true)]
        public Input<string> ImageId { get; set; } = null!;

        public GetImageActionsInvokeArgs()
        {
        }
        public static new GetImageActionsInvokeArgs Empty => new GetImageActionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetImageActionsResult
    {
        public readonly Outputs.Action Items;

        [OutputConstructor]
        private GetImageActionsResult(Outputs.Action items)
        {
            Items = items;
        }
    }
}
