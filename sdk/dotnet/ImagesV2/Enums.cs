// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.DigitalOceanNative.ImagesV2
{
    /// <summary>
    /// The current status of the action. This can be "in-progress", "completed", or "errored".
    /// </summary>
    [EnumType]
    public readonly struct ActionStatus : IEquatable<ActionStatus>
    {
        private readonly string _value;

        private ActionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActionStatus InProgress { get; } = new ActionStatus("in-progress");
        public static ActionStatus Completed { get; } = new ActionStatus("completed");
        public static ActionStatus Errored { get; } = new ActionStatus("errored");

        public static bool operator ==(ActionStatus left, ActionStatus right) => left.Equals(right);
        public static bool operator !=(ActionStatus left, ActionStatus right) => !left.Equals(right);

        public static explicit operator string(ActionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionStatus other && Equals(other);
        public bool Equals(ActionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current status of the action. This can be "in-progress", "completed", or "errored".
    /// </summary>
    [EnumType]
    public readonly struct ConvertStatus : IEquatable<ConvertStatus>
    {
        private readonly string _value;

        private ConvertStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConvertStatus InProgress { get; } = new ConvertStatus("in-progress");
        public static ConvertStatus Completed { get; } = new ConvertStatus("completed");
        public static ConvertStatus Errored { get; } = new ConvertStatus("errored");

        public static bool operator ==(ConvertStatus left, ConvertStatus right) => left.Equals(right);
        public static bool operator !=(ConvertStatus left, ConvertStatus right) => !left.Equals(right);

        public static explicit operator string(ConvertStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConvertStatus other && Equals(other);
        public bool Equals(ConvertStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The action to be taken on the image. Can be either `convert` or `transfer`.
    /// </summary>
    [EnumType]
    public readonly struct ConvertType : IEquatable<ConvertType>
    {
        private readonly string _value;

        private ConvertType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConvertType Convert { get; } = new ConvertType("convert");
        public static ConvertType Transfer { get; } = new ConvertType("transfer");

        public static bool operator ==(ConvertType left, ConvertType right) => left.Equals(right);
        public static bool operator !=(ConvertType left, ConvertType right) => !left.Equals(right);

        public static explicit operator string(ConvertType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConvertType other && Equals(other);
        public bool Equals(ConvertType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of a custom image's distribution. Currently, the valid values are  `Arch Linux`, `CentOS`, `CoreOS`, `Debian`, `Fedora`, `Fedora Atomic`,  `FreeBSD`, `Gentoo`, `openSUSE`, `RancherOS`, `Rocky Linux`, `Ubuntu`, and `Unknown`.  Any other value will be accepted but ignored, and `Unknown` will be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct ImageDistribution : IEquatable<ImageDistribution>
    {
        private readonly string _value;

        private ImageDistribution(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageDistribution ArchLinux { get; } = new ImageDistribution("Arch Linux");
        public static ImageDistribution CentOS { get; } = new ImageDistribution("CentOS");
        public static ImageDistribution CoreOS { get; } = new ImageDistribution("CoreOS");
        public static ImageDistribution Debian { get; } = new ImageDistribution("Debian");
        public static ImageDistribution Fedora { get; } = new ImageDistribution("Fedora");
        public static ImageDistribution FedoraAtomic { get; } = new ImageDistribution("Fedora Atomic");
        public static ImageDistribution FreeBSD { get; } = new ImageDistribution("FreeBSD");
        public static ImageDistribution Gentoo { get; } = new ImageDistribution("Gentoo");
        public static ImageDistribution OpenSUSE { get; } = new ImageDistribution("openSUSE");
        public static ImageDistribution RancherOS { get; } = new ImageDistribution("RancherOS");
        public static ImageDistribution RockyLinux { get; } = new ImageDistribution("Rocky Linux");
        public static ImageDistribution Ubuntu { get; } = new ImageDistribution("Ubuntu");
        public static ImageDistribution Unknown { get; } = new ImageDistribution("Unknown");

        public static bool operator ==(ImageDistribution left, ImageDistribution right) => left.Equals(right);
        public static bool operator !=(ImageDistribution left, ImageDistribution right) => !left.Equals(right);

        public static explicit operator string(ImageDistribution value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageDistribution other && Equals(other);
        public bool Equals(ImageDistribution other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The slug identifier for the region where the resource will initially be  available.
    /// </summary>
    [EnumType]
    public readonly struct ImageRegionsItem : IEquatable<ImageRegionsItem>
    {
        private readonly string _value;

        private ImageRegionsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageRegionsItem Ams1 { get; } = new ImageRegionsItem("ams1");
        public static ImageRegionsItem Ams2 { get; } = new ImageRegionsItem("ams2");
        public static ImageRegionsItem Ams3 { get; } = new ImageRegionsItem("ams3");
        public static ImageRegionsItem Blr1 { get; } = new ImageRegionsItem("blr1");
        public static ImageRegionsItem Fra1 { get; } = new ImageRegionsItem("fra1");
        public static ImageRegionsItem Lon1 { get; } = new ImageRegionsItem("lon1");
        public static ImageRegionsItem Nyc1 { get; } = new ImageRegionsItem("nyc1");
        public static ImageRegionsItem Nyc2 { get; } = new ImageRegionsItem("nyc2");
        public static ImageRegionsItem Nyc3 { get; } = new ImageRegionsItem("nyc3");
        public static ImageRegionsItem Sfo1 { get; } = new ImageRegionsItem("sfo1");
        public static ImageRegionsItem Sfo2 { get; } = new ImageRegionsItem("sfo2");
        public static ImageRegionsItem Sfo3 { get; } = new ImageRegionsItem("sfo3");
        public static ImageRegionsItem Sgp1 { get; } = new ImageRegionsItem("sgp1");
        public static ImageRegionsItem Tor1 { get; } = new ImageRegionsItem("tor1");

        public static bool operator ==(ImageRegionsItem left, ImageRegionsItem right) => left.Equals(right);
        public static bool operator !=(ImageRegionsItem left, ImageRegionsItem right) => !left.Equals(right);

        public static explicit operator string(ImageRegionsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageRegionsItem other && Equals(other);
        public bool Equals(ImageRegionsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A status string indicating the state of a custom image. This may be `NEW`,
    ///  `available`, `pending`, `deleted`, or `retired`.
    /// </summary>
    [EnumType]
    public readonly struct ImageStatus : IEquatable<ImageStatus>
    {
        private readonly string _value;

        private ImageStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageStatus New { get; } = new ImageStatus("NEW");
        public static ImageStatus Available { get; } = new ImageStatus("available");
        public static ImageStatus Pending { get; } = new ImageStatus("pending");
        public static ImageStatus Deleted { get; } = new ImageStatus("deleted");
        public static ImageStatus Retired { get; } = new ImageStatus("retired");

        public static bool operator ==(ImageStatus left, ImageStatus right) => left.Equals(right);
        public static bool operator !=(ImageStatus left, ImageStatus right) => !left.Equals(right);

        public static explicit operator string(ImageStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageStatus other && Equals(other);
        public bool Equals(ImageStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the kind of image. It may be one of `base`, `snapshot`, `backup`, `custom`, or `admin`. Respectively, this specifies whether an image is a DigitalOcean base OS image, user-generated Droplet snapshot, automatically created Droplet backup, user-provided virtual machine image, or an image used for DigitalOcean managed resources (e.g. DOKS worker nodes).
    /// </summary>
    [EnumType]
    public readonly struct ImageType : IEquatable<ImageType>
    {
        private readonly string _value;

        private ImageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageType Base { get; } = new ImageType("base");
        public static ImageType Snapshot { get; } = new ImageType("snapshot");
        public static ImageType Backup { get; } = new ImageType("backup");
        public static ImageType Custom { get; } = new ImageType("custom");
        public static ImageType Admin { get; } = new ImageType("admin");

        public static bool operator ==(ImageType left, ImageType right) => left.Equals(right);
        public static bool operator !=(ImageType left, ImageType right) => !left.Equals(right);

        public static explicit operator string(ImageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageType other && Equals(other);
        public bool Equals(ImageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of a custom image's distribution. Currently, the valid values are  `Arch Linux`, `CentOS`, `CoreOS`, `Debian`, `Fedora`, `Fedora Atomic`,  `FreeBSD`, `Gentoo`, `openSUSE`, `RancherOS`, `Rocky Linux`, `Ubuntu`, and `Unknown`.  Any other value will be accepted but ignored, and `Unknown` will be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct ImagesCustomImageUpdateDistribution : IEquatable<ImagesCustomImageUpdateDistribution>
    {
        private readonly string _value;

        private ImagesCustomImageUpdateDistribution(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImagesCustomImageUpdateDistribution ArchLinux { get; } = new ImagesCustomImageUpdateDistribution("Arch Linux");
        public static ImagesCustomImageUpdateDistribution CentOS { get; } = new ImagesCustomImageUpdateDistribution("CentOS");
        public static ImagesCustomImageUpdateDistribution CoreOS { get; } = new ImagesCustomImageUpdateDistribution("CoreOS");
        public static ImagesCustomImageUpdateDistribution Debian { get; } = new ImagesCustomImageUpdateDistribution("Debian");
        public static ImagesCustomImageUpdateDistribution Fedora { get; } = new ImagesCustomImageUpdateDistribution("Fedora");
        public static ImagesCustomImageUpdateDistribution FedoraAtomic { get; } = new ImagesCustomImageUpdateDistribution("Fedora Atomic");
        public static ImagesCustomImageUpdateDistribution FreeBSD { get; } = new ImagesCustomImageUpdateDistribution("FreeBSD");
        public static ImagesCustomImageUpdateDistribution Gentoo { get; } = new ImagesCustomImageUpdateDistribution("Gentoo");
        public static ImagesCustomImageUpdateDistribution OpenSUSE { get; } = new ImagesCustomImageUpdateDistribution("openSUSE");
        public static ImagesCustomImageUpdateDistribution RancherOS { get; } = new ImagesCustomImageUpdateDistribution("RancherOS");
        public static ImagesCustomImageUpdateDistribution RockyLinux { get; } = new ImagesCustomImageUpdateDistribution("Rocky Linux");
        public static ImagesCustomImageUpdateDistribution Ubuntu { get; } = new ImagesCustomImageUpdateDistribution("Ubuntu");
        public static ImagesCustomImageUpdateDistribution Unknown { get; } = new ImagesCustomImageUpdateDistribution("Unknown");

        public static bool operator ==(ImagesCustomImageUpdateDistribution left, ImagesCustomImageUpdateDistribution right) => left.Equals(right);
        public static bool operator !=(ImagesCustomImageUpdateDistribution left, ImagesCustomImageUpdateDistribution right) => !left.Equals(right);

        public static explicit operator string(ImagesCustomImageUpdateDistribution value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImagesCustomImageUpdateDistribution other && Equals(other);
        public bool Equals(ImagesCustomImageUpdateDistribution other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The slug identifier for the region where the resource will initially be  available.
    /// </summary>
    [EnumType]
    public readonly struct ImagesCustomPropertiesRegion : IEquatable<ImagesCustomPropertiesRegion>
    {
        private readonly string _value;

        private ImagesCustomPropertiesRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImagesCustomPropertiesRegion Ams1 { get; } = new ImagesCustomPropertiesRegion("ams1");
        public static ImagesCustomPropertiesRegion Ams2 { get; } = new ImagesCustomPropertiesRegion("ams2");
        public static ImagesCustomPropertiesRegion Ams3 { get; } = new ImagesCustomPropertiesRegion("ams3");
        public static ImagesCustomPropertiesRegion Blr1 { get; } = new ImagesCustomPropertiesRegion("blr1");
        public static ImagesCustomPropertiesRegion Fra1 { get; } = new ImagesCustomPropertiesRegion("fra1");
        public static ImagesCustomPropertiesRegion Lon1 { get; } = new ImagesCustomPropertiesRegion("lon1");
        public static ImagesCustomPropertiesRegion Nyc1 { get; } = new ImagesCustomPropertiesRegion("nyc1");
        public static ImagesCustomPropertiesRegion Nyc2 { get; } = new ImagesCustomPropertiesRegion("nyc2");
        public static ImagesCustomPropertiesRegion Nyc3 { get; } = new ImagesCustomPropertiesRegion("nyc3");
        public static ImagesCustomPropertiesRegion Sfo1 { get; } = new ImagesCustomPropertiesRegion("sfo1");
        public static ImagesCustomPropertiesRegion Sfo2 { get; } = new ImagesCustomPropertiesRegion("sfo2");
        public static ImagesCustomPropertiesRegion Sfo3 { get; } = new ImagesCustomPropertiesRegion("sfo3");
        public static ImagesCustomPropertiesRegion Sgp1 { get; } = new ImagesCustomPropertiesRegion("sgp1");
        public static ImagesCustomPropertiesRegion Tor1 { get; } = new ImagesCustomPropertiesRegion("tor1");

        public static bool operator ==(ImagesCustomPropertiesRegion left, ImagesCustomPropertiesRegion right) => left.Equals(right);
        public static bool operator !=(ImagesCustomPropertiesRegion left, ImagesCustomPropertiesRegion right) => !left.Equals(right);

        public static explicit operator string(ImagesCustomPropertiesRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImagesCustomPropertiesRegion other && Equals(other);
        public bool Equals(ImagesCustomPropertiesRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The action to be taken on the image. Can be either `convert` or `transfer`.
    /// </summary>
    [EnumType]
    public readonly struct TransferImageActionBaseType : IEquatable<TransferImageActionBaseType>
    {
        private readonly string _value;

        private TransferImageActionBaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TransferImageActionBaseType Convert { get; } = new TransferImageActionBaseType("convert");
        public static TransferImageActionBaseType Transfer { get; } = new TransferImageActionBaseType("transfer");

        public static bool operator ==(TransferImageActionBaseType left, TransferImageActionBaseType right) => left.Equals(right);
        public static bool operator !=(TransferImageActionBaseType left, TransferImageActionBaseType right) => !left.Equals(right);

        public static explicit operator string(TransferImageActionBaseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransferImageActionBaseType other && Equals(other);
        public bool Equals(TransferImageActionBaseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The slug identifier for the region where the resource will initially be  available.
    /// </summary>
    [EnumType]
    public readonly struct TransferPropertiesRegion : IEquatable<TransferPropertiesRegion>
    {
        private readonly string _value;

        private TransferPropertiesRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TransferPropertiesRegion Ams1 { get; } = new TransferPropertiesRegion("ams1");
        public static TransferPropertiesRegion Ams2 { get; } = new TransferPropertiesRegion("ams2");
        public static TransferPropertiesRegion Ams3 { get; } = new TransferPropertiesRegion("ams3");
        public static TransferPropertiesRegion Blr1 { get; } = new TransferPropertiesRegion("blr1");
        public static TransferPropertiesRegion Fra1 { get; } = new TransferPropertiesRegion("fra1");
        public static TransferPropertiesRegion Lon1 { get; } = new TransferPropertiesRegion("lon1");
        public static TransferPropertiesRegion Nyc1 { get; } = new TransferPropertiesRegion("nyc1");
        public static TransferPropertiesRegion Nyc2 { get; } = new TransferPropertiesRegion("nyc2");
        public static TransferPropertiesRegion Nyc3 { get; } = new TransferPropertiesRegion("nyc3");
        public static TransferPropertiesRegion Sfo1 { get; } = new TransferPropertiesRegion("sfo1");
        public static TransferPropertiesRegion Sfo2 { get; } = new TransferPropertiesRegion("sfo2");
        public static TransferPropertiesRegion Sfo3 { get; } = new TransferPropertiesRegion("sfo3");
        public static TransferPropertiesRegion Sgp1 { get; } = new TransferPropertiesRegion("sgp1");
        public static TransferPropertiesRegion Tor1 { get; } = new TransferPropertiesRegion("tor1");

        public static bool operator ==(TransferPropertiesRegion left, TransferPropertiesRegion right) => left.Equals(right);
        public static bool operator !=(TransferPropertiesRegion left, TransferPropertiesRegion right) => !left.Equals(right);

        public static explicit operator string(TransferPropertiesRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransferPropertiesRegion other && Equals(other);
        public bool Equals(TransferPropertiesRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current status of the action. This can be "in-progress", "completed", or "errored".
    /// </summary>
    [EnumType]
    public readonly struct TransferStatus : IEquatable<TransferStatus>
    {
        private readonly string _value;

        private TransferStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TransferStatus InProgress { get; } = new TransferStatus("in-progress");
        public static TransferStatus Completed { get; } = new TransferStatus("completed");
        public static TransferStatus Errored { get; } = new TransferStatus("errored");

        public static bool operator ==(TransferStatus left, TransferStatus right) => left.Equals(right);
        public static bool operator !=(TransferStatus left, TransferStatus right) => !left.Equals(right);

        public static explicit operator string(TransferStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransferStatus other && Equals(other);
        public bool Equals(TransferStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
