// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.DigitalOceanNative.ImagesV2
{
    /// <summary>
    /// The current status of the action. This can be "in-progress", "completed", or "errored".
    /// </summary>
    [EnumType]
    public readonly struct ActionStatus : IEquatable<ActionStatus>
    {
        private readonly string _value;

        private ActionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActionStatus InProgress { get; } = new ActionStatus("in-progress");
        public static ActionStatus Completed { get; } = new ActionStatus("completed");
        public static ActionStatus Errored { get; } = new ActionStatus("errored");

        public static bool operator ==(ActionStatus left, ActionStatus right) => left.Equals(right);
        public static bool operator !=(ActionStatus left, ActionStatus right) => !left.Equals(right);

        public static explicit operator string(ActionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionStatus other && Equals(other);
        public bool Equals(ActionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The action to be taken on the image. Can be either `convert` or `transfer`.
    /// </summary>
    [EnumType]
    public readonly struct ImageActionBaseType : IEquatable<ImageActionBaseType>
    {
        private readonly string _value;

        private ImageActionBaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageActionBaseType Convert { get; } = new ImageActionBaseType("convert");
        public static ImageActionBaseType Transfer { get; } = new ImageActionBaseType("transfer");

        public static bool operator ==(ImageActionBaseType left, ImageActionBaseType right) => left.Equals(right);
        public static bool operator !=(ImageActionBaseType left, ImageActionBaseType right) => !left.Equals(right);

        public static explicit operator string(ImageActionBaseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageActionBaseType other && Equals(other);
        public bool Equals(ImageActionBaseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The slug identifier for the region where the resource will initially be  available.
    /// </summary>
    [EnumType]
    public readonly struct ImageActionsTransferPropertiesRegion : IEquatable<ImageActionsTransferPropertiesRegion>
    {
        private readonly string _value;

        private ImageActionsTransferPropertiesRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageActionsTransferPropertiesRegion Ams1 { get; } = new ImageActionsTransferPropertiesRegion("ams1");
        public static ImageActionsTransferPropertiesRegion Ams2 { get; } = new ImageActionsTransferPropertiesRegion("ams2");
        public static ImageActionsTransferPropertiesRegion Ams3 { get; } = new ImageActionsTransferPropertiesRegion("ams3");
        public static ImageActionsTransferPropertiesRegion Blr1 { get; } = new ImageActionsTransferPropertiesRegion("blr1");
        public static ImageActionsTransferPropertiesRegion Fra1 { get; } = new ImageActionsTransferPropertiesRegion("fra1");
        public static ImageActionsTransferPropertiesRegion Lon1 { get; } = new ImageActionsTransferPropertiesRegion("lon1");
        public static ImageActionsTransferPropertiesRegion Nyc1 { get; } = new ImageActionsTransferPropertiesRegion("nyc1");
        public static ImageActionsTransferPropertiesRegion Nyc2 { get; } = new ImageActionsTransferPropertiesRegion("nyc2");
        public static ImageActionsTransferPropertiesRegion Nyc3 { get; } = new ImageActionsTransferPropertiesRegion("nyc3");
        public static ImageActionsTransferPropertiesRegion Sfo1 { get; } = new ImageActionsTransferPropertiesRegion("sfo1");
        public static ImageActionsTransferPropertiesRegion Sfo2 { get; } = new ImageActionsTransferPropertiesRegion("sfo2");
        public static ImageActionsTransferPropertiesRegion Sfo3 { get; } = new ImageActionsTransferPropertiesRegion("sfo3");
        public static ImageActionsTransferPropertiesRegion Sgp1 { get; } = new ImageActionsTransferPropertiesRegion("sgp1");
        public static ImageActionsTransferPropertiesRegion Tor1 { get; } = new ImageActionsTransferPropertiesRegion("tor1");

        public static bool operator ==(ImageActionsTransferPropertiesRegion left, ImageActionsTransferPropertiesRegion right) => left.Equals(right);
        public static bool operator !=(ImageActionsTransferPropertiesRegion left, ImageActionsTransferPropertiesRegion right) => !left.Equals(right);

        public static explicit operator string(ImageActionsTransferPropertiesRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageActionsTransferPropertiesRegion other && Equals(other);
        public bool Equals(ImageActionsTransferPropertiesRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of a custom image's distribution. Currently, the valid values are  `Arch Linux`, `CentOS`, `CoreOS`, `Debian`, `Fedora`, `Fedora Atomic`,  `FreeBSD`, `Gentoo`, `openSUSE`, `RancherOS`, `Rocky Linux`, `Ubuntu`, and `Unknown`.  Any other value will be accepted but ignored, and `Unknown` will be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct ImageDistribution : IEquatable<ImageDistribution>
    {
        private readonly string _value;

        private ImageDistribution(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageDistribution ArchLinux { get; } = new ImageDistribution("Arch Linux");
        public static ImageDistribution CentOS { get; } = new ImageDistribution("CentOS");
        public static ImageDistribution CoreOS { get; } = new ImageDistribution("CoreOS");
        public static ImageDistribution Debian { get; } = new ImageDistribution("Debian");
        public static ImageDistribution Fedora { get; } = new ImageDistribution("Fedora");
        public static ImageDistribution FedoraAtomic { get; } = new ImageDistribution("Fedora Atomic");
        public static ImageDistribution FreeBSD { get; } = new ImageDistribution("FreeBSD");
        public static ImageDistribution Gentoo { get; } = new ImageDistribution("Gentoo");
        public static ImageDistribution OpenSUSE { get; } = new ImageDistribution("openSUSE");
        public static ImageDistribution RancherOS { get; } = new ImageDistribution("RancherOS");
        public static ImageDistribution RockyLinux { get; } = new ImageDistribution("Rocky Linux");
        public static ImageDistribution Ubuntu { get; } = new ImageDistribution("Ubuntu");
        public static ImageDistribution Unknown { get; } = new ImageDistribution("Unknown");

        public static bool operator ==(ImageDistribution left, ImageDistribution right) => left.Equals(right);
        public static bool operator !=(ImageDistribution left, ImageDistribution right) => !left.Equals(right);

        public static explicit operator string(ImageDistribution value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageDistribution other && Equals(other);
        public bool Equals(ImageDistribution other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The slug identifier for the region where the resource will initially be  available.
    /// </summary>
    [EnumType]
    public readonly struct ImageRegionsItem : IEquatable<ImageRegionsItem>
    {
        private readonly string _value;

        private ImageRegionsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageRegionsItem Ams1 { get; } = new ImageRegionsItem("ams1");
        public static ImageRegionsItem Ams2 { get; } = new ImageRegionsItem("ams2");
        public static ImageRegionsItem Ams3 { get; } = new ImageRegionsItem("ams3");
        public static ImageRegionsItem Blr1 { get; } = new ImageRegionsItem("blr1");
        public static ImageRegionsItem Fra1 { get; } = new ImageRegionsItem("fra1");
        public static ImageRegionsItem Lon1 { get; } = new ImageRegionsItem("lon1");
        public static ImageRegionsItem Nyc1 { get; } = new ImageRegionsItem("nyc1");
        public static ImageRegionsItem Nyc2 { get; } = new ImageRegionsItem("nyc2");
        public static ImageRegionsItem Nyc3 { get; } = new ImageRegionsItem("nyc3");
        public static ImageRegionsItem Sfo1 { get; } = new ImageRegionsItem("sfo1");
        public static ImageRegionsItem Sfo2 { get; } = new ImageRegionsItem("sfo2");
        public static ImageRegionsItem Sfo3 { get; } = new ImageRegionsItem("sfo3");
        public static ImageRegionsItem Sgp1 { get; } = new ImageRegionsItem("sgp1");
        public static ImageRegionsItem Tor1 { get; } = new ImageRegionsItem("tor1");

        public static bool operator ==(ImageRegionsItem left, ImageRegionsItem right) => left.Equals(right);
        public static bool operator !=(ImageRegionsItem left, ImageRegionsItem right) => !left.Equals(right);

        public static explicit operator string(ImageRegionsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageRegionsItem other && Equals(other);
        public bool Equals(ImageRegionsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A status string indicating the state of a custom image. This may be `NEW`,
    ///  `available`, `pending`, `deleted`, or `retired`.
    /// </summary>
    [EnumType]
    public readonly struct ImageStatus : IEquatable<ImageStatus>
    {
        private readonly string _value;

        private ImageStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageStatus New { get; } = new ImageStatus("NEW");
        public static ImageStatus Available { get; } = new ImageStatus("available");
        public static ImageStatus Pending { get; } = new ImageStatus("pending");
        public static ImageStatus Deleted { get; } = new ImageStatus("deleted");
        public static ImageStatus Retired { get; } = new ImageStatus("retired");

        public static bool operator ==(ImageStatus left, ImageStatus right) => left.Equals(right);
        public static bool operator !=(ImageStatus left, ImageStatus right) => !left.Equals(right);

        public static explicit operator string(ImageStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageStatus other && Equals(other);
        public bool Equals(ImageStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the kind of image. It may be one of `base`, `snapshot`, `backup`, `custom`, or `admin`. Respectively, this specifies whether an image is a DigitalOcean base OS image, user-generated Droplet snapshot, automatically created Droplet backup, user-provided virtual machine image, or an image used for DigitalOcean managed resources (e.g. DOKS worker nodes).
    /// </summary>
    [EnumType]
    public readonly struct ImageType : IEquatable<ImageType>
    {
        private readonly string _value;

        private ImageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageType Base { get; } = new ImageType("base");
        public static ImageType Snapshot { get; } = new ImageType("snapshot");
        public static ImageType Backup { get; } = new ImageType("backup");
        public static ImageType Custom { get; } = new ImageType("custom");
        public static ImageType Admin { get; } = new ImageType("admin");

        public static bool operator ==(ImageType left, ImageType right) => left.Equals(right);
        public static bool operator !=(ImageType left, ImageType right) => !left.Equals(right);

        public static explicit operator string(ImageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageType other && Equals(other);
        public bool Equals(ImageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of a custom image's distribution. Currently, the valid values are  `Arch Linux`, `CentOS`, `CoreOS`, `Debian`, `Fedora`, `Fedora Atomic`,  `FreeBSD`, `Gentoo`, `openSUSE`, `RancherOS`, `Rocky Linux`, `Ubuntu`, and `Unknown`.  Any other value will be accepted but ignored, and `Unknown` will be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct ImageUpdateDistribution : IEquatable<ImageUpdateDistribution>
    {
        private readonly string _value;

        private ImageUpdateDistribution(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageUpdateDistribution ArchLinux { get; } = new ImageUpdateDistribution("Arch Linux");
        public static ImageUpdateDistribution CentOS { get; } = new ImageUpdateDistribution("CentOS");
        public static ImageUpdateDistribution CoreOS { get; } = new ImageUpdateDistribution("CoreOS");
        public static ImageUpdateDistribution Debian { get; } = new ImageUpdateDistribution("Debian");
        public static ImageUpdateDistribution Fedora { get; } = new ImageUpdateDistribution("Fedora");
        public static ImageUpdateDistribution FedoraAtomic { get; } = new ImageUpdateDistribution("Fedora Atomic");
        public static ImageUpdateDistribution FreeBSD { get; } = new ImageUpdateDistribution("FreeBSD");
        public static ImageUpdateDistribution Gentoo { get; } = new ImageUpdateDistribution("Gentoo");
        public static ImageUpdateDistribution OpenSUSE { get; } = new ImageUpdateDistribution("openSUSE");
        public static ImageUpdateDistribution RancherOS { get; } = new ImageUpdateDistribution("RancherOS");
        public static ImageUpdateDistribution RockyLinux { get; } = new ImageUpdateDistribution("Rocky Linux");
        public static ImageUpdateDistribution Ubuntu { get; } = new ImageUpdateDistribution("Ubuntu");
        public static ImageUpdateDistribution Unknown { get; } = new ImageUpdateDistribution("Unknown");

        public static bool operator ==(ImageUpdateDistribution left, ImageUpdateDistribution right) => left.Equals(right);
        public static bool operator !=(ImageUpdateDistribution left, ImageUpdateDistribution right) => !left.Equals(right);

        public static explicit operator string(ImageUpdateDistribution value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageUpdateDistribution other && Equals(other);
        public bool Equals(ImageUpdateDistribution other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The slug identifier for the region where the resource will initially be  available.
    /// </summary>
    [EnumType]
    public readonly struct ImagesCustomPropertiesRegion : IEquatable<ImagesCustomPropertiesRegion>
    {
        private readonly string _value;

        private ImagesCustomPropertiesRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImagesCustomPropertiesRegion Ams1 { get; } = new ImagesCustomPropertiesRegion("ams1");
        public static ImagesCustomPropertiesRegion Ams2 { get; } = new ImagesCustomPropertiesRegion("ams2");
        public static ImagesCustomPropertiesRegion Ams3 { get; } = new ImagesCustomPropertiesRegion("ams3");
        public static ImagesCustomPropertiesRegion Blr1 { get; } = new ImagesCustomPropertiesRegion("blr1");
        public static ImagesCustomPropertiesRegion Fra1 { get; } = new ImagesCustomPropertiesRegion("fra1");
        public static ImagesCustomPropertiesRegion Lon1 { get; } = new ImagesCustomPropertiesRegion("lon1");
        public static ImagesCustomPropertiesRegion Nyc1 { get; } = new ImagesCustomPropertiesRegion("nyc1");
        public static ImagesCustomPropertiesRegion Nyc2 { get; } = new ImagesCustomPropertiesRegion("nyc2");
        public static ImagesCustomPropertiesRegion Nyc3 { get; } = new ImagesCustomPropertiesRegion("nyc3");
        public static ImagesCustomPropertiesRegion Sfo1 { get; } = new ImagesCustomPropertiesRegion("sfo1");
        public static ImagesCustomPropertiesRegion Sfo2 { get; } = new ImagesCustomPropertiesRegion("sfo2");
        public static ImagesCustomPropertiesRegion Sfo3 { get; } = new ImagesCustomPropertiesRegion("sfo3");
        public static ImagesCustomPropertiesRegion Sgp1 { get; } = new ImagesCustomPropertiesRegion("sgp1");
        public static ImagesCustomPropertiesRegion Tor1 { get; } = new ImagesCustomPropertiesRegion("tor1");

        public static bool operator ==(ImagesCustomPropertiesRegion left, ImagesCustomPropertiesRegion right) => left.Equals(right);
        public static bool operator !=(ImagesCustomPropertiesRegion left, ImagesCustomPropertiesRegion right) => !left.Equals(right);

        public static explicit operator string(ImagesCustomPropertiesRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImagesCustomPropertiesRegion other && Equals(other);
        public bool Equals(ImagesCustomPropertiesRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current status of the action. This can be "in-progress", "completed", or "errored".
    /// </summary>
    [EnumType]
    public readonly struct Status : IEquatable<Status>
    {
        private readonly string _value;

        private Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Status InProgress { get; } = new Status("in-progress");
        public static Status Completed { get; } = new Status("completed");
        public static Status Errored { get; } = new Status("errored");

        public static bool operator ==(Status left, Status right) => left.Equals(right);
        public static bool operator !=(Status left, Status right) => !left.Equals(right);

        public static explicit operator string(Status value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Status other && Equals(other);
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The action to be taken on the image. Can be either `convert` or `transfer`.
    /// </summary>
    [EnumType]
    public readonly struct Type : IEquatable<Type>
    {
        private readonly string _value;

        private Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Type Convert { get; } = new Type("convert");
        public static Type Transfer { get; } = new Type("transfer");

        public static bool operator ==(Type left, Type right) => left.Equals(right);
        public static bool operator !=(Type left, Type right) => !left.Equals(right);

        public static explicit operator string(Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Type other && Equals(other);
        public bool Equals(Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
