// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOceanNative.FloatingIpsV2
{
    public static class GetFloatingIPsAction
    {
        public static Task<GetFloatingIPsActionResult> InvokeAsync(GetFloatingIPsActionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFloatingIPsActionResult>("digitalocean-native:floating_ips/v2:getFloatingIPsAction", args ?? new GetFloatingIPsActionArgs(), options.WithDefaults());

        public static Output<GetFloatingIPsActionResult> Invoke(GetFloatingIPsActionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFloatingIPsActionResult>("digitalocean-native:floating_ips/v2:getFloatingIPsAction", args ?? new GetFloatingIPsActionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFloatingIPsActionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique numeric ID that can be used to identify and reference an action.
        /// </summary>
        [Input("actionId", required: true)]
        public string ActionId { get; set; } = null!;

        /// <summary>
        /// A floating IP address.
        /// </summary>
        [Input("floatingIp", required: true)]
        public string FloatingIp { get; set; } = null!;

        public GetFloatingIPsActionArgs()
        {
        }
        public static new GetFloatingIPsActionArgs Empty => new GetFloatingIPsActionArgs();
    }

    public sealed class GetFloatingIPsActionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique numeric ID that can be used to identify and reference an action.
        /// </summary>
        [Input("actionId", required: true)]
        public Input<string> ActionId { get; set; } = null!;

        /// <summary>
        /// A floating IP address.
        /// </summary>
        [Input("floatingIp", required: true)]
        public Input<string> FloatingIp { get; set; } = null!;

        public GetFloatingIPsActionInvokeArgs()
        {
        }
        public static new GetFloatingIPsActionInvokeArgs Empty => new GetFloatingIPsActionInvokeArgs();
    }


    [OutputType]
    public sealed class GetFloatingIPsActionResult
    {
        public readonly Outputs.GetFloatingIPsActionProperties Items;

        [OutputConstructor]
        private GetFloatingIPsActionResult(Outputs.GetFloatingIPsActionProperties items)
        {
            Items = items;
        }
    }
}
