// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.DigitalOceanNative.FloatingIpsV2
{
    /// <summary>
    /// The current status of the action. This can be "in-progress", "completed", or "errored".
    /// </summary>
    [EnumType]
    public readonly struct ActionStatus : IEquatable<ActionStatus>
    {
        private readonly string _value;

        private ActionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActionStatus InProgress { get; } = new ActionStatus("in-progress");
        public static ActionStatus Completed { get; } = new ActionStatus("completed");
        public static ActionStatus Errored { get; } = new ActionStatus("errored");

        public static bool operator ==(ActionStatus left, ActionStatus right) => left.Equals(right);
        public static bool operator !=(ActionStatus left, ActionStatus right) => !left.Equals(right);

        public static explicit operator string(ActionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionStatus other && Equals(other);
        public bool Equals(ActionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A status string indicating the state of the Droplet instance. This may be "new", "active", "off", or "archive".
    /// </summary>
    [EnumType]
    public readonly struct DropletStatus : IEquatable<DropletStatus>
    {
        private readonly string _value;

        private DropletStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DropletStatus New { get; } = new DropletStatus("new");
        public static DropletStatus Active { get; } = new DropletStatus("active");
        public static DropletStatus Off { get; } = new DropletStatus("off");
        public static DropletStatus Archive { get; } = new DropletStatus("archive");

        public static bool operator ==(DropletStatus left, DropletStatus right) => left.Equals(right);
        public static bool operator !=(DropletStatus left, DropletStatus right) => !left.Equals(right);

        public static explicit operator string(DropletStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DropletStatus other && Equals(other);
        public bool Equals(DropletStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of action to initiate for the floating IP.
    /// </summary>
    [EnumType]
    public readonly struct FloatingIPsActionType : IEquatable<FloatingIPsActionType>
    {
        private readonly string _value;

        private FloatingIPsActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FloatingIPsActionType Assign { get; } = new FloatingIPsActionType("assign");
        public static FloatingIPsActionType Unassign { get; } = new FloatingIPsActionType("unassign");

        public static bool operator ==(FloatingIPsActionType left, FloatingIPsActionType right) => left.Equals(right);
        public static bool operator !=(FloatingIPsActionType left, FloatingIPsActionType right) => !left.Equals(right);

        public static explicit operator string(FloatingIPsActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FloatingIPsActionType other && Equals(other);
        public bool Equals(FloatingIPsActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of a custom image's distribution. Currently, the valid values are  `Arch Linux`, `CentOS`, `CoreOS`, `Debian`, `Fedora`, `Fedora Atomic`,  `FreeBSD`, `Gentoo`, `openSUSE`, `RancherOS`, `Rocky Linux`, `Ubuntu`, and `Unknown`.  Any other value will be accepted but ignored, and `Unknown` will be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct ImageDistribution : IEquatable<ImageDistribution>
    {
        private readonly string _value;

        private ImageDistribution(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageDistribution ArchLinux { get; } = new ImageDistribution("Arch Linux");
        public static ImageDistribution CentOS { get; } = new ImageDistribution("CentOS");
        public static ImageDistribution CoreOS { get; } = new ImageDistribution("CoreOS");
        public static ImageDistribution Debian { get; } = new ImageDistribution("Debian");
        public static ImageDistribution Fedora { get; } = new ImageDistribution("Fedora");
        public static ImageDistribution FedoraAtomic { get; } = new ImageDistribution("Fedora Atomic");
        public static ImageDistribution FreeBSD { get; } = new ImageDistribution("FreeBSD");
        public static ImageDistribution Gentoo { get; } = new ImageDistribution("Gentoo");
        public static ImageDistribution OpenSUSE { get; } = new ImageDistribution("openSUSE");
        public static ImageDistribution RancherOS { get; } = new ImageDistribution("RancherOS");
        public static ImageDistribution RockyLinux { get; } = new ImageDistribution("Rocky Linux");
        public static ImageDistribution Ubuntu { get; } = new ImageDistribution("Ubuntu");
        public static ImageDistribution Unknown { get; } = new ImageDistribution("Unknown");

        public static bool operator ==(ImageDistribution left, ImageDistribution right) => left.Equals(right);
        public static bool operator !=(ImageDistribution left, ImageDistribution right) => !left.Equals(right);

        public static explicit operator string(ImageDistribution value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageDistribution other && Equals(other);
        public bool Equals(ImageDistribution other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The slug identifier for the region where the resource will initially be  available.
    /// </summary>
    [EnumType]
    public readonly struct ImageRegionsItem : IEquatable<ImageRegionsItem>
    {
        private readonly string _value;

        private ImageRegionsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageRegionsItem Ams1 { get; } = new ImageRegionsItem("ams1");
        public static ImageRegionsItem Ams2 { get; } = new ImageRegionsItem("ams2");
        public static ImageRegionsItem Ams3 { get; } = new ImageRegionsItem("ams3");
        public static ImageRegionsItem Blr1 { get; } = new ImageRegionsItem("blr1");
        public static ImageRegionsItem Fra1 { get; } = new ImageRegionsItem("fra1");
        public static ImageRegionsItem Lon1 { get; } = new ImageRegionsItem("lon1");
        public static ImageRegionsItem Nyc1 { get; } = new ImageRegionsItem("nyc1");
        public static ImageRegionsItem Nyc2 { get; } = new ImageRegionsItem("nyc2");
        public static ImageRegionsItem Nyc3 { get; } = new ImageRegionsItem("nyc3");
        public static ImageRegionsItem Sfo1 { get; } = new ImageRegionsItem("sfo1");
        public static ImageRegionsItem Sfo2 { get; } = new ImageRegionsItem("sfo2");
        public static ImageRegionsItem Sfo3 { get; } = new ImageRegionsItem("sfo3");
        public static ImageRegionsItem Sgp1 { get; } = new ImageRegionsItem("sgp1");
        public static ImageRegionsItem Tor1 { get; } = new ImageRegionsItem("tor1");

        public static bool operator ==(ImageRegionsItem left, ImageRegionsItem right) => left.Equals(right);
        public static bool operator !=(ImageRegionsItem left, ImageRegionsItem right) => !left.Equals(right);

        public static explicit operator string(ImageRegionsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageRegionsItem other && Equals(other);
        public bool Equals(ImageRegionsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A status string indicating the state of a custom image. This may be `NEW`,
    ///  `available`, `pending`, `deleted`, or `retired`.
    /// </summary>
    [EnumType]
    public readonly struct ImageStatus : IEquatable<ImageStatus>
    {
        private readonly string _value;

        private ImageStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageStatus New { get; } = new ImageStatus("NEW");
        public static ImageStatus Available { get; } = new ImageStatus("available");
        public static ImageStatus Pending { get; } = new ImageStatus("pending");
        public static ImageStatus Deleted { get; } = new ImageStatus("deleted");
        public static ImageStatus Retired { get; } = new ImageStatus("retired");

        public static bool operator ==(ImageStatus left, ImageStatus right) => left.Equals(right);
        public static bool operator !=(ImageStatus left, ImageStatus right) => !left.Equals(right);

        public static explicit operator string(ImageStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageStatus other && Equals(other);
        public bool Equals(ImageStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the kind of image. It may be one of `base`, `snapshot`, `backup`, `custom`, or `admin`. Respectively, this specifies whether an image is a DigitalOcean base OS image, user-generated Droplet snapshot, automatically created Droplet backup, user-provided virtual machine image, or an image used for DigitalOcean managed resources (e.g. DOKS worker nodes).
    /// </summary>
    [EnumType]
    public readonly struct ImageType : IEquatable<ImageType>
    {
        private readonly string _value;

        private ImageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageType Base { get; } = new ImageType("base");
        public static ImageType Snapshot { get; } = new ImageType("snapshot");
        public static ImageType Backup { get; } = new ImageType("backup");
        public static ImageType Custom { get; } = new ImageType("custom");
        public static ImageType Admin { get; } = new ImageType("admin");

        public static bool operator ==(ImageType left, ImageType right) => left.Equals(right);
        public static bool operator !=(ImageType left, ImageType right) => !left.Equals(right);

        public static explicit operator string(ImageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageType other && Equals(other);
        public bool Equals(ImageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the IPv4 network interface.
    /// </summary>
    [EnumType]
    public readonly struct NetworkV4Type : IEquatable<NetworkV4Type>
    {
        private readonly string _value;

        private NetworkV4Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkV4Type Public { get; } = new NetworkV4Type("public");
        public static NetworkV4Type Private { get; } = new NetworkV4Type("private");

        public static bool operator ==(NetworkV4Type left, NetworkV4Type right) => left.Equals(right);
        public static bool operator !=(NetworkV4Type left, NetworkV4Type right) => !left.Equals(right);

        public static explicit operator string(NetworkV4Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkV4Type other && Equals(other);
        public bool Equals(NetworkV4Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the IPv6 network interface.
    /// 
    /// **Note**: IPv6 private  networking is not currently supported.
    /// </summary>
    [EnumType]
    public readonly struct NetworkV6Type : IEquatable<NetworkV6Type>
    {
        private readonly string _value;

        private NetworkV6Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkV6Type Public { get; } = new NetworkV6Type("public");

        public static bool operator ==(NetworkV6Type left, NetworkV6Type right) => left.Equals(right);
        public static bool operator !=(NetworkV6Type left, NetworkV6Type right) => !left.Equals(right);

        public static explicit operator string(NetworkV6Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkV6Type other && Equals(other);
        public bool Equals(NetworkV6Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
