// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.DigitalOceanNative.RegistryV2
{
    /// <summary>
    /// The current status of this garbage collection.
    /// </summary>
    [EnumType]
    public readonly struct GarbageCollectionStatus : IEquatable<GarbageCollectionStatus>
    {
        private readonly string _value;

        private GarbageCollectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GarbageCollectionStatus Requested { get; } = new GarbageCollectionStatus("requested");
        public static GarbageCollectionStatus WaitingForWriteJWTsToExpire { get; } = new GarbageCollectionStatus("waiting for write JWTs to expire");
        public static GarbageCollectionStatus ScanningManifests { get; } = new GarbageCollectionStatus("scanning manifests");
        public static GarbageCollectionStatus DeletingUnreferencedBlobs { get; } = new GarbageCollectionStatus("deleting unreferenced blobs");
        public static GarbageCollectionStatus Cancelling { get; } = new GarbageCollectionStatus("cancelling");
        public static GarbageCollectionStatus Failed { get; } = new GarbageCollectionStatus("failed");
        public static GarbageCollectionStatus Succeeded { get; } = new GarbageCollectionStatus("succeeded");
        public static GarbageCollectionStatus Cancelled { get; } = new GarbageCollectionStatus("cancelled");

        public static bool operator ==(GarbageCollectionStatus left, GarbageCollectionStatus right) => left.Equals(right);
        public static bool operator !=(GarbageCollectionStatus left, GarbageCollectionStatus right) => !left.Equals(right);

        public static explicit operator string(GarbageCollectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GarbageCollectionStatus other && Equals(other);
        public bool Equals(GarbageCollectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Slug of the region where registry data is stored. When not provided, a region will be selected.
    /// </summary>
    [EnumType]
    public readonly struct RegistryRegion : IEquatable<RegistryRegion>
    {
        private readonly string _value;

        private RegistryRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RegistryRegion Nyc3 { get; } = new RegistryRegion("nyc3");
        public static RegistryRegion Sfo3 { get; } = new RegistryRegion("sfo3");
        public static RegistryRegion Ams3 { get; } = new RegistryRegion("ams3");
        public static RegistryRegion Sgp1 { get; } = new RegistryRegion("sgp1");
        public static RegistryRegion Fra1 { get; } = new RegistryRegion("fra1");

        public static bool operator ==(RegistryRegion left, RegistryRegion right) => left.Equals(right);
        public static bool operator !=(RegistryRegion left, RegistryRegion right) => !left.Equals(right);

        public static explicit operator string(RegistryRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RegistryRegion other && Equals(other);
        public bool Equals(RegistryRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The slug of the subscription tier to sign up for. Valid values can be retrieved using the options endpoint.
    /// </summary>
    [EnumType]
    public readonly struct RegistrySubscriptionTierSlug : IEquatable<RegistrySubscriptionTierSlug>
    {
        private readonly string _value;

        private RegistrySubscriptionTierSlug(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RegistrySubscriptionTierSlug Starter { get; } = new RegistrySubscriptionTierSlug("starter");
        public static RegistrySubscriptionTierSlug Basic { get; } = new RegistrySubscriptionTierSlug("basic");
        public static RegistrySubscriptionTierSlug Professional { get; } = new RegistrySubscriptionTierSlug("professional");

        public static bool operator ==(RegistrySubscriptionTierSlug left, RegistrySubscriptionTierSlug right) => left.Equals(right);
        public static bool operator !=(RegistrySubscriptionTierSlug left, RegistrySubscriptionTierSlug right) => !left.Equals(right);

        public static explicit operator string(RegistrySubscriptionTierSlug value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RegistrySubscriptionTierSlug other && Equals(other);
        public bool Equals(RegistrySubscriptionTierSlug other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The slug of the subscription tier to sign up for.
    /// </summary>
    [EnumType]
    public readonly struct RegistryUpdateSubscriptionTierSlug : IEquatable<RegistryUpdateSubscriptionTierSlug>
    {
        private readonly string _value;

        private RegistryUpdateSubscriptionTierSlug(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RegistryUpdateSubscriptionTierSlug Starter { get; } = new RegistryUpdateSubscriptionTierSlug("starter");
        public static RegistryUpdateSubscriptionTierSlug Basic { get; } = new RegistryUpdateSubscriptionTierSlug("basic");
        public static RegistryUpdateSubscriptionTierSlug Professional { get; } = new RegistryUpdateSubscriptionTierSlug("professional");

        public static bool operator ==(RegistryUpdateSubscriptionTierSlug left, RegistryUpdateSubscriptionTierSlug right) => left.Equals(right);
        public static bool operator !=(RegistryUpdateSubscriptionTierSlug left, RegistryUpdateSubscriptionTierSlug right) => !left.Equals(right);

        public static explicit operator string(RegistryUpdateSubscriptionTierSlug value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RegistryUpdateSubscriptionTierSlug other && Equals(other);
        public bool Equals(RegistryUpdateSubscriptionTierSlug other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SubscriptionTierExtendedEligibilityReasonsItem : IEquatable<SubscriptionTierExtendedEligibilityReasonsItem>
    {
        private readonly string _value;

        private SubscriptionTierExtendedEligibilityReasonsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SubscriptionTierExtendedEligibilityReasonsItem OverRepositoryLimit { get; } = new SubscriptionTierExtendedEligibilityReasonsItem("OverRepositoryLimit");
        public static SubscriptionTierExtendedEligibilityReasonsItem OverStorageLimit { get; } = new SubscriptionTierExtendedEligibilityReasonsItem("OverStorageLimit");

        public static bool operator ==(SubscriptionTierExtendedEligibilityReasonsItem left, SubscriptionTierExtendedEligibilityReasonsItem right) => left.Equals(right);
        public static bool operator !=(SubscriptionTierExtendedEligibilityReasonsItem left, SubscriptionTierExtendedEligibilityReasonsItem right) => !left.Equals(right);

        public static explicit operator string(SubscriptionTierExtendedEligibilityReasonsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SubscriptionTierExtendedEligibilityReasonsItem other && Equals(other);
        public bool Equals(SubscriptionTierExtendedEligibilityReasonsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
