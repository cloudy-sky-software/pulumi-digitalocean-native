// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.DigitalOceanNative.RegistryV2
{
    /// <summary>
    /// The current status of this garbage collection.
    /// </summary>
    [EnumType]
    public readonly struct GarbageCollectionStatus : IEquatable<GarbageCollectionStatus>
    {
        private readonly string _value;

        private GarbageCollectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GarbageCollectionStatus Requested { get; } = new GarbageCollectionStatus("requested");
        public static GarbageCollectionStatus WaitingForWriteJWTsToExpire { get; } = new GarbageCollectionStatus("waiting for write JWTs to expire");
        public static GarbageCollectionStatus ScanningManifests { get; } = new GarbageCollectionStatus("scanning manifests");
        public static GarbageCollectionStatus DeletingUnreferencedBlobs { get; } = new GarbageCollectionStatus("deleting unreferenced blobs");
        public static GarbageCollectionStatus Cancelling { get; } = new GarbageCollectionStatus("cancelling");
        public static GarbageCollectionStatus Failed { get; } = new GarbageCollectionStatus("failed");
        public static GarbageCollectionStatus Succeeded { get; } = new GarbageCollectionStatus("succeeded");
        public static GarbageCollectionStatus Cancelled { get; } = new GarbageCollectionStatus("cancelled");

        public static bool operator ==(GarbageCollectionStatus left, GarbageCollectionStatus right) => left.Equals(right);
        public static bool operator !=(GarbageCollectionStatus left, GarbageCollectionStatus right) => !left.Equals(right);

        public static explicit operator string(GarbageCollectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GarbageCollectionStatus other && Equals(other);
        public bool Equals(GarbageCollectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Slug of the region where registry data is stored. When not provided, a region will be selected.
    /// </summary>
    [EnumType]
    public readonly struct Region : IEquatable<Region>
    {
        private readonly string _value;

        private Region(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Region Nyc3 { get; } = new Region("nyc3");
        public static Region Sfo3 { get; } = new Region("sfo3");
        public static Region Ams3 { get; } = new Region("ams3");
        public static Region Sgp1 { get; } = new Region("sgp1");
        public static Region Fra1 { get; } = new Region("fra1");

        public static bool operator ==(Region left, Region right) => left.Equals(right);
        public static bool operator !=(Region left, Region right) => !left.Equals(right);

        public static explicit operator string(Region value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Region other && Equals(other);
        public bool Equals(Region other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SubscriptionTierExtendedEligibilityReasonsItem : IEquatable<SubscriptionTierExtendedEligibilityReasonsItem>
    {
        private readonly string _value;

        private SubscriptionTierExtendedEligibilityReasonsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SubscriptionTierExtendedEligibilityReasonsItem OverRepositoryLimit { get; } = new SubscriptionTierExtendedEligibilityReasonsItem("OverRepositoryLimit");
        public static SubscriptionTierExtendedEligibilityReasonsItem OverStorageLimit { get; } = new SubscriptionTierExtendedEligibilityReasonsItem("OverStorageLimit");

        public static bool operator ==(SubscriptionTierExtendedEligibilityReasonsItem left, SubscriptionTierExtendedEligibilityReasonsItem right) => left.Equals(right);
        public static bool operator !=(SubscriptionTierExtendedEligibilityReasonsItem left, SubscriptionTierExtendedEligibilityReasonsItem right) => !left.Equals(right);

        public static explicit operator string(SubscriptionTierExtendedEligibilityReasonsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SubscriptionTierExtendedEligibilityReasonsItem other && Equals(other);
        public bool Equals(SubscriptionTierExtendedEligibilityReasonsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The slug of the subscription tier to sign up for. Valid values can be retrieved using the options endpoint.
    /// </summary>
    [EnumType]
    public readonly struct SubscriptionTierSlug : IEquatable<SubscriptionTierSlug>
    {
        private readonly string _value;

        private SubscriptionTierSlug(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SubscriptionTierSlug Starter { get; } = new SubscriptionTierSlug("starter");
        public static SubscriptionTierSlug Basic { get; } = new SubscriptionTierSlug("basic");
        public static SubscriptionTierSlug Professional { get; } = new SubscriptionTierSlug("professional");

        public static bool operator ==(SubscriptionTierSlug left, SubscriptionTierSlug right) => left.Equals(right);
        public static bool operator !=(SubscriptionTierSlug left, SubscriptionTierSlug right) => !left.Equals(right);

        public static explicit operator string(SubscriptionTierSlug value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SubscriptionTierSlug other && Equals(other);
        public bool Equals(SubscriptionTierSlug other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The slug of the subscription tier to sign up for.
    /// </summary>
    [EnumType]
    public readonly struct TierSlug : IEquatable<TierSlug>
    {
        private readonly string _value;

        private TierSlug(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TierSlug Starter { get; } = new TierSlug("starter");
        public static TierSlug Basic { get; } = new TierSlug("basic");
        public static TierSlug Professional { get; } = new TierSlug("professional");

        public static bool operator ==(TierSlug left, TierSlug right) => left.Equals(right);
        public static bool operator !=(TierSlug left, TierSlug right) => !left.Equals(right);

        public static explicit operator string(TierSlug value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TierSlug other && Equals(other);
        public bool Equals(TierSlug other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
