// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export class MonitoringAlertPolicy extends pulumi.CustomResource {
    /**
     * Get an existing MonitoringAlertPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): MonitoringAlertPolicy {
        return new MonitoringAlertPolicy(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean-native:monitoring/v2:MonitoringAlertPolicy';

    /**
     * Returns true if the given object is an instance of MonitoringAlertPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitoringAlertPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitoringAlertPolicy.__pulumiType;
    }

    declare public readonly alerts: pulumi.Output<outputs.monitoring.v2.Alerts>;
    declare public readonly compare: pulumi.Output<enums.monitoring.v2.Compare>;
    declare public readonly description: pulumi.Output<string>;
    declare public readonly enabled: pulumi.Output<boolean>;
    declare public readonly entities: pulumi.Output<string[]>;
    declare public /*out*/ readonly policy: pulumi.Output<outputs.monitoring.v2.AlertPolicy | undefined>;
    declare public readonly tags: pulumi.Output<string[]>;
    declare public readonly type: pulumi.Output<enums.monitoring.v2.Type>;
    declare public readonly value: pulumi.Output<number>;
    declare public readonly window: pulumi.Output<enums.monitoring.v2.Window>;

    /**
     * Create a MonitoringAlertPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitoringAlertPolicyArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.alerts === undefined && !opts.urn) {
                throw new Error("Missing required property 'alerts'");
            }
            if (args?.compare === undefined && !opts.urn) {
                throw new Error("Missing required property 'compare'");
            }
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.entities === undefined && !opts.urn) {
                throw new Error("Missing required property 'entities'");
            }
            if (args?.tags === undefined && !opts.urn) {
                throw new Error("Missing required property 'tags'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.value === undefined && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            if (args?.window === undefined && !opts.urn) {
                throw new Error("Missing required property 'window'");
            }
            resourceInputs["alerts"] = args?.alerts;
            resourceInputs["compare"] = args?.compare;
            resourceInputs["description"] = args?.description;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["entities"] = args?.entities;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["type"] = args?.type;
            resourceInputs["value"] = args?.value;
            resourceInputs["window"] = args?.window;
            resourceInputs["policy"] = undefined /*out*/;
        } else {
            resourceInputs["alerts"] = undefined /*out*/;
            resourceInputs["compare"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["entities"] = undefined /*out*/;
            resourceInputs["policy"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["value"] = undefined /*out*/;
            resourceInputs["window"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitoringAlertPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a MonitoringAlertPolicy resource.
 */
export interface MonitoringAlertPolicyArgs {
    alerts: pulumi.Input<inputs.monitoring.v2.AlertsArgs>;
    compare: pulumi.Input<enums.monitoring.v2.Compare>;
    description: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
    entities: pulumi.Input<pulumi.Input<string>[]>;
    tags: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<enums.monitoring.v2.Type>;
    value: pulumi.Input<number>;
    window: pulumi.Input<enums.monitoring.v2.Window>;
}
