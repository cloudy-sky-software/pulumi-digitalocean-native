// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { GetKubernetesAvailableUpgradesArgs, GetKubernetesAvailableUpgradesResult, GetKubernetesAvailableUpgradesOutputArgs } from "./getKubernetesAvailableUpgrades";
export const getKubernetesAvailableUpgrades: typeof import("./getKubernetesAvailableUpgrades").getKubernetesAvailableUpgrades = null as any;
export const getKubernetesAvailableUpgradesOutput: typeof import("./getKubernetesAvailableUpgrades").getKubernetesAvailableUpgradesOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesAvailableUpgrades","getKubernetesAvailableUpgradesOutput"], () => require("./getKubernetesAvailableUpgrades"));

export { GetKubernetesClusterArgs, GetKubernetesClusterResult, GetKubernetesClusterOutputArgs } from "./getKubernetesCluster";
export const getKubernetesCluster: typeof import("./getKubernetesCluster").getKubernetesCluster = null as any;
export const getKubernetesClusterOutput: typeof import("./getKubernetesCluster").getKubernetesClusterOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesCluster","getKubernetesClusterOutput"], () => require("./getKubernetesCluster"));

export { GetKubernetesClusterLintResultsArgs, GetKubernetesClusterLintResultsResult, GetKubernetesClusterLintResultsOutputArgs } from "./getKubernetesClusterLintResults";
export const getKubernetesClusterLintResults: typeof import("./getKubernetesClusterLintResults").getKubernetesClusterLintResults = null as any;
export const getKubernetesClusterLintResultsOutput: typeof import("./getKubernetesClusterLintResults").getKubernetesClusterLintResultsOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesClusterLintResults","getKubernetesClusterLintResultsOutput"], () => require("./getKubernetesClusterLintResults"));

export { GetKubernetesClusterUserArgs, GetKubernetesClusterUserResult, GetKubernetesClusterUserOutputArgs } from "./getKubernetesClusterUser";
export const getKubernetesClusterUser: typeof import("./getKubernetesClusterUser").getKubernetesClusterUser = null as any;
export const getKubernetesClusterUserOutput: typeof import("./getKubernetesClusterUser").getKubernetesClusterUserOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesClusterUser","getKubernetesClusterUserOutput"], () => require("./getKubernetesClusterUser"));

export { GetKubernetesCredentialsArgs, GetKubernetesCredentialsResult, GetKubernetesCredentialsOutputArgs } from "./getKubernetesCredentials";
export const getKubernetesCredentials: typeof import("./getKubernetesCredentials").getKubernetesCredentials = null as any;
export const getKubernetesCredentialsOutput: typeof import("./getKubernetesCredentials").getKubernetesCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesCredentials","getKubernetesCredentialsOutput"], () => require("./getKubernetesCredentials"));

export { GetKubernetesNodePoolArgs, GetKubernetesNodePoolResult, GetKubernetesNodePoolOutputArgs } from "./getKubernetesNodePool";
export const getKubernetesNodePool: typeof import("./getKubernetesNodePool").getKubernetesNodePool = null as any;
export const getKubernetesNodePoolOutput: typeof import("./getKubernetesNodePool").getKubernetesNodePoolOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesNodePool","getKubernetesNodePoolOutput"], () => require("./getKubernetesNodePool"));

export { KubernetesClusterArgs } from "./kubernetesCluster";
export type KubernetesCluster = import("./kubernetesCluster").KubernetesCluster;
export const KubernetesCluster: typeof import("./kubernetesCluster").KubernetesCluster = null as any;
utilities.lazyLoad(exports, ["KubernetesCluster"], () => require("./kubernetesCluster"));

export { KubernetesNodePoolArgs } from "./kubernetesNodePool";
export type KubernetesNodePool = import("./kubernetesNodePool").KubernetesNodePool;
export const KubernetesNodePool: typeof import("./kubernetesNodePool").KubernetesNodePool = null as any;
utilities.lazyLoad(exports, ["KubernetesNodePool"], () => require("./kubernetesNodePool"));

export { KubernetesRecycleNodePoolArgs } from "./kubernetesRecycleNodePool";
export type KubernetesRecycleNodePool = import("./kubernetesRecycleNodePool").KubernetesRecycleNodePool;
export const KubernetesRecycleNodePool: typeof import("./kubernetesRecycleNodePool").KubernetesRecycleNodePool = null as any;
utilities.lazyLoad(exports, ["KubernetesRecycleNodePool"], () => require("./kubernetesRecycleNodePool"));

export { KubernetesRegistryArgs } from "./kubernetesRegistry";
export type KubernetesRegistry = import("./kubernetesRegistry").KubernetesRegistry;
export const KubernetesRegistry: typeof import("./kubernetesRegistry").KubernetesRegistry = null as any;
utilities.lazyLoad(exports, ["KubernetesRegistry"], () => require("./kubernetesRegistry"));

export { KubernetesRunClusterLintArgs } from "./kubernetesRunClusterLint";
export type KubernetesRunClusterLint = import("./kubernetesRunClusterLint").KubernetesRunClusterLint;
export const KubernetesRunClusterLint: typeof import("./kubernetesRunClusterLint").KubernetesRunClusterLint = null as any;
utilities.lazyLoad(exports, ["KubernetesRunClusterLint"], () => require("./kubernetesRunClusterLint"));

export { KubernetesUpgradeClusterArgs } from "./kubernetesUpgradeCluster";
export type KubernetesUpgradeCluster = import("./kubernetesUpgradeCluster").KubernetesUpgradeCluster;
export const KubernetesUpgradeCluster: typeof import("./kubernetesUpgradeCluster").KubernetesUpgradeCluster = null as any;
utilities.lazyLoad(exports, ["KubernetesUpgradeCluster"], () => require("./kubernetesUpgradeCluster"));

export { ListKubernetesAssociatedResourcesArgs, ListKubernetesAssociatedResourcesResult, ListKubernetesAssociatedResourcesOutputArgs } from "./listKubernetesAssociatedResources";
export const listKubernetesAssociatedResources: typeof import("./listKubernetesAssociatedResources").listKubernetesAssociatedResources = null as any;
export const listKubernetesAssociatedResourcesOutput: typeof import("./listKubernetesAssociatedResources").listKubernetesAssociatedResourcesOutput = null as any;
utilities.lazyLoad(exports, ["listKubernetesAssociatedResources","listKubernetesAssociatedResourcesOutput"], () => require("./listKubernetesAssociatedResources"));

export { ListKubernetesClustersArgs, ListKubernetesClustersResult } from "./listKubernetesClusters";
export const listKubernetesClusters: typeof import("./listKubernetesClusters").listKubernetesClusters = null as any;
export const listKubernetesClustersOutput: typeof import("./listKubernetesClusters").listKubernetesClustersOutput = null as any;
utilities.lazyLoad(exports, ["listKubernetesClusters","listKubernetesClustersOutput"], () => require("./listKubernetesClusters"));

export { ListKubernetesNodePoolsArgs, ListKubernetesNodePoolsResult, ListKubernetesNodePoolsOutputArgs } from "./listKubernetesNodePools";
export const listKubernetesNodePools: typeof import("./listKubernetesNodePools").listKubernetesNodePools = null as any;
export const listKubernetesNodePoolsOutput: typeof import("./listKubernetesNodePools").listKubernetesNodePoolsOutput = null as any;
utilities.lazyLoad(exports, ["listKubernetesNodePools","listKubernetesNodePoolsOutput"], () => require("./listKubernetesNodePools"));

export { ListKubernetesOptionsArgs, ListKubernetesOptionsResult } from "./listKubernetesOptions";
export const listKubernetesOptions: typeof import("./listKubernetesOptions").listKubernetesOptions = null as any;
export const listKubernetesOptionsOutput: typeof import("./listKubernetesOptions").listKubernetesOptionsOutput = null as any;
utilities.lazyLoad(exports, ["listKubernetesOptions","listKubernetesOptionsOutput"], () => require("./listKubernetesOptions"));


// Export enums:
export * from "../../types/enums/kubernetes/v2";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "digitalocean-native:kubernetes/v2:KubernetesCluster":
                return new KubernetesCluster(name, <any>undefined, { urn })
            case "digitalocean-native:kubernetes/v2:KubernetesNodePool":
                return new KubernetesNodePool(name, <any>undefined, { urn })
            case "digitalocean-native:kubernetes/v2:KubernetesRecycleNodePool":
                return new KubernetesRecycleNodePool(name, <any>undefined, { urn })
            case "digitalocean-native:kubernetes/v2:KubernetesRegistry":
                return new KubernetesRegistry(name, <any>undefined, { urn })
            case "digitalocean-native:kubernetes/v2:KubernetesRunClusterLint":
                return new KubernetesRunClusterLint(name, <any>undefined, { urn })
            case "digitalocean-native:kubernetes/v2:KubernetesUpgradeCluster":
                return new KubernetesUpgradeCluster(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("digitalocean-native", "kubernetes/v2", _module)
