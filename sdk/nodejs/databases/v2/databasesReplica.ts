// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export class DatabasesReplica extends pulumi.CustomResource {
    /**
     * Get an existing DatabasesReplica resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DatabasesReplica {
        return new DatabasesReplica(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean-native:databases/v2:DatabasesReplica';

    /**
     * Returns true if the given object is an instance of DatabasesReplica.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabasesReplica {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabasesReplica.__pulumiType;
    }

    declare public readonly connection: pulumi.Output<outputs.databases.v2.DatabaseReplicaConnection | undefined>;
    /**
     * A time value given in ISO8601 combined date and time format that represents when the database cluster was created.
     */
    declare public readonly createdAt: pulumi.Output<string | undefined>;
    /**
     * The name to give the read-only replicating
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly privateConnection: pulumi.Output<outputs.databases.v2.DatabaseReplicaPrivateConnection | undefined>;
    /**
     * A string specifying the UUID of the VPC to which the read-only replica will be assigned. If excluded, the replica will be assigned to your account's default VPC for the region.
     */
    declare public readonly privateNetworkUuid: pulumi.Output<string | undefined>;
    /**
     * A slug identifier for the region where the read-only replica will be located. If excluded, the replica will be placed in the same region as the cluster.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly replica: pulumi.Output<outputs.databases.v2.DatabaseReplica | undefined>;
    /**
     * A slug identifier representing the size of the node for the read-only replica. The size of the replica must be at least as large as the node size for the database cluster from which it is replicating.
     */
    declare public readonly size: pulumi.Output<string>;
    /**
     * A string representing the current status of the database cluster.
     */
    declare public readonly status: pulumi.Output<enums.databases.v2.DatabaseReplicaStatus | undefined>;
    /**
     * A flat array of tag names as strings to apply to the read-only replica after it is created. Tag names can either be existing or new tags.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;

    /**
     * Create a DatabasesReplica resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabasesReplicaArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["connection"] = args?.connection;
            resourceInputs["createdAt"] = args?.createdAt;
            resourceInputs["databaseClusterUuid"] = args?.databaseClusterUuid;
            resourceInputs["name"] = args?.name;
            resourceInputs["privateConnection"] = args?.privateConnection;
            resourceInputs["privateNetworkUuid"] = args?.privateNetworkUuid;
            resourceInputs["region"] = args?.region;
            resourceInputs["size"] = args?.size;
            resourceInputs["status"] = args?.status;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["replica"] = undefined /*out*/;
        } else {
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["privateConnection"] = undefined /*out*/;
            resourceInputs["privateNetworkUuid"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["replica"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabasesReplica.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DatabasesReplica resource.
 */
export interface DatabasesReplicaArgs {
    connection?: pulumi.Input<inputs.databases.v2.DatabaseReplicaConnectionArgs>;
    /**
     * A time value given in ISO8601 combined date and time format that represents when the database cluster was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * A unique identifier for a database cluster.
     */
    databaseClusterUuid?: pulumi.Input<string>;
    /**
     * The name to give the read-only replicating
     */
    name: pulumi.Input<string>;
    privateConnection?: pulumi.Input<inputs.databases.v2.DatabaseReplicaPrivateConnectionArgs>;
    /**
     * A string specifying the UUID of the VPC to which the read-only replica will be assigned. If excluded, the replica will be assigned to your account's default VPC for the region.
     */
    privateNetworkUuid?: pulumi.Input<string>;
    /**
     * A slug identifier for the region where the read-only replica will be located. If excluded, the replica will be placed in the same region as the cluster.
     */
    region?: pulumi.Input<string>;
    /**
     * A slug identifier representing the size of the node for the read-only replica. The size of the replica must be at least as large as the node size for the database cluster from which it is replicating.
     */
    size?: pulumi.Input<string>;
    /**
     * A string representing the current status of the database cluster.
     */
    status?: pulumi.Input<enums.databases.v2.DatabaseReplicaStatus>;
    /**
     * A flat array of tag names as strings to apply to the read-only replica after it is created. Tag names can either be existing or new tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
