// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export class DatabasesCluster extends pulumi.CustomResource {
    /**
     * Get an existing DatabasesCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DatabasesCluster {
        return new DatabasesCluster(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean-native:databases/v2:DatabasesCluster';

    /**
     * Returns true if the given object is an instance of DatabasesCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabasesCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabasesCluster.__pulumiType;
    }

    public readonly backupRestore!: pulumi.Output<outputs.databases.v2.DatabaseBackup | undefined>;
    public readonly connection!: pulumi.Output<outputs.databases.v2.DatabaseClusterConnection | undefined>;
    /**
     * A time value given in ISO8601 combined date and time format that represents when the database cluster was created.
     */
    public readonly createdAt!: pulumi.Output<string | undefined>;
    public /*out*/ readonly database!: pulumi.Output<outputs.databases.v2.DatabaseCluster>;
    /**
     * An array of strings containing the names of databases created in the database cluster.
     */
    public readonly dbNames!: pulumi.Output<string[] | undefined>;
    /**
     * A slug representing the database engine used for the cluster. The possible values are: "pg" for PostgreSQL, "mysql" for MySQL, "redis" for Redis, and "mongodb" for MongoDB.
     */
    public readonly engine!: pulumi.Output<enums.databases.v2.DatabaseClusterEngine | undefined>;
    public readonly maintenanceWindow!: pulumi.Output<outputs.databases.v2.DatabaseClusterMaintenanceWindow | undefined>;
    /**
     * A unique, human-readable name referring to a database cluster.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * The number of nodes in the database cluster.
     */
    public readonly numNodes!: pulumi.Output<number | undefined>;
    public readonly privateConnection!: pulumi.Output<outputs.databases.v2.DatabaseClusterPrivateConnection | undefined>;
    /**
     * A string specifying the UUID of the VPC to which the database cluster will be assigned. If excluded, the cluster when creating a new database cluster, it will be assigned to your account's default VPC for the region.
     */
    public readonly privateNetworkUuid!: pulumi.Output<string | undefined>;
    /**
     * The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * The slug identifier for the region where the database cluster is located.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    public readonly rules!: pulumi.Output<outputs.databases.v2.FirewallRule[] | undefined>;
    /**
     * A string representing the semantic version of the database engine in use for the cluster.
     */
    public readonly semanticVersion!: pulumi.Output<string | undefined>;
    /**
     * The slug identifier representing the size of the nodes in the database cluster.
     */
    public readonly size!: pulumi.Output<string | undefined>;
    /**
     * A string representing the current status of the database cluster.
     */
    public readonly status!: pulumi.Output<enums.databases.v2.DatabaseClusterStatus | undefined>;
    /**
     * An array of tags that have been applied to the database cluster.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly users!: pulumi.Output<outputs.databases.v2.DatabaseUser[] | undefined>;
    /**
     * A string representing the version of the database engine in use for the cluster.
     */
    public readonly version!: pulumi.Output<string | undefined>;
    /**
     * A timestamp referring to the date when the particular version will no longer be available for creating new clusters. If null, the version does not have an end of availability timeline.
     */
    public readonly versionEndOfAvailability!: pulumi.Output<string | undefined>;
    /**
     * A timestamp referring to the date when the particular version will no longer be supported. If null, the version does not have an end of life timeline.
     */
    public readonly versionEndOfLife!: pulumi.Output<string | undefined>;

    /**
     * Create a DatabasesCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabasesClusterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.engine === undefined && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.numNodes === undefined && !opts.urn) {
                throw new Error("Missing required property 'numNodes'");
            }
            if (args?.region === undefined && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if (args?.size === undefined && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["backupRestore"] = args?.backupRestore;
            resourceInputs["connection"] = args?.connection;
            resourceInputs["createdAt"] = args?.createdAt;
            resourceInputs["dbNames"] = args?.dbNames;
            resourceInputs["engine"] = args?.engine;
            resourceInputs["maintenanceWindow"] = args?.maintenanceWindow;
            resourceInputs["name"] = args?.name;
            resourceInputs["numNodes"] = args?.numNodes;
            resourceInputs["privateConnection"] = args?.privateConnection;
            resourceInputs["privateNetworkUuid"] = args?.privateNetworkUuid;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["region"] = args?.region;
            resourceInputs["rules"] = args?.rules;
            resourceInputs["semanticVersion"] = args?.semanticVersion;
            resourceInputs["size"] = args?.size;
            resourceInputs["status"] = args?.status;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["users"] = args?.users;
            resourceInputs["version"] = args?.version;
            resourceInputs["versionEndOfAvailability"] = args?.versionEndOfAvailability;
            resourceInputs["versionEndOfLife"] = args?.versionEndOfLife;
            resourceInputs["database"] = undefined /*out*/;
        } else {
            resourceInputs["backupRestore"] = undefined /*out*/;
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["database"] = undefined /*out*/;
            resourceInputs["dbNames"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["maintenanceWindow"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["numNodes"] = undefined /*out*/;
            resourceInputs["privateConnection"] = undefined /*out*/;
            resourceInputs["privateNetworkUuid"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["rules"] = undefined /*out*/;
            resourceInputs["semanticVersion"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["users"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["versionEndOfAvailability"] = undefined /*out*/;
            resourceInputs["versionEndOfLife"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabasesCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DatabasesCluster resource.
 */
export interface DatabasesClusterArgs {
    backupRestore?: pulumi.Input<inputs.databases.v2.DatabaseBackupArgs>;
    connection?: pulumi.Input<inputs.databases.v2.DatabaseClusterConnectionArgs>;
    /**
     * A time value given in ISO8601 combined date and time format that represents when the database cluster was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * An array of strings containing the names of databases created in the database cluster.
     */
    dbNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A slug representing the database engine used for the cluster. The possible values are: "pg" for PostgreSQL, "mysql" for MySQL, "redis" for Redis, and "mongodb" for MongoDB.
     */
    engine: pulumi.Input<enums.databases.v2.DatabaseClusterEngine>;
    maintenanceWindow?: pulumi.Input<inputs.databases.v2.DatabaseClusterMaintenanceWindowArgs>;
    /**
     * A unique, human-readable name referring to a database cluster.
     */
    name: pulumi.Input<string>;
    /**
     * The number of nodes in the database cluster.
     */
    numNodes: pulumi.Input<number>;
    privateConnection?: pulumi.Input<inputs.databases.v2.DatabaseClusterPrivateConnectionArgs>;
    /**
     * A string specifying the UUID of the VPC to which the database cluster will be assigned. If excluded, the cluster when creating a new database cluster, it will be assigned to your account's default VPC for the region.
     */
    privateNetworkUuid?: pulumi.Input<string>;
    /**
     * The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The slug identifier for the region where the database cluster is located.
     */
    region: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.databases.v2.FirewallRuleArgs>[]>;
    /**
     * A string representing the semantic version of the database engine in use for the cluster.
     */
    semanticVersion?: pulumi.Input<string>;
    /**
     * The slug identifier representing the size of the nodes in the database cluster.
     */
    size: pulumi.Input<string>;
    /**
     * A string representing the current status of the database cluster.
     */
    status?: pulumi.Input<enums.databases.v2.DatabaseClusterStatus>;
    /**
     * An array of tags that have been applied to the database cluster.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    users?: pulumi.Input<pulumi.Input<inputs.databases.v2.DatabaseUserArgs>[]>;
    /**
     * A string representing the version of the database engine in use for the cluster.
     */
    version?: pulumi.Input<string>;
    /**
     * A timestamp referring to the date when the particular version will no longer be available for creating new clusters. If null, the version does not have an end of availability timeline.
     */
    versionEndOfAvailability?: pulumi.Input<string>;
    /**
     * A timestamp referring to the date when the particular version will no longer be supported. If null, the version does not have an end of life timeline.
     */
    versionEndOfLife?: pulumi.Input<string>;
}
