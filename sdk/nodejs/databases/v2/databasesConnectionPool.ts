// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export class DatabasesConnectionPool extends pulumi.CustomResource {
    /**
     * Get an existing DatabasesConnectionPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DatabasesConnectionPool {
        return new DatabasesConnectionPool(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean-native:databases/v2:DatabasesConnectionPool';

    /**
     * Returns true if the given object is an instance of DatabasesConnectionPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabasesConnectionPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabasesConnectionPool.__pulumiType;
    }

    declare public readonly connection: pulumi.Output<outputs.databases.v2.Connection | undefined>;
    /**
     * The database for use with the connection pool.
     */
    declare public readonly db: pulumi.Output<string>;
    /**
     * The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
     */
    declare public readonly mode: pulumi.Output<string>;
    /**
     * A unique name for the connection pool. Must be between 3 and 60 characters.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly pool: pulumi.Output<outputs.databases.v2.ConnectionPool>;
    declare public readonly privateConnection: pulumi.Output<outputs.databases.v2.PrivateConnection | undefined>;
    /**
     * The desired size of the PGBouncer connection pool. The maximum allowed size is determined by the size of the cluster's primary node. 25 backend server connections are allowed for every 1GB of RAM. Three are reserved for maintenance. For example, a primary node with 1 GB of RAM allows for a maximum of 22 backend server connections while one with 4 GB would allow for 97. Note that these are shared across all connection pools in a cluster.
     */
    declare public readonly size: pulumi.Output<number>;
    /**
     * The name of the user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
     */
    declare public readonly user: pulumi.Output<string | undefined>;

    /**
     * Create a DatabasesConnectionPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabasesConnectionPoolArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.db === undefined && !opts.urn) {
                throw new Error("Missing required property 'db'");
            }
            if (args?.mode === undefined && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if (args?.size === undefined && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["connection"] = args?.connection;
            resourceInputs["databaseClusterUuid"] = args?.databaseClusterUuid;
            resourceInputs["db"] = args?.db;
            resourceInputs["mode"] = args?.mode;
            resourceInputs["name"] = args?.name;
            resourceInputs["privateConnection"] = args?.privateConnection;
            resourceInputs["size"] = args?.size;
            resourceInputs["user"] = args?.user;
            resourceInputs["pool"] = undefined /*out*/;
        } else {
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["db"] = undefined /*out*/;
            resourceInputs["mode"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pool"] = undefined /*out*/;
            resourceInputs["privateConnection"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["user"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabasesConnectionPool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DatabasesConnectionPool resource.
 */
export interface DatabasesConnectionPoolArgs {
    connection?: pulumi.Input<inputs.databases.v2.ConnectionArgs>;
    /**
     * A unique identifier for a database cluster.
     */
    databaseClusterUuid?: pulumi.Input<string>;
    /**
     * The database for use with the connection pool.
     */
    db: pulumi.Input<string>;
    /**
     * The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
     */
    mode: pulumi.Input<string>;
    /**
     * A unique name for the connection pool. Must be between 3 and 60 characters.
     */
    name?: pulumi.Input<string>;
    privateConnection?: pulumi.Input<inputs.databases.v2.PrivateConnectionArgs>;
    /**
     * The desired size of the PGBouncer connection pool. The maximum allowed size is determined by the size of the cluster's primary node. 25 backend server connections are allowed for every 1GB of RAM. Three are reserved for maintenance. For example, a primary node with 1 GB of RAM allows for a maximum of 22 backend server connections while one with 4 GB would allow for 97. Note that these are shared across all connection pools in a cluster.
     */
    size: pulumi.Input<number>;
    /**
     * The name of the user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
     */
    user?: pulumi.Input<string>;
}
