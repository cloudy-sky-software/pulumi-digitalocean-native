// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { DatabasesArgs } from "./databases";
export type Databases = import("./databases").Databases;
export const Databases: typeof import("./databases").Databases = null as any;
utilities.lazyLoad(exports, ["Databases"], () => require("./databases"));

export { DatabasesClusterArgs } from "./databasesCluster";
export type DatabasesCluster = import("./databasesCluster").DatabasesCluster;
export const DatabasesCluster: typeof import("./databasesCluster").DatabasesCluster = null as any;
utilities.lazyLoad(exports, ["DatabasesCluster"], () => require("./databasesCluster"));

export { DatabasesClusterSizeArgs } from "./databasesClusterSize";
export type DatabasesClusterSize = import("./databasesClusterSize").DatabasesClusterSize;
export const DatabasesClusterSize: typeof import("./databasesClusterSize").DatabasesClusterSize = null as any;
utilities.lazyLoad(exports, ["DatabasesClusterSize"], () => require("./databasesClusterSize"));

export { DatabasesConnectionPoolArgs } from "./databasesConnectionPool";
export type DatabasesConnectionPool = import("./databasesConnectionPool").DatabasesConnectionPool;
export const DatabasesConnectionPool: typeof import("./databasesConnectionPool").DatabasesConnectionPool = null as any;
utilities.lazyLoad(exports, ["DatabasesConnectionPool"], () => require("./databasesConnectionPool"));

export { DatabasesEvictionPolicyArgs } from "./databasesEvictionPolicy";
export type DatabasesEvictionPolicy = import("./databasesEvictionPolicy").DatabasesEvictionPolicy;
export const DatabasesEvictionPolicy: typeof import("./databasesEvictionPolicy").DatabasesEvictionPolicy = null as any;
utilities.lazyLoad(exports, ["DatabasesEvictionPolicy"], () => require("./databasesEvictionPolicy"));

export { DatabasesFirewallRulesArgs } from "./databasesFirewallRules";
export type DatabasesFirewallRules = import("./databasesFirewallRules").DatabasesFirewallRules;
export const DatabasesFirewallRules: typeof import("./databasesFirewallRules").DatabasesFirewallRules = null as any;
utilities.lazyLoad(exports, ["DatabasesFirewallRules"], () => require("./databasesFirewallRules"));

export { DatabasesMaintenanceWindowArgs } from "./databasesMaintenanceWindow";
export type DatabasesMaintenanceWindow = import("./databasesMaintenanceWindow").DatabasesMaintenanceWindow;
export const DatabasesMaintenanceWindow: typeof import("./databasesMaintenanceWindow").DatabasesMaintenanceWindow = null as any;
utilities.lazyLoad(exports, ["DatabasesMaintenanceWindow"], () => require("./databasesMaintenanceWindow"));

export { DatabasesMajorVersionArgs } from "./databasesMajorVersion";
export type DatabasesMajorVersion = import("./databasesMajorVersion").DatabasesMajorVersion;
export const DatabasesMajorVersion: typeof import("./databasesMajorVersion").DatabasesMajorVersion = null as any;
utilities.lazyLoad(exports, ["DatabasesMajorVersion"], () => require("./databasesMajorVersion"));

export { DatabasesOnlineMigrationArgs } from "./databasesOnlineMigration";
export type DatabasesOnlineMigration = import("./databasesOnlineMigration").DatabasesOnlineMigration;
export const DatabasesOnlineMigration: typeof import("./databasesOnlineMigration").DatabasesOnlineMigration = null as any;
utilities.lazyLoad(exports, ["DatabasesOnlineMigration"], () => require("./databasesOnlineMigration"));

export { DatabasesReAuthArgs } from "./databasesReAuth";
export type DatabasesReAuth = import("./databasesReAuth").DatabasesReAuth;
export const DatabasesReAuth: typeof import("./databasesReAuth").DatabasesReAuth = null as any;
utilities.lazyLoad(exports, ["DatabasesReAuth"], () => require("./databasesReAuth"));

export { DatabasesRegionArgs } from "./databasesRegion";
export type DatabasesRegion = import("./databasesRegion").DatabasesRegion;
export const DatabasesRegion: typeof import("./databasesRegion").DatabasesRegion = null as any;
utilities.lazyLoad(exports, ["DatabasesRegion"], () => require("./databasesRegion"));

export { DatabasesReplicaArgs } from "./databasesReplica";
export type DatabasesReplica = import("./databasesReplica").DatabasesReplica;
export const DatabasesReplica: typeof import("./databasesReplica").DatabasesReplica = null as any;
utilities.lazyLoad(exports, ["DatabasesReplica"], () => require("./databasesReplica"));

export { DatabasesSqlModeArgs } from "./databasesSqlMode";
export type DatabasesSqlMode = import("./databasesSqlMode").DatabasesSqlMode;
export const DatabasesSqlMode: typeof import("./databasesSqlMode").DatabasesSqlMode = null as any;
utilities.lazyLoad(exports, ["DatabasesSqlMode"], () => require("./databasesSqlMode"));

export { DatabasesUserArgs } from "./databasesUser";
export type DatabasesUser = import("./databasesUser").DatabasesUser;
export const DatabasesUser: typeof import("./databasesUser").DatabasesUser = null as any;
utilities.lazyLoad(exports, ["DatabasesUser"], () => require("./databasesUser"));

export { GetDatabasesArgs, GetDatabasesResult, GetDatabasesOutputArgs } from "./getDatabases";
export const getDatabases: typeof import("./getDatabases").getDatabases = null as any;
export const getDatabasesOutput: typeof import("./getDatabases").getDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabases","getDatabasesOutput"], () => require("./getDatabases"));

export { GetDatabasesCaArgs, GetDatabasesCaResult, GetDatabasesCaOutputArgs } from "./getDatabasesCa";
export const getDatabasesCa: typeof import("./getDatabasesCa").getDatabasesCa = null as any;
export const getDatabasesCaOutput: typeof import("./getDatabasesCa").getDatabasesCaOutput = null as any;
utilities.lazyLoad(exports, ["getDatabasesCa","getDatabasesCaOutput"], () => require("./getDatabasesCa"));

export { GetDatabasesClusterArgs, GetDatabasesClusterResult, GetDatabasesClusterOutputArgs } from "./getDatabasesCluster";
export const getDatabasesCluster: typeof import("./getDatabasesCluster").getDatabasesCluster = null as any;
export const getDatabasesClusterOutput: typeof import("./getDatabasesCluster").getDatabasesClusterOutput = null as any;
utilities.lazyLoad(exports, ["getDatabasesCluster","getDatabasesClusterOutput"], () => require("./getDatabasesCluster"));

export { GetDatabasesConfigArgs, GetDatabasesConfigResult, GetDatabasesConfigOutputArgs } from "./getDatabasesConfig";
export const getDatabasesConfig: typeof import("./getDatabasesConfig").getDatabasesConfig = null as any;
export const getDatabasesConfigOutput: typeof import("./getDatabasesConfig").getDatabasesConfigOutput = null as any;
utilities.lazyLoad(exports, ["getDatabasesConfig","getDatabasesConfigOutput"], () => require("./getDatabasesConfig"));

export { GetDatabasesConnectionPoolArgs, GetDatabasesConnectionPoolResult, GetDatabasesConnectionPoolOutputArgs } from "./getDatabasesConnectionPool";
export const getDatabasesConnectionPool: typeof import("./getDatabasesConnectionPool").getDatabasesConnectionPool = null as any;
export const getDatabasesConnectionPoolOutput: typeof import("./getDatabasesConnectionPool").getDatabasesConnectionPoolOutput = null as any;
utilities.lazyLoad(exports, ["getDatabasesConnectionPool","getDatabasesConnectionPoolOutput"], () => require("./getDatabasesConnectionPool"));

export { GetDatabasesEvictionPolicyArgs, GetDatabasesEvictionPolicyResult, GetDatabasesEvictionPolicyOutputArgs } from "./getDatabasesEvictionPolicy";
export const getDatabasesEvictionPolicy: typeof import("./getDatabasesEvictionPolicy").getDatabasesEvictionPolicy = null as any;
export const getDatabasesEvictionPolicyOutput: typeof import("./getDatabasesEvictionPolicy").getDatabasesEvictionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDatabasesEvictionPolicy","getDatabasesEvictionPolicyOutput"], () => require("./getDatabasesEvictionPolicy"));

export { GetDatabasesMigrationStatusArgs, GetDatabasesMigrationStatusResult, GetDatabasesMigrationStatusOutputArgs } from "./getDatabasesMigrationStatus";
export const getDatabasesMigrationStatus: typeof import("./getDatabasesMigrationStatus").getDatabasesMigrationStatus = null as any;
export const getDatabasesMigrationStatusOutput: typeof import("./getDatabasesMigrationStatus").getDatabasesMigrationStatusOutput = null as any;
utilities.lazyLoad(exports, ["getDatabasesMigrationStatus","getDatabasesMigrationStatusOutput"], () => require("./getDatabasesMigrationStatus"));

export { GetDatabasesReplicaArgs, GetDatabasesReplicaResult, GetDatabasesReplicaOutputArgs } from "./getDatabasesReplica";
export const getDatabasesReplica: typeof import("./getDatabasesReplica").getDatabasesReplica = null as any;
export const getDatabasesReplicaOutput: typeof import("./getDatabasesReplica").getDatabasesReplicaOutput = null as any;
utilities.lazyLoad(exports, ["getDatabasesReplica","getDatabasesReplicaOutput"], () => require("./getDatabasesReplica"));

export { GetDatabasesSqlModeArgs, GetDatabasesSqlModeResult, GetDatabasesSqlModeOutputArgs } from "./getDatabasesSqlMode";
export const getDatabasesSqlMode: typeof import("./getDatabasesSqlMode").getDatabasesSqlMode = null as any;
export const getDatabasesSqlModeOutput: typeof import("./getDatabasesSqlMode").getDatabasesSqlModeOutput = null as any;
utilities.lazyLoad(exports, ["getDatabasesSqlMode","getDatabasesSqlModeOutput"], () => require("./getDatabasesSqlMode"));

export { GetDatabasesUserArgs, GetDatabasesUserResult, GetDatabasesUserOutputArgs } from "./getDatabasesUser";
export const getDatabasesUser: typeof import("./getDatabasesUser").getDatabasesUser = null as any;
export const getDatabasesUserOutput: typeof import("./getDatabasesUser").getDatabasesUserOutput = null as any;
utilities.lazyLoad(exports, ["getDatabasesUser","getDatabasesUserOutput"], () => require("./getDatabasesUser"));

export { ListDatabasesArgs, ListDatabasesResult, ListDatabasesOutputArgs } from "./listDatabases";
export const listDatabases: typeof import("./listDatabases").listDatabases = null as any;
export const listDatabasesOutput: typeof import("./listDatabases").listDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["listDatabases","listDatabasesOutput"], () => require("./listDatabases"));

export { ListDatabasesBackupsArgs, ListDatabasesBackupsResult, ListDatabasesBackupsOutputArgs } from "./listDatabasesBackups";
export const listDatabasesBackups: typeof import("./listDatabasesBackups").listDatabasesBackups = null as any;
export const listDatabasesBackupsOutput: typeof import("./listDatabasesBackups").listDatabasesBackupsOutput = null as any;
utilities.lazyLoad(exports, ["listDatabasesBackups","listDatabasesBackupsOutput"], () => require("./listDatabasesBackups"));

export { ListDatabasesClustersArgs, ListDatabasesClustersResult } from "./listDatabasesClusters";
export const listDatabasesClusters: typeof import("./listDatabasesClusters").listDatabasesClusters = null as any;
export const listDatabasesClustersOutput: typeof import("./listDatabasesClusters").listDatabasesClustersOutput = null as any;
utilities.lazyLoad(exports, ["listDatabasesClusters","listDatabasesClustersOutput"], () => require("./listDatabasesClusters"));

export { ListDatabasesConnectionPoolsArgs, ListDatabasesConnectionPoolsResult, ListDatabasesConnectionPoolsOutputArgs } from "./listDatabasesConnectionPools";
export const listDatabasesConnectionPools: typeof import("./listDatabasesConnectionPools").listDatabasesConnectionPools = null as any;
export const listDatabasesConnectionPoolsOutput: typeof import("./listDatabasesConnectionPools").listDatabasesConnectionPoolsOutput = null as any;
utilities.lazyLoad(exports, ["listDatabasesConnectionPools","listDatabasesConnectionPoolsOutput"], () => require("./listDatabasesConnectionPools"));

export { ListDatabasesFirewallRulesArgs, ListDatabasesFirewallRulesResult, ListDatabasesFirewallRulesOutputArgs } from "./listDatabasesFirewallRules";
export const listDatabasesFirewallRules: typeof import("./listDatabasesFirewallRules").listDatabasesFirewallRules = null as any;
export const listDatabasesFirewallRulesOutput: typeof import("./listDatabasesFirewallRules").listDatabasesFirewallRulesOutput = null as any;
utilities.lazyLoad(exports, ["listDatabasesFirewallRules","listDatabasesFirewallRulesOutput"], () => require("./listDatabasesFirewallRules"));

export { ListDatabasesOptionsArgs, ListDatabasesOptionsResult } from "./listDatabasesOptions";
export const listDatabasesOptions: typeof import("./listDatabasesOptions").listDatabasesOptions = null as any;
export const listDatabasesOptionsOutput: typeof import("./listDatabasesOptions").listDatabasesOptionsOutput = null as any;
utilities.lazyLoad(exports, ["listDatabasesOptions","listDatabasesOptionsOutput"], () => require("./listDatabasesOptions"));

export { ListDatabasesReplicasArgs, ListDatabasesReplicasResult, ListDatabasesReplicasOutputArgs } from "./listDatabasesReplicas";
export const listDatabasesReplicas: typeof import("./listDatabasesReplicas").listDatabasesReplicas = null as any;
export const listDatabasesReplicasOutput: typeof import("./listDatabasesReplicas").listDatabasesReplicasOutput = null as any;
utilities.lazyLoad(exports, ["listDatabasesReplicas","listDatabasesReplicasOutput"], () => require("./listDatabasesReplicas"));

export { ListDatabasesUsersArgs, ListDatabasesUsersResult, ListDatabasesUsersOutputArgs } from "./listDatabasesUsers";
export const listDatabasesUsers: typeof import("./listDatabasesUsers").listDatabasesUsers = null as any;
export const listDatabasesUsersOutput: typeof import("./listDatabasesUsers").listDatabasesUsersOutput = null as any;
utilities.lazyLoad(exports, ["listDatabasesUsers","listDatabasesUsersOutput"], () => require("./listDatabasesUsers"));


// Export enums:
export * from "../../types/enums/databases/v2";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "digitalocean-native:databases/v2:Databases":
                return new Databases(name, <any>undefined, { urn })
            case "digitalocean-native:databases/v2:DatabasesCluster":
                return new DatabasesCluster(name, <any>undefined, { urn })
            case "digitalocean-native:databases/v2:DatabasesClusterSize":
                return new DatabasesClusterSize(name, <any>undefined, { urn })
            case "digitalocean-native:databases/v2:DatabasesConnectionPool":
                return new DatabasesConnectionPool(name, <any>undefined, { urn })
            case "digitalocean-native:databases/v2:DatabasesEvictionPolicy":
                return new DatabasesEvictionPolicy(name, <any>undefined, { urn })
            case "digitalocean-native:databases/v2:DatabasesFirewallRules":
                return new DatabasesFirewallRules(name, <any>undefined, { urn })
            case "digitalocean-native:databases/v2:DatabasesMaintenanceWindow":
                return new DatabasesMaintenanceWindow(name, <any>undefined, { urn })
            case "digitalocean-native:databases/v2:DatabasesMajorVersion":
                return new DatabasesMajorVersion(name, <any>undefined, { urn })
            case "digitalocean-native:databases/v2:DatabasesOnlineMigration":
                return new DatabasesOnlineMigration(name, <any>undefined, { urn })
            case "digitalocean-native:databases/v2:DatabasesReAuth":
                return new DatabasesReAuth(name, <any>undefined, { urn })
            case "digitalocean-native:databases/v2:DatabasesRegion":
                return new DatabasesRegion(name, <any>undefined, { urn })
            case "digitalocean-native:databases/v2:DatabasesReplica":
                return new DatabasesReplica(name, <any>undefined, { urn })
            case "digitalocean-native:databases/v2:DatabasesSqlMode":
                return new DatabasesSqlMode(name, <any>undefined, { urn })
            case "digitalocean-native:databases/v2:DatabasesUser":
                return new DatabasesUser(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("digitalocean-native", "databases/v2", _module)
