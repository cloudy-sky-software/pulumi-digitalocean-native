// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean-native:certificates/v2:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    public /*out*/ readonly certificate!: pulumi.Output<outputs.certificates.v2.Certificate | undefined>;
    /**
     * The full PEM-formatted trust chain between the certificate authority's certificate and your domain's SSL certificate.
     */
    public readonly certificateChain!: pulumi.Output<string | undefined>;
    /**
     * An array of fully qualified domain names (FQDNs) for which the certificate was issued. A certificate covering all subdomains can be issued using a wildcard (e.g. `*.example.com`).
     */
    public readonly dnsNames!: pulumi.Output<string[] | undefined>;
    /**
     * The contents of a PEM-formatted public SSL certificate.
     */
    public readonly leafCertificate!: pulumi.Output<string | undefined>;
    /**
     * A unique human-readable name referring to a certificate.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * The contents of a PEM-formatted private-key corresponding to the SSL certificate.
     */
    public readonly privateKey!: pulumi.Output<string | undefined>;
    /**
     * A string representing the type of the certificate. The value will be `custom` for a user-uploaded certificate or `lets_encrypt` for one automatically generated with Let's Encrypt.
     */
    public readonly type!: pulumi.Output<enums.certificates.v2.CertificateCreateBaseType | undefined>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.dnsNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsNames'");
            }
            if ((!args || args.leafCertificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'leafCertificate'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.privateKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            resourceInputs["certificateChain"] = args ? args.certificateChain : undefined;
            resourceInputs["dnsNames"] = args ? args.dnsNames : undefined;
            resourceInputs["leafCertificate"] = args ? args.leafCertificate : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["certificate"] = undefined /*out*/;
        } else {
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["certificateChain"] = undefined /*out*/;
            resourceInputs["dnsNames"] = undefined /*out*/;
            resourceInputs["leafCertificate"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * The full PEM-formatted trust chain between the certificate authority's certificate and your domain's SSL certificate.
     */
    certificateChain?: pulumi.Input<string>;
    /**
     * An array of fully qualified domain names (FQDNs) for which the certificate was issued. A certificate covering all subdomains can be issued using a wildcard (e.g. `*.example.com`).
     */
    dnsNames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The contents of a PEM-formatted public SSL certificate.
     */
    leafCertificate: pulumi.Input<string>;
    /**
     * A unique human-readable name referring to a certificate.
     */
    name: pulumi.Input<string>;
    /**
     * The contents of a PEM-formatted private-key corresponding to the SSL certificate.
     */
    privateKey: pulumi.Input<string>;
    /**
     * A string representing the type of the certificate. The value will be `custom` for a user-uploaded certificate or `lets_encrypt` for one automatically generated with Let's Encrypt.
     */
    type?: pulumi.Input<enums.certificates.v2.CertificateCreateBaseType>;
}
