// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as account from "./account";
import * as actions from "./actions";
import * as apps from "./apps";
import * as cdn from "./cdn";
import * as certificates from "./certificates";
import * as config from "./config";
import * as customers from "./customers";
import * as databases from "./databases";
import * as domains from "./domains";
import * as droplets from "./droplets";
import * as firewalls from "./firewalls";
import * as floating_ips from "./floating_ips";
import * as functions from "./functions";
import * as images from "./images";
import * as kubernetes from "./kubernetes";
import * as load_balancers from "./load_balancers";
import * as monitoring from "./monitoring";
import * as oneclicks from "./oneclicks";
import * as projects from "./projects";
import * as regions from "./regions";
import * as registry from "./registry";
import * as reports from "./reports";
import * as reserved_ips from "./reserved_ips";
import * as sizes from "./sizes";
import * as snapshots from "./snapshots";
import * as tags from "./tags";
import * as types from "./types";
import * as uptime from "./uptime";
import * as volumes from "./volumes";
import * as vpcs from "./vpcs";

export {
    account,
    actions,
    apps,
    cdn,
    certificates,
    config,
    customers,
    databases,
    domains,
    droplets,
    firewalls,
    floating_ips,
    functions,
    images,
    kubernetes,
    load_balancers,
    monitoring,
    oneclicks,
    projects,
    regions,
    registry,
    reports,
    reserved_ips,
    sizes,
    snapshots,
    tags,
    types,
    uptime,
    volumes,
    vpcs,
};
pulumi.runtime.registerResourcePackage("digitalocean-native", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:digitalocean-native") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
