// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export class AppsValidateAppSpec extends pulumi.CustomResource {
    /**
     * Get an existing AppsValidateAppSpec resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): AppsValidateAppSpec {
        return new AppsValidateAppSpec(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean-native:apps/v2:AppsValidateAppSpec';

    /**
     * Returns true if the given object is an instance of AppsValidateAppSpec.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppsValidateAppSpec {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppsValidateAppSpec.__pulumiType;
    }

    /**
     * The monthly cost of the proposed app in USD using the next pricing plan tier. For example, if you propose an app that uses the Basic tier, the `app_tier_upgrade_cost` field displays the monthly cost of the app if it were to use the Professional tier. If the proposed app already uses the most expensive tier, the field is empty.
     */
    public /*out*/ readonly appCost!: pulumi.Output<number | undefined>;
    /**
     * An optional ID of an existing app. If set, the spec will be treated as a proposed update to the specified app. The existing app is not modified using this method.
     */
    public readonly appId!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the app is a static app.
     */
    public /*out*/ readonly appIsStatic!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether the app name is available.
     */
    public /*out*/ readonly appNameAvailable!: pulumi.Output<boolean | undefined>;
    /**
     * The suggested name if the proposed app name is unavailable.
     */
    public /*out*/ readonly appNameSuggestion!: pulumi.Output<string | undefined>;
    /**
     * The monthly cost of the proposed app in USD using the previous pricing plan tier. For example, if you propose an app that uses the Professional tier, the `app_tier_downgrade_cost` field displays the monthly cost of the app if it were to use the Basic tier. If the proposed app already uses the lest expensive tier, the field is empty.
     */
    public /*out*/ readonly appTierDowngradeCost!: pulumi.Output<number | undefined>;
    /**
     * The maximum number of free static apps the account can have. We will charge you for any additional static apps.
     */
    public /*out*/ readonly existingStaticApps!: pulumi.Output<string | undefined>;
    /**
     * The desired configuration of an application.
     */
    public readonly spec!: pulumi.Output<outputs.apps.v2.AppSpec>;

    /**
     * Create a AppsValidateAppSpec resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppsValidateAppSpecArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.spec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spec'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["appCost"] = undefined /*out*/;
            resourceInputs["appIsStatic"] = undefined /*out*/;
            resourceInputs["appNameAvailable"] = undefined /*out*/;
            resourceInputs["appNameSuggestion"] = undefined /*out*/;
            resourceInputs["appTierDowngradeCost"] = undefined /*out*/;
            resourceInputs["existingStaticApps"] = undefined /*out*/;
        } else {
            resourceInputs["appCost"] = undefined /*out*/;
            resourceInputs["appId"] = undefined /*out*/;
            resourceInputs["appIsStatic"] = undefined /*out*/;
            resourceInputs["appNameAvailable"] = undefined /*out*/;
            resourceInputs["appNameSuggestion"] = undefined /*out*/;
            resourceInputs["appTierDowngradeCost"] = undefined /*out*/;
            resourceInputs["existingStaticApps"] = undefined /*out*/;
            resourceInputs["spec"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppsValidateAppSpec.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a AppsValidateAppSpec resource.
 */
export interface AppsValidateAppSpecArgs {
    /**
     * An optional ID of an existing app. If set, the spec will be treated as a proposed update to the specified app. The existing app is not modified using this method.
     */
    appId?: pulumi.Input<string>;
    /**
     * The desired configuration of an application.
     */
    spec: pulumi.Input<inputs.apps.v2.AppSpecArgs>;
}
