// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { AppArgs } from "./app";
export type App = import("./app").App;
export const App: typeof import("./app").App = null as any;
utilities.lazyLoad(exports, ["App"], () => require("./app"));

export { AppsAssignAlertDestinationArgs } from "./appsAssignAlertDestination";
export type AppsAssignAlertDestination = import("./appsAssignAlertDestination").AppsAssignAlertDestination;
export const AppsAssignAlertDestination: typeof import("./appsAssignAlertDestination").AppsAssignAlertDestination = null as any;
utilities.lazyLoad(exports, ["AppsAssignAlertDestination"], () => require("./appsAssignAlertDestination"));

export { AppsDeploymentArgs } from "./appsDeployment";
export type AppsDeployment = import("./appsDeployment").AppsDeployment;
export const AppsDeployment: typeof import("./appsDeployment").AppsDeployment = null as any;
utilities.lazyLoad(exports, ["AppsDeployment"], () => require("./appsDeployment"));

export { AppsListMetricsBandwidthDailyArgs } from "./appsListMetricsBandwidthDaily";
export type AppsListMetricsBandwidthDaily = import("./appsListMetricsBandwidthDaily").AppsListMetricsBandwidthDaily;
export const AppsListMetricsBandwidthDaily: typeof import("./appsListMetricsBandwidthDaily").AppsListMetricsBandwidthDaily = null as any;
utilities.lazyLoad(exports, ["AppsListMetricsBandwidthDaily"], () => require("./appsListMetricsBandwidthDaily"));

export { AppsRollbackArgs } from "./appsRollback";
export type AppsRollback = import("./appsRollback").AppsRollback;
export const AppsRollback: typeof import("./appsRollback").AppsRollback = null as any;
utilities.lazyLoad(exports, ["AppsRollback"], () => require("./appsRollback"));

export { AppsValidateAppSpecArgs } from "./appsValidateAppSpec";
export type AppsValidateAppSpec = import("./appsValidateAppSpec").AppsValidateAppSpec;
export const AppsValidateAppSpec: typeof import("./appsValidateAppSpec").AppsValidateAppSpec = null as any;
utilities.lazyLoad(exports, ["AppsValidateAppSpec"], () => require("./appsValidateAppSpec"));

export { AppsValidateRollbackArgs } from "./appsValidateRollback";
export type AppsValidateRollback = import("./appsValidateRollback").AppsValidateRollback;
export const AppsValidateRollback: typeof import("./appsValidateRollback").AppsValidateRollback = null as any;
utilities.lazyLoad(exports, ["AppsValidateRollback"], () => require("./appsValidateRollback"));

export { GetAppArgs, GetAppOutputArgs } from "./getApp";
export const getApp: typeof import("./getApp").getApp = null as any;
export const getAppOutput: typeof import("./getApp").getAppOutput = null as any;
utilities.lazyLoad(exports, ["getApp","getAppOutput"], () => require("./getApp"));

export { GetAppsDeploymentArgs, GetAppsDeploymentOutputArgs } from "./getAppsDeployment";
export const getAppsDeployment: typeof import("./getAppsDeployment").getAppsDeployment = null as any;
export const getAppsDeploymentOutput: typeof import("./getAppsDeployment").getAppsDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getAppsDeployment","getAppsDeploymentOutput"], () => require("./getAppsDeployment"));

export { GetAppsInstanceSizeArgs, GetAppsInstanceSizeOutputArgs } from "./getAppsInstanceSize";
export const getAppsInstanceSize: typeof import("./getAppsInstanceSize").getAppsInstanceSize = null as any;
export const getAppsInstanceSizeOutput: typeof import("./getAppsInstanceSize").getAppsInstanceSizeOutput = null as any;
utilities.lazyLoad(exports, ["getAppsInstanceSize","getAppsInstanceSizeOutput"], () => require("./getAppsInstanceSize"));

export { GetAppsLogArgs, GetAppsLogOutputArgs } from "./getAppsLog";
export const getAppsLog: typeof import("./getAppsLog").getAppsLog = null as any;
export const getAppsLogOutput: typeof import("./getAppsLog").getAppsLogOutput = null as any;
utilities.lazyLoad(exports, ["getAppsLog","getAppsLogOutput"], () => require("./getAppsLog"));

export { GetAppsLogsActiveDeploymentArgs, GetAppsLogsActiveDeploymentOutputArgs } from "./getAppsLogsActiveDeployment";
export const getAppsLogsActiveDeployment: typeof import("./getAppsLogsActiveDeployment").getAppsLogsActiveDeployment = null as any;
export const getAppsLogsActiveDeploymentOutput: typeof import("./getAppsLogsActiveDeployment").getAppsLogsActiveDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getAppsLogsActiveDeployment","getAppsLogsActiveDeploymentOutput"], () => require("./getAppsLogsActiveDeployment"));

export { GetAppsLogsActiveDeploymentAggregateArgs, GetAppsLogsActiveDeploymentAggregateOutputArgs } from "./getAppsLogsActiveDeploymentAggregate";
export const getAppsLogsActiveDeploymentAggregate: typeof import("./getAppsLogsActiveDeploymentAggregate").getAppsLogsActiveDeploymentAggregate = null as any;
export const getAppsLogsActiveDeploymentAggregateOutput: typeof import("./getAppsLogsActiveDeploymentAggregate").getAppsLogsActiveDeploymentAggregateOutput = null as any;
utilities.lazyLoad(exports, ["getAppsLogsActiveDeploymentAggregate","getAppsLogsActiveDeploymentAggregateOutput"], () => require("./getAppsLogsActiveDeploymentAggregate"));

export { GetAppsLogsAggregateArgs, GetAppsLogsAggregateOutputArgs } from "./getAppsLogsAggregate";
export const getAppsLogsAggregate: typeof import("./getAppsLogsAggregate").getAppsLogsAggregate = null as any;
export const getAppsLogsAggregateOutput: typeof import("./getAppsLogsAggregate").getAppsLogsAggregateOutput = null as any;
utilities.lazyLoad(exports, ["getAppsLogsAggregate","getAppsLogsAggregateOutput"], () => require("./getAppsLogsAggregate"));

export { GetAppsMetricsBandwidthDailyArgs, GetAppsMetricsBandwidthDailyOutputArgs } from "./getAppsMetricsBandwidthDaily";
export const getAppsMetricsBandwidthDaily: typeof import("./getAppsMetricsBandwidthDaily").getAppsMetricsBandwidthDaily = null as any;
export const getAppsMetricsBandwidthDailyOutput: typeof import("./getAppsMetricsBandwidthDaily").getAppsMetricsBandwidthDailyOutput = null as any;
utilities.lazyLoad(exports, ["getAppsMetricsBandwidthDaily","getAppsMetricsBandwidthDailyOutput"], () => require("./getAppsMetricsBandwidthDaily"));

export { GetAppsTierArgs, GetAppsTierOutputArgs } from "./getAppsTier";
export const getAppsTier: typeof import("./getAppsTier").getAppsTier = null as any;
export const getAppsTierOutput: typeof import("./getAppsTier").getAppsTierOutput = null as any;
utilities.lazyLoad(exports, ["getAppsTier","getAppsTierOutput"], () => require("./getAppsTier"));

export { ListAppsArgs } from "./listApps";
export const listApps: typeof import("./listApps").listApps = null as any;
export const listAppsOutput: typeof import("./listApps").listAppsOutput = null as any;
utilities.lazyLoad(exports, ["listApps","listAppsOutput"], () => require("./listApps"));

export { ListAppsAlertsArgs, ListAppsAlertsOutputArgs } from "./listAppsAlerts";
export const listAppsAlerts: typeof import("./listAppsAlerts").listAppsAlerts = null as any;
export const listAppsAlertsOutput: typeof import("./listAppsAlerts").listAppsAlertsOutput = null as any;
utilities.lazyLoad(exports, ["listAppsAlerts","listAppsAlertsOutput"], () => require("./listAppsAlerts"));

export { ListAppsDeploymentsArgs, ListAppsDeploymentsOutputArgs } from "./listAppsDeployments";
export const listAppsDeployments: typeof import("./listAppsDeployments").listAppsDeployments = null as any;
export const listAppsDeploymentsOutput: typeof import("./listAppsDeployments").listAppsDeploymentsOutput = null as any;
utilities.lazyLoad(exports, ["listAppsDeployments","listAppsDeploymentsOutput"], () => require("./listAppsDeployments"));

export { ListAppsInstanceSizesArgs } from "./listAppsInstanceSizes";
export const listAppsInstanceSizes: typeof import("./listAppsInstanceSizes").listAppsInstanceSizes = null as any;
export const listAppsInstanceSizesOutput: typeof import("./listAppsInstanceSizes").listAppsInstanceSizesOutput = null as any;
utilities.lazyLoad(exports, ["listAppsInstanceSizes","listAppsInstanceSizesOutput"], () => require("./listAppsInstanceSizes"));

export { ListAppsRegionsArgs } from "./listAppsRegions";
export const listAppsRegions: typeof import("./listAppsRegions").listAppsRegions = null as any;
export const listAppsRegionsOutput: typeof import("./listAppsRegions").listAppsRegionsOutput = null as any;
utilities.lazyLoad(exports, ["listAppsRegions","listAppsRegionsOutput"], () => require("./listAppsRegions"));

export { ListAppsTiersArgs } from "./listAppsTiers";
export const listAppsTiers: typeof import("./listAppsTiers").listAppsTiers = null as any;
export const listAppsTiersOutput: typeof import("./listAppsTiers").listAppsTiersOutput = null as any;
utilities.lazyLoad(exports, ["listAppsTiers","listAppsTiersOutput"], () => require("./listAppsTiers"));


// Export enums:
export * from "../../types/enums/apps/v2";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "digitalocean-native:apps/v2:App":
                return new App(name, <any>undefined, { urn })
            case "digitalocean-native:apps/v2:AppsAssignAlertDestination":
                return new AppsAssignAlertDestination(name, <any>undefined, { urn })
            case "digitalocean-native:apps/v2:AppsDeployment":
                return new AppsDeployment(name, <any>undefined, { urn })
            case "digitalocean-native:apps/v2:AppsListMetricsBandwidthDaily":
                return new AppsListMetricsBandwidthDaily(name, <any>undefined, { urn })
            case "digitalocean-native:apps/v2:AppsRollback":
                return new AppsRollback(name, <any>undefined, { urn })
            case "digitalocean-native:apps/v2:AppsValidateAppSpec":
                return new AppsValidateAppSpec(name, <any>undefined, { urn })
            case "digitalocean-native:apps/v2:AppsValidateRollback":
                return new AppsValidateRollback(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("digitalocean-native", "apps/v2", _module)
