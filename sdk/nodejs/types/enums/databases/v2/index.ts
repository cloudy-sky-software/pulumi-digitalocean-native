// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const DatabaseClusterEngine = {
    Pg: "pg",
    Mysql: "mysql",
    Redis: "redis",
    Mongodb: "mongodb",
} as const;

/**
 * A slug representing the database engine used for the cluster. The possible values are: "pg" for PostgreSQL, "mysql" for MySQL, "redis" for Redis, and "mongodb" for MongoDB.
 */
export type DatabaseClusterEngine = (typeof DatabaseClusterEngine)[keyof typeof DatabaseClusterEngine];

export const DatabaseClusterStatus = {
    Creating: "creating",
    Online: "online",
    Resizing: "resizing",
    Migrating: "migrating",
    Forking: "forking",
} as const;

/**
 * A string representing the current status of the database cluster.
 */
export type DatabaseClusterStatus = (typeof DatabaseClusterStatus)[keyof typeof DatabaseClusterStatus];

export const DatabaseReplicaStatus = {
    Creating: "creating",
    Online: "online",
    Resizing: "resizing",
    Migrating: "migrating",
    Forking: "forking",
} as const;

/**
 * A string representing the current status of the database cluster.
 */
export type DatabaseReplicaStatus = (typeof DatabaseReplicaStatus)[keyof typeof DatabaseReplicaStatus];

export const DatabaseUserRole = {
    Primary: "primary",
    Normal: "normal",
} as const;

/**
 * A string representing the database user's role. The value will be either
 * "primary" or "normal".
 */
export type DatabaseUserRole = (typeof DatabaseUserRole)[keyof typeof DatabaseUserRole];

export const EvictionPolicy = {
    Noeviction: "noeviction",
    AllkeysLru: "allkeys_lru",
    AllkeysRandom: "allkeys_random",
    VolatileLru: "volatile_lru",
    VolatileRandom: "volatile_random",
    VolatileTtl: "volatile_ttl",
} as const;

/**
 * A string specifying the desired eviction policy for the Redis cluster.
 *
 * - `noeviction`: Don't evict any data, returns error when memory limit is reached.
 * - `allkeys_lru:` Evict any key, least recently used (LRU) first.
 * - `allkeys_random`: Evict keys in a random order.
 * - `volatile_lru`: Evict keys with expiration only, least recently used (LRU) first.
 * - `volatile_random`: Evict keys with expiration only in a random order.
 * - `volatile_ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.
 */
export type EvictionPolicy = (typeof EvictionPolicy)[keyof typeof EvictionPolicy];

export const FirewallRuleType = {
    Droplet: "droplet",
    K8s: "k8s",
    IpAddr: "ip_addr",
    Tag: "tag",
    App: "app",
} as const;

/**
 * The type of resource that the firewall rule allows to access the database cluster.
 */
export type FirewallRuleType = (typeof FirewallRuleType)[keyof typeof FirewallRuleType];

export const GetDatabasesEvictionPolicyPropertiesEvictionPolicy = {
    Noeviction: "noeviction",
    AllkeysLru: "allkeys_lru",
    AllkeysRandom: "allkeys_random",
    VolatileLru: "volatile_lru",
    VolatileRandom: "volatile_random",
    VolatileTtl: "volatile_ttl",
} as const;

/**
 * A string specifying the desired eviction policy for the Redis cluster.
 *
 * - `noeviction`: Don't evict any data, returns error when memory limit is reached.
 * - `allkeys_lru:` Evict any key, least recently used (LRU) first.
 * - `allkeys_random`: Evict keys in a random order.
 * - `volatile_lru`: Evict keys with expiration only, least recently used (LRU) first.
 * - `volatile_random`: Evict keys with expiration only in a random order.
 * - `volatile_ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.
 */
export type GetDatabasesEvictionPolicyPropertiesEvictionPolicy = (typeof GetDatabasesEvictionPolicyPropertiesEvictionPolicy)[keyof typeof GetDatabasesEvictionPolicyPropertiesEvictionPolicy];

export const MysqlInternalTmpMemStorageEngine = {
    TempTable: "TempTable",
    Memory: "MEMORY",
} as const;

/**
 * The storage engine for in-memory internal temporary tables.
 */
export type MysqlInternalTmpMemStorageEngine = (typeof MysqlInternalTmpMemStorageEngine)[keyof typeof MysqlInternalTmpMemStorageEngine];

export const MysqlSettingsAuthPlugin = {
    MysqlNativePassword: "mysql_native_password",
    CachingSha2Password: "caching_sha2_password",
} as const;

/**
 * A string specifying the authentication method to be used for connections
 * to the MySQL user account. The valid values are `mysql_native_password`
 * or `caching_sha2_password`. If excluded when creating a new user, the
 * default for the version of MySQL in use will be used. As of MySQL 8.0, the
 * default is `caching_sha2_password`.
 */
export type MysqlSettingsAuthPlugin = (typeof MysqlSettingsAuthPlugin)[keyof typeof MysqlSettingsAuthPlugin];

export const OnlineMigrationStatus = {
    Running: "running",
    Canceled: "canceled",
    Error: "error",
    Done: "done",
} as const;

/**
 * The current status of the migration.
 */
export type OnlineMigrationStatus = (typeof OnlineMigrationStatus)[keyof typeof OnlineMigrationStatus];

export const PgbouncerAutodbPoolMode = {
    Session: "session",
    Transaction: "transaction",
    Statement: "statement",
} as const;

/**
 * PGBouncer pool mode
 */
export type PgbouncerAutodbPoolMode = (typeof PgbouncerAutodbPoolMode)[keyof typeof PgbouncerAutodbPoolMode];

export const PgbouncerIgnoreStartupParametersItem = {
    ExtraFloatDigits: "extra_float_digits",
    SearchPath: "search_path",
} as const;

/**
 * Enum of parameters to ignore when given in startup packet.
 */
export type PgbouncerIgnoreStartupParametersItem = (typeof PgbouncerIgnoreStartupParametersItem)[keyof typeof PgbouncerIgnoreStartupParametersItem];

export const PostgresDefaultToastCompression = {
    Lz4: "lz4",
    Pglz: "pglz",
} as const;

/**
 * Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
 */
export type PostgresDefaultToastCompression = (typeof PostgresDefaultToastCompression)[keyof typeof PostgresDefaultToastCompression];

export const PostgresLogErrorVerbosity = {
    Terse: "TERSE",
    Default: "DEFAULT",
    Verbose: "VERBOSE",
} as const;

/**
 * Controls the amount of detail written in the server log for each message that is logged.
 */
export type PostgresLogErrorVerbosity = (typeof PostgresLogErrorVerbosity)[keyof typeof PostgresLogErrorVerbosity];

export const PostgresLogLinePrefix = {
    Pidpuserudbdappaclienth: "pid=%p,user=%u,db=%d,app=%a,client=%h",
    Mpquserudbdappa: "%m [%p] %q[user=%u,db=%d,app=%a]",
    Tpl1Userudbdappaclienth: "%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h",
} as const;

/**
 * Selects one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze, etc.
 */
export type PostgresLogLinePrefix = (typeof PostgresLogLinePrefix)[keyof typeof PostgresLogLinePrefix];

export const PostgresPgStatStatementsTrack = {
    All: "all",
    Top: "top",
    None: "none",
} as const;

/**
 * Controls which statements are counted. Specify 'top' to track top-level statements (those issued directly by clients), 'all' to also track nested statements (such as statements invoked within functions), or 'none' to disable statement statistics collection. The default value is top.
 */
export type PostgresPgStatStatementsTrack = (typeof PostgresPgStatStatementsTrack)[keyof typeof PostgresPgStatStatementsTrack];

export const PostgresSynchronousReplication = {
    Off: "off",
    Quorum: "quorum",
} as const;

/**
 * Synchronous replication type. Note that the service plan also needs to support synchronous replication.
 */
export type PostgresSynchronousReplication = (typeof PostgresSynchronousReplication)[keyof typeof PostgresSynchronousReplication];

export const PostgresTrackCommitTimestamp = {
    Off: "off",
    On: "on",
} as const;

/**
 * Record commit time of transactions.
 */
export type PostgresTrackCommitTimestamp = (typeof PostgresTrackCommitTimestamp)[keyof typeof PostgresTrackCommitTimestamp];

export const PostgresTrackFunctions = {
    All: "all",
    Pl: "pl",
    None: "none",
} as const;

/**
 * Enables tracking of function call counts and time used.
 */
export type PostgresTrackFunctions = (typeof PostgresTrackFunctions)[keyof typeof PostgresTrackFunctions];

export const PostgresTrackIoTiming = {
    Off: "off",
    On: "on",
} as const;

/**
 * Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
 */
export type PostgresTrackIoTiming = (typeof PostgresTrackIoTiming)[keyof typeof PostgresTrackIoTiming];

export const RedisRedisAclChannelsDefault = {
    Allchannels: "allchannels",
    Resetchannels: "resetchannels",
} as const;

/**
 * Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn't affect Redis configuration acl-pubsub-default.
 */
export type RedisRedisAclChannelsDefault = (typeof RedisRedisAclChannelsDefault)[keyof typeof RedisRedisAclChannelsDefault];

export const RedisRedisMaxmemoryPolicy = {
    Noeviction: "noeviction",
    AllkeysLru: "allkeys_lru",
    AllkeysRandom: "allkeys_random",
    VolatileLru: "volatile_lru",
    VolatileRandom: "volatile_random",
    VolatileTtl: "volatile_ttl",
} as const;

/**
 * A string specifying the desired eviction policy for the Redis cluster.
 *
 * - `noeviction`: Don't evict any data, returns error when memory limit is reached.
 * - `allkeys_lru:` Evict any key, least recently used (LRU) first.
 * - `allkeys_random`: Evict keys in a random order.
 * - `volatile_lru`: Evict keys with expiration only, least recently used (LRU) first.
 * - `volatile_random`: Evict keys with expiration only in a random order.
 * - `volatile_ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.
 */
export type RedisRedisMaxmemoryPolicy = (typeof RedisRedisMaxmemoryPolicy)[keyof typeof RedisRedisMaxmemoryPolicy];

export const RedisRedisPersistence = {
    Off: "off",
    Rdb: "rdb",
} as const;

/**
 * When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
 */
export type RedisRedisPersistence = (typeof RedisRedisPersistence)[keyof typeof RedisRedisPersistence];

export const Status = {
    Running: "running",
    Canceled: "canceled",
    Error: "error",
    Done: "done",
} as const;

/**
 * The current status of the migration.
 */
export type Status = (typeof Status)[keyof typeof Status];
