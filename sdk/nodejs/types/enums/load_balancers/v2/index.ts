// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const ForwardingRuleEntryProtocol = {
    Http: "http",
    Https: "https",
    Http2: "http2",
    Http3: "http3",
    Tcp: "tcp",
    Udp: "udp",
} as const;

/**
 * The protocol used for traffic to the load balancer. The possible values are: `http`, `https`, `http2`, `http3`, `tcp`, or `udp`. If you set the  `entry_protocol` to `udp`, the `target_protocol` must be set to `udp`.  When using UDP, the load balancer requires that you set up a health  check with a port that uses TCP, HTTP, or HTTPS to work properly.
 */
export type ForwardingRuleEntryProtocol = (typeof ForwardingRuleEntryProtocol)[keyof typeof ForwardingRuleEntryProtocol];

export const ForwardingRuleTargetProtocol = {
    Http: "http",
    Https: "https",
    Http2: "http2",
    Tcp: "tcp",
    Udp: "udp",
} as const;

/**
 * The protocol used for traffic from the load balancer to the backend Droplets. The possible values are: `http`, `https`, `http2`, `tcp`, or `udp`. If you set the `target_protocol` to `udp`, the `entry_protocol` must be set to  `udp`. When using UDP, the load balancer requires that you set up a health  check with a port that uses TCP, HTTP, or HTTPS to work properly.
 */
export type ForwardingRuleTargetProtocol = (typeof ForwardingRuleTargetProtocol)[keyof typeof ForwardingRuleTargetProtocol];

export const HealthCheckProtocol = {
    Http: "http",
    Https: "https",
    Tcp: "tcp",
} as const;

/**
 * The protocol used for health checks sent to the backend Droplets. The possible values are `http`, `https`, or `tcp`.
 */
export type HealthCheckProtocol = (typeof HealthCheckProtocol)[keyof typeof HealthCheckProtocol];

export const LoadBalancerBaseAlgorithm = {
    RoundRobin: "round_robin",
    LeastConnections: "least_connections",
} as const;

/**
 * This field has been deprecated. You can no longer specify an algorithm for load balancers.
 */
export type LoadBalancerBaseAlgorithm = (typeof LoadBalancerBaseAlgorithm)[keyof typeof LoadBalancerBaseAlgorithm];

export const LoadBalancerBaseSize = {
    LbSmall: "lb-small",
    LbMedium: "lb-medium",
    LbLarge: "lb-large",
} as const;

/**
 * This field has been replaced by the `size_unit` field for all regions except in AMS2, NYC2, and SFO1. Each available load balancer size now equates to the load balancer having a set number of nodes.
 * * `lb-small` = 1 node
 * * `lb-medium` = 3 nodes
 * * `lb-large` = 6 nodes
 *
 * You can resize load balancers after creation up to once per hour. You cannot resize a load balancer within the first hour of its creation.
 */
export type LoadBalancerBaseSize = (typeof LoadBalancerBaseSize)[keyof typeof LoadBalancerBaseSize];

export const LoadBalancerBaseStatus = {
    New: "new",
    Active: "active",
    Errored: "errored",
} as const;

/**
 * A status string indicating the current state of the load balancer. This can be `new`, `active`, or `errored`.
 */
export type LoadBalancerBaseStatus = (typeof LoadBalancerBaseStatus)[keyof typeof LoadBalancerBaseStatus];

export const LoadBalancerPropertiesRegionEnum = {
    Ams1: "ams1",
    Ams2: "ams2",
    Ams3: "ams3",
    Blr1: "blr1",
    Fra1: "fra1",
    Lon1: "lon1",
    Nyc1: "nyc1",
    Nyc2: "nyc2",
    Nyc3: "nyc3",
    Sfo1: "sfo1",
    Sfo2: "sfo2",
    Sfo3: "sfo3",
    Sgp1: "sgp1",
    Tor1: "tor1",
} as const;

/**
 * The slug identifier for the region where the resource will initially be  available.
 */
export type LoadBalancerPropertiesRegionEnum = (typeof LoadBalancerPropertiesRegionEnum)[keyof typeof LoadBalancerPropertiesRegionEnum];

export const StickySessionsType = {
    Cookies: "cookies",
    None: "none",
} as const;

/**
 * An attribute indicating how and if requests from a client will be persistently served by the same backend Droplet. The possible values are `cookies` or `none`.
 */
export type StickySessionsType = (typeof StickySessionsType)[keyof typeof StickySessionsType];
