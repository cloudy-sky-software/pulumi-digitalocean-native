// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const ActionStatus = {
    InProgress: "in-progress",
    Completed: "completed",
    Errored: "errored",
} as const;

/**
 * The current status of the action. This can be "in-progress", "completed", or "errored".
 */
export type ActionStatus = (typeof ActionStatus)[keyof typeof ActionStatus];

export const ConvertStatus = {
    InProgress: "in-progress",
    Completed: "completed",
    Errored: "errored",
} as const;

/**
 * The current status of the action. This can be "in-progress", "completed", or "errored".
 */
export type ConvertStatus = (typeof ConvertStatus)[keyof typeof ConvertStatus];

export const ConvertType = {
    Convert: "convert",
    Transfer: "transfer",
} as const;

/**
 * The action to be taken on the image. Can be either `convert` or `transfer`.
 */
export type ConvertType = (typeof ConvertType)[keyof typeof ConvertType];

export const ImageDistribution = {
    ArchLinux: "Arch Linux",
    CentOS: "CentOS",
    CoreOS: "CoreOS",
    Debian: "Debian",
    Fedora: "Fedora",
    FedoraAtomic: "Fedora Atomic",
    FreeBSD: "FreeBSD",
    Gentoo: "Gentoo",
    OpenSUSE: "openSUSE",
    RancherOS: "RancherOS",
    RockyLinux: "Rocky Linux",
    Ubuntu: "Ubuntu",
    Unknown: "Unknown",
} as const;

/**
 * The name of a custom image's distribution. Currently, the valid values are  `Arch Linux`, `CentOS`, `CoreOS`, `Debian`, `Fedora`, `Fedora Atomic`,  `FreeBSD`, `Gentoo`, `openSUSE`, `RancherOS`, `Rocky Linux`, `Ubuntu`, and `Unknown`.  Any other value will be accepted but ignored, and `Unknown` will be used in its place.
 */
export type ImageDistribution = (typeof ImageDistribution)[keyof typeof ImageDistribution];

export const ImageRegionsItem = {
    Ams1: "ams1",
    Ams2: "ams2",
    Ams3: "ams3",
    Blr1: "blr1",
    Fra1: "fra1",
    Lon1: "lon1",
    Nyc1: "nyc1",
    Nyc2: "nyc2",
    Nyc3: "nyc3",
    Sfo1: "sfo1",
    Sfo2: "sfo2",
    Sfo3: "sfo3",
    Sgp1: "sgp1",
    Tor1: "tor1",
} as const;

/**
 * The slug identifier for the region where the resource will initially be  available.
 */
export type ImageRegionsItem = (typeof ImageRegionsItem)[keyof typeof ImageRegionsItem];

export const ImageStatus = {
    New: "NEW",
    Available: "available",
    Pending: "pending",
    Deleted: "deleted",
    Retired: "retired",
} as const;

/**
 * A status string indicating the state of a custom image. This may be `NEW`,
 *  `available`, `pending`, `deleted`, or `retired`.
 */
export type ImageStatus = (typeof ImageStatus)[keyof typeof ImageStatus];

export const ImageType = {
    Base: "base",
    Snapshot: "snapshot",
    Backup: "backup",
    Custom: "custom",
    Admin: "admin",
} as const;

/**
 * Describes the kind of image. It may be one of `base`, `snapshot`, `backup`, `custom`, or `admin`. Respectively, this specifies whether an image is a DigitalOcean base OS image, user-generated Droplet snapshot, automatically created Droplet backup, user-provided virtual machine image, or an image used for DigitalOcean managed resources (e.g. DOKS worker nodes).
 */
export type ImageType = (typeof ImageType)[keyof typeof ImageType];

export const ImagesCustomImageUpdateDistribution = {
    ArchLinux: "Arch Linux",
    CentOS: "CentOS",
    CoreOS: "CoreOS",
    Debian: "Debian",
    Fedora: "Fedora",
    FedoraAtomic: "Fedora Atomic",
    FreeBSD: "FreeBSD",
    Gentoo: "Gentoo",
    OpenSUSE: "openSUSE",
    RancherOS: "RancherOS",
    RockyLinux: "Rocky Linux",
    Ubuntu: "Ubuntu",
    Unknown: "Unknown",
} as const;

/**
 * The name of a custom image's distribution. Currently, the valid values are  `Arch Linux`, `CentOS`, `CoreOS`, `Debian`, `Fedora`, `Fedora Atomic`,  `FreeBSD`, `Gentoo`, `openSUSE`, `RancherOS`, `Rocky Linux`, `Ubuntu`, and `Unknown`.  Any other value will be accepted but ignored, and `Unknown` will be used in its place.
 */
export type ImagesCustomImageUpdateDistribution = (typeof ImagesCustomImageUpdateDistribution)[keyof typeof ImagesCustomImageUpdateDistribution];

export const ImagesCustomPropertiesRegion = {
    Ams1: "ams1",
    Ams2: "ams2",
    Ams3: "ams3",
    Blr1: "blr1",
    Fra1: "fra1",
    Lon1: "lon1",
    Nyc1: "nyc1",
    Nyc2: "nyc2",
    Nyc3: "nyc3",
    Sfo1: "sfo1",
    Sfo2: "sfo2",
    Sfo3: "sfo3",
    Sgp1: "sgp1",
    Tor1: "tor1",
} as const;

/**
 * The slug identifier for the region where the resource will initially be  available.
 */
export type ImagesCustomPropertiesRegion = (typeof ImagesCustomPropertiesRegion)[keyof typeof ImagesCustomPropertiesRegion];

export const TransferImageActionBaseType = {
    Convert: "convert",
    Transfer: "transfer",
} as const;

/**
 * The action to be taken on the image. Can be either `convert` or `transfer`.
 */
export type TransferImageActionBaseType = (typeof TransferImageActionBaseType)[keyof typeof TransferImageActionBaseType];

export const TransferPropertiesRegion = {
    Ams1: "ams1",
    Ams2: "ams2",
    Ams3: "ams3",
    Blr1: "blr1",
    Fra1: "fra1",
    Lon1: "lon1",
    Nyc1: "nyc1",
    Nyc2: "nyc2",
    Nyc3: "nyc3",
    Sfo1: "sfo1",
    Sfo2: "sfo2",
    Sfo3: "sfo3",
    Sgp1: "sgp1",
    Tor1: "tor1",
} as const;

/**
 * The slug identifier for the region where the resource will initially be  available.
 */
export type TransferPropertiesRegion = (typeof TransferPropertiesRegion)[keyof typeof TransferPropertiesRegion];

export const TransferStatus = {
    InProgress: "in-progress",
    Completed: "completed",
    Errored: "errored",
} as const;

/**
 * The current status of the action. This can be "in-progress", "completed", or "errored".
 */
export type TransferStatus = (typeof TransferStatus)[keyof typeof TransferStatus];
