// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export class TagsAssignResource extends pulumi.CustomResource {
    /**
     * Get an existing TagsAssignResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): TagsAssignResource {
        return new TagsAssignResource(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean-native:tags/v2:TagsAssignResource';

    /**
     * Returns true if the given object is an instance of TagsAssignResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TagsAssignResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TagsAssignResource.__pulumiType;
    }

    /**
     * An array of objects containing resource_id and resource_type  attributes.
     */
    public readonly resources!: pulumi.Output<outputs.tags.v2.ResourcesItemProperties[]>;

    /**
     * Create a TagsAssignResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TagsAssignResourceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.resources === undefined && !opts.urn) {
                throw new Error("Missing required property 'resources'");
            }
            resourceInputs["resources"] = args?.resources;
            resourceInputs["tagId"] = args?.tagId;
        } else {
            resourceInputs["resources"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TagsAssignResource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a TagsAssignResource resource.
 */
export interface TagsAssignResourceArgs {
    /**
     * An array of objects containing resource_id and resource_type  attributes.
     */
    resources: pulumi.Input<pulumi.Input<inputs.tags.v2.ResourcesItemPropertiesArgs>[]>;
    /**
     * The name of the tag. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per tag.
     */
    tagId?: pulumi.Input<string>;
}
