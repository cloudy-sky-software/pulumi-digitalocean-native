// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirewallsAssignDroplets struct {
	pulumi.CustomResourceState

	// An array containing the IDs of the Droplets to be assigned to the firewall.
	DropletIds pulumi.IntArrayOutput `pulumi:"dropletIds"`
}

// NewFirewallsAssignDroplets registers a new resource with the given unique name, arguments, and options.
func NewFirewallsAssignDroplets(ctx *pulumi.Context,
	name string, args *FirewallsAssignDropletsArgs, opts ...pulumi.ResourceOption) (*FirewallsAssignDroplets, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DropletIds == nil {
		return nil, errors.New("invalid value for required argument 'DropletIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FirewallsAssignDroplets
	err := ctx.RegisterResource("digitalocean-native:firewalls/v2:FirewallsAssignDroplets", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallsAssignDroplets gets an existing FirewallsAssignDroplets resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallsAssignDroplets(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallsAssignDropletsState, opts ...pulumi.ResourceOption) (*FirewallsAssignDroplets, error) {
	var resource FirewallsAssignDroplets
	err := ctx.ReadResource("digitalocean-native:firewalls/v2:FirewallsAssignDroplets", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallsAssignDroplets resources.
type firewallsAssignDropletsState struct {
}

type FirewallsAssignDropletsState struct {
}

func (FirewallsAssignDropletsState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallsAssignDropletsState)(nil)).Elem()
}

type firewallsAssignDropletsArgs struct {
	// An array containing the IDs of the Droplets to be assigned to the firewall.
	DropletIds []int `pulumi:"dropletIds"`
	// A unique ID that can be used to identify and reference a firewall.
	FirewallId *string `pulumi:"firewallId"`
}

// The set of arguments for constructing a FirewallsAssignDroplets resource.
type FirewallsAssignDropletsArgs struct {
	// An array containing the IDs of the Droplets to be assigned to the firewall.
	DropletIds pulumi.IntArrayInput
	// A unique ID that can be used to identify and reference a firewall.
	FirewallId pulumi.StringPtrInput
}

func (FirewallsAssignDropletsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallsAssignDropletsArgs)(nil)).Elem()
}

type FirewallsAssignDropletsInput interface {
	pulumi.Input

	ToFirewallsAssignDropletsOutput() FirewallsAssignDropletsOutput
	ToFirewallsAssignDropletsOutputWithContext(ctx context.Context) FirewallsAssignDropletsOutput
}

func (*FirewallsAssignDroplets) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallsAssignDroplets)(nil)).Elem()
}

func (i *FirewallsAssignDroplets) ToFirewallsAssignDropletsOutput() FirewallsAssignDropletsOutput {
	return i.ToFirewallsAssignDropletsOutputWithContext(context.Background())
}

func (i *FirewallsAssignDroplets) ToFirewallsAssignDropletsOutputWithContext(ctx context.Context) FirewallsAssignDropletsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallsAssignDropletsOutput)
}

type FirewallsAssignDropletsOutput struct{ *pulumi.OutputState }

func (FirewallsAssignDropletsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallsAssignDroplets)(nil)).Elem()
}

func (o FirewallsAssignDropletsOutput) ToFirewallsAssignDropletsOutput() FirewallsAssignDropletsOutput {
	return o
}

func (o FirewallsAssignDropletsOutput) ToFirewallsAssignDropletsOutputWithContext(ctx context.Context) FirewallsAssignDropletsOutput {
	return o
}

// An array containing the IDs of the Droplets to be assigned to the firewall.
func (o FirewallsAssignDropletsOutput) DropletIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *FirewallsAssignDroplets) pulumi.IntArrayOutput { return v.DropletIds }).(pulumi.IntArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallsAssignDropletsInput)(nil)).Elem(), &FirewallsAssignDroplets{})
	pulumi.RegisterOutputType(FirewallsAssignDropletsOutput{})
}
