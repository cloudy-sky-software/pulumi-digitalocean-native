// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirewallsAssignDroplet struct {
	pulumi.CustomResourceState

	// An array containing the IDs of the Droplets to be assigned to the firewall.
	DropletIds pulumi.IntArrayOutput `pulumi:"dropletIds"`
}

// NewFirewallsAssignDroplet registers a new resource with the given unique name, arguments, and options.
func NewFirewallsAssignDroplet(ctx *pulumi.Context,
	name string, args *FirewallsAssignDropletArgs, opts ...pulumi.ResourceOption) (*FirewallsAssignDroplet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DropletIds == nil {
		return nil, errors.New("invalid value for required argument 'DropletIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FirewallsAssignDroplet
	err := ctx.RegisterResource("digitalocean-native:firewalls/v2:FirewallsAssignDroplet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallsAssignDroplet gets an existing FirewallsAssignDroplet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallsAssignDroplet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallsAssignDropletState, opts ...pulumi.ResourceOption) (*FirewallsAssignDroplet, error) {
	var resource FirewallsAssignDroplet
	err := ctx.ReadResource("digitalocean-native:firewalls/v2:FirewallsAssignDroplet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallsAssignDroplet resources.
type firewallsAssignDropletState struct {
}

type FirewallsAssignDropletState struct {
}

func (FirewallsAssignDropletState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallsAssignDropletState)(nil)).Elem()
}

type firewallsAssignDropletArgs struct {
	// An array containing the IDs of the Droplets to be assigned to the firewall.
	DropletIds []int `pulumi:"dropletIds"`
	// A unique ID that can be used to identify and reference a firewall.
	FirewallId *string `pulumi:"firewallId"`
}

// The set of arguments for constructing a FirewallsAssignDroplet resource.
type FirewallsAssignDropletArgs struct {
	// An array containing the IDs of the Droplets to be assigned to the firewall.
	DropletIds pulumi.IntArrayInput
	// A unique ID that can be used to identify and reference a firewall.
	FirewallId pulumi.StringPtrInput
}

func (FirewallsAssignDropletArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallsAssignDropletArgs)(nil)).Elem()
}

type FirewallsAssignDropletInput interface {
	pulumi.Input

	ToFirewallsAssignDropletOutput() FirewallsAssignDropletOutput
	ToFirewallsAssignDropletOutputWithContext(ctx context.Context) FirewallsAssignDropletOutput
}

func (*FirewallsAssignDroplet) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallsAssignDroplet)(nil)).Elem()
}

func (i *FirewallsAssignDroplet) ToFirewallsAssignDropletOutput() FirewallsAssignDropletOutput {
	return i.ToFirewallsAssignDropletOutputWithContext(context.Background())
}

func (i *FirewallsAssignDroplet) ToFirewallsAssignDropletOutputWithContext(ctx context.Context) FirewallsAssignDropletOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallsAssignDropletOutput)
}

type FirewallsAssignDropletOutput struct{ *pulumi.OutputState }

func (FirewallsAssignDropletOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallsAssignDroplet)(nil)).Elem()
}

func (o FirewallsAssignDropletOutput) ToFirewallsAssignDropletOutput() FirewallsAssignDropletOutput {
	return o
}

func (o FirewallsAssignDropletOutput) ToFirewallsAssignDropletOutputWithContext(ctx context.Context) FirewallsAssignDropletOutput {
	return o
}

// An array containing the IDs of the Droplets to be assigned to the firewall.
func (o FirewallsAssignDropletOutput) DropletIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *FirewallsAssignDroplet) pulumi.IntArrayOutput { return v.DropletIds }).(pulumi.IntArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallsAssignDropletInput)(nil)).Elem(), &FirewallsAssignDroplet{})
	pulumi.RegisterOutputType(FirewallsAssignDropletOutput{})
}
