// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirewallsTags struct {
	pulumi.CustomResourceState

	Tags TagsOutput `pulumi:"tags"`
}

// NewFirewallsTags registers a new resource with the given unique name, arguments, and options.
func NewFirewallsTags(ctx *pulumi.Context,
	name string, args *FirewallsTagsArgs, opts ...pulumi.ResourceOption) (*FirewallsTags, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Tags == nil {
		return nil, errors.New("invalid value for required argument 'Tags'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FirewallsTags
	err := ctx.RegisterResource("digitalocean-native:firewalls/v2:FirewallsTags", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallsTags gets an existing FirewallsTags resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallsTags(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallsTagsState, opts ...pulumi.ResourceOption) (*FirewallsTags, error) {
	var resource FirewallsTags
	err := ctx.ReadResource("digitalocean-native:firewalls/v2:FirewallsTags", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallsTags resources.
type firewallsTagsState struct {
}

type FirewallsTagsState struct {
}

func (FirewallsTagsState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallsTagsState)(nil)).Elem()
}

type firewallsTagsArgs struct {
	// A unique ID that can be used to identify and reference a firewall.
	FirewallId *string `pulumi:"firewallId"`
	Tags       Tags    `pulumi:"tags"`
}

// The set of arguments for constructing a FirewallsTags resource.
type FirewallsTagsArgs struct {
	// A unique ID that can be used to identify and reference a firewall.
	FirewallId pulumi.StringPtrInput
	Tags       TagsInput
}

func (FirewallsTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallsTagsArgs)(nil)).Elem()
}

type FirewallsTagsInput interface {
	pulumi.Input

	ToFirewallsTagsOutput() FirewallsTagsOutput
	ToFirewallsTagsOutputWithContext(ctx context.Context) FirewallsTagsOutput
}

func (*FirewallsTags) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallsTags)(nil)).Elem()
}

func (i *FirewallsTags) ToFirewallsTagsOutput() FirewallsTagsOutput {
	return i.ToFirewallsTagsOutputWithContext(context.Background())
}

func (i *FirewallsTags) ToFirewallsTagsOutputWithContext(ctx context.Context) FirewallsTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallsTagsOutput)
}

type FirewallsTagsOutput struct{ *pulumi.OutputState }

func (FirewallsTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallsTags)(nil)).Elem()
}

func (o FirewallsTagsOutput) ToFirewallsTagsOutput() FirewallsTagsOutput {
	return o
}

func (o FirewallsTagsOutput) ToFirewallsTagsOutputWithContext(ctx context.Context) FirewallsTagsOutput {
	return o
}

func (o FirewallsTagsOutput) Tags() TagsOutput {
	return o.ApplyT(func(v *FirewallsTags) TagsOutput { return v.Tags }).(TagsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallsTagsInput)(nil)).Elem(), &FirewallsTags{})
	pulumi.RegisterOutputType(FirewallsTagsOutput{})
}
