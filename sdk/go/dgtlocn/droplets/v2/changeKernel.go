// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ChangeKernel struct {
	pulumi.CustomResourceState

	Action ActionPtrOutput `pulumi:"action"`
	// A unique number used to identify and reference a specific kernel.
	Kernel pulumi.IntPtrOutput `pulumi:"kernel"`
	// The type of action to initiate for the Droplet.
	Type DropletActionTypePtrOutput `pulumi:"type"`
}

// NewChangeKernel registers a new resource with the given unique name, arguments, and options.
func NewChangeKernel(ctx *pulumi.Context,
	name string, args *ChangeKernelArgs, opts ...pulumi.ResourceOption) (*ChangeKernel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ChangeKernel
	err := ctx.RegisterResource("digitalocean-native:droplets/v2:ChangeKernel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChangeKernel gets an existing ChangeKernel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChangeKernel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChangeKernelState, opts ...pulumi.ResourceOption) (*ChangeKernel, error) {
	var resource ChangeKernel
	err := ctx.ReadResource("digitalocean-native:droplets/v2:ChangeKernel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChangeKernel resources.
type changeKernelState struct {
}

type ChangeKernelState struct {
}

func (ChangeKernelState) ElementType() reflect.Type {
	return reflect.TypeOf((*changeKernelState)(nil)).Elem()
}

type changeKernelArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId *string `pulumi:"dropletId"`
	// A unique number used to identify and reference a specific kernel.
	Kernel *int `pulumi:"kernel"`
	// The type of action to initiate for the Droplet.
	Type DropletActionType `pulumi:"type"`
}

// The set of arguments for constructing a ChangeKernel resource.
type ChangeKernelArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId pulumi.StringPtrInput
	// A unique number used to identify and reference a specific kernel.
	Kernel pulumi.IntPtrInput
	// The type of action to initiate for the Droplet.
	Type DropletActionTypeInput
}

func (ChangeKernelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*changeKernelArgs)(nil)).Elem()
}

type ChangeKernelInput interface {
	pulumi.Input

	ToChangeKernelOutput() ChangeKernelOutput
	ToChangeKernelOutputWithContext(ctx context.Context) ChangeKernelOutput
}

func (*ChangeKernel) ElementType() reflect.Type {
	return reflect.TypeOf((**ChangeKernel)(nil)).Elem()
}

func (i *ChangeKernel) ToChangeKernelOutput() ChangeKernelOutput {
	return i.ToChangeKernelOutputWithContext(context.Background())
}

func (i *ChangeKernel) ToChangeKernelOutputWithContext(ctx context.Context) ChangeKernelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChangeKernelOutput)
}

type ChangeKernelOutput struct{ *pulumi.OutputState }

func (ChangeKernelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChangeKernel)(nil)).Elem()
}

func (o ChangeKernelOutput) ToChangeKernelOutput() ChangeKernelOutput {
	return o
}

func (o ChangeKernelOutput) ToChangeKernelOutputWithContext(ctx context.Context) ChangeKernelOutput {
	return o
}

func (o ChangeKernelOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v *ChangeKernel) ActionPtrOutput { return v.Action }).(ActionPtrOutput)
}

// A unique number used to identify and reference a specific kernel.
func (o ChangeKernelOutput) Kernel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ChangeKernel) pulumi.IntPtrOutput { return v.Kernel }).(pulumi.IntPtrOutput)
}

// The type of action to initiate for the Droplet.
func (o ChangeKernelOutput) Type() DropletActionTypePtrOutput {
	return o.ApplyT(func(v *ChangeKernel) DropletActionTypePtrOutput { return v.Type }).(DropletActionTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChangeKernelInput)(nil)).Elem(), &ChangeKernel{})
	pulumi.RegisterOutputType(ChangeKernelOutput{})
}
