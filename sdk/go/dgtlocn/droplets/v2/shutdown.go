// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the action that will be taken on the Droplet.
type Shutdown struct {
	pulumi.CustomResourceState

	Action ActionPtrOutput `pulumi:"action"`
	// The type of action to initiate for the Droplet.
	Type TypeOutput `pulumi:"type"`
}

// NewShutdown registers a new resource with the given unique name, arguments, and options.
func NewShutdown(ctx *pulumi.Context,
	name string, args *ShutdownArgs, opts ...pulumi.ResourceOption) (*Shutdown, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Shutdown
	err := ctx.RegisterResource("digitalocean-native:droplets/v2:Shutdown", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShutdown gets an existing Shutdown resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShutdown(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShutdownState, opts ...pulumi.ResourceOption) (*Shutdown, error) {
	var resource Shutdown
	err := ctx.ReadResource("digitalocean-native:droplets/v2:Shutdown", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Shutdown resources.
type shutdownState struct {
}

type ShutdownState struct {
}

func (ShutdownState) ElementType() reflect.Type {
	return reflect.TypeOf((*shutdownState)(nil)).Elem()
}

type shutdownArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId *string `pulumi:"dropletId"`
	// The type of action to initiate for the Droplet.
	Type Type `pulumi:"type"`
}

// The set of arguments for constructing a Shutdown resource.
type ShutdownArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId pulumi.StringPtrInput
	// The type of action to initiate for the Droplet.
	Type TypeInput
}

func (ShutdownArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shutdownArgs)(nil)).Elem()
}

type ShutdownInput interface {
	pulumi.Input

	ToShutdownOutput() ShutdownOutput
	ToShutdownOutputWithContext(ctx context.Context) ShutdownOutput
}

func (*Shutdown) ElementType() reflect.Type {
	return reflect.TypeOf((**Shutdown)(nil)).Elem()
}

func (i *Shutdown) ToShutdownOutput() ShutdownOutput {
	return i.ToShutdownOutputWithContext(context.Background())
}

func (i *Shutdown) ToShutdownOutputWithContext(ctx context.Context) ShutdownOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShutdownOutput)
}

type ShutdownOutput struct{ *pulumi.OutputState }

func (ShutdownOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Shutdown)(nil)).Elem()
}

func (o ShutdownOutput) ToShutdownOutput() ShutdownOutput {
	return o
}

func (o ShutdownOutput) ToShutdownOutputWithContext(ctx context.Context) ShutdownOutput {
	return o
}

func (o ShutdownOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v *Shutdown) ActionPtrOutput { return v.Action }).(ActionPtrOutput)
}

// The type of action to initiate for the Droplet.
func (o ShutdownOutput) Type() TypeOutput {
	return o.ApplyT(func(v *Shutdown) TypeOutput { return v.Type }).(TypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ShutdownInput)(nil)).Elem(), &Shutdown{})
	pulumi.RegisterOutputType(ShutdownOutput{})
}
