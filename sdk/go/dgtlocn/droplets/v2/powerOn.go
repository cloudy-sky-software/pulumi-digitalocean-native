// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the action that will be taken on the Droplet.
type PowerOn struct {
	pulumi.CustomResourceState

	Action ActionPtrOutput `pulumi:"action"`
	// The type of action to initiate for the Droplet.
	Type TypeOutput `pulumi:"type"`
}

// NewPowerOn registers a new resource with the given unique name, arguments, and options.
func NewPowerOn(ctx *pulumi.Context,
	name string, args *PowerOnArgs, opts ...pulumi.ResourceOption) (*PowerOn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PowerOn
	err := ctx.RegisterResource("digitalocean-native:droplets/v2:PowerOn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPowerOn gets an existing PowerOn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPowerOn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PowerOnState, opts ...pulumi.ResourceOption) (*PowerOn, error) {
	var resource PowerOn
	err := ctx.ReadResource("digitalocean-native:droplets/v2:PowerOn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PowerOn resources.
type powerOnState struct {
}

type PowerOnState struct {
}

func (PowerOnState) ElementType() reflect.Type {
	return reflect.TypeOf((*powerOnState)(nil)).Elem()
}

type powerOnArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId *string `pulumi:"dropletId"`
	// The type of action to initiate for the Droplet.
	Type Type `pulumi:"type"`
}

// The set of arguments for constructing a PowerOn resource.
type PowerOnArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId pulumi.StringPtrInput
	// The type of action to initiate for the Droplet.
	Type TypeInput
}

func (PowerOnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*powerOnArgs)(nil)).Elem()
}

type PowerOnInput interface {
	pulumi.Input

	ToPowerOnOutput() PowerOnOutput
	ToPowerOnOutputWithContext(ctx context.Context) PowerOnOutput
}

func (*PowerOn) ElementType() reflect.Type {
	return reflect.TypeOf((**PowerOn)(nil)).Elem()
}

func (i *PowerOn) ToPowerOnOutput() PowerOnOutput {
	return i.ToPowerOnOutputWithContext(context.Background())
}

func (i *PowerOn) ToPowerOnOutputWithContext(ctx context.Context) PowerOnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerOnOutput)
}

type PowerOnOutput struct{ *pulumi.OutputState }

func (PowerOnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PowerOn)(nil)).Elem()
}

func (o PowerOnOutput) ToPowerOnOutput() PowerOnOutput {
	return o
}

func (o PowerOnOutput) ToPowerOnOutputWithContext(ctx context.Context) PowerOnOutput {
	return o
}

func (o PowerOnOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v *PowerOn) ActionPtrOutput { return v.Action }).(ActionPtrOutput)
}

// The type of action to initiate for the Droplet.
func (o PowerOnOutput) Type() TypeOutput {
	return o.ApplyT(func(v *PowerOn) TypeOutput { return v.Type }).(TypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PowerOnInput)(nil)).Elem(), &PowerOn{})
	pulumi.RegisterOutputType(PowerOnOutput{})
}
