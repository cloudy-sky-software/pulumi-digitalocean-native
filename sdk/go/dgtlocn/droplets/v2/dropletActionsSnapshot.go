// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DropletActionsSnapshot struct {
	pulumi.CustomResourceState

	Action ActionPtrOutput `pulumi:"action"`
	// The name to give the new snapshot of the Droplet.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The type of action to initiate for the Droplet.
	Type DropletActionTypePtrOutput `pulumi:"type"`
}

// NewDropletActionsSnapshot registers a new resource with the given unique name, arguments, and options.
func NewDropletActionsSnapshot(ctx *pulumi.Context,
	name string, args *DropletActionsSnapshotArgs, opts ...pulumi.ResourceOption) (*DropletActionsSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DropletActionsSnapshot
	err := ctx.RegisterResource("digitalocean-native:droplets/v2:DropletActionsSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDropletActionsSnapshot gets an existing DropletActionsSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDropletActionsSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DropletActionsSnapshotState, opts ...pulumi.ResourceOption) (*DropletActionsSnapshot, error) {
	var resource DropletActionsSnapshot
	err := ctx.ReadResource("digitalocean-native:droplets/v2:DropletActionsSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DropletActionsSnapshot resources.
type dropletActionsSnapshotState struct {
}

type DropletActionsSnapshotState struct {
}

func (DropletActionsSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsSnapshotState)(nil)).Elem()
}

type dropletActionsSnapshotArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId *string `pulumi:"dropletId"`
	// The name to give the new snapshot of the Droplet.
	Name *string `pulumi:"name"`
	// The type of action to initiate for the Droplet.
	Type DropletActionType `pulumi:"type"`
}

// The set of arguments for constructing a DropletActionsSnapshot resource.
type DropletActionsSnapshotArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId pulumi.StringPtrInput
	// The name to give the new snapshot of the Droplet.
	Name pulumi.StringPtrInput
	// The type of action to initiate for the Droplet.
	Type DropletActionTypeInput
}

func (DropletActionsSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsSnapshotArgs)(nil)).Elem()
}

type DropletActionsSnapshotInput interface {
	pulumi.Input

	ToDropletActionsSnapshotOutput() DropletActionsSnapshotOutput
	ToDropletActionsSnapshotOutputWithContext(ctx context.Context) DropletActionsSnapshotOutput
}

func (*DropletActionsSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsSnapshot)(nil)).Elem()
}

func (i *DropletActionsSnapshot) ToDropletActionsSnapshotOutput() DropletActionsSnapshotOutput {
	return i.ToDropletActionsSnapshotOutputWithContext(context.Background())
}

func (i *DropletActionsSnapshot) ToDropletActionsSnapshotOutputWithContext(ctx context.Context) DropletActionsSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropletActionsSnapshotOutput)
}

type DropletActionsSnapshotOutput struct{ *pulumi.OutputState }

func (DropletActionsSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsSnapshot)(nil)).Elem()
}

func (o DropletActionsSnapshotOutput) ToDropletActionsSnapshotOutput() DropletActionsSnapshotOutput {
	return o
}

func (o DropletActionsSnapshotOutput) ToDropletActionsSnapshotOutputWithContext(ctx context.Context) DropletActionsSnapshotOutput {
	return o
}

func (o DropletActionsSnapshotOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v *DropletActionsSnapshot) ActionPtrOutput { return v.Action }).(ActionPtrOutput)
}

// The name to give the new snapshot of the Droplet.
func (o DropletActionsSnapshotOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DropletActionsSnapshot) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of action to initiate for the Droplet.
func (o DropletActionsSnapshotOutput) Type() DropletActionTypePtrOutput {
	return o.ApplyT(func(v *DropletActionsSnapshot) DropletActionTypePtrOutput { return v.Type }).(DropletActionTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DropletActionsSnapshotInput)(nil)).Elem(), &DropletActionsSnapshot{})
	pulumi.RegisterOutputType(DropletActionsSnapshotOutput{})
}
