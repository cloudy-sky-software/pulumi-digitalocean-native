// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the action that will be taken on the Droplet.
type DropletActionsByTagEnableBackups struct {
	pulumi.CustomResourceState

	Actions ActionArrayOutput `pulumi:"actions"`
	// The type of action to initiate for the Droplet.
	Type TypeOutput `pulumi:"type"`
}

// NewDropletActionsByTagEnableBackups registers a new resource with the given unique name, arguments, and options.
func NewDropletActionsByTagEnableBackups(ctx *pulumi.Context,
	name string, args *DropletActionsByTagEnableBackupsArgs, opts ...pulumi.ResourceOption) (*DropletActionsByTagEnableBackups, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DropletActionsByTagEnableBackups
	err := ctx.RegisterResource("digitalocean-native:droplets/v2:DropletActionsByTagEnableBackups", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDropletActionsByTagEnableBackups gets an existing DropletActionsByTagEnableBackups resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDropletActionsByTagEnableBackups(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DropletActionsByTagEnableBackupsState, opts ...pulumi.ResourceOption) (*DropletActionsByTagEnableBackups, error) {
	var resource DropletActionsByTagEnableBackups
	err := ctx.ReadResource("digitalocean-native:droplets/v2:DropletActionsByTagEnableBackups", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DropletActionsByTagEnableBackups resources.
type dropletActionsByTagEnableBackupsState struct {
}

type DropletActionsByTagEnableBackupsState struct {
}

func (DropletActionsByTagEnableBackupsState) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsByTagEnableBackupsState)(nil)).Elem()
}

type dropletActionsByTagEnableBackupsArgs struct {
	// The type of action to initiate for the Droplet.
	Type Type `pulumi:"type"`
}

// The set of arguments for constructing a DropletActionsByTagEnableBackups resource.
type DropletActionsByTagEnableBackupsArgs struct {
	// The type of action to initiate for the Droplet.
	Type TypeInput
}

func (DropletActionsByTagEnableBackupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsByTagEnableBackupsArgs)(nil)).Elem()
}

type DropletActionsByTagEnableBackupsInput interface {
	pulumi.Input

	ToDropletActionsByTagEnableBackupsOutput() DropletActionsByTagEnableBackupsOutput
	ToDropletActionsByTagEnableBackupsOutputWithContext(ctx context.Context) DropletActionsByTagEnableBackupsOutput
}

func (*DropletActionsByTagEnableBackups) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsByTagEnableBackups)(nil)).Elem()
}

func (i *DropletActionsByTagEnableBackups) ToDropletActionsByTagEnableBackupsOutput() DropletActionsByTagEnableBackupsOutput {
	return i.ToDropletActionsByTagEnableBackupsOutputWithContext(context.Background())
}

func (i *DropletActionsByTagEnableBackups) ToDropletActionsByTagEnableBackupsOutputWithContext(ctx context.Context) DropletActionsByTagEnableBackupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropletActionsByTagEnableBackupsOutput)
}

type DropletActionsByTagEnableBackupsOutput struct{ *pulumi.OutputState }

func (DropletActionsByTagEnableBackupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsByTagEnableBackups)(nil)).Elem()
}

func (o DropletActionsByTagEnableBackupsOutput) ToDropletActionsByTagEnableBackupsOutput() DropletActionsByTagEnableBackupsOutput {
	return o
}

func (o DropletActionsByTagEnableBackupsOutput) ToDropletActionsByTagEnableBackupsOutputWithContext(ctx context.Context) DropletActionsByTagEnableBackupsOutput {
	return o
}

func (o DropletActionsByTagEnableBackupsOutput) Actions() ActionArrayOutput {
	return o.ApplyT(func(v *DropletActionsByTagEnableBackups) ActionArrayOutput { return v.Actions }).(ActionArrayOutput)
}

// The type of action to initiate for the Droplet.
func (o DropletActionsByTagEnableBackupsOutput) Type() TypeOutput {
	return o.ApplyT(func(v *DropletActionsByTagEnableBackups) TypeOutput { return v.Type }).(TypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DropletActionsByTagEnableBackupsInput)(nil)).Elem(), &DropletActionsByTagEnableBackups{})
	pulumi.RegisterOutputType(DropletActionsByTagEnableBackupsOutput{})
}
