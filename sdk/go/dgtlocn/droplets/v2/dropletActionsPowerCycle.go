// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the action that will be taken on the Droplet.
type DropletActionsPowerCycle struct {
	pulumi.CustomResourceState

	Action ActionPtrOutput `pulumi:"action"`
	// The type of action to initiate for the Droplet.
	Type TypeOutput `pulumi:"type"`
}

// NewDropletActionsPowerCycle registers a new resource with the given unique name, arguments, and options.
func NewDropletActionsPowerCycle(ctx *pulumi.Context,
	name string, args *DropletActionsPowerCycleArgs, opts ...pulumi.ResourceOption) (*DropletActionsPowerCycle, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DropletActionsPowerCycle
	err := ctx.RegisterResource("digitalocean-native:droplets/v2:DropletActionsPowerCycle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDropletActionsPowerCycle gets an existing DropletActionsPowerCycle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDropletActionsPowerCycle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DropletActionsPowerCycleState, opts ...pulumi.ResourceOption) (*DropletActionsPowerCycle, error) {
	var resource DropletActionsPowerCycle
	err := ctx.ReadResource("digitalocean-native:droplets/v2:DropletActionsPowerCycle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DropletActionsPowerCycle resources.
type dropletActionsPowerCycleState struct {
}

type DropletActionsPowerCycleState struct {
}

func (DropletActionsPowerCycleState) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsPowerCycleState)(nil)).Elem()
}

type dropletActionsPowerCycleArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId *string `pulumi:"dropletId"`
	// The type of action to initiate for the Droplet.
	Type Type `pulumi:"type"`
}

// The set of arguments for constructing a DropletActionsPowerCycle resource.
type DropletActionsPowerCycleArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId pulumi.StringPtrInput
	// The type of action to initiate for the Droplet.
	Type TypeInput
}

func (DropletActionsPowerCycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsPowerCycleArgs)(nil)).Elem()
}

type DropletActionsPowerCycleInput interface {
	pulumi.Input

	ToDropletActionsPowerCycleOutput() DropletActionsPowerCycleOutput
	ToDropletActionsPowerCycleOutputWithContext(ctx context.Context) DropletActionsPowerCycleOutput
}

func (*DropletActionsPowerCycle) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsPowerCycle)(nil)).Elem()
}

func (i *DropletActionsPowerCycle) ToDropletActionsPowerCycleOutput() DropletActionsPowerCycleOutput {
	return i.ToDropletActionsPowerCycleOutputWithContext(context.Background())
}

func (i *DropletActionsPowerCycle) ToDropletActionsPowerCycleOutputWithContext(ctx context.Context) DropletActionsPowerCycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropletActionsPowerCycleOutput)
}

type DropletActionsPowerCycleOutput struct{ *pulumi.OutputState }

func (DropletActionsPowerCycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsPowerCycle)(nil)).Elem()
}

func (o DropletActionsPowerCycleOutput) ToDropletActionsPowerCycleOutput() DropletActionsPowerCycleOutput {
	return o
}

func (o DropletActionsPowerCycleOutput) ToDropletActionsPowerCycleOutputWithContext(ctx context.Context) DropletActionsPowerCycleOutput {
	return o
}

func (o DropletActionsPowerCycleOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v *DropletActionsPowerCycle) ActionPtrOutput { return v.Action }).(ActionPtrOutput)
}

// The type of action to initiate for the Droplet.
func (o DropletActionsPowerCycleOutput) Type() TypeOutput {
	return o.ApplyT(func(v *DropletActionsPowerCycle) TypeOutput { return v.Type }).(TypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DropletActionsPowerCycleInput)(nil)).Elem(), &DropletActionsPowerCycle{})
	pulumi.RegisterOutputType(DropletActionsPowerCycleOutput{})
}
