// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the action that will be taken on the Droplet.
type Reboot struct {
	pulumi.CustomResourceState

	Action ActionPtrOutput `pulumi:"action"`
	// The type of action to initiate for the Droplet.
	Type TypeOutput `pulumi:"type"`
}

// NewReboot registers a new resource with the given unique name, arguments, and options.
func NewReboot(ctx *pulumi.Context,
	name string, args *RebootArgs, opts ...pulumi.ResourceOption) (*Reboot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Reboot
	err := ctx.RegisterResource("digitalocean-native:droplets/v2:Reboot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReboot gets an existing Reboot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReboot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RebootState, opts ...pulumi.ResourceOption) (*Reboot, error) {
	var resource Reboot
	err := ctx.ReadResource("digitalocean-native:droplets/v2:Reboot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Reboot resources.
type rebootState struct {
}

type RebootState struct {
}

func (RebootState) ElementType() reflect.Type {
	return reflect.TypeOf((*rebootState)(nil)).Elem()
}

type rebootArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId *string `pulumi:"dropletId"`
	// The type of action to initiate for the Droplet.
	Type Type `pulumi:"type"`
}

// The set of arguments for constructing a Reboot resource.
type RebootArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId pulumi.StringPtrInput
	// The type of action to initiate for the Droplet.
	Type TypeInput
}

func (RebootArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rebootArgs)(nil)).Elem()
}

type RebootInput interface {
	pulumi.Input

	ToRebootOutput() RebootOutput
	ToRebootOutputWithContext(ctx context.Context) RebootOutput
}

func (*Reboot) ElementType() reflect.Type {
	return reflect.TypeOf((**Reboot)(nil)).Elem()
}

func (i *Reboot) ToRebootOutput() RebootOutput {
	return i.ToRebootOutputWithContext(context.Background())
}

func (i *Reboot) ToRebootOutputWithContext(ctx context.Context) RebootOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RebootOutput)
}

type RebootOutput struct{ *pulumi.OutputState }

func (RebootOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Reboot)(nil)).Elem()
}

func (o RebootOutput) ToRebootOutput() RebootOutput {
	return o
}

func (o RebootOutput) ToRebootOutputWithContext(ctx context.Context) RebootOutput {
	return o
}

func (o RebootOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v *Reboot) ActionPtrOutput { return v.Action }).(ActionPtrOutput)
}

// The type of action to initiate for the Droplet.
func (o RebootOutput) Type() TypeOutput {
	return o.ApplyT(func(v *Reboot) TypeOutput { return v.Type }).(TypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RebootInput)(nil)).Elem(), &Reboot{})
	pulumi.RegisterOutputType(RebootOutput{})
}
