// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the action that will be taken on the Droplet.
type PowerCycle struct {
	pulumi.CustomResourceState

	Action ActionPtrOutput `pulumi:"action"`
	// The type of action to initiate for the Droplet.
	Type PowerCycleTypeOutput `pulumi:"type"`
}

// NewPowerCycle registers a new resource with the given unique name, arguments, and options.
func NewPowerCycle(ctx *pulumi.Context,
	name string, args *PowerCycleArgs, opts ...pulumi.ResourceOption) (*PowerCycle, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PowerCycle
	err := ctx.RegisterResource("digitalocean-native:droplets/v2:PowerCycle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPowerCycle gets an existing PowerCycle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPowerCycle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PowerCycleState, opts ...pulumi.ResourceOption) (*PowerCycle, error) {
	var resource PowerCycle
	err := ctx.ReadResource("digitalocean-native:droplets/v2:PowerCycle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PowerCycle resources.
type powerCycleState struct {
}

type PowerCycleState struct {
}

func (PowerCycleState) ElementType() reflect.Type {
	return reflect.TypeOf((*powerCycleState)(nil)).Elem()
}

type powerCycleArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId *string `pulumi:"dropletId"`
	// The type of action to initiate for the Droplet.
	Type PowerCycleType `pulumi:"type"`
}

// The set of arguments for constructing a PowerCycle resource.
type PowerCycleArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId pulumi.StringPtrInput
	// The type of action to initiate for the Droplet.
	Type PowerCycleTypeInput
}

func (PowerCycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*powerCycleArgs)(nil)).Elem()
}

type PowerCycleInput interface {
	pulumi.Input

	ToPowerCycleOutput() PowerCycleOutput
	ToPowerCycleOutputWithContext(ctx context.Context) PowerCycleOutput
}

func (*PowerCycle) ElementType() reflect.Type {
	return reflect.TypeOf((**PowerCycle)(nil)).Elem()
}

func (i *PowerCycle) ToPowerCycleOutput() PowerCycleOutput {
	return i.ToPowerCycleOutputWithContext(context.Background())
}

func (i *PowerCycle) ToPowerCycleOutputWithContext(ctx context.Context) PowerCycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerCycleOutput)
}

type PowerCycleOutput struct{ *pulumi.OutputState }

func (PowerCycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PowerCycle)(nil)).Elem()
}

func (o PowerCycleOutput) ToPowerCycleOutput() PowerCycleOutput {
	return o
}

func (o PowerCycleOutput) ToPowerCycleOutputWithContext(ctx context.Context) PowerCycleOutput {
	return o
}

func (o PowerCycleOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v *PowerCycle) ActionPtrOutput { return v.Action }).(ActionPtrOutput)
}

// The type of action to initiate for the Droplet.
func (o PowerCycleOutput) Type() PowerCycleTypeOutput {
	return o.ApplyT(func(v *PowerCycle) PowerCycleTypeOutput { return v.Type }).(PowerCycleTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PowerCycleInput)(nil)).Elem(), &PowerCycle{})
	pulumi.RegisterOutputType(PowerCycleOutput{})
}
