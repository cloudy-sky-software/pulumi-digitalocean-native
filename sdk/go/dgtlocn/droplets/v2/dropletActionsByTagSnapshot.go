// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DropletActionsByTagSnapshot struct {
	pulumi.CustomResourceState

	Actions ActionArrayOutput `pulumi:"actions"`
	// The name to give the new snapshot of the Droplet.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The type of action to initiate for the Droplet.
	Type DropletActionTypePtrOutput `pulumi:"type"`
}

// NewDropletActionsByTagSnapshot registers a new resource with the given unique name, arguments, and options.
func NewDropletActionsByTagSnapshot(ctx *pulumi.Context,
	name string, args *DropletActionsByTagSnapshotArgs, opts ...pulumi.ResourceOption) (*DropletActionsByTagSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DropletActionsByTagSnapshot
	err := ctx.RegisterResource("digitalocean-native:droplets/v2:DropletActionsByTagSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDropletActionsByTagSnapshot gets an existing DropletActionsByTagSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDropletActionsByTagSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DropletActionsByTagSnapshotState, opts ...pulumi.ResourceOption) (*DropletActionsByTagSnapshot, error) {
	var resource DropletActionsByTagSnapshot
	err := ctx.ReadResource("digitalocean-native:droplets/v2:DropletActionsByTagSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DropletActionsByTagSnapshot resources.
type dropletActionsByTagSnapshotState struct {
}

type DropletActionsByTagSnapshotState struct {
}

func (DropletActionsByTagSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsByTagSnapshotState)(nil)).Elem()
}

type dropletActionsByTagSnapshotArgs struct {
	// The name to give the new snapshot of the Droplet.
	Name *string `pulumi:"name"`
	// The type of action to initiate for the Droplet.
	Type DropletActionType `pulumi:"type"`
}

// The set of arguments for constructing a DropletActionsByTagSnapshot resource.
type DropletActionsByTagSnapshotArgs struct {
	// The name to give the new snapshot of the Droplet.
	Name pulumi.StringPtrInput
	// The type of action to initiate for the Droplet.
	Type DropletActionTypeInput
}

func (DropletActionsByTagSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsByTagSnapshotArgs)(nil)).Elem()
}

type DropletActionsByTagSnapshotInput interface {
	pulumi.Input

	ToDropletActionsByTagSnapshotOutput() DropletActionsByTagSnapshotOutput
	ToDropletActionsByTagSnapshotOutputWithContext(ctx context.Context) DropletActionsByTagSnapshotOutput
}

func (*DropletActionsByTagSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsByTagSnapshot)(nil)).Elem()
}

func (i *DropletActionsByTagSnapshot) ToDropletActionsByTagSnapshotOutput() DropletActionsByTagSnapshotOutput {
	return i.ToDropletActionsByTagSnapshotOutputWithContext(context.Background())
}

func (i *DropletActionsByTagSnapshot) ToDropletActionsByTagSnapshotOutputWithContext(ctx context.Context) DropletActionsByTagSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropletActionsByTagSnapshotOutput)
}

type DropletActionsByTagSnapshotOutput struct{ *pulumi.OutputState }

func (DropletActionsByTagSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsByTagSnapshot)(nil)).Elem()
}

func (o DropletActionsByTagSnapshotOutput) ToDropletActionsByTagSnapshotOutput() DropletActionsByTagSnapshotOutput {
	return o
}

func (o DropletActionsByTagSnapshotOutput) ToDropletActionsByTagSnapshotOutputWithContext(ctx context.Context) DropletActionsByTagSnapshotOutput {
	return o
}

func (o DropletActionsByTagSnapshotOutput) Actions() ActionArrayOutput {
	return o.ApplyT(func(v *DropletActionsByTagSnapshot) ActionArrayOutput { return v.Actions }).(ActionArrayOutput)
}

// The name to give the new snapshot of the Droplet.
func (o DropletActionsByTagSnapshotOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DropletActionsByTagSnapshot) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of action to initiate for the Droplet.
func (o DropletActionsByTagSnapshotOutput) Type() DropletActionTypePtrOutput {
	return o.ApplyT(func(v *DropletActionsByTagSnapshot) DropletActionTypePtrOutput { return v.Type }).(DropletActionTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DropletActionsByTagSnapshotInput)(nil)).Elem(), &DropletActionsByTagSnapshot{})
	pulumi.RegisterOutputType(DropletActionsByTagSnapshotOutput{})
}
