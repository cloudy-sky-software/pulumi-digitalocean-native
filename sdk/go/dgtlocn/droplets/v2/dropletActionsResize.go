// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DropletActionsResize struct {
	pulumi.CustomResourceState

	Action ActionPtrOutput `pulumi:"action"`
	// When `true`, the Droplet's disk will be resized in addition to its RAM and CPU. This is a permanent change and cannot be reversed as a Droplet's disk size cannot be decreased.
	Disk pulumi.BoolPtrOutput `pulumi:"disk"`
	// The slug identifier for the size to which you wish to resize the Droplet.
	Size pulumi.StringPtrOutput `pulumi:"size"`
	// The type of action to initiate for the Droplet.
	Type DropletActionTypePtrOutput `pulumi:"type"`
}

// NewDropletActionsResize registers a new resource with the given unique name, arguments, and options.
func NewDropletActionsResize(ctx *pulumi.Context,
	name string, args *DropletActionsResizeArgs, opts ...pulumi.ResourceOption) (*DropletActionsResize, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DropletActionsResize
	err := ctx.RegisterResource("digitalocean-native:droplets/v2:DropletActionsResize", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDropletActionsResize gets an existing DropletActionsResize resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDropletActionsResize(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DropletActionsResizeState, opts ...pulumi.ResourceOption) (*DropletActionsResize, error) {
	var resource DropletActionsResize
	err := ctx.ReadResource("digitalocean-native:droplets/v2:DropletActionsResize", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DropletActionsResize resources.
type dropletActionsResizeState struct {
}

type DropletActionsResizeState struct {
}

func (DropletActionsResizeState) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsResizeState)(nil)).Elem()
}

type dropletActionsResizeArgs struct {
	// When `true`, the Droplet's disk will be resized in addition to its RAM and CPU. This is a permanent change and cannot be reversed as a Droplet's disk size cannot be decreased.
	Disk *bool `pulumi:"disk"`
	// A unique identifier for a Droplet instance.
	DropletId *string `pulumi:"dropletId"`
	// The slug identifier for the size to which you wish to resize the Droplet.
	Size *string `pulumi:"size"`
	// The type of action to initiate for the Droplet.
	Type DropletActionType `pulumi:"type"`
}

// The set of arguments for constructing a DropletActionsResize resource.
type DropletActionsResizeArgs struct {
	// When `true`, the Droplet's disk will be resized in addition to its RAM and CPU. This is a permanent change and cannot be reversed as a Droplet's disk size cannot be decreased.
	Disk pulumi.BoolPtrInput
	// A unique identifier for a Droplet instance.
	DropletId pulumi.StringPtrInput
	// The slug identifier for the size to which you wish to resize the Droplet.
	Size pulumi.StringPtrInput
	// The type of action to initiate for the Droplet.
	Type DropletActionTypeInput
}

func (DropletActionsResizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsResizeArgs)(nil)).Elem()
}

type DropletActionsResizeInput interface {
	pulumi.Input

	ToDropletActionsResizeOutput() DropletActionsResizeOutput
	ToDropletActionsResizeOutputWithContext(ctx context.Context) DropletActionsResizeOutput
}

func (*DropletActionsResize) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsResize)(nil)).Elem()
}

func (i *DropletActionsResize) ToDropletActionsResizeOutput() DropletActionsResizeOutput {
	return i.ToDropletActionsResizeOutputWithContext(context.Background())
}

func (i *DropletActionsResize) ToDropletActionsResizeOutputWithContext(ctx context.Context) DropletActionsResizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropletActionsResizeOutput)
}

type DropletActionsResizeOutput struct{ *pulumi.OutputState }

func (DropletActionsResizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsResize)(nil)).Elem()
}

func (o DropletActionsResizeOutput) ToDropletActionsResizeOutput() DropletActionsResizeOutput {
	return o
}

func (o DropletActionsResizeOutput) ToDropletActionsResizeOutputWithContext(ctx context.Context) DropletActionsResizeOutput {
	return o
}

func (o DropletActionsResizeOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v *DropletActionsResize) ActionPtrOutput { return v.Action }).(ActionPtrOutput)
}

// When `true`, the Droplet's disk will be resized in addition to its RAM and CPU. This is a permanent change and cannot be reversed as a Droplet's disk size cannot be decreased.
func (o DropletActionsResizeOutput) Disk() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DropletActionsResize) pulumi.BoolPtrOutput { return v.Disk }).(pulumi.BoolPtrOutput)
}

// The slug identifier for the size to which you wish to resize the Droplet.
func (o DropletActionsResizeOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DropletActionsResize) pulumi.StringPtrOutput { return v.Size }).(pulumi.StringPtrOutput)
}

// The type of action to initiate for the Droplet.
func (o DropletActionsResizeOutput) Type() DropletActionTypePtrOutput {
	return o.ApplyT(func(v *DropletActionsResize) DropletActionTypePtrOutput { return v.Type }).(DropletActionTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DropletActionsResizeInput)(nil)).Elem(), &DropletActionsResize{})
	pulumi.RegisterOutputType(DropletActionsResizeOutput{})
}
