// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the action that will be taken on the Droplet.
type DropletActionsPowerOff struct {
	pulumi.CustomResourceState

	Action ActionPtrOutput `pulumi:"action"`
	// The type of action to initiate for the Droplet.
	Type TypeOutput `pulumi:"type"`
}

// NewDropletActionsPowerOff registers a new resource with the given unique name, arguments, and options.
func NewDropletActionsPowerOff(ctx *pulumi.Context,
	name string, args *DropletActionsPowerOffArgs, opts ...pulumi.ResourceOption) (*DropletActionsPowerOff, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DropletActionsPowerOff
	err := ctx.RegisterResource("digitalocean-native:droplets/v2:DropletActionsPowerOff", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDropletActionsPowerOff gets an existing DropletActionsPowerOff resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDropletActionsPowerOff(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DropletActionsPowerOffState, opts ...pulumi.ResourceOption) (*DropletActionsPowerOff, error) {
	var resource DropletActionsPowerOff
	err := ctx.ReadResource("digitalocean-native:droplets/v2:DropletActionsPowerOff", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DropletActionsPowerOff resources.
type dropletActionsPowerOffState struct {
}

type DropletActionsPowerOffState struct {
}

func (DropletActionsPowerOffState) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsPowerOffState)(nil)).Elem()
}

type dropletActionsPowerOffArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId *string `pulumi:"dropletId"`
	// The type of action to initiate for the Droplet.
	Type Type `pulumi:"type"`
}

// The set of arguments for constructing a DropletActionsPowerOff resource.
type DropletActionsPowerOffArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId pulumi.StringPtrInput
	// The type of action to initiate for the Droplet.
	Type TypeInput
}

func (DropletActionsPowerOffArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsPowerOffArgs)(nil)).Elem()
}

type DropletActionsPowerOffInput interface {
	pulumi.Input

	ToDropletActionsPowerOffOutput() DropletActionsPowerOffOutput
	ToDropletActionsPowerOffOutputWithContext(ctx context.Context) DropletActionsPowerOffOutput
}

func (*DropletActionsPowerOff) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsPowerOff)(nil)).Elem()
}

func (i *DropletActionsPowerOff) ToDropletActionsPowerOffOutput() DropletActionsPowerOffOutput {
	return i.ToDropletActionsPowerOffOutputWithContext(context.Background())
}

func (i *DropletActionsPowerOff) ToDropletActionsPowerOffOutputWithContext(ctx context.Context) DropletActionsPowerOffOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropletActionsPowerOffOutput)
}

type DropletActionsPowerOffOutput struct{ *pulumi.OutputState }

func (DropletActionsPowerOffOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsPowerOff)(nil)).Elem()
}

func (o DropletActionsPowerOffOutput) ToDropletActionsPowerOffOutput() DropletActionsPowerOffOutput {
	return o
}

func (o DropletActionsPowerOffOutput) ToDropletActionsPowerOffOutputWithContext(ctx context.Context) DropletActionsPowerOffOutput {
	return o
}

func (o DropletActionsPowerOffOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v *DropletActionsPowerOff) ActionPtrOutput { return v.Action }).(ActionPtrOutput)
}

// The type of action to initiate for the Droplet.
func (o DropletActionsPowerOffOutput) Type() TypeOutput {
	return o.ApplyT(func(v *DropletActionsPowerOff) TypeOutput { return v.Type }).(TypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DropletActionsPowerOffInput)(nil)).Elem(), &DropletActionsPowerOff{})
	pulumi.RegisterOutputType(DropletActionsPowerOffOutput{})
}
