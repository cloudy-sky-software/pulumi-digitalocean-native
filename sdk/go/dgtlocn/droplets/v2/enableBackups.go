// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the action that will be taken on the Droplet.
type EnableBackups struct {
	pulumi.CustomResourceState

	Action ActionPtrOutput `pulumi:"action"`
	// The type of action to initiate for the Droplet.
	Type TypeOutput `pulumi:"type"`
}

// NewEnableBackups registers a new resource with the given unique name, arguments, and options.
func NewEnableBackups(ctx *pulumi.Context,
	name string, args *EnableBackupsArgs, opts ...pulumi.ResourceOption) (*EnableBackups, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnableBackups
	err := ctx.RegisterResource("digitalocean-native:droplets/v2:EnableBackups", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnableBackups gets an existing EnableBackups resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnableBackups(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnableBackupsState, opts ...pulumi.ResourceOption) (*EnableBackups, error) {
	var resource EnableBackups
	err := ctx.ReadResource("digitalocean-native:droplets/v2:EnableBackups", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnableBackups resources.
type enableBackupsState struct {
}

type EnableBackupsState struct {
}

func (EnableBackupsState) ElementType() reflect.Type {
	return reflect.TypeOf((*enableBackupsState)(nil)).Elem()
}

type enableBackupsArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId *string `pulumi:"dropletId"`
	// The type of action to initiate for the Droplet.
	Type Type `pulumi:"type"`
}

// The set of arguments for constructing a EnableBackups resource.
type EnableBackupsArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId pulumi.StringPtrInput
	// The type of action to initiate for the Droplet.
	Type TypeInput
}

func (EnableBackupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enableBackupsArgs)(nil)).Elem()
}

type EnableBackupsInput interface {
	pulumi.Input

	ToEnableBackupsOutput() EnableBackupsOutput
	ToEnableBackupsOutputWithContext(ctx context.Context) EnableBackupsOutput
}

func (*EnableBackups) ElementType() reflect.Type {
	return reflect.TypeOf((**EnableBackups)(nil)).Elem()
}

func (i *EnableBackups) ToEnableBackupsOutput() EnableBackupsOutput {
	return i.ToEnableBackupsOutputWithContext(context.Background())
}

func (i *EnableBackups) ToEnableBackupsOutputWithContext(ctx context.Context) EnableBackupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnableBackupsOutput)
}

type EnableBackupsOutput struct{ *pulumi.OutputState }

func (EnableBackupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnableBackups)(nil)).Elem()
}

func (o EnableBackupsOutput) ToEnableBackupsOutput() EnableBackupsOutput {
	return o
}

func (o EnableBackupsOutput) ToEnableBackupsOutputWithContext(ctx context.Context) EnableBackupsOutput {
	return o
}

func (o EnableBackupsOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v *EnableBackups) ActionPtrOutput { return v.Action }).(ActionPtrOutput)
}

// The type of action to initiate for the Droplet.
func (o EnableBackupsOutput) Type() TypeOutput {
	return o.ApplyT(func(v *EnableBackups) TypeOutput { return v.Type }).(TypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnableBackupsInput)(nil)).Elem(), &EnableBackups{})
	pulumi.RegisterOutputType(EnableBackupsOutput{})
}
