// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the action that will be taken on the Droplet.
type DropletActionsEnableBackups struct {
	pulumi.CustomResourceState

	Action ActionPtrOutput `pulumi:"action"`
	// The type of action to initiate for the Droplet.
	Type TypeOutput `pulumi:"type"`
}

// NewDropletActionsEnableBackups registers a new resource with the given unique name, arguments, and options.
func NewDropletActionsEnableBackups(ctx *pulumi.Context,
	name string, args *DropletActionsEnableBackupsArgs, opts ...pulumi.ResourceOption) (*DropletActionsEnableBackups, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DropletActionsEnableBackups
	err := ctx.RegisterResource("digitalocean-native:droplets/v2:DropletActionsEnableBackups", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDropletActionsEnableBackups gets an existing DropletActionsEnableBackups resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDropletActionsEnableBackups(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DropletActionsEnableBackupsState, opts ...pulumi.ResourceOption) (*DropletActionsEnableBackups, error) {
	var resource DropletActionsEnableBackups
	err := ctx.ReadResource("digitalocean-native:droplets/v2:DropletActionsEnableBackups", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DropletActionsEnableBackups resources.
type dropletActionsEnableBackupsState struct {
}

type DropletActionsEnableBackupsState struct {
}

func (DropletActionsEnableBackupsState) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsEnableBackupsState)(nil)).Elem()
}

type dropletActionsEnableBackupsArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId *string `pulumi:"dropletId"`
	// The type of action to initiate for the Droplet.
	Type Type `pulumi:"type"`
}

// The set of arguments for constructing a DropletActionsEnableBackups resource.
type DropletActionsEnableBackupsArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId pulumi.StringPtrInput
	// The type of action to initiate for the Droplet.
	Type TypeInput
}

func (DropletActionsEnableBackupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsEnableBackupsArgs)(nil)).Elem()
}

type DropletActionsEnableBackupsInput interface {
	pulumi.Input

	ToDropletActionsEnableBackupsOutput() DropletActionsEnableBackupsOutput
	ToDropletActionsEnableBackupsOutputWithContext(ctx context.Context) DropletActionsEnableBackupsOutput
}

func (*DropletActionsEnableBackups) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsEnableBackups)(nil)).Elem()
}

func (i *DropletActionsEnableBackups) ToDropletActionsEnableBackupsOutput() DropletActionsEnableBackupsOutput {
	return i.ToDropletActionsEnableBackupsOutputWithContext(context.Background())
}

func (i *DropletActionsEnableBackups) ToDropletActionsEnableBackupsOutputWithContext(ctx context.Context) DropletActionsEnableBackupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropletActionsEnableBackupsOutput)
}

type DropletActionsEnableBackupsOutput struct{ *pulumi.OutputState }

func (DropletActionsEnableBackupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsEnableBackups)(nil)).Elem()
}

func (o DropletActionsEnableBackupsOutput) ToDropletActionsEnableBackupsOutput() DropletActionsEnableBackupsOutput {
	return o
}

func (o DropletActionsEnableBackupsOutput) ToDropletActionsEnableBackupsOutputWithContext(ctx context.Context) DropletActionsEnableBackupsOutput {
	return o
}

func (o DropletActionsEnableBackupsOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v *DropletActionsEnableBackups) ActionPtrOutput { return v.Action }).(ActionPtrOutput)
}

// The type of action to initiate for the Droplet.
func (o DropletActionsEnableBackupsOutput) Type() TypeOutput {
	return o.ApplyT(func(v *DropletActionsEnableBackups) TypeOutput { return v.Type }).(TypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DropletActionsEnableBackupsInput)(nil)).Elem(), &DropletActionsEnableBackups{})
	pulumi.RegisterOutputType(DropletActionsEnableBackupsOutput{})
}
