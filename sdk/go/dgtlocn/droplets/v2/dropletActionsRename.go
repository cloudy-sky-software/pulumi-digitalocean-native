// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DropletActionsRename struct {
	pulumi.CustomResourceState

	Action ActionPtrOutput `pulumi:"action"`
	// The new name for the Droplet.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The type of action to initiate for the Droplet.
	Type DropletActionTypePtrOutput `pulumi:"type"`
}

// NewDropletActionsRename registers a new resource with the given unique name, arguments, and options.
func NewDropletActionsRename(ctx *pulumi.Context,
	name string, args *DropletActionsRenameArgs, opts ...pulumi.ResourceOption) (*DropletActionsRename, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DropletActionsRename
	err := ctx.RegisterResource("digitalocean-native:droplets/v2:DropletActionsRename", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDropletActionsRename gets an existing DropletActionsRename resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDropletActionsRename(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DropletActionsRenameState, opts ...pulumi.ResourceOption) (*DropletActionsRename, error) {
	var resource DropletActionsRename
	err := ctx.ReadResource("digitalocean-native:droplets/v2:DropletActionsRename", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DropletActionsRename resources.
type dropletActionsRenameState struct {
}

type DropletActionsRenameState struct {
}

func (DropletActionsRenameState) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsRenameState)(nil)).Elem()
}

type dropletActionsRenameArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId *string `pulumi:"dropletId"`
	// The new name for the Droplet.
	Name *string `pulumi:"name"`
	// The type of action to initiate for the Droplet.
	Type DropletActionType `pulumi:"type"`
}

// The set of arguments for constructing a DropletActionsRename resource.
type DropletActionsRenameArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId pulumi.StringPtrInput
	// The new name for the Droplet.
	Name pulumi.StringPtrInput
	// The type of action to initiate for the Droplet.
	Type DropletActionTypeInput
}

func (DropletActionsRenameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsRenameArgs)(nil)).Elem()
}

type DropletActionsRenameInput interface {
	pulumi.Input

	ToDropletActionsRenameOutput() DropletActionsRenameOutput
	ToDropletActionsRenameOutputWithContext(ctx context.Context) DropletActionsRenameOutput
}

func (*DropletActionsRename) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsRename)(nil)).Elem()
}

func (i *DropletActionsRename) ToDropletActionsRenameOutput() DropletActionsRenameOutput {
	return i.ToDropletActionsRenameOutputWithContext(context.Background())
}

func (i *DropletActionsRename) ToDropletActionsRenameOutputWithContext(ctx context.Context) DropletActionsRenameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropletActionsRenameOutput)
}

type DropletActionsRenameOutput struct{ *pulumi.OutputState }

func (DropletActionsRenameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsRename)(nil)).Elem()
}

func (o DropletActionsRenameOutput) ToDropletActionsRenameOutput() DropletActionsRenameOutput {
	return o
}

func (o DropletActionsRenameOutput) ToDropletActionsRenameOutputWithContext(ctx context.Context) DropletActionsRenameOutput {
	return o
}

func (o DropletActionsRenameOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v *DropletActionsRename) ActionPtrOutput { return v.Action }).(ActionPtrOutput)
}

// The new name for the Droplet.
func (o DropletActionsRenameOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DropletActionsRename) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of action to initiate for the Droplet.
func (o DropletActionsRenameOutput) Type() DropletActionTypePtrOutput {
	return o.ApplyT(func(v *DropletActionsRename) DropletActionTypePtrOutput { return v.Type }).(DropletActionTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DropletActionsRenameInput)(nil)).Elem(), &DropletActionsRename{})
	pulumi.RegisterOutputType(DropletActionsRenameOutput{})
}
