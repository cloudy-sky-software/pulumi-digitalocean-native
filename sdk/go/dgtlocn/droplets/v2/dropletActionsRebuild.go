// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DropletActionsRebuild struct {
	pulumi.CustomResourceState

	Action ActionPtrOutput `pulumi:"action"`
	// The image ID of a public or private image or the slug identifier for a public image. The Droplet will be rebuilt using this image as its base.
	Image pulumi.AnyOutput `pulumi:"image"`
	// The type of action to initiate for the Droplet.
	Type DropletActionTypePtrOutput `pulumi:"type"`
}

// NewDropletActionsRebuild registers a new resource with the given unique name, arguments, and options.
func NewDropletActionsRebuild(ctx *pulumi.Context,
	name string, args *DropletActionsRebuildArgs, opts ...pulumi.ResourceOption) (*DropletActionsRebuild, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DropletActionsRebuild
	err := ctx.RegisterResource("digitalocean-native:droplets/v2:DropletActionsRebuild", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDropletActionsRebuild gets an existing DropletActionsRebuild resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDropletActionsRebuild(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DropletActionsRebuildState, opts ...pulumi.ResourceOption) (*DropletActionsRebuild, error) {
	var resource DropletActionsRebuild
	err := ctx.ReadResource("digitalocean-native:droplets/v2:DropletActionsRebuild", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DropletActionsRebuild resources.
type dropletActionsRebuildState struct {
}

type DropletActionsRebuildState struct {
}

func (DropletActionsRebuildState) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsRebuildState)(nil)).Elem()
}

type dropletActionsRebuildArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId *string `pulumi:"dropletId"`
	// The image ID of a public or private image or the slug identifier for a public image. The Droplet will be rebuilt using this image as its base.
	Image interface{} `pulumi:"image"`
	// The type of action to initiate for the Droplet.
	Type DropletActionType `pulumi:"type"`
}

// The set of arguments for constructing a DropletActionsRebuild resource.
type DropletActionsRebuildArgs struct {
	// A unique identifier for a Droplet instance.
	DropletId pulumi.StringPtrInput
	// The image ID of a public or private image or the slug identifier for a public image. The Droplet will be rebuilt using this image as its base.
	Image pulumi.Input
	// The type of action to initiate for the Droplet.
	Type DropletActionTypeInput
}

func (DropletActionsRebuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletActionsRebuildArgs)(nil)).Elem()
}

type DropletActionsRebuildInput interface {
	pulumi.Input

	ToDropletActionsRebuildOutput() DropletActionsRebuildOutput
	ToDropletActionsRebuildOutputWithContext(ctx context.Context) DropletActionsRebuildOutput
}

func (*DropletActionsRebuild) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsRebuild)(nil)).Elem()
}

func (i *DropletActionsRebuild) ToDropletActionsRebuildOutput() DropletActionsRebuildOutput {
	return i.ToDropletActionsRebuildOutputWithContext(context.Background())
}

func (i *DropletActionsRebuild) ToDropletActionsRebuildOutputWithContext(ctx context.Context) DropletActionsRebuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropletActionsRebuildOutput)
}

type DropletActionsRebuildOutput struct{ *pulumi.OutputState }

func (DropletActionsRebuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletActionsRebuild)(nil)).Elem()
}

func (o DropletActionsRebuildOutput) ToDropletActionsRebuildOutput() DropletActionsRebuildOutput {
	return o
}

func (o DropletActionsRebuildOutput) ToDropletActionsRebuildOutputWithContext(ctx context.Context) DropletActionsRebuildOutput {
	return o
}

func (o DropletActionsRebuildOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v *DropletActionsRebuild) ActionPtrOutput { return v.Action }).(ActionPtrOutput)
}

// The image ID of a public or private image or the slug identifier for a public image. The Droplet will be rebuilt using this image as its base.
func (o DropletActionsRebuildOutput) Image() pulumi.AnyOutput {
	return o.ApplyT(func(v *DropletActionsRebuild) pulumi.AnyOutput { return v.Image }).(pulumi.AnyOutput)
}

// The type of action to initiate for the Droplet.
func (o DropletActionsRebuildOutput) Type() DropletActionTypePtrOutput {
	return o.ApplyT(func(v *DropletActionsRebuild) DropletActionTypePtrOutput { return v.Type }).(DropletActionTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DropletActionsRebuildInput)(nil)).Elem(), &DropletActionsRebuild{})
	pulumi.RegisterOutputType(DropletActionsRebuildOutput{})
}
