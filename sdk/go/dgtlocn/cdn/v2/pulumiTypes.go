// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CdnEndpointType struct {
	// The ID of a DigitalOcean managed TLS certificate used for SSL when a custom subdomain is provided.
	CertificateId *string `pulumi:"certificateId"`
	// A time value given in ISO8601 combined date and time format that represents when the CDN endpoint was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The fully qualified domain name (FQDN) of the custom subdomain used with the CDN endpoint.
	CustomDomain *string `pulumi:"customDomain"`
	// The fully qualified domain name (FQDN) from which the CDN-backed content is served.
	Endpoint *string `pulumi:"endpoint"`
	// A unique ID that can be used to identify and reference a CDN endpoint.
	Id *string `pulumi:"id"`
	// The fully qualified domain name (FQDN) for the origin server which provides the content for the CDN. This is currently restricted to a Space.
	Origin string `pulumi:"origin"`
	// The amount of time the content is cached by the CDN's edge servers in seconds. TTL must be one of 60, 600, 3600, 86400, or 604800. Defaults to 3600 (one hour) when excluded.
	Ttl *CdnEndpointTtl `pulumi:"ttl"`
}

// Defaults sets the appropriate defaults for CdnEndpointType
func (val *CdnEndpointType) Defaults() *CdnEndpointType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Ttl == nil {
		ttl_ := CdnEndpointTtl(3600)
		tmp.Ttl = &ttl_
	}
	return &tmp
}

type CdnEndpointTypeOutput struct{ *pulumi.OutputState }

func (CdnEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CdnEndpointType)(nil)).Elem()
}

func (o CdnEndpointTypeOutput) ToCdnEndpointTypeOutput() CdnEndpointTypeOutput {
	return o
}

func (o CdnEndpointTypeOutput) ToCdnEndpointTypeOutputWithContext(ctx context.Context) CdnEndpointTypeOutput {
	return o
}

// The ID of a DigitalOcean managed TLS certificate used for SSL when a custom subdomain is provided.
func (o CdnEndpointTypeOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CdnEndpointType) *string { return v.CertificateId }).(pulumi.StringPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the CDN endpoint was created.
func (o CdnEndpointTypeOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CdnEndpointType) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The fully qualified domain name (FQDN) of the custom subdomain used with the CDN endpoint.
func (o CdnEndpointTypeOutput) CustomDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CdnEndpointType) *string { return v.CustomDomain }).(pulumi.StringPtrOutput)
}

// The fully qualified domain name (FQDN) from which the CDN-backed content is served.
func (o CdnEndpointTypeOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CdnEndpointType) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// A unique ID that can be used to identify and reference a CDN endpoint.
func (o CdnEndpointTypeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CdnEndpointType) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The fully qualified domain name (FQDN) for the origin server which provides the content for the CDN. This is currently restricted to a Space.
func (o CdnEndpointTypeOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v CdnEndpointType) string { return v.Origin }).(pulumi.StringOutput)
}

// The amount of time the content is cached by the CDN's edge servers in seconds. TTL must be one of 60, 600, 3600, 86400, or 604800. Defaults to 3600 (one hour) when excluded.
func (o CdnEndpointTypeOutput) Ttl() CdnEndpointTtlPtrOutput {
	return o.ApplyT(func(v CdnEndpointType) *CdnEndpointTtl { return v.Ttl }).(CdnEndpointTtlPtrOutput)
}

type CdnEndpointTypePtrOutput struct{ *pulumi.OutputState }

func (CdnEndpointTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnEndpointType)(nil)).Elem()
}

func (o CdnEndpointTypePtrOutput) ToCdnEndpointTypePtrOutput() CdnEndpointTypePtrOutput {
	return o
}

func (o CdnEndpointTypePtrOutput) ToCdnEndpointTypePtrOutputWithContext(ctx context.Context) CdnEndpointTypePtrOutput {
	return o
}

func (o CdnEndpointTypePtrOutput) Elem() CdnEndpointTypeOutput {
	return o.ApplyT(func(v *CdnEndpointType) CdnEndpointType {
		if v != nil {
			return *v
		}
		var ret CdnEndpointType
		return ret
	}).(CdnEndpointTypeOutput)
}

// The ID of a DigitalOcean managed TLS certificate used for SSL when a custom subdomain is provided.
func (o CdnEndpointTypePtrOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CdnEndpointType) *string {
		if v == nil {
			return nil
		}
		return v.CertificateId
	}).(pulumi.StringPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the CDN endpoint was created.
func (o CdnEndpointTypePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CdnEndpointType) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// The fully qualified domain name (FQDN) of the custom subdomain used with the CDN endpoint.
func (o CdnEndpointTypePtrOutput) CustomDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CdnEndpointType) *string {
		if v == nil {
			return nil
		}
		return v.CustomDomain
	}).(pulumi.StringPtrOutput)
}

// The fully qualified domain name (FQDN) from which the CDN-backed content is served.
func (o CdnEndpointTypePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CdnEndpointType) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// A unique ID that can be used to identify and reference a CDN endpoint.
func (o CdnEndpointTypePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CdnEndpointType) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The fully qualified domain name (FQDN) for the origin server which provides the content for the CDN. This is currently restricted to a Space.
func (o CdnEndpointTypePtrOutput) Origin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CdnEndpointType) *string {
		if v == nil {
			return nil
		}
		return &v.Origin
	}).(pulumi.StringPtrOutput)
}

// The amount of time the content is cached by the CDN's edge servers in seconds. TTL must be one of 60, 600, 3600, 86400, or 604800. Defaults to 3600 (one hour) when excluded.
func (o CdnEndpointTypePtrOutput) Ttl() CdnEndpointTtlPtrOutput {
	return o.ApplyT(func(v *CdnEndpointType) *CdnEndpointTtl {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(CdnEndpointTtlPtrOutput)
}

type CdnEndpointTypeArrayOutput struct{ *pulumi.OutputState }

func (CdnEndpointTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CdnEndpointType)(nil)).Elem()
}

func (o CdnEndpointTypeArrayOutput) ToCdnEndpointTypeArrayOutput() CdnEndpointTypeArrayOutput {
	return o
}

func (o CdnEndpointTypeArrayOutput) ToCdnEndpointTypeArrayOutputWithContext(ctx context.Context) CdnEndpointTypeArrayOutput {
	return o
}

func (o CdnEndpointTypeArrayOutput) Index(i pulumi.IntInput) CdnEndpointTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CdnEndpointType {
		return vs[0].([]CdnEndpointType)[vs[1].(int)]
	}).(CdnEndpointTypeOutput)
}

type GetCdnEndpointProperties struct {
	Endpoint *CdnEndpointType `pulumi:"endpoint"`
}

// Defaults sets the appropriate defaults for GetCdnEndpointProperties
func (val *GetCdnEndpointProperties) Defaults() *GetCdnEndpointProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Endpoint = tmp.Endpoint.Defaults()

	return &tmp
}

type GetCdnEndpointPropertiesOutput struct{ *pulumi.OutputState }

func (GetCdnEndpointPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCdnEndpointProperties)(nil)).Elem()
}

func (o GetCdnEndpointPropertiesOutput) ToGetCdnEndpointPropertiesOutput() GetCdnEndpointPropertiesOutput {
	return o
}

func (o GetCdnEndpointPropertiesOutput) ToGetCdnEndpointPropertiesOutputWithContext(ctx context.Context) GetCdnEndpointPropertiesOutput {
	return o
}

func (o GetCdnEndpointPropertiesOutput) Endpoint() CdnEndpointTypePtrOutput {
	return o.ApplyT(func(v GetCdnEndpointProperties) *CdnEndpointType { return v.Endpoint }).(CdnEndpointTypePtrOutput)
}

type ListCdnEndpointsItems struct {
	Endpoints []CdnEndpointType `pulumi:"endpoints"`
	Links     *PageLinks        `pulumi:"links"`
	Meta      MetaMeta          `pulumi:"meta"`
}

type ListCdnEndpointsItemsOutput struct{ *pulumi.OutputState }

func (ListCdnEndpointsItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListCdnEndpointsItems)(nil)).Elem()
}

func (o ListCdnEndpointsItemsOutput) ToListCdnEndpointsItemsOutput() ListCdnEndpointsItemsOutput {
	return o
}

func (o ListCdnEndpointsItemsOutput) ToListCdnEndpointsItemsOutputWithContext(ctx context.Context) ListCdnEndpointsItemsOutput {
	return o
}

func (o ListCdnEndpointsItemsOutput) Endpoints() CdnEndpointTypeArrayOutput {
	return o.ApplyT(func(v ListCdnEndpointsItems) []CdnEndpointType { return v.Endpoints }).(CdnEndpointTypeArrayOutput)
}

func (o ListCdnEndpointsItemsOutput) Links() PageLinksPtrOutput {
	return o.ApplyT(func(v ListCdnEndpointsItems) *PageLinks { return v.Links }).(PageLinksPtrOutput)
}

func (o ListCdnEndpointsItemsOutput) Meta() MetaMetaOutput {
	return o.ApplyT(func(v ListCdnEndpointsItems) MetaMeta { return v.Meta }).(MetaMetaOutput)
}

type MetaMeta struct {
	// Number of objects returned by the request.
	Total *int `pulumi:"total"`
}

type MetaMetaOutput struct{ *pulumi.OutputState }

func (MetaMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetaMeta)(nil)).Elem()
}

func (o MetaMetaOutput) ToMetaMetaOutput() MetaMetaOutput {
	return o
}

func (o MetaMetaOutput) ToMetaMetaOutputWithContext(ctx context.Context) MetaMetaOutput {
	return o
}

// Number of objects returned by the request.
func (o MetaMetaOutput) Total() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetaMeta) *int { return v.Total }).(pulumi.IntPtrOutput)
}

type PageLinks struct {
	Pages *PageLinksPagesProperties `pulumi:"pages"`
}

type PageLinksOutput struct{ *pulumi.OutputState }

func (PageLinksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PageLinks)(nil)).Elem()
}

func (o PageLinksOutput) ToPageLinksOutput() PageLinksOutput {
	return o
}

func (o PageLinksOutput) ToPageLinksOutputWithContext(ctx context.Context) PageLinksOutput {
	return o
}

func (o PageLinksOutput) Pages() PageLinksPagesPropertiesPtrOutput {
	return o.ApplyT(func(v PageLinks) *PageLinksPagesProperties { return v.Pages }).(PageLinksPagesPropertiesPtrOutput)
}

type PageLinksPtrOutput struct{ *pulumi.OutputState }

func (PageLinksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PageLinks)(nil)).Elem()
}

func (o PageLinksPtrOutput) ToPageLinksPtrOutput() PageLinksPtrOutput {
	return o
}

func (o PageLinksPtrOutput) ToPageLinksPtrOutputWithContext(ctx context.Context) PageLinksPtrOutput {
	return o
}

func (o PageLinksPtrOutput) Elem() PageLinksOutput {
	return o.ApplyT(func(v *PageLinks) PageLinks {
		if v != nil {
			return *v
		}
		var ret PageLinks
		return ret
	}).(PageLinksOutput)
}

func (o PageLinksPtrOutput) Pages() PageLinksPagesPropertiesPtrOutput {
	return o.ApplyT(func(v *PageLinks) *PageLinksPagesProperties {
		if v == nil {
			return nil
		}
		return v.Pages
	}).(PageLinksPagesPropertiesPtrOutput)
}

type PageLinksPagesProperties struct {
	First *string `pulumi:"first"`
	Last  *string `pulumi:"last"`
	Next  *string `pulumi:"next"`
	Prev  *string `pulumi:"prev"`
}

type PageLinksPagesPropertiesOutput struct{ *pulumi.OutputState }

func (PageLinksPagesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PageLinksPagesProperties)(nil)).Elem()
}

func (o PageLinksPagesPropertiesOutput) ToPageLinksPagesPropertiesOutput() PageLinksPagesPropertiesOutput {
	return o
}

func (o PageLinksPagesPropertiesOutput) ToPageLinksPagesPropertiesOutputWithContext(ctx context.Context) PageLinksPagesPropertiesOutput {
	return o
}

func (o PageLinksPagesPropertiesOutput) First() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.First }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Last() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Last }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Next() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Next }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Prev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Prev }).(pulumi.StringPtrOutput)
}

type PageLinksPagesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PageLinksPagesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PageLinksPagesProperties)(nil)).Elem()
}

func (o PageLinksPagesPropertiesPtrOutput) ToPageLinksPagesPropertiesPtrOutput() PageLinksPagesPropertiesPtrOutput {
	return o
}

func (o PageLinksPagesPropertiesPtrOutput) ToPageLinksPagesPropertiesPtrOutputWithContext(ctx context.Context) PageLinksPagesPropertiesPtrOutput {
	return o
}

func (o PageLinksPagesPropertiesPtrOutput) Elem() PageLinksPagesPropertiesOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) PageLinksPagesProperties {
		if v != nil {
			return *v
		}
		var ret PageLinksPagesProperties
		return ret
	}).(PageLinksPagesPropertiesOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) First() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.First
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Last() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Last
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Next() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Next
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Prev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Prev
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CdnEndpointTypeOutput{})
	pulumi.RegisterOutputType(CdnEndpointTypePtrOutput{})
	pulumi.RegisterOutputType(CdnEndpointTypeArrayOutput{})
	pulumi.RegisterOutputType(GetCdnEndpointPropertiesOutput{})
	pulumi.RegisterOutputType(ListCdnEndpointsItemsOutput{})
	pulumi.RegisterOutputType(MetaMetaOutput{})
	pulumi.RegisterOutputType(PageLinksOutput{})
	pulumi.RegisterOutputType(PageLinksPtrOutput{})
	pulumi.RegisterOutputType(PageLinksPagesPropertiesOutput{})
	pulumi.RegisterOutputType(PageLinksPagesPropertiesPtrOutput{})
}
