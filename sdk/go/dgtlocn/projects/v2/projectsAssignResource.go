// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProjectsAssignResource struct {
	pulumi.CustomResourceState

	Resources ResourceArrayOutput `pulumi:"resources"`
}

// NewProjectsAssignResource registers a new resource with the given unique name, arguments, and options.
func NewProjectsAssignResource(ctx *pulumi.Context,
	name string, args *ProjectsAssignResourceArgs, opts ...pulumi.ResourceOption) (*ProjectsAssignResource, error) {
	if args == nil {
		args = &ProjectsAssignResourceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectsAssignResource
	err := ctx.RegisterResource("digitalocean-native:projects/v2:ProjectsAssignResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectsAssignResource gets an existing ProjectsAssignResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectsAssignResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectsAssignResourceState, opts ...pulumi.ResourceOption) (*ProjectsAssignResource, error) {
	var resource ProjectsAssignResource
	err := ctx.ReadResource("digitalocean-native:projects/v2:ProjectsAssignResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectsAssignResource resources.
type projectsAssignResourceState struct {
}

type ProjectsAssignResourceState struct {
}

func (ProjectsAssignResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectsAssignResourceState)(nil)).Elem()
}

type projectsAssignResourceArgs struct {
	// A unique identifier for a project.
	ProjectId *string `pulumi:"projectId"`
	// A list of uniform resource names (URNs) to be added to a project.
	Resources []string `pulumi:"resources"`
}

// The set of arguments for constructing a ProjectsAssignResource resource.
type ProjectsAssignResourceArgs struct {
	// A unique identifier for a project.
	ProjectId pulumi.StringPtrInput
	// A list of uniform resource names (URNs) to be added to a project.
	Resources pulumi.StringArrayInput
}

func (ProjectsAssignResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectsAssignResourceArgs)(nil)).Elem()
}

type ProjectsAssignResourceInput interface {
	pulumi.Input

	ToProjectsAssignResourceOutput() ProjectsAssignResourceOutput
	ToProjectsAssignResourceOutputWithContext(ctx context.Context) ProjectsAssignResourceOutput
}

func (*ProjectsAssignResource) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectsAssignResource)(nil)).Elem()
}

func (i *ProjectsAssignResource) ToProjectsAssignResourceOutput() ProjectsAssignResourceOutput {
	return i.ToProjectsAssignResourceOutputWithContext(context.Background())
}

func (i *ProjectsAssignResource) ToProjectsAssignResourceOutputWithContext(ctx context.Context) ProjectsAssignResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectsAssignResourceOutput)
}

type ProjectsAssignResourceOutput struct{ *pulumi.OutputState }

func (ProjectsAssignResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectsAssignResource)(nil)).Elem()
}

func (o ProjectsAssignResourceOutput) ToProjectsAssignResourceOutput() ProjectsAssignResourceOutput {
	return o
}

func (o ProjectsAssignResourceOutput) ToProjectsAssignResourceOutputWithContext(ctx context.Context) ProjectsAssignResourceOutput {
	return o
}

func (o ProjectsAssignResourceOutput) Resources() ResourceArrayOutput {
	return o.ApplyT(func(v *ProjectsAssignResource) ResourceArrayOutput { return v.Resources }).(ResourceArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectsAssignResourceInput)(nil)).Elem(), &ProjectsAssignResource{})
	pulumi.RegisterOutputType(ProjectsAssignResourceOutput{})
}
