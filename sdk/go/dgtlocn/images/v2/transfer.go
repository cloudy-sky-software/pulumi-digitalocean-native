// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Transfer struct {
	pulumi.CustomResourceState

	// A time value given in ISO8601 combined date and time format that represents when the action was completed.
	CompletedAt pulumi.StringPtrOutput `pulumi:"completedAt"`
	Region      RegionPtrOutput        `pulumi:"region"`
	RegionSlug  RegionSlugPtrOutput    `pulumi:"regionSlug"`
	// A unique identifier for the resource that the action is associated with.
	ResourceId pulumi.IntPtrOutput `pulumi:"resourceId"`
	// The type of resource that the action is associated with.
	ResourceType pulumi.StringPtrOutput `pulumi:"resourceType"`
	// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
	StartedAt pulumi.StringPtrOutput `pulumi:"startedAt"`
	// The current status of the action. This can be "in-progress", "completed", or "errored".
	Status TransferStatusPtrOutput `pulumi:"status"`
	// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewTransfer registers a new resource with the given unique name, arguments, and options.
func NewTransfer(ctx *pulumi.Context,
	name string, args *TransferArgs, opts ...pulumi.ResourceOption) (*Transfer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Transfer
	err := ctx.RegisterResource("digitalocean-native:images/v2:Transfer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransfer gets an existing Transfer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransfer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransferState, opts ...pulumi.ResourceOption) (*Transfer, error) {
	var resource Transfer
	err := ctx.ReadResource("digitalocean-native:images/v2:Transfer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Transfer resources.
type transferState struct {
}

type TransferState struct {
}

func (TransferState) ElementType() reflect.Type {
	return reflect.TypeOf((*transferState)(nil)).Elem()
}

type transferArgs struct {
	// A unique number that can be used to identify and reference a specific image.
	ImageId *string `pulumi:"imageId"`
	// The slug identifier for the region where the resource will initially be  available.
	Region TransferPropertiesRegion `pulumi:"region"`
	// The action to be taken on the image. Can be either `convert` or `transfer`.
	Type TransferImageActionBaseType `pulumi:"type"`
}

// The set of arguments for constructing a Transfer resource.
type TransferArgs struct {
	// A unique number that can be used to identify and reference a specific image.
	ImageId pulumi.StringPtrInput
	// The slug identifier for the region where the resource will initially be  available.
	Region TransferPropertiesRegionInput
	// The action to be taken on the image. Can be either `convert` or `transfer`.
	Type TransferImageActionBaseTypeInput
}

func (TransferArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transferArgs)(nil)).Elem()
}

type TransferInput interface {
	pulumi.Input

	ToTransferOutput() TransferOutput
	ToTransferOutputWithContext(ctx context.Context) TransferOutput
}

func (*Transfer) ElementType() reflect.Type {
	return reflect.TypeOf((**Transfer)(nil)).Elem()
}

func (i *Transfer) ToTransferOutput() TransferOutput {
	return i.ToTransferOutputWithContext(context.Background())
}

func (i *Transfer) ToTransferOutputWithContext(ctx context.Context) TransferOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransferOutput)
}

type TransferOutput struct{ *pulumi.OutputState }

func (TransferOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Transfer)(nil)).Elem()
}

func (o TransferOutput) ToTransferOutput() TransferOutput {
	return o
}

func (o TransferOutput) ToTransferOutputWithContext(ctx context.Context) TransferOutput {
	return o
}

// A time value given in ISO8601 combined date and time format that represents when the action was completed.
func (o TransferOutput) CompletedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Transfer) pulumi.StringPtrOutput { return v.CompletedAt }).(pulumi.StringPtrOutput)
}

func (o TransferOutput) Region() RegionPtrOutput {
	return o.ApplyT(func(v *Transfer) RegionPtrOutput { return v.Region }).(RegionPtrOutput)
}

func (o TransferOutput) RegionSlug() RegionSlugPtrOutput {
	return o.ApplyT(func(v *Transfer) RegionSlugPtrOutput { return v.RegionSlug }).(RegionSlugPtrOutput)
}

// A unique identifier for the resource that the action is associated with.
func (o TransferOutput) ResourceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Transfer) pulumi.IntPtrOutput { return v.ResourceId }).(pulumi.IntPtrOutput)
}

// The type of resource that the action is associated with.
func (o TransferOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Transfer) pulumi.StringPtrOutput { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
func (o TransferOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Transfer) pulumi.StringPtrOutput { return v.StartedAt }).(pulumi.StringPtrOutput)
}

// The current status of the action. This can be "in-progress", "completed", or "errored".
func (o TransferOutput) Status() TransferStatusPtrOutput {
	return o.ApplyT(func(v *Transfer) TransferStatusPtrOutput { return v.Status }).(TransferStatusPtrOutput)
}

// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
func (o TransferOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Transfer) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransferInput)(nil)).Elem(), &Transfer{})
	pulumi.RegisterOutputType(TransferOutput{})
}
