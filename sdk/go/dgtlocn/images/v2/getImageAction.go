// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetImageAction(ctx *pulumi.Context, args *GetImageActionArgs, opts ...pulumi.InvokeOption) (*GetImageActionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetImageActionResult
	err := ctx.Invoke("digitalocean-native:images/v2:getImageAction", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type GetImageActionArgs struct {
	// A unique numeric ID that can be used to identify and reference an action.
	ActionId string `pulumi:"actionId"`
	// A unique number that can be used to identify and reference a specific image.
	ImageId string `pulumi:"imageId"`
}

type GetImageActionResult struct {
	Items Action `pulumi:"items"`
}

// Defaults sets the appropriate defaults for GetImageActionResult
func (val *GetImageActionResult) Defaults() *GetImageActionResult {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Items = *tmp.Items.Defaults()

	return &tmp
}

func GetImageActionOutput(ctx *pulumi.Context, args GetImageActionOutputArgs, opts ...pulumi.InvokeOption) GetImageActionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetImageActionResult, error) {
			args := v.(GetImageActionArgs)
			r, err := GetImageAction(ctx, &args, opts...)
			var s GetImageActionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetImageActionResultOutput)
}

type GetImageActionOutputArgs struct {
	// A unique numeric ID that can be used to identify and reference an action.
	ActionId pulumi.StringInput `pulumi:"actionId"`
	// A unique number that can be used to identify and reference a specific image.
	ImageId pulumi.StringInput `pulumi:"imageId"`
}

func (GetImageActionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageActionArgs)(nil)).Elem()
}

type GetImageActionResultOutput struct{ *pulumi.OutputState }

func (GetImageActionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageActionResult)(nil)).Elem()
}

func (o GetImageActionResultOutput) ToGetImageActionResultOutput() GetImageActionResultOutput {
	return o
}

func (o GetImageActionResultOutput) ToGetImageActionResultOutputWithContext(ctx context.Context) GetImageActionResultOutput {
	return o
}

func (o GetImageActionResultOutput) Items() ActionOutput {
	return o.ApplyT(func(v GetImageActionResult) Action { return v.Items }).(ActionOutput)
}

func init() {
	pulumi.RegisterOutputType(GetImageActionResultOutput{})
}
