// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetImageAction(ctx *pulumi.Context, args *GetImageActionArgs, opts ...pulumi.InvokeOption) (*GetImageActionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetImageActionResult
	err := ctx.Invoke("digitalocean-native:images/v2:getImageAction", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type GetImageActionArgs struct {
	// A unique numeric ID that can be used to identify and reference an action.
	ActionId string `pulumi:"actionId"`
	// A unique number that can be used to identify and reference a specific image.
	ImageId string `pulumi:"imageId"`
}

type GetImageActionResult struct {
	// A time value given in ISO8601 combined date and time format that represents when the action was completed.
	CompletedAt *string `pulumi:"completedAt"`
	// A unique numeric ID that can be used to identify and reference an action.
	Id         *int              `pulumi:"id"`
	Region     *Region           `pulumi:"region"`
	RegionSlug *ActionRegionSlug `pulumi:"regionSlug"`
	// A unique identifier for the resource that the action is associated with.
	ResourceId *int `pulumi:"resourceId"`
	// The type of resource that the action is associated with.
	ResourceType *string `pulumi:"resourceType"`
	// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
	StartedAt *string `pulumi:"startedAt"`
	// The current status of the action. This can be "in-progress", "completed", or "errored".
	Status *ActionStatus `pulumi:"status"`
	// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for GetImageActionResult
func (val *GetImageActionResult) Defaults() *GetImageActionResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Status == nil {
		status_ := ActionStatus("in-progress")
		tmp.Status = &status_
	}
	return &tmp
}

func GetImageActionOutput(ctx *pulumi.Context, args GetImageActionOutputArgs, opts ...pulumi.InvokeOption) GetImageActionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetImageActionResult, error) {
			args := v.(GetImageActionArgs)
			r, err := GetImageAction(ctx, &args, opts...)
			var s GetImageActionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetImageActionResultOutput)
}

type GetImageActionOutputArgs struct {
	// A unique numeric ID that can be used to identify and reference an action.
	ActionId pulumi.StringInput `pulumi:"actionId"`
	// A unique number that can be used to identify and reference a specific image.
	ImageId pulumi.StringInput `pulumi:"imageId"`
}

func (GetImageActionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageActionArgs)(nil)).Elem()
}

type GetImageActionResultOutput struct{ *pulumi.OutputState }

func (GetImageActionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageActionResult)(nil)).Elem()
}

func (o GetImageActionResultOutput) ToGetImageActionResultOutput() GetImageActionResultOutput {
	return o
}

func (o GetImageActionResultOutput) ToGetImageActionResultOutputWithContext(ctx context.Context) GetImageActionResultOutput {
	return o
}

// A time value given in ISO8601 combined date and time format that represents when the action was completed.
func (o GetImageActionResultOutput) CompletedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImageActionResult) *string { return v.CompletedAt }).(pulumi.StringPtrOutput)
}

// A unique numeric ID that can be used to identify and reference an action.
func (o GetImageActionResultOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetImageActionResult) *int { return v.Id }).(pulumi.IntPtrOutput)
}

func (o GetImageActionResultOutput) Region() RegionPtrOutput {
	return o.ApplyT(func(v GetImageActionResult) *Region { return v.Region }).(RegionPtrOutput)
}

func (o GetImageActionResultOutput) RegionSlug() ActionRegionSlugPtrOutput {
	return o.ApplyT(func(v GetImageActionResult) *ActionRegionSlug { return v.RegionSlug }).(ActionRegionSlugPtrOutput)
}

// A unique identifier for the resource that the action is associated with.
func (o GetImageActionResultOutput) ResourceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetImageActionResult) *int { return v.ResourceId }).(pulumi.IntPtrOutput)
}

// The type of resource that the action is associated with.
func (o GetImageActionResultOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImageActionResult) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
func (o GetImageActionResultOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImageActionResult) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

// The current status of the action. This can be "in-progress", "completed", or "errored".
func (o GetImageActionResultOutput) Status() ActionStatusPtrOutput {
	return o.ApplyT(func(v GetImageActionResult) *ActionStatus { return v.Status }).(ActionStatusPtrOutput)
}

// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
func (o GetImageActionResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImageActionResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GetImageActionResultArrayOutput struct{ *pulumi.OutputState }

func (GetImageActionResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageActionResult)(nil)).Elem()
}

func (o GetImageActionResultArrayOutput) ToGetImageActionResultArrayOutput() GetImageActionResultArrayOutput {
	return o
}

func (o GetImageActionResultArrayOutput) ToGetImageActionResultArrayOutputWithContext(ctx context.Context) GetImageActionResultArrayOutput {
	return o
}

func (o GetImageActionResultArrayOutput) Index(i pulumi.IntInput) GetImageActionResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImageActionResult {
		return vs[0].([]GetImageActionResult)[vs[1].(int)]
	}).(GetImageActionResultOutput)
}

func init() {
	pulumi.RegisterOutputType(GetImageActionResultOutput{})
}
