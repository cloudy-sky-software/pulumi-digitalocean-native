// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ImageActionsTransfer struct {
	pulumi.CustomResourceState

	// A time value given in ISO8601 combined date and time format that represents when the action was completed.
	CompletedAt pulumi.StringPtrOutput `pulumi:"completedAt"`
	// The slug identifier for the region where the resource will initially be  available.
	Region     ImageActionsTransferPropertiesRegionPtrOutput `pulumi:"region"`
	RegionSlug RegionSlugPtrOutput                           `pulumi:"regionSlug"`
	// A unique identifier for the resource that the action is associated with.
	ResourceId pulumi.IntPtrOutput `pulumi:"resourceId"`
	// The type of resource that the action is associated with.
	ResourceType pulumi.StringPtrOutput `pulumi:"resourceType"`
	// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
	StartedAt pulumi.StringPtrOutput `pulumi:"startedAt"`
	// The current status of the action. This can be "in-progress", "completed", or "errored".
	Status StatusPtrOutput `pulumi:"status"`
	// The action to be taken on the image. Can be either `convert` or `transfer`.
	Type ImageActionBaseTypePtrOutput `pulumi:"type"`
}

// NewImageActionsTransfer registers a new resource with the given unique name, arguments, and options.
func NewImageActionsTransfer(ctx *pulumi.Context,
	name string, args *ImageActionsTransferArgs, opts ...pulumi.ResourceOption) (*ImageActionsTransfer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImageActionsTransfer
	err := ctx.RegisterResource("digitalocean-native:images/v2:ImageActionsTransfer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageActionsTransfer gets an existing ImageActionsTransfer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageActionsTransfer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageActionsTransferState, opts ...pulumi.ResourceOption) (*ImageActionsTransfer, error) {
	var resource ImageActionsTransfer
	err := ctx.ReadResource("digitalocean-native:images/v2:ImageActionsTransfer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageActionsTransfer resources.
type imageActionsTransferState struct {
}

type ImageActionsTransferState struct {
}

func (ImageActionsTransferState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageActionsTransferState)(nil)).Elem()
}

type imageActionsTransferArgs struct {
	// A unique number that can be used to identify and reference a specific image.
	ImageId *string `pulumi:"imageId"`
	// The slug identifier for the region where the resource will initially be  available.
	Region ImageActionsTransferPropertiesRegion `pulumi:"region"`
	// The action to be taken on the image. Can be either `convert` or `transfer`.
	Type ImageActionBaseType `pulumi:"type"`
}

// The set of arguments for constructing a ImageActionsTransfer resource.
type ImageActionsTransferArgs struct {
	// A unique number that can be used to identify and reference a specific image.
	ImageId pulumi.StringPtrInput
	// The slug identifier for the region where the resource will initially be  available.
	Region ImageActionsTransferPropertiesRegionInput
	// The action to be taken on the image. Can be either `convert` or `transfer`.
	Type ImageActionBaseTypeInput
}

func (ImageActionsTransferArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageActionsTransferArgs)(nil)).Elem()
}

type ImageActionsTransferInput interface {
	pulumi.Input

	ToImageActionsTransferOutput() ImageActionsTransferOutput
	ToImageActionsTransferOutputWithContext(ctx context.Context) ImageActionsTransferOutput
}

func (*ImageActionsTransfer) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageActionsTransfer)(nil)).Elem()
}

func (i *ImageActionsTransfer) ToImageActionsTransferOutput() ImageActionsTransferOutput {
	return i.ToImageActionsTransferOutputWithContext(context.Background())
}

func (i *ImageActionsTransfer) ToImageActionsTransferOutputWithContext(ctx context.Context) ImageActionsTransferOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageActionsTransferOutput)
}

type ImageActionsTransferOutput struct{ *pulumi.OutputState }

func (ImageActionsTransferOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageActionsTransfer)(nil)).Elem()
}

func (o ImageActionsTransferOutput) ToImageActionsTransferOutput() ImageActionsTransferOutput {
	return o
}

func (o ImageActionsTransferOutput) ToImageActionsTransferOutputWithContext(ctx context.Context) ImageActionsTransferOutput {
	return o
}

// A time value given in ISO8601 combined date and time format that represents when the action was completed.
func (o ImageActionsTransferOutput) CompletedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageActionsTransfer) pulumi.StringPtrOutput { return v.CompletedAt }).(pulumi.StringPtrOutput)
}

// The slug identifier for the region where the resource will initially be  available.
func (o ImageActionsTransferOutput) Region() ImageActionsTransferPropertiesRegionPtrOutput {
	return o.ApplyT(func(v *ImageActionsTransfer) ImageActionsTransferPropertiesRegionPtrOutput { return v.Region }).(ImageActionsTransferPropertiesRegionPtrOutput)
}

func (o ImageActionsTransferOutput) RegionSlug() RegionSlugPtrOutput {
	return o.ApplyT(func(v *ImageActionsTransfer) RegionSlugPtrOutput { return v.RegionSlug }).(RegionSlugPtrOutput)
}

// A unique identifier for the resource that the action is associated with.
func (o ImageActionsTransferOutput) ResourceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageActionsTransfer) pulumi.IntPtrOutput { return v.ResourceId }).(pulumi.IntPtrOutput)
}

// The type of resource that the action is associated with.
func (o ImageActionsTransferOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageActionsTransfer) pulumi.StringPtrOutput { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
func (o ImageActionsTransferOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageActionsTransfer) pulumi.StringPtrOutput { return v.StartedAt }).(pulumi.StringPtrOutput)
}

// The current status of the action. This can be "in-progress", "completed", or "errored".
func (o ImageActionsTransferOutput) Status() StatusPtrOutput {
	return o.ApplyT(func(v *ImageActionsTransfer) StatusPtrOutput { return v.Status }).(StatusPtrOutput)
}

// The action to be taken on the image. Can be either `convert` or `transfer`.
func (o ImageActionsTransferOutput) Type() ImageActionBaseTypePtrOutput {
	return o.ApplyT(func(v *ImageActionsTransfer) ImageActionBaseTypePtrOutput { return v.Type }).(ImageActionBaseTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageActionsTransferInput)(nil)).Elem(), &ImageActionsTransfer{})
	pulumi.RegisterOutputType(ImageActionsTransferOutput{})
}
