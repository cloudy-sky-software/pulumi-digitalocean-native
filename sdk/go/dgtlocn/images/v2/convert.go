// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Convert struct {
	pulumi.CustomResourceState

	// A time value given in ISO8601 combined date and time format that represents when the action was completed.
	CompletedAt pulumi.StringPtrOutput `pulumi:"completedAt"`
	Region      RegionPtrOutput        `pulumi:"region"`
	RegionSlug  RegionSlugPtrOutput    `pulumi:"regionSlug"`
	// A unique identifier for the resource that the action is associated with.
	ResourceId pulumi.IntPtrOutput `pulumi:"resourceId"`
	// The type of resource that the action is associated with.
	ResourceType pulumi.StringPtrOutput `pulumi:"resourceType"`
	// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
	StartedAt pulumi.StringPtrOutput `pulumi:"startedAt"`
	// The current status of the action. This can be "in-progress", "completed", or "errored".
	Status StatusPtrOutput `pulumi:"status"`
	// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewConvert registers a new resource with the given unique name, arguments, and options.
func NewConvert(ctx *pulumi.Context,
	name string, args *ConvertArgs, opts ...pulumi.ResourceOption) (*Convert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Convert
	err := ctx.RegisterResource("digitalocean-native:images/v2:Convert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConvert gets an existing Convert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConvert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConvertState, opts ...pulumi.ResourceOption) (*Convert, error) {
	var resource Convert
	err := ctx.ReadResource("digitalocean-native:images/v2:Convert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Convert resources.
type convertState struct {
}

type ConvertState struct {
}

func (ConvertState) ElementType() reflect.Type {
	return reflect.TypeOf((*convertState)(nil)).Elem()
}

type convertArgs struct {
	// A unique number that can be used to identify and reference a specific image.
	ImageId *string `pulumi:"imageId"`
	// The action to be taken on the image. Can be either `convert` or `transfer`.
	Type Type `pulumi:"type"`
}

// The set of arguments for constructing a Convert resource.
type ConvertArgs struct {
	// A unique number that can be used to identify and reference a specific image.
	ImageId pulumi.StringPtrInput
	// The action to be taken on the image. Can be either `convert` or `transfer`.
	Type TypeInput
}

func (ConvertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*convertArgs)(nil)).Elem()
}

type ConvertInput interface {
	pulumi.Input

	ToConvertOutput() ConvertOutput
	ToConvertOutputWithContext(ctx context.Context) ConvertOutput
}

func (*Convert) ElementType() reflect.Type {
	return reflect.TypeOf((**Convert)(nil)).Elem()
}

func (i *Convert) ToConvertOutput() ConvertOutput {
	return i.ToConvertOutputWithContext(context.Background())
}

func (i *Convert) ToConvertOutputWithContext(ctx context.Context) ConvertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConvertOutput)
}

type ConvertOutput struct{ *pulumi.OutputState }

func (ConvertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Convert)(nil)).Elem()
}

func (o ConvertOutput) ToConvertOutput() ConvertOutput {
	return o
}

func (o ConvertOutput) ToConvertOutputWithContext(ctx context.Context) ConvertOutput {
	return o
}

// A time value given in ISO8601 combined date and time format that represents when the action was completed.
func (o ConvertOutput) CompletedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Convert) pulumi.StringPtrOutput { return v.CompletedAt }).(pulumi.StringPtrOutput)
}

func (o ConvertOutput) Region() RegionPtrOutput {
	return o.ApplyT(func(v *Convert) RegionPtrOutput { return v.Region }).(RegionPtrOutput)
}

func (o ConvertOutput) RegionSlug() RegionSlugPtrOutput {
	return o.ApplyT(func(v *Convert) RegionSlugPtrOutput { return v.RegionSlug }).(RegionSlugPtrOutput)
}

// A unique identifier for the resource that the action is associated with.
func (o ConvertOutput) ResourceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Convert) pulumi.IntPtrOutput { return v.ResourceId }).(pulumi.IntPtrOutput)
}

// The type of resource that the action is associated with.
func (o ConvertOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Convert) pulumi.StringPtrOutput { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
func (o ConvertOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Convert) pulumi.StringPtrOutput { return v.StartedAt }).(pulumi.StringPtrOutput)
}

// The current status of the action. This can be "in-progress", "completed", or "errored".
func (o ConvertOutput) Status() StatusPtrOutput {
	return o.ApplyT(func(v *Convert) StatusPtrOutput { return v.Status }).(StatusPtrOutput)
}

// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
func (o ConvertOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Convert) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConvertInput)(nil)).Elem(), &Convert{})
	pulumi.RegisterOutputType(ConvertOutput{})
}
