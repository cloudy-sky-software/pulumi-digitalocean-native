// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A string representing the current state of the certificate. It may be `pending`, `verified`, or `error`.
type CertificateState string

const (
	CertificateStatePending  = CertificateState("pending")
	CertificateStateVerified = CertificateState("verified")
	CertificateStateError    = CertificateState("error")
)

type CertificateStateOutput struct{ *pulumi.OutputState }

func (CertificateStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateState)(nil)).Elem()
}

func (o CertificateStateOutput) ToCertificateStateOutput() CertificateStateOutput {
	return o
}

func (o CertificateStateOutput) ToCertificateStateOutputWithContext(ctx context.Context) CertificateStateOutput {
	return o
}

func (o CertificateStateOutput) ToCertificateStatePtrOutput() CertificateStatePtrOutput {
	return o.ToCertificateStatePtrOutputWithContext(context.Background())
}

func (o CertificateStateOutput) ToCertificateStatePtrOutputWithContext(ctx context.Context) CertificateStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateState) *CertificateState {
		return &v
	}).(CertificateStatePtrOutput)
}

func (o CertificateStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CertificateStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CertificateStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CertificateStatePtrOutput struct{ *pulumi.OutputState }

func (CertificateStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateState)(nil)).Elem()
}

func (o CertificateStatePtrOutput) ToCertificateStatePtrOutput() CertificateStatePtrOutput {
	return o
}

func (o CertificateStatePtrOutput) ToCertificateStatePtrOutputWithContext(ctx context.Context) CertificateStatePtrOutput {
	return o
}

func (o CertificateStatePtrOutput) Elem() CertificateStateOutput {
	return o.ApplyT(func(v *CertificateState) CertificateState {
		if v != nil {
			return *v
		}
		var ret CertificateState
		return ret
	}).(CertificateStateOutput)
}

func (o CertificateStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CertificateState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// A string representing the type of the certificate. The value will be `custom` for a user-uploaded certificate or `lets_encrypt` for one automatically generated with Let's Encrypt.
type CertificateType string

const (
	CertificateTypeCustom      = CertificateType("custom")
	CertificateTypeLetsEncrypt = CertificateType("lets_encrypt")
)

type CertificateTypeOutput struct{ *pulumi.OutputState }

func (CertificateTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateType)(nil)).Elem()
}

func (o CertificateTypeOutput) ToCertificateTypeOutput() CertificateTypeOutput {
	return o
}

func (o CertificateTypeOutput) ToCertificateTypeOutputWithContext(ctx context.Context) CertificateTypeOutput {
	return o
}

func (o CertificateTypeOutput) ToCertificateTypePtrOutput() CertificateTypePtrOutput {
	return o.ToCertificateTypePtrOutputWithContext(context.Background())
}

func (o CertificateTypeOutput) ToCertificateTypePtrOutputWithContext(ctx context.Context) CertificateTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateType) *CertificateType {
		return &v
	}).(CertificateTypePtrOutput)
}

func (o CertificateTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CertificateTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CertificateTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CertificateTypePtrOutput struct{ *pulumi.OutputState }

func (CertificateTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateType)(nil)).Elem()
}

func (o CertificateTypePtrOutput) ToCertificateTypePtrOutput() CertificateTypePtrOutput {
	return o
}

func (o CertificateTypePtrOutput) ToCertificateTypePtrOutputWithContext(ctx context.Context) CertificateTypePtrOutput {
	return o
}

func (o CertificateTypePtrOutput) Elem() CertificateTypeOutput {
	return o.ApplyT(func(v *CertificateType) CertificateType {
		if v != nil {
			return *v
		}
		var ret CertificateType
		return ret
	}).(CertificateTypeOutput)
}

func (o CertificateTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CertificateType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CertificateStateOutput{})
	pulumi.RegisterOutputType(CertificateStatePtrOutput{})
	pulumi.RegisterOutputType(CertificateTypeOutput{})
	pulumi.RegisterOutputType(CertificateTypePtrOutput{})
}
