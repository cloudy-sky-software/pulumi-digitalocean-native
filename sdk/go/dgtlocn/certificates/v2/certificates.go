// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Certificates struct {
	pulumi.CustomResourceState

	Certificate CertificatePtrOutput `pulumi:"certificate"`
}

// NewCertificates registers a new resource with the given unique name, arguments, and options.
func NewCertificates(ctx *pulumi.Context,
	name string, args *CertificatesArgs, opts ...pulumi.ResourceOption) (*Certificates, error) {
	if args == nil {
		args = &CertificatesArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Certificates
	err := ctx.RegisterResource("digitalocean-native:certificates/v2:Certificates", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificates gets an existing Certificates resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificates(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificatesState, opts ...pulumi.ResourceOption) (*Certificates, error) {
	var resource Certificates
	err := ctx.ReadResource("digitalocean-native:certificates/v2:Certificates", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificates resources.
type certificatesState struct {
}

type CertificatesState struct {
}

func (CertificatesState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificatesState)(nil)).Elem()
}

type certificatesArgs struct {
}

// The set of arguments for constructing a Certificates resource.
type CertificatesArgs struct {
}

func (CertificatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificatesArgs)(nil)).Elem()
}

type CertificatesInput interface {
	pulumi.Input

	ToCertificatesOutput() CertificatesOutput
	ToCertificatesOutputWithContext(ctx context.Context) CertificatesOutput
}

func (*Certificates) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificates)(nil)).Elem()
}

func (i *Certificates) ToCertificatesOutput() CertificatesOutput {
	return i.ToCertificatesOutputWithContext(context.Background())
}

func (i *Certificates) ToCertificatesOutputWithContext(ctx context.Context) CertificatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatesOutput)
}

type CertificatesOutput struct{ *pulumi.OutputState }

func (CertificatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificates)(nil)).Elem()
}

func (o CertificatesOutput) ToCertificatesOutput() CertificatesOutput {
	return o
}

func (o CertificatesOutput) ToCertificatesOutputWithContext(ctx context.Context) CertificatesOutput {
	return o
}

func (o CertificatesOutput) Certificate() CertificatePtrOutput {
	return o.ApplyT(func(v *Certificates) CertificatePtrOutput { return v.Certificate }).(CertificatePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatesInput)(nil)).Elem(), &Certificates{})
	pulumi.RegisterOutputType(CertificatesOutput{})
}
