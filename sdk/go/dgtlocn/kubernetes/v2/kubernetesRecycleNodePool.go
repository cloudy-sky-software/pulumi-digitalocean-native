// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KubernetesRecycleNodePool struct {
	pulumi.CustomResourceState

	Nodes pulumi.StringArrayOutput `pulumi:"nodes"`
}

// NewKubernetesRecycleNodePool registers a new resource with the given unique name, arguments, and options.
func NewKubernetesRecycleNodePool(ctx *pulumi.Context,
	name string, args *KubernetesRecycleNodePoolArgs, opts ...pulumi.ResourceOption) (*KubernetesRecycleNodePool, error) {
	if args == nil {
		args = &KubernetesRecycleNodePoolArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KubernetesRecycleNodePool
	err := ctx.RegisterResource("digitalocean-native:kubernetes/v2:KubernetesRecycleNodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetesRecycleNodePool gets an existing KubernetesRecycleNodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesRecycleNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesRecycleNodePoolState, opts ...pulumi.ResourceOption) (*KubernetesRecycleNodePool, error) {
	var resource KubernetesRecycleNodePool
	err := ctx.ReadResource("digitalocean-native:kubernetes/v2:KubernetesRecycleNodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KubernetesRecycleNodePool resources.
type kubernetesRecycleNodePoolState struct {
}

type KubernetesRecycleNodePoolState struct {
}

func (KubernetesRecycleNodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesRecycleNodePoolState)(nil)).Elem()
}

type kubernetesRecycleNodePoolArgs struct {
	// A unique ID that can be used to reference a Kubernetes cluster.
	ClusterId *string `pulumi:"clusterId"`
	// A unique ID that can be used to reference a Kubernetes node pool.
	NodePoolId *string  `pulumi:"nodePoolId"`
	Nodes      []string `pulumi:"nodes"`
}

// The set of arguments for constructing a KubernetesRecycleNodePool resource.
type KubernetesRecycleNodePoolArgs struct {
	// A unique ID that can be used to reference a Kubernetes cluster.
	ClusterId pulumi.StringPtrInput
	// A unique ID that can be used to reference a Kubernetes node pool.
	NodePoolId pulumi.StringPtrInput
	Nodes      pulumi.StringArrayInput
}

func (KubernetesRecycleNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesRecycleNodePoolArgs)(nil)).Elem()
}

type KubernetesRecycleNodePoolInput interface {
	pulumi.Input

	ToKubernetesRecycleNodePoolOutput() KubernetesRecycleNodePoolOutput
	ToKubernetesRecycleNodePoolOutputWithContext(ctx context.Context) KubernetesRecycleNodePoolOutput
}

func (*KubernetesRecycleNodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesRecycleNodePool)(nil)).Elem()
}

func (i *KubernetesRecycleNodePool) ToKubernetesRecycleNodePoolOutput() KubernetesRecycleNodePoolOutput {
	return i.ToKubernetesRecycleNodePoolOutputWithContext(context.Background())
}

func (i *KubernetesRecycleNodePool) ToKubernetesRecycleNodePoolOutputWithContext(ctx context.Context) KubernetesRecycleNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesRecycleNodePoolOutput)
}

type KubernetesRecycleNodePoolOutput struct{ *pulumi.OutputState }

func (KubernetesRecycleNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesRecycleNodePool)(nil)).Elem()
}

func (o KubernetesRecycleNodePoolOutput) ToKubernetesRecycleNodePoolOutput() KubernetesRecycleNodePoolOutput {
	return o
}

func (o KubernetesRecycleNodePoolOutput) ToKubernetesRecycleNodePoolOutputWithContext(ctx context.Context) KubernetesRecycleNodePoolOutput {
	return o
}

func (o KubernetesRecycleNodePoolOutput) Nodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesRecycleNodePool) pulumi.StringArrayOutput { return v.Nodes }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesRecycleNodePoolInput)(nil)).Elem(), &KubernetesRecycleNodePool{})
	pulumi.RegisterOutputType(KubernetesRecycleNodePoolOutput{})
}
