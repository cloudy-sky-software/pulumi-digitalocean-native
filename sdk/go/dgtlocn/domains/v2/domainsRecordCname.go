// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DomainsRecordCname struct {
	pulumi.CustomResourceState

	// Variable data depending on record type. For example, the "data" value for an A record would be the IPv4 address to which the domain will be mapped. For a CAA record, it would contain the domain name of the CA being granted permission to issue certificates.
	Data         pulumi.StringPtrOutput `pulumi:"data"`
	DomainRecord DomainRecordPtrOutput  `pulumi:"domainRecord"`
	// An unsigned integer between 0-255 used for CAA records.
	Flags pulumi.IntPtrOutput `pulumi:"flags"`
	// The host name, alias, or service being defined by the record.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The port for SRV records.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// The priority for SRV and MX records.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// The parameter tag for CAA records. Valid values are "issue", "issuewild", or "iodef"
	Tag pulumi.StringPtrOutput `pulumi:"tag"`
	// This value is the time to live for the record, in seconds. This defines the time frame that clients can cache queried information before a refresh should be requested.
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
	// The type of the DNS record. For example: A, CNAME, TXT, ...
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The weight for SRV records.
	Weight pulumi.IntPtrOutput `pulumi:"weight"`
}

// NewDomainsRecordCname registers a new resource with the given unique name, arguments, and options.
func NewDomainsRecordCname(ctx *pulumi.Context,
	name string, args *DomainsRecordCnameArgs, opts ...pulumi.ResourceOption) (*DomainsRecordCname, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainsRecordCname
	err := ctx.RegisterResource("digitalocean-native:domains/v2:DomainsRecordCname", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainsRecordCname gets an existing DomainsRecordCname resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainsRecordCname(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainsRecordCnameState, opts ...pulumi.ResourceOption) (*DomainsRecordCname, error) {
	var resource DomainsRecordCname
	err := ctx.ReadResource("digitalocean-native:domains/v2:DomainsRecordCname", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainsRecordCname resources.
type domainsRecordCnameState struct {
}

type DomainsRecordCnameState struct {
}

func (DomainsRecordCnameState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainsRecordCnameState)(nil)).Elem()
}

type domainsRecordCnameArgs struct {
	// Variable data depending on record type. For example, the "data" value for an A record would be the IPv4 address to which the domain will be mapped. For a CAA record, it would contain the domain name of the CA being granted permission to issue certificates.
	Data *string `pulumi:"data"`
	// The name of the domain itself.
	DomainName *string `pulumi:"domainName"`
	// An unsigned integer between 0-255 used for CAA records.
	Flags *int `pulumi:"flags"`
	// The host name, alias, or service being defined by the record.
	Name *string `pulumi:"name"`
	// The port for SRV records.
	Port *int `pulumi:"port"`
	// The priority for SRV and MX records.
	Priority *int `pulumi:"priority"`
	// The parameter tag for CAA records. Valid values are "issue", "issuewild", or "iodef"
	Tag *string `pulumi:"tag"`
	// This value is the time to live for the record, in seconds. This defines the time frame that clients can cache queried information before a refresh should be requested.
	Ttl *int `pulumi:"ttl"`
	// The type of the DNS record. For example: A, CNAME, TXT, ...
	Type string `pulumi:"type"`
	// The weight for SRV records.
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a DomainsRecordCname resource.
type DomainsRecordCnameArgs struct {
	// Variable data depending on record type. For example, the "data" value for an A record would be the IPv4 address to which the domain will be mapped. For a CAA record, it would contain the domain name of the CA being granted permission to issue certificates.
	Data pulumi.StringPtrInput
	// The name of the domain itself.
	DomainName pulumi.StringPtrInput
	// An unsigned integer between 0-255 used for CAA records.
	Flags pulumi.IntPtrInput
	// The host name, alias, or service being defined by the record.
	Name pulumi.StringPtrInput
	// The port for SRV records.
	Port pulumi.IntPtrInput
	// The priority for SRV and MX records.
	Priority pulumi.IntPtrInput
	// The parameter tag for CAA records. Valid values are "issue", "issuewild", or "iodef"
	Tag pulumi.StringPtrInput
	// This value is the time to live for the record, in seconds. This defines the time frame that clients can cache queried information before a refresh should be requested.
	Ttl pulumi.IntPtrInput
	// The type of the DNS record. For example: A, CNAME, TXT, ...
	Type pulumi.StringInput
	// The weight for SRV records.
	Weight pulumi.IntPtrInput
}

func (DomainsRecordCnameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainsRecordCnameArgs)(nil)).Elem()
}

type DomainsRecordCnameInput interface {
	pulumi.Input

	ToDomainsRecordCnameOutput() DomainsRecordCnameOutput
	ToDomainsRecordCnameOutputWithContext(ctx context.Context) DomainsRecordCnameOutput
}

func (*DomainsRecordCname) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainsRecordCname)(nil)).Elem()
}

func (i *DomainsRecordCname) ToDomainsRecordCnameOutput() DomainsRecordCnameOutput {
	return i.ToDomainsRecordCnameOutputWithContext(context.Background())
}

func (i *DomainsRecordCname) ToDomainsRecordCnameOutputWithContext(ctx context.Context) DomainsRecordCnameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainsRecordCnameOutput)
}

type DomainsRecordCnameOutput struct{ *pulumi.OutputState }

func (DomainsRecordCnameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainsRecordCname)(nil)).Elem()
}

func (o DomainsRecordCnameOutput) ToDomainsRecordCnameOutput() DomainsRecordCnameOutput {
	return o
}

func (o DomainsRecordCnameOutput) ToDomainsRecordCnameOutputWithContext(ctx context.Context) DomainsRecordCnameOutput {
	return o
}

// Variable data depending on record type. For example, the "data" value for an A record would be the IPv4 address to which the domain will be mapped. For a CAA record, it would contain the domain name of the CA being granted permission to issue certificates.
func (o DomainsRecordCnameOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainsRecordCname) pulumi.StringPtrOutput { return v.Data }).(pulumi.StringPtrOutput)
}

func (o DomainsRecordCnameOutput) DomainRecord() DomainRecordPtrOutput {
	return o.ApplyT(func(v *DomainsRecordCname) DomainRecordPtrOutput { return v.DomainRecord }).(DomainRecordPtrOutput)
}

// An unsigned integer between 0-255 used for CAA records.
func (o DomainsRecordCnameOutput) Flags() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainsRecordCname) pulumi.IntPtrOutput { return v.Flags }).(pulumi.IntPtrOutput)
}

// The host name, alias, or service being defined by the record.
func (o DomainsRecordCnameOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainsRecordCname) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The port for SRV records.
func (o DomainsRecordCnameOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainsRecordCname) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// The priority for SRV and MX records.
func (o DomainsRecordCnameOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainsRecordCname) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

// The parameter tag for CAA records. Valid values are "issue", "issuewild", or "iodef"
func (o DomainsRecordCnameOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainsRecordCname) pulumi.StringPtrOutput { return v.Tag }).(pulumi.StringPtrOutput)
}

// This value is the time to live for the record, in seconds. This defines the time frame that clients can cache queried information before a refresh should be requested.
func (o DomainsRecordCnameOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainsRecordCname) pulumi.IntPtrOutput { return v.Ttl }).(pulumi.IntPtrOutput)
}

// The type of the DNS record. For example: A, CNAME, TXT, ...
func (o DomainsRecordCnameOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainsRecordCname) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The weight for SRV records.
func (o DomainsRecordCnameOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainsRecordCname) pulumi.IntPtrOutput { return v.Weight }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainsRecordCnameInput)(nil)).Elem(), &DomainsRecordCname{})
	pulumi.RegisterOutputType(DomainsRecordCnameOutput{})
}
