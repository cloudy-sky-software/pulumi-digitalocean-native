// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Domains struct {
	pulumi.CustomResourceState

	Domain DomainPtrOutput `pulumi:"domain"`
	// This optional attribute may contain an IP address. When provided, an A record will be automatically created pointing to the apex domain.
	IpAddress pulumi.StringPtrOutput `pulumi:"ipAddress"`
	// The name of the domain itself. This should follow the standard domain format of domain.TLD. For instance, `example.com` is a valid domain name.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// This value is the time to live for the records on this domain, in seconds. This defines the time frame that clients can cache queried information before a refresh should be requested.
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
	// This attribute contains the complete contents of the zone file for the selected domain. Individual domain record resources should be used to get more granular control over records. However, this attribute can also be used to get information about the SOA record, which is created automatically and is not accessible as an individual record resource.
	ZoneFile pulumi.StringPtrOutput `pulumi:"zoneFile"`
}

// NewDomains registers a new resource with the given unique name, arguments, and options.
func NewDomains(ctx *pulumi.Context,
	name string, args *DomainsArgs, opts ...pulumi.ResourceOption) (*Domains, error) {
	if args == nil {
		args = &DomainsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Domains
	err := ctx.RegisterResource("digitalocean-native:domains/v2:Domains", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomains gets an existing Domains resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomains(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainsState, opts ...pulumi.ResourceOption) (*Domains, error) {
	var resource Domains
	err := ctx.ReadResource("digitalocean-native:domains/v2:Domains", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Domains resources.
type domainsState struct {
}

type DomainsState struct {
}

func (DomainsState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainsState)(nil)).Elem()
}

type domainsArgs struct {
	// This optional attribute may contain an IP address. When provided, an A record will be automatically created pointing to the apex domain.
	IpAddress *string `pulumi:"ipAddress"`
	// The name of the domain itself. This should follow the standard domain format of domain.TLD. For instance, `example.com` is a valid domain name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Domains resource.
type DomainsArgs struct {
	// This optional attribute may contain an IP address. When provided, an A record will be automatically created pointing to the apex domain.
	IpAddress pulumi.StringPtrInput
	// The name of the domain itself. This should follow the standard domain format of domain.TLD. For instance, `example.com` is a valid domain name.
	Name pulumi.StringPtrInput
}

func (DomainsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainsArgs)(nil)).Elem()
}

type DomainsInput interface {
	pulumi.Input

	ToDomainsOutput() DomainsOutput
	ToDomainsOutputWithContext(ctx context.Context) DomainsOutput
}

func (*Domains) ElementType() reflect.Type {
	return reflect.TypeOf((**Domains)(nil)).Elem()
}

func (i *Domains) ToDomainsOutput() DomainsOutput {
	return i.ToDomainsOutputWithContext(context.Background())
}

func (i *Domains) ToDomainsOutputWithContext(ctx context.Context) DomainsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainsOutput)
}

type DomainsOutput struct{ *pulumi.OutputState }

func (DomainsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Domains)(nil)).Elem()
}

func (o DomainsOutput) ToDomainsOutput() DomainsOutput {
	return o
}

func (o DomainsOutput) ToDomainsOutputWithContext(ctx context.Context) DomainsOutput {
	return o
}

func (o DomainsOutput) Domain() DomainPtrOutput {
	return o.ApplyT(func(v *Domains) DomainPtrOutput { return v.Domain }).(DomainPtrOutput)
}

// This optional attribute may contain an IP address. When provided, an A record will be automatically created pointing to the apex domain.
func (o DomainsOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domains) pulumi.StringPtrOutput { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// The name of the domain itself. This should follow the standard domain format of domain.TLD. For instance, `example.com` is a valid domain name.
func (o DomainsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domains) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// This value is the time to live for the records on this domain, in seconds. This defines the time frame that clients can cache queried information before a refresh should be requested.
func (o DomainsOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Domains) pulumi.IntPtrOutput { return v.Ttl }).(pulumi.IntPtrOutput)
}

// This attribute contains the complete contents of the zone file for the selected domain. Individual domain record resources should be used to get more granular control over records. However, this attribute can also be used to get information about the SOA record, which is created automatically and is not accessible as an individual record resource.
func (o DomainsOutput) ZoneFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domains) pulumi.StringPtrOutput { return v.ZoneFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainsInput)(nil)).Elem(), &Domains{})
	pulumi.RegisterOutputType(DomainsOutput{})
}
