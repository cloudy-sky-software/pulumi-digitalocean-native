// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabasesMaintenanceWindow struct {
	pulumi.CustomResourceState

	// The day of the week on which to apply maintenance updates.
	Day pulumi.StringOutput `pulumi:"day"`
	// A list of strings, each containing information about a pending maintenance update.
	Description pulumi.StringArrayOutput `pulumi:"description"`
	// The hour in UTC at which maintenance updates will be applied in 24 hour format.
	Hour pulumi.StringOutput `pulumi:"hour"`
	// A boolean value indicating whether any maintenance is scheduled to be performed in the next window.
	Pending pulumi.BoolPtrOutput `pulumi:"pending"`
}

// NewDatabasesMaintenanceWindow registers a new resource with the given unique name, arguments, and options.
func NewDatabasesMaintenanceWindow(ctx *pulumi.Context,
	name string, args *DatabasesMaintenanceWindowArgs, opts ...pulumi.ResourceOption) (*DatabasesMaintenanceWindow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Day == nil {
		return nil, errors.New("invalid value for required argument 'Day'")
	}
	if args.Hour == nil {
		return nil, errors.New("invalid value for required argument 'Hour'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabasesMaintenanceWindow
	err := ctx.RegisterResource("digitalocean-native:databases/v2:DatabasesMaintenanceWindow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabasesMaintenanceWindow gets an existing DatabasesMaintenanceWindow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabasesMaintenanceWindow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabasesMaintenanceWindowState, opts ...pulumi.ResourceOption) (*DatabasesMaintenanceWindow, error) {
	var resource DatabasesMaintenanceWindow
	err := ctx.ReadResource("digitalocean-native:databases/v2:DatabasesMaintenanceWindow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabasesMaintenanceWindow resources.
type databasesMaintenanceWindowState struct {
}

type DatabasesMaintenanceWindowState struct {
}

func (DatabasesMaintenanceWindowState) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesMaintenanceWindowState)(nil)).Elem()
}

type databasesMaintenanceWindowArgs struct {
	// A unique identifier for a database cluster.
	DatabaseClusterUuid *string `pulumi:"databaseClusterUuid"`
	// The day of the week on which to apply maintenance updates.
	Day string `pulumi:"day"`
	// The hour in UTC at which maintenance updates will be applied in 24 hour format.
	Hour string `pulumi:"hour"`
}

// The set of arguments for constructing a DatabasesMaintenanceWindow resource.
type DatabasesMaintenanceWindowArgs struct {
	// A unique identifier for a database cluster.
	DatabaseClusterUuid pulumi.StringPtrInput
	// The day of the week on which to apply maintenance updates.
	Day pulumi.StringInput
	// The hour in UTC at which maintenance updates will be applied in 24 hour format.
	Hour pulumi.StringInput
}

func (DatabasesMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesMaintenanceWindowArgs)(nil)).Elem()
}

type DatabasesMaintenanceWindowInput interface {
	pulumi.Input

	ToDatabasesMaintenanceWindowOutput() DatabasesMaintenanceWindowOutput
	ToDatabasesMaintenanceWindowOutputWithContext(ctx context.Context) DatabasesMaintenanceWindowOutput
}

func (*DatabasesMaintenanceWindow) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesMaintenanceWindow)(nil)).Elem()
}

func (i *DatabasesMaintenanceWindow) ToDatabasesMaintenanceWindowOutput() DatabasesMaintenanceWindowOutput {
	return i.ToDatabasesMaintenanceWindowOutputWithContext(context.Background())
}

func (i *DatabasesMaintenanceWindow) ToDatabasesMaintenanceWindowOutputWithContext(ctx context.Context) DatabasesMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesMaintenanceWindowOutput)
}

type DatabasesMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (DatabasesMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesMaintenanceWindow)(nil)).Elem()
}

func (o DatabasesMaintenanceWindowOutput) ToDatabasesMaintenanceWindowOutput() DatabasesMaintenanceWindowOutput {
	return o
}

func (o DatabasesMaintenanceWindowOutput) ToDatabasesMaintenanceWindowOutputWithContext(ctx context.Context) DatabasesMaintenanceWindowOutput {
	return o
}

// The day of the week on which to apply maintenance updates.
func (o DatabasesMaintenanceWindowOutput) Day() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasesMaintenanceWindow) pulumi.StringOutput { return v.Day }).(pulumi.StringOutput)
}

// A list of strings, each containing information about a pending maintenance update.
func (o DatabasesMaintenanceWindowOutput) Description() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabasesMaintenanceWindow) pulumi.StringArrayOutput { return v.Description }).(pulumi.StringArrayOutput)
}

// The hour in UTC at which maintenance updates will be applied in 24 hour format.
func (o DatabasesMaintenanceWindowOutput) Hour() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasesMaintenanceWindow) pulumi.StringOutput { return v.Hour }).(pulumi.StringOutput)
}

// A boolean value indicating whether any maintenance is scheduled to be performed in the next window.
func (o DatabasesMaintenanceWindowOutput) Pending() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabasesMaintenanceWindow) pulumi.BoolPtrOutput { return v.Pending }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesMaintenanceWindowInput)(nil)).Elem(), &DatabasesMaintenanceWindow{})
	pulumi.RegisterOutputType(DatabasesMaintenanceWindowOutput{})
}
