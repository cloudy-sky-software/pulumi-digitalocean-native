// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabasesCluster struct {
	pulumi.CustomResourceState

	BackupRestore DatabaseBackupPtrOutput            `pulumi:"backupRestore"`
	Connection    DatabaseClusterConnectionPtrOutput `pulumi:"connection"`
	// A time value given in ISO8601 combined date and time format that represents when the database cluster was created.
	CreatedAt pulumi.StringPtrOutput `pulumi:"createdAt"`
	Database  DatabaseClusterOutput  `pulumi:"database"`
	// An array of strings containing the names of databases created in the database cluster.
	DbNames pulumi.StringArrayOutput `pulumi:"dbNames"`
	// A slug representing the database engine used for the cluster. The possible values are: "pg" for PostgreSQL, "mysql" for MySQL, "redis" for Redis, and "mongodb" for MongoDB.
	Engine            DatabaseClusterEnginePtrOutput            `pulumi:"engine"`
	MaintenanceWindow DatabaseClusterMaintenanceWindowPtrOutput `pulumi:"maintenanceWindow"`
	// A unique, human-readable name referring to a database cluster.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The number of nodes in the database cluster.
	NumNodes          pulumi.IntPtrOutput                       `pulumi:"numNodes"`
	PrivateConnection DatabaseClusterPrivateConnectionPtrOutput `pulumi:"privateConnection"`
	// A string specifying the UUID of the VPC to which the database cluster will be assigned. If excluded, the cluster when creating a new database cluster, it will be assigned to your account's default VPC for the region.
	PrivateNetworkUuid pulumi.StringPtrOutput `pulumi:"privateNetworkUuid"`
	// The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// The slug identifier for the region where the database cluster is located.
	Region pulumi.StringPtrOutput  `pulumi:"region"`
	Rules  FirewallRuleArrayOutput `pulumi:"rules"`
	// A string representing the semantic version of the database engine in use for the cluster.
	SemanticVersion pulumi.StringPtrOutput `pulumi:"semanticVersion"`
	// The slug identifier representing the size of the nodes in the database cluster.
	Size pulumi.StringPtrOutput `pulumi:"size"`
	// A string representing the current status of the database cluster.
	Status DatabaseClusterStatusPtrOutput `pulumi:"status"`
	// An array of tags that have been applied to the database cluster.
	Tags  pulumi.StringArrayOutput `pulumi:"tags"`
	Users DatabaseUserArrayOutput  `pulumi:"users"`
	// A string representing the version of the database engine in use for the cluster.
	Version pulumi.StringPtrOutput `pulumi:"version"`
	// A timestamp referring to the date when the particular version will no longer be available for creating new clusters. If null, the version does not have an end of availability timeline.
	VersionEndOfAvailability pulumi.StringPtrOutput `pulumi:"versionEndOfAvailability"`
	// A timestamp referring to the date when the particular version will no longer be supported. If null, the version does not have an end of life timeline.
	VersionEndOfLife pulumi.StringPtrOutput `pulumi:"versionEndOfLife"`
}

// NewDatabasesCluster registers a new resource with the given unique name, arguments, and options.
func NewDatabasesCluster(ctx *pulumi.Context,
	name string, args *DatabasesClusterArgs, opts ...pulumi.ResourceOption) (*DatabasesCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Engine == nil {
		return nil, errors.New("invalid value for required argument 'Engine'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.NumNodes == nil {
		return nil, errors.New("invalid value for required argument 'NumNodes'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabasesCluster
	err := ctx.RegisterResource("digitalocean-native:databases/v2:DatabasesCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabasesCluster gets an existing DatabasesCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabasesCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabasesClusterState, opts ...pulumi.ResourceOption) (*DatabasesCluster, error) {
	var resource DatabasesCluster
	err := ctx.ReadResource("digitalocean-native:databases/v2:DatabasesCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabasesCluster resources.
type databasesClusterState struct {
}

type DatabasesClusterState struct {
}

func (DatabasesClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesClusterState)(nil)).Elem()
}

type databasesClusterArgs struct {
	BackupRestore *DatabaseBackup            `pulumi:"backupRestore"`
	Connection    *DatabaseClusterConnection `pulumi:"connection"`
	// A time value given in ISO8601 combined date and time format that represents when the database cluster was created.
	CreatedAt *string `pulumi:"createdAt"`
	// An array of strings containing the names of databases created in the database cluster.
	DbNames []string `pulumi:"dbNames"`
	// A slug representing the database engine used for the cluster. The possible values are: "pg" for PostgreSQL, "mysql" for MySQL, "redis" for Redis, and "mongodb" for MongoDB.
	Engine            DatabaseClusterEngine             `pulumi:"engine"`
	MaintenanceWindow *DatabaseClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	// A unique, human-readable name referring to a database cluster.
	Name string `pulumi:"name"`
	// The number of nodes in the database cluster.
	NumNodes          int                               `pulumi:"numNodes"`
	PrivateConnection *DatabaseClusterPrivateConnection `pulumi:"privateConnection"`
	// A string specifying the UUID of the VPC to which the database cluster will be assigned. If excluded, the cluster when creating a new database cluster, it will be assigned to your account's default VPC for the region.
	PrivateNetworkUuid *string `pulumi:"privateNetworkUuid"`
	// The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
	ProjectId *string `pulumi:"projectId"`
	// The slug identifier for the region where the database cluster is located.
	Region string         `pulumi:"region"`
	Rules  []FirewallRule `pulumi:"rules"`
	// A string representing the semantic version of the database engine in use for the cluster.
	SemanticVersion *string `pulumi:"semanticVersion"`
	// The slug identifier representing the size of the nodes in the database cluster.
	Size string `pulumi:"size"`
	// A string representing the current status of the database cluster.
	Status *DatabaseClusterStatus `pulumi:"status"`
	// An array of tags that have been applied to the database cluster.
	Tags  []string       `pulumi:"tags"`
	Users []DatabaseUser `pulumi:"users"`
	// A string representing the version of the database engine in use for the cluster.
	Version *string `pulumi:"version"`
	// A timestamp referring to the date when the particular version will no longer be available for creating new clusters. If null, the version does not have an end of availability timeline.
	VersionEndOfAvailability *string `pulumi:"versionEndOfAvailability"`
	// A timestamp referring to the date when the particular version will no longer be supported. If null, the version does not have an end of life timeline.
	VersionEndOfLife *string `pulumi:"versionEndOfLife"`
}

// The set of arguments for constructing a DatabasesCluster resource.
type DatabasesClusterArgs struct {
	BackupRestore DatabaseBackupPtrInput
	Connection    DatabaseClusterConnectionPtrInput
	// A time value given in ISO8601 combined date and time format that represents when the database cluster was created.
	CreatedAt pulumi.StringPtrInput
	// An array of strings containing the names of databases created in the database cluster.
	DbNames pulumi.StringArrayInput
	// A slug representing the database engine used for the cluster. The possible values are: "pg" for PostgreSQL, "mysql" for MySQL, "redis" for Redis, and "mongodb" for MongoDB.
	Engine            DatabaseClusterEngineInput
	MaintenanceWindow DatabaseClusterMaintenanceWindowPtrInput
	// A unique, human-readable name referring to a database cluster.
	Name pulumi.StringInput
	// The number of nodes in the database cluster.
	NumNodes          pulumi.IntInput
	PrivateConnection DatabaseClusterPrivateConnectionPtrInput
	// A string specifying the UUID of the VPC to which the database cluster will be assigned. If excluded, the cluster when creating a new database cluster, it will be assigned to your account's default VPC for the region.
	PrivateNetworkUuid pulumi.StringPtrInput
	// The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
	ProjectId pulumi.StringPtrInput
	// The slug identifier for the region where the database cluster is located.
	Region pulumi.StringInput
	Rules  FirewallRuleArrayInput
	// A string representing the semantic version of the database engine in use for the cluster.
	SemanticVersion pulumi.StringPtrInput
	// The slug identifier representing the size of the nodes in the database cluster.
	Size pulumi.StringInput
	// A string representing the current status of the database cluster.
	Status DatabaseClusterStatusPtrInput
	// An array of tags that have been applied to the database cluster.
	Tags  pulumi.StringArrayInput
	Users DatabaseUserArrayInput
	// A string representing the version of the database engine in use for the cluster.
	Version pulumi.StringPtrInput
	// A timestamp referring to the date when the particular version will no longer be available for creating new clusters. If null, the version does not have an end of availability timeline.
	VersionEndOfAvailability pulumi.StringPtrInput
	// A timestamp referring to the date when the particular version will no longer be supported. If null, the version does not have an end of life timeline.
	VersionEndOfLife pulumi.StringPtrInput
}

func (DatabasesClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesClusterArgs)(nil)).Elem()
}

type DatabasesClusterInput interface {
	pulumi.Input

	ToDatabasesClusterOutput() DatabasesClusterOutput
	ToDatabasesClusterOutputWithContext(ctx context.Context) DatabasesClusterOutput
}

func (*DatabasesCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesCluster)(nil)).Elem()
}

func (i *DatabasesCluster) ToDatabasesClusterOutput() DatabasesClusterOutput {
	return i.ToDatabasesClusterOutputWithContext(context.Background())
}

func (i *DatabasesCluster) ToDatabasesClusterOutputWithContext(ctx context.Context) DatabasesClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesClusterOutput)
}

type DatabasesClusterOutput struct{ *pulumi.OutputState }

func (DatabasesClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesCluster)(nil)).Elem()
}

func (o DatabasesClusterOutput) ToDatabasesClusterOutput() DatabasesClusterOutput {
	return o
}

func (o DatabasesClusterOutput) ToDatabasesClusterOutputWithContext(ctx context.Context) DatabasesClusterOutput {
	return o
}

func (o DatabasesClusterOutput) BackupRestore() DatabaseBackupPtrOutput {
	return o.ApplyT(func(v *DatabasesCluster) DatabaseBackupPtrOutput { return v.BackupRestore }).(DatabaseBackupPtrOutput)
}

func (o DatabasesClusterOutput) Connection() DatabaseClusterConnectionPtrOutput {
	return o.ApplyT(func(v *DatabasesCluster) DatabaseClusterConnectionPtrOutput { return v.Connection }).(DatabaseClusterConnectionPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the database cluster was created.
func (o DatabasesClusterOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasesCluster) pulumi.StringPtrOutput { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o DatabasesClusterOutput) Database() DatabaseClusterOutput {
	return o.ApplyT(func(v *DatabasesCluster) DatabaseClusterOutput { return v.Database }).(DatabaseClusterOutput)
}

// An array of strings containing the names of databases created in the database cluster.
func (o DatabasesClusterOutput) DbNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabasesCluster) pulumi.StringArrayOutput { return v.DbNames }).(pulumi.StringArrayOutput)
}

// A slug representing the database engine used for the cluster. The possible values are: "pg" for PostgreSQL, "mysql" for MySQL, "redis" for Redis, and "mongodb" for MongoDB.
func (o DatabasesClusterOutput) Engine() DatabaseClusterEnginePtrOutput {
	return o.ApplyT(func(v *DatabasesCluster) DatabaseClusterEnginePtrOutput { return v.Engine }).(DatabaseClusterEnginePtrOutput)
}

func (o DatabasesClusterOutput) MaintenanceWindow() DatabaseClusterMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *DatabasesCluster) DatabaseClusterMaintenanceWindowPtrOutput { return v.MaintenanceWindow }).(DatabaseClusterMaintenanceWindowPtrOutput)
}

// A unique, human-readable name referring to a database cluster.
func (o DatabasesClusterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasesCluster) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The number of nodes in the database cluster.
func (o DatabasesClusterOutput) NumNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabasesCluster) pulumi.IntPtrOutput { return v.NumNodes }).(pulumi.IntPtrOutput)
}

func (o DatabasesClusterOutput) PrivateConnection() DatabaseClusterPrivateConnectionPtrOutput {
	return o.ApplyT(func(v *DatabasesCluster) DatabaseClusterPrivateConnectionPtrOutput { return v.PrivateConnection }).(DatabaseClusterPrivateConnectionPtrOutput)
}

// A string specifying the UUID of the VPC to which the database cluster will be assigned. If excluded, the cluster when creating a new database cluster, it will be assigned to your account's default VPC for the region.
func (o DatabasesClusterOutput) PrivateNetworkUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasesCluster) pulumi.StringPtrOutput { return v.PrivateNetworkUuid }).(pulumi.StringPtrOutput)
}

// The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
func (o DatabasesClusterOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasesCluster) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The slug identifier for the region where the database cluster is located.
func (o DatabasesClusterOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasesCluster) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

func (o DatabasesClusterOutput) Rules() FirewallRuleArrayOutput {
	return o.ApplyT(func(v *DatabasesCluster) FirewallRuleArrayOutput { return v.Rules }).(FirewallRuleArrayOutput)
}

// A string representing the semantic version of the database engine in use for the cluster.
func (o DatabasesClusterOutput) SemanticVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasesCluster) pulumi.StringPtrOutput { return v.SemanticVersion }).(pulumi.StringPtrOutput)
}

// The slug identifier representing the size of the nodes in the database cluster.
func (o DatabasesClusterOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasesCluster) pulumi.StringPtrOutput { return v.Size }).(pulumi.StringPtrOutput)
}

// A string representing the current status of the database cluster.
func (o DatabasesClusterOutput) Status() DatabaseClusterStatusPtrOutput {
	return o.ApplyT(func(v *DatabasesCluster) DatabaseClusterStatusPtrOutput { return v.Status }).(DatabaseClusterStatusPtrOutput)
}

// An array of tags that have been applied to the database cluster.
func (o DatabasesClusterOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabasesCluster) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o DatabasesClusterOutput) Users() DatabaseUserArrayOutput {
	return o.ApplyT(func(v *DatabasesCluster) DatabaseUserArrayOutput { return v.Users }).(DatabaseUserArrayOutput)
}

// A string representing the version of the database engine in use for the cluster.
func (o DatabasesClusterOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasesCluster) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

// A timestamp referring to the date when the particular version will no longer be available for creating new clusters. If null, the version does not have an end of availability timeline.
func (o DatabasesClusterOutput) VersionEndOfAvailability() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasesCluster) pulumi.StringPtrOutput { return v.VersionEndOfAvailability }).(pulumi.StringPtrOutput)
}

// A timestamp referring to the date when the particular version will no longer be supported. If null, the version does not have an end of life timeline.
func (o DatabasesClusterOutput) VersionEndOfLife() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasesCluster) pulumi.StringPtrOutput { return v.VersionEndOfLife }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesClusterInput)(nil)).Elem(), &DatabasesCluster{})
	pulumi.RegisterOutputType(DatabasesClusterOutput{})
}
