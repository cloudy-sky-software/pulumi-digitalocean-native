// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabasesReAuth struct {
	pulumi.CustomResourceState

	MysqlSettings MysqlSettingsPtrOutput `pulumi:"mysqlSettings"`
	User          DatabaseUserOutput     `pulumi:"user"`
}

// NewDatabasesReAuth registers a new resource with the given unique name, arguments, and options.
func NewDatabasesReAuth(ctx *pulumi.Context,
	name string, args *DatabasesReAuthArgs, opts ...pulumi.ResourceOption) (*DatabasesReAuth, error) {
	if args == nil {
		args = &DatabasesReAuthArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabasesReAuth
	err := ctx.RegisterResource("digitalocean-native:databases/v2:DatabasesReAuth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabasesReAuth gets an existing DatabasesReAuth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabasesReAuth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabasesReAuthState, opts ...pulumi.ResourceOption) (*DatabasesReAuth, error) {
	var resource DatabasesReAuth
	err := ctx.ReadResource("digitalocean-native:databases/v2:DatabasesReAuth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabasesReAuth resources.
type databasesReAuthState struct {
}

type DatabasesReAuthState struct {
}

func (DatabasesReAuthState) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesReAuthState)(nil)).Elem()
}

type databasesReAuthArgs struct {
	// A unique identifier for a database cluster.
	DatabaseClusterUuid *string        `pulumi:"databaseClusterUuid"`
	MysqlSettings       *MysqlSettings `pulumi:"mysqlSettings"`
	// The name of the database user.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a DatabasesReAuth resource.
type DatabasesReAuthArgs struct {
	// A unique identifier for a database cluster.
	DatabaseClusterUuid pulumi.StringPtrInput
	MysqlSettings       MysqlSettingsPtrInput
	// The name of the database user.
	Username pulumi.StringPtrInput
}

func (DatabasesReAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesReAuthArgs)(nil)).Elem()
}

type DatabasesReAuthInput interface {
	pulumi.Input

	ToDatabasesReAuthOutput() DatabasesReAuthOutput
	ToDatabasesReAuthOutputWithContext(ctx context.Context) DatabasesReAuthOutput
}

func (*DatabasesReAuth) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesReAuth)(nil)).Elem()
}

func (i *DatabasesReAuth) ToDatabasesReAuthOutput() DatabasesReAuthOutput {
	return i.ToDatabasesReAuthOutputWithContext(context.Background())
}

func (i *DatabasesReAuth) ToDatabasesReAuthOutputWithContext(ctx context.Context) DatabasesReAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesReAuthOutput)
}

type DatabasesReAuthOutput struct{ *pulumi.OutputState }

func (DatabasesReAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesReAuth)(nil)).Elem()
}

func (o DatabasesReAuthOutput) ToDatabasesReAuthOutput() DatabasesReAuthOutput {
	return o
}

func (o DatabasesReAuthOutput) ToDatabasesReAuthOutputWithContext(ctx context.Context) DatabasesReAuthOutput {
	return o
}

func (o DatabasesReAuthOutput) MysqlSettings() MysqlSettingsPtrOutput {
	return o.ApplyT(func(v *DatabasesReAuth) MysqlSettingsPtrOutput { return v.MysqlSettings }).(MysqlSettingsPtrOutput)
}

func (o DatabasesReAuthOutput) User() DatabaseUserOutput {
	return o.ApplyT(func(v *DatabasesReAuth) DatabaseUserOutput { return v.User }).(DatabaseUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesReAuthInput)(nil)).Elem(), &DatabasesReAuth{})
	pulumi.RegisterOutputType(DatabasesReAuthOutput{})
}
