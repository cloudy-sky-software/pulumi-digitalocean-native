// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabasesReplica struct {
	pulumi.CustomResourceState

	Connection DatabaseReplicaConnectionPtrOutput `pulumi:"connection"`
	// A time value given in ISO8601 combined date and time format that represents when the database cluster was created.
	CreatedAt pulumi.StringPtrOutput `pulumi:"createdAt"`
	// The name to give the read-only replicating
	Name              pulumi.StringOutput                       `pulumi:"name"`
	PrivateConnection DatabaseReplicaPrivateConnectionPtrOutput `pulumi:"privateConnection"`
	// A string specifying the UUID of the VPC to which the read-only replica will be assigned. If excluded, the replica will be assigned to your account's default VPC for the region.
	PrivateNetworkUuid pulumi.StringPtrOutput `pulumi:"privateNetworkUuid"`
	// A slug identifier for the region where the read-only replica will be located. If excluded, the replica will be placed in the same region as the cluster.
	Region  pulumi.StringPtrOutput   `pulumi:"region"`
	Replica DatabaseReplicaPtrOutput `pulumi:"replica"`
	// A slug identifier representing the size of the node for the read-only replica. The size of the replica must be at least as large as the node size for the database cluster from which it is replicating.
	Size pulumi.StringOutput `pulumi:"size"`
	// A string representing the current status of the database cluster.
	Status DatabaseReplicaStatusPtrOutput `pulumi:"status"`
	// A flat array of tag names as strings to apply to the read-only replica after it is created. Tag names can either be existing or new tags.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewDatabasesReplica registers a new resource with the given unique name, arguments, and options.
func NewDatabasesReplica(ctx *pulumi.Context,
	name string, args *DatabasesReplicaArgs, opts ...pulumi.ResourceOption) (*DatabasesReplica, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabasesReplica
	err := ctx.RegisterResource("digitalocean-native:databases/v2:DatabasesReplica", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabasesReplica gets an existing DatabasesReplica resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabasesReplica(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabasesReplicaState, opts ...pulumi.ResourceOption) (*DatabasesReplica, error) {
	var resource DatabasesReplica
	err := ctx.ReadResource("digitalocean-native:databases/v2:DatabasesReplica", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabasesReplica resources.
type databasesReplicaState struct {
}

type DatabasesReplicaState struct {
}

func (DatabasesReplicaState) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesReplicaState)(nil)).Elem()
}

type databasesReplicaArgs struct {
	Connection *DatabaseReplicaConnection `pulumi:"connection"`
	// A time value given in ISO8601 combined date and time format that represents when the database cluster was created.
	CreatedAt *string `pulumi:"createdAt"`
	// A unique identifier for a database cluster.
	DatabaseClusterUuid *string `pulumi:"databaseClusterUuid"`
	// The name to give the read-only replicating
	Name              string                            `pulumi:"name"`
	PrivateConnection *DatabaseReplicaPrivateConnection `pulumi:"privateConnection"`
	// A string specifying the UUID of the VPC to which the read-only replica will be assigned. If excluded, the replica will be assigned to your account's default VPC for the region.
	PrivateNetworkUuid *string `pulumi:"privateNetworkUuid"`
	// A slug identifier for the region where the read-only replica will be located. If excluded, the replica will be placed in the same region as the cluster.
	Region *string `pulumi:"region"`
	// A slug identifier representing the size of the node for the read-only replica. The size of the replica must be at least as large as the node size for the database cluster from which it is replicating.
	Size *string `pulumi:"size"`
	// A string representing the current status of the database cluster.
	Status *DatabaseReplicaStatus `pulumi:"status"`
	// A flat array of tag names as strings to apply to the read-only replica after it is created. Tag names can either be existing or new tags.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a DatabasesReplica resource.
type DatabasesReplicaArgs struct {
	Connection DatabaseReplicaConnectionPtrInput
	// A time value given in ISO8601 combined date and time format that represents when the database cluster was created.
	CreatedAt pulumi.StringPtrInput
	// A unique identifier for a database cluster.
	DatabaseClusterUuid pulumi.StringPtrInput
	// The name to give the read-only replicating
	Name              pulumi.StringInput
	PrivateConnection DatabaseReplicaPrivateConnectionPtrInput
	// A string specifying the UUID of the VPC to which the read-only replica will be assigned. If excluded, the replica will be assigned to your account's default VPC for the region.
	PrivateNetworkUuid pulumi.StringPtrInput
	// A slug identifier for the region where the read-only replica will be located. If excluded, the replica will be placed in the same region as the cluster.
	Region pulumi.StringPtrInput
	// A slug identifier representing the size of the node for the read-only replica. The size of the replica must be at least as large as the node size for the database cluster from which it is replicating.
	Size pulumi.StringPtrInput
	// A string representing the current status of the database cluster.
	Status DatabaseReplicaStatusPtrInput
	// A flat array of tag names as strings to apply to the read-only replica after it is created. Tag names can either be existing or new tags.
	Tags pulumi.StringArrayInput
}

func (DatabasesReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesReplicaArgs)(nil)).Elem()
}

type DatabasesReplicaInput interface {
	pulumi.Input

	ToDatabasesReplicaOutput() DatabasesReplicaOutput
	ToDatabasesReplicaOutputWithContext(ctx context.Context) DatabasesReplicaOutput
}

func (*DatabasesReplica) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesReplica)(nil)).Elem()
}

func (i *DatabasesReplica) ToDatabasesReplicaOutput() DatabasesReplicaOutput {
	return i.ToDatabasesReplicaOutputWithContext(context.Background())
}

func (i *DatabasesReplica) ToDatabasesReplicaOutputWithContext(ctx context.Context) DatabasesReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesReplicaOutput)
}

type DatabasesReplicaOutput struct{ *pulumi.OutputState }

func (DatabasesReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesReplica)(nil)).Elem()
}

func (o DatabasesReplicaOutput) ToDatabasesReplicaOutput() DatabasesReplicaOutput {
	return o
}

func (o DatabasesReplicaOutput) ToDatabasesReplicaOutputWithContext(ctx context.Context) DatabasesReplicaOutput {
	return o
}

func (o DatabasesReplicaOutput) Connection() DatabaseReplicaConnectionPtrOutput {
	return o.ApplyT(func(v *DatabasesReplica) DatabaseReplicaConnectionPtrOutput { return v.Connection }).(DatabaseReplicaConnectionPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the database cluster was created.
func (o DatabasesReplicaOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasesReplica) pulumi.StringPtrOutput { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The name to give the read-only replicating
func (o DatabasesReplicaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasesReplica) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DatabasesReplicaOutput) PrivateConnection() DatabaseReplicaPrivateConnectionPtrOutput {
	return o.ApplyT(func(v *DatabasesReplica) DatabaseReplicaPrivateConnectionPtrOutput { return v.PrivateConnection }).(DatabaseReplicaPrivateConnectionPtrOutput)
}

// A string specifying the UUID of the VPC to which the read-only replica will be assigned. If excluded, the replica will be assigned to your account's default VPC for the region.
func (o DatabasesReplicaOutput) PrivateNetworkUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasesReplica) pulumi.StringPtrOutput { return v.PrivateNetworkUuid }).(pulumi.StringPtrOutput)
}

// A slug identifier for the region where the read-only replica will be located. If excluded, the replica will be placed in the same region as the cluster.
func (o DatabasesReplicaOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasesReplica) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

func (o DatabasesReplicaOutput) Replica() DatabaseReplicaPtrOutput {
	return o.ApplyT(func(v *DatabasesReplica) DatabaseReplicaPtrOutput { return v.Replica }).(DatabaseReplicaPtrOutput)
}

// A slug identifier representing the size of the node for the read-only replica. The size of the replica must be at least as large as the node size for the database cluster from which it is replicating.
func (o DatabasesReplicaOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasesReplica) pulumi.StringOutput { return v.Size }).(pulumi.StringOutput)
}

// A string representing the current status of the database cluster.
func (o DatabasesReplicaOutput) Status() DatabaseReplicaStatusPtrOutput {
	return o.ApplyT(func(v *DatabasesReplica) DatabaseReplicaStatusPtrOutput { return v.Status }).(DatabaseReplicaStatusPtrOutput)
}

// A flat array of tag names as strings to apply to the read-only replica after it is created. Tag names can either be existing or new tags.
func (o DatabasesReplicaOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabasesReplica) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesReplicaInput)(nil)).Elem(), &DatabasesReplica{})
	pulumi.RegisterOutputType(DatabasesReplicaOutput{})
}
