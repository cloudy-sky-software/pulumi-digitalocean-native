// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabasesUser struct {
	pulumi.CustomResourceState

	MysqlSettings MysqlSettingsPtrOutput `pulumi:"mysqlSettings"`
	// The name of a database user.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// A randomly generated password for the database user.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// For MongoDB clusters, set to `true` to create a read-only user.
	// This option is not currently supported for other database engines.
	Readonly pulumi.BoolPtrOutput `pulumi:"readonly"`
	// A string representing the database user's role. The value will be either
	// "primary" or "normal".
	Role DatabaseUserRolePtrOutput `pulumi:"role"`
	User DatabaseUserOutput        `pulumi:"user"`
}

// NewDatabasesUser registers a new resource with the given unique name, arguments, and options.
func NewDatabasesUser(ctx *pulumi.Context,
	name string, args *DatabasesUserArgs, opts ...pulumi.ResourceOption) (*DatabasesUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabasesUser
	err := ctx.RegisterResource("digitalocean-native:databases/v2:DatabasesUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabasesUser gets an existing DatabasesUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabasesUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabasesUserState, opts ...pulumi.ResourceOption) (*DatabasesUser, error) {
	var resource DatabasesUser
	err := ctx.ReadResource("digitalocean-native:databases/v2:DatabasesUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabasesUser resources.
type databasesUserState struct {
}

type DatabasesUserState struct {
}

func (DatabasesUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesUserState)(nil)).Elem()
}

type databasesUserArgs struct {
	// A unique identifier for a database cluster.
	DatabaseClusterUuid *string        `pulumi:"databaseClusterUuid"`
	MysqlSettings       *MysqlSettings `pulumi:"mysqlSettings"`
	// The name of a database user.
	Name string `pulumi:"name"`
	// A randomly generated password for the database user.
	Password *string `pulumi:"password"`
	// For MongoDB clusters, set to `true` to create a read-only user.
	// This option is not currently supported for other database engines.
	Readonly *bool `pulumi:"readonly"`
	// A string representing the database user's role. The value will be either
	// "primary" or "normal".
	Role *DatabaseUserRole `pulumi:"role"`
}

// The set of arguments for constructing a DatabasesUser resource.
type DatabasesUserArgs struct {
	// A unique identifier for a database cluster.
	DatabaseClusterUuid pulumi.StringPtrInput
	MysqlSettings       MysqlSettingsPtrInput
	// The name of a database user.
	Name pulumi.StringInput
	// A randomly generated password for the database user.
	Password pulumi.StringPtrInput
	// For MongoDB clusters, set to `true` to create a read-only user.
	// This option is not currently supported for other database engines.
	Readonly pulumi.BoolPtrInput
	// A string representing the database user's role. The value will be either
	// "primary" or "normal".
	Role DatabaseUserRolePtrInput
}

func (DatabasesUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesUserArgs)(nil)).Elem()
}

type DatabasesUserInput interface {
	pulumi.Input

	ToDatabasesUserOutput() DatabasesUserOutput
	ToDatabasesUserOutputWithContext(ctx context.Context) DatabasesUserOutput
}

func (*DatabasesUser) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesUser)(nil)).Elem()
}

func (i *DatabasesUser) ToDatabasesUserOutput() DatabasesUserOutput {
	return i.ToDatabasesUserOutputWithContext(context.Background())
}

func (i *DatabasesUser) ToDatabasesUserOutputWithContext(ctx context.Context) DatabasesUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesUserOutput)
}

type DatabasesUserOutput struct{ *pulumi.OutputState }

func (DatabasesUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesUser)(nil)).Elem()
}

func (o DatabasesUserOutput) ToDatabasesUserOutput() DatabasesUserOutput {
	return o
}

func (o DatabasesUserOutput) ToDatabasesUserOutputWithContext(ctx context.Context) DatabasesUserOutput {
	return o
}

func (o DatabasesUserOutput) MysqlSettings() MysqlSettingsPtrOutput {
	return o.ApplyT(func(v *DatabasesUser) MysqlSettingsPtrOutput { return v.MysqlSettings }).(MysqlSettingsPtrOutput)
}

// The name of a database user.
func (o DatabasesUserOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasesUser) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// A randomly generated password for the database user.
func (o DatabasesUserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasesUser) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// For MongoDB clusters, set to `true` to create a read-only user.
// This option is not currently supported for other database engines.
func (o DatabasesUserOutput) Readonly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabasesUser) pulumi.BoolPtrOutput { return v.Readonly }).(pulumi.BoolPtrOutput)
}

// A string representing the database user's role. The value will be either
// "primary" or "normal".
func (o DatabasesUserOutput) Role() DatabaseUserRolePtrOutput {
	return o.ApplyT(func(v *DatabasesUser) DatabaseUserRolePtrOutput { return v.Role }).(DatabaseUserRolePtrOutput)
}

func (o DatabasesUserOutput) User() DatabaseUserOutput {
	return o.ApplyT(func(v *DatabasesUser) DatabaseUserOutput { return v.User }).(DatabaseUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesUserInput)(nil)).Elem(), &DatabasesUser{})
	pulumi.RegisterOutputType(DatabasesUserOutput{})
}
