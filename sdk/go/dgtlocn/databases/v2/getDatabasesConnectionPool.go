// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupDatabasesConnectionPool(ctx *pulumi.Context, args *LookupDatabasesConnectionPoolArgs, opts ...pulumi.InvokeOption) (*LookupDatabasesConnectionPoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDatabasesConnectionPoolResult
	err := ctx.Invoke("digitalocean-native:databases/v2:getDatabasesConnectionPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDatabasesConnectionPoolArgs struct {
	// A unique identifier for a database cluster.
	DatabaseClusterUuid string `pulumi:"databaseClusterUuid"`
	// The name used to identify the connection pool.
	PoolName string `pulumi:"poolName"`
}

type LookupDatabasesConnectionPoolResult struct {
	Pool ConnectionPool `pulumi:"pool"`
}

func LookupDatabasesConnectionPoolOutput(ctx *pulumi.Context, args LookupDatabasesConnectionPoolOutputArgs, opts ...pulumi.InvokeOption) LookupDatabasesConnectionPoolResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDatabasesConnectionPoolResultOutput, error) {
			args := v.(LookupDatabasesConnectionPoolArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("digitalocean-native:databases/v2:getDatabasesConnectionPool", args, LookupDatabasesConnectionPoolResultOutput{}, options).(LookupDatabasesConnectionPoolResultOutput), nil
		}).(LookupDatabasesConnectionPoolResultOutput)
}

type LookupDatabasesConnectionPoolOutputArgs struct {
	// A unique identifier for a database cluster.
	DatabaseClusterUuid pulumi.StringInput `pulumi:"databaseClusterUuid"`
	// The name used to identify the connection pool.
	PoolName pulumi.StringInput `pulumi:"poolName"`
}

func (LookupDatabasesConnectionPoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabasesConnectionPoolArgs)(nil)).Elem()
}

type LookupDatabasesConnectionPoolResultOutput struct{ *pulumi.OutputState }

func (LookupDatabasesConnectionPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabasesConnectionPoolResult)(nil)).Elem()
}

func (o LookupDatabasesConnectionPoolResultOutput) ToLookupDatabasesConnectionPoolResultOutput() LookupDatabasesConnectionPoolResultOutput {
	return o
}

func (o LookupDatabasesConnectionPoolResultOutput) ToLookupDatabasesConnectionPoolResultOutputWithContext(ctx context.Context) LookupDatabasesConnectionPoolResultOutput {
	return o
}

func (o LookupDatabasesConnectionPoolResultOutput) Pool() ConnectionPoolOutput {
	return o.ApplyT(func(v LookupDatabasesConnectionPoolResult) ConnectionPool { return v.Pool }).(ConnectionPoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabasesConnectionPoolResultOutput{})
}
