// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type Backup struct {
	// A time value given in ISO8601 combined date and time format at which the backup was created.
	CreatedAt string `pulumi:"createdAt"`
	// The size of the database backup in GBs.
	SizeGigabytes float64 `pulumi:"sizeGigabytes"`
}

type BackupOutput struct{ *pulumi.OutputState }

func (BackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Backup)(nil)).Elem()
}

func (o BackupOutput) ToBackupOutput() BackupOutput {
	return o
}

func (o BackupOutput) ToBackupOutputWithContext(ctx context.Context) BackupOutput {
	return o
}

// A time value given in ISO8601 combined date and time format at which the backup was created.
func (o BackupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v Backup) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The size of the database backup in GBs.
func (o BackupOutput) SizeGigabytes() pulumi.Float64Output {
	return o.ApplyT(func(v Backup) float64 { return v.SizeGigabytes }).(pulumi.Float64Output)
}

type BackupArrayOutput struct{ *pulumi.OutputState }

func (BackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Backup)(nil)).Elem()
}

func (o BackupArrayOutput) ToBackupArrayOutput() BackupArrayOutput {
	return o
}

func (o BackupArrayOutput) ToBackupArrayOutputWithContext(ctx context.Context) BackupArrayOutput {
	return o
}

func (o BackupArrayOutput) Index(i pulumi.IntInput) BackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Backup {
		return vs[0].([]Backup)[vs[1].(int)]
	}).(BackupOutput)
}

type Ca struct {
	// base64 encoding of the certificate used to secure database connections
	Certificate string `pulumi:"certificate"`
}

type CaOutput struct{ *pulumi.OutputState }

func (CaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Ca)(nil)).Elem()
}

func (o CaOutput) ToCaOutput() CaOutput {
	return o
}

func (o CaOutput) ToCaOutputWithContext(ctx context.Context) CaOutput {
	return o
}

// base64 encoding of the certificate used to secure database connections
func (o CaOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v Ca) string { return v.Certificate }).(pulumi.StringOutput)
}

type Connection struct {
	// The name of the default database.
	Database *string `pulumi:"database"`
	// The FQDN pointing to the database cluster's current primary node.
	Host *string `pulumi:"host"`
	// The randomly generated password for the default user.
	Password *string `pulumi:"password"`
	// The port on which the database cluster is listening.
	Port *int `pulumi:"port"`
	// A boolean value indicating if the connection should be made over SSL.
	Ssl *bool `pulumi:"ssl"`
	// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
	Uri *string `pulumi:"uri"`
	// The default user for the database.
	User *string `pulumi:"user"`
}

// ConnectionInput is an input type that accepts ConnectionArgs and ConnectionOutput values.
// You can construct a concrete instance of `ConnectionInput` via:
//
//	ConnectionArgs{...}
type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(context.Context) ConnectionOutput
}

type ConnectionArgs struct {
	// The name of the default database.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// The FQDN pointing to the database cluster's current primary node.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The randomly generated password for the default user.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port on which the database cluster is listening.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// A boolean value indicating if the connection should be made over SSL.
	Ssl pulumi.BoolPtrInput `pulumi:"ssl"`
	// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
	// The default user for the database.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Connection)(nil)).Elem()
}

func (i ConnectionArgs) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i ConnectionArgs) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

func (i ConnectionArgs) ToConnectionPtrOutput() ConnectionPtrOutput {
	return i.ToConnectionPtrOutputWithContext(context.Background())
}

func (i ConnectionArgs) ToConnectionPtrOutputWithContext(ctx context.Context) ConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput).ToConnectionPtrOutputWithContext(ctx)
}

// ConnectionPtrInput is an input type that accepts ConnectionArgs, ConnectionPtr and ConnectionPtrOutput values.
// You can construct a concrete instance of `ConnectionPtrInput` via:
//
//	        ConnectionArgs{...}
//
//	or:
//
//	        nil
type ConnectionPtrInput interface {
	pulumi.Input

	ToConnectionPtrOutput() ConnectionPtrOutput
	ToConnectionPtrOutputWithContext(context.Context) ConnectionPtrOutput
}

type connectionPtrType ConnectionArgs

func ConnectionPtr(v *ConnectionArgs) ConnectionPtrInput {
	return (*connectionPtrType)(v)
}

func (*connectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *connectionPtrType) ToConnectionPtrOutput() ConnectionPtrOutput {
	return i.ToConnectionPtrOutputWithContext(context.Background())
}

func (i *connectionPtrType) ToConnectionPtrOutputWithContext(ctx context.Context) ConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPtrOutput)
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionPtrOutput() ConnectionPtrOutput {
	return o.ToConnectionPtrOutputWithContext(context.Background())
}

func (o ConnectionOutput) ToConnectionPtrOutputWithContext(ctx context.Context) ConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Connection) *Connection {
		return &v
	}).(ConnectionPtrOutput)
}

// The name of the default database.
func (o ConnectionOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Connection) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o ConnectionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Connection) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o ConnectionOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Connection) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o ConnectionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Connection) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A boolean value indicating if the connection should be made over SSL.
func (o ConnectionOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Connection) *bool { return v.Ssl }).(pulumi.BoolPtrOutput)
}

// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
func (o ConnectionOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Connection) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// The default user for the database.
func (o ConnectionOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Connection) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ConnectionPtrOutput struct{ *pulumi.OutputState }

func (ConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionPtrOutput) ToConnectionPtrOutput() ConnectionPtrOutput {
	return o
}

func (o ConnectionPtrOutput) ToConnectionPtrOutputWithContext(ctx context.Context) ConnectionPtrOutput {
	return o
}

func (o ConnectionPtrOutput) Elem() ConnectionOutput {
	return o.ApplyT(func(v *Connection) Connection {
		if v != nil {
			return *v
		}
		var ret Connection
		return ret
	}).(ConnectionOutput)
}

// The name of the default database.
func (o ConnectionPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o ConnectionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o ConnectionPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o ConnectionPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Connection) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// A boolean value indicating if the connection should be made over SSL.
func (o ConnectionPtrOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Connection) *bool {
		if v == nil {
			return nil
		}
		return v.Ssl
	}).(pulumi.BoolPtrOutput)
}

// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
func (o ConnectionPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The default user for the database.
func (o ConnectionPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

type ConnectionPool struct {
	Connection *ConnectionPoolConnection `pulumi:"connection"`
	// The database for use with the connection pool.
	Db string `pulumi:"db"`
	// The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
	Mode string `pulumi:"mode"`
	// A unique name for the connection pool. Must be between 3 and 60 characters.
	Name              string                           `pulumi:"name"`
	PrivateConnection *ConnectionPoolPrivateConnection `pulumi:"privateConnection"`
	// The desired size of the PGBouncer connection pool. The maximum allowed size is determined by the size of the cluster's primary node. 25 backend server connections are allowed for every 1GB of RAM. Three are reserved for maintenance. For example, a primary node with 1 GB of RAM allows for a maximum of 22 backend server connections while one with 4 GB would allow for 97. Note that these are shared across all connection pools in a cluster.
	Size int `pulumi:"size"`
	// The name of the user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
	User *string `pulumi:"user"`
}

type ConnectionPoolOutput struct{ *pulumi.OutputState }

func (ConnectionPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPool)(nil)).Elem()
}

func (o ConnectionPoolOutput) ToConnectionPoolOutput() ConnectionPoolOutput {
	return o
}

func (o ConnectionPoolOutput) ToConnectionPoolOutputWithContext(ctx context.Context) ConnectionPoolOutput {
	return o
}

func (o ConnectionPoolOutput) Connection() ConnectionPoolConnectionPtrOutput {
	return o.ApplyT(func(v ConnectionPool) *ConnectionPoolConnection { return v.Connection }).(ConnectionPoolConnectionPtrOutput)
}

// The database for use with the connection pool.
func (o ConnectionPoolOutput) Db() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPool) string { return v.Db }).(pulumi.StringOutput)
}

// The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
func (o ConnectionPoolOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPool) string { return v.Mode }).(pulumi.StringOutput)
}

// A unique name for the connection pool. Must be between 3 and 60 characters.
func (o ConnectionPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPool) string { return v.Name }).(pulumi.StringOutput)
}

func (o ConnectionPoolOutput) PrivateConnection() ConnectionPoolPrivateConnectionPtrOutput {
	return o.ApplyT(func(v ConnectionPool) *ConnectionPoolPrivateConnection { return v.PrivateConnection }).(ConnectionPoolPrivateConnectionPtrOutput)
}

// The desired size of the PGBouncer connection pool. The maximum allowed size is determined by the size of the cluster's primary node. 25 backend server connections are allowed for every 1GB of RAM. Three are reserved for maintenance. For example, a primary node with 1 GB of RAM allows for a maximum of 22 backend server connections while one with 4 GB would allow for 97. Note that these are shared across all connection pools in a cluster.
func (o ConnectionPoolOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v ConnectionPool) int { return v.Size }).(pulumi.IntOutput)
}

// The name of the user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
func (o ConnectionPoolOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPool) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ConnectionPoolArrayOutput struct{ *pulumi.OutputState }

func (ConnectionPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionPool)(nil)).Elem()
}

func (o ConnectionPoolArrayOutput) ToConnectionPoolArrayOutput() ConnectionPoolArrayOutput {
	return o
}

func (o ConnectionPoolArrayOutput) ToConnectionPoolArrayOutputWithContext(ctx context.Context) ConnectionPoolArrayOutput {
	return o
}

func (o ConnectionPoolArrayOutput) Index(i pulumi.IntInput) ConnectionPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectionPool {
		return vs[0].([]ConnectionPool)[vs[1].(int)]
	}).(ConnectionPoolOutput)
}

type ConnectionPoolConnection struct {
	// The name of the default database.
	Database *string `pulumi:"database"`
	// The FQDN pointing to the database cluster's current primary node.
	Host *string `pulumi:"host"`
	// The randomly generated password for the default user.
	Password *string `pulumi:"password"`
	// The port on which the database cluster is listening.
	Port *int `pulumi:"port"`
	// A boolean value indicating if the connection should be made over SSL.
	Ssl *bool `pulumi:"ssl"`
	// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
	Uri *string `pulumi:"uri"`
	// The default user for the database.
	User *string `pulumi:"user"`
}

type ConnectionPoolConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionPoolConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPoolConnection)(nil)).Elem()
}

func (o ConnectionPoolConnectionOutput) ToConnectionPoolConnectionOutput() ConnectionPoolConnectionOutput {
	return o
}

func (o ConnectionPoolConnectionOutput) ToConnectionPoolConnectionOutputWithContext(ctx context.Context) ConnectionPoolConnectionOutput {
	return o
}

// The name of the default database.
func (o ConnectionPoolConnectionOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPoolConnection) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o ConnectionPoolConnectionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPoolConnection) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o ConnectionPoolConnectionOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPoolConnection) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o ConnectionPoolConnectionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionPoolConnection) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A boolean value indicating if the connection should be made over SSL.
func (o ConnectionPoolConnectionOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectionPoolConnection) *bool { return v.Ssl }).(pulumi.BoolPtrOutput)
}

// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
func (o ConnectionPoolConnectionOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPoolConnection) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// The default user for the database.
func (o ConnectionPoolConnectionOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPoolConnection) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ConnectionPoolConnectionPtrOutput struct{ *pulumi.OutputState }

func (ConnectionPoolConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPoolConnection)(nil)).Elem()
}

func (o ConnectionPoolConnectionPtrOutput) ToConnectionPoolConnectionPtrOutput() ConnectionPoolConnectionPtrOutput {
	return o
}

func (o ConnectionPoolConnectionPtrOutput) ToConnectionPoolConnectionPtrOutputWithContext(ctx context.Context) ConnectionPoolConnectionPtrOutput {
	return o
}

func (o ConnectionPoolConnectionPtrOutput) Elem() ConnectionPoolConnectionOutput {
	return o.ApplyT(func(v *ConnectionPoolConnection) ConnectionPoolConnection {
		if v != nil {
			return *v
		}
		var ret ConnectionPoolConnection
		return ret
	}).(ConnectionPoolConnectionOutput)
}

// The name of the default database.
func (o ConnectionPoolConnectionPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPoolConnection) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o ConnectionPoolConnectionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPoolConnection) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o ConnectionPoolConnectionPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPoolConnection) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o ConnectionPoolConnectionPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionPoolConnection) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// A boolean value indicating if the connection should be made over SSL.
func (o ConnectionPoolConnectionPtrOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectionPoolConnection) *bool {
		if v == nil {
			return nil
		}
		return v.Ssl
	}).(pulumi.BoolPtrOutput)
}

// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
func (o ConnectionPoolConnectionPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPoolConnection) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The default user for the database.
func (o ConnectionPoolConnectionPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPoolConnection) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

type ConnectionPoolPrivateConnection struct {
	// The name of the default database.
	Database *string `pulumi:"database"`
	// The FQDN pointing to the database cluster's current primary node.
	Host *string `pulumi:"host"`
	// The randomly generated password for the default user.
	Password *string `pulumi:"password"`
	// The port on which the database cluster is listening.
	Port *int `pulumi:"port"`
	// A boolean value indicating if the connection should be made over SSL.
	Ssl *bool `pulumi:"ssl"`
	// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
	Uri *string `pulumi:"uri"`
	// The default user for the database.
	User *string `pulumi:"user"`
}

type ConnectionPoolPrivateConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionPoolPrivateConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPoolPrivateConnection)(nil)).Elem()
}

func (o ConnectionPoolPrivateConnectionOutput) ToConnectionPoolPrivateConnectionOutput() ConnectionPoolPrivateConnectionOutput {
	return o
}

func (o ConnectionPoolPrivateConnectionOutput) ToConnectionPoolPrivateConnectionOutputWithContext(ctx context.Context) ConnectionPoolPrivateConnectionOutput {
	return o
}

// The name of the default database.
func (o ConnectionPoolPrivateConnectionOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPoolPrivateConnection) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o ConnectionPoolPrivateConnectionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPoolPrivateConnection) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o ConnectionPoolPrivateConnectionOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPoolPrivateConnection) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o ConnectionPoolPrivateConnectionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionPoolPrivateConnection) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A boolean value indicating if the connection should be made over SSL.
func (o ConnectionPoolPrivateConnectionOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectionPoolPrivateConnection) *bool { return v.Ssl }).(pulumi.BoolPtrOutput)
}

// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
func (o ConnectionPoolPrivateConnectionOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPoolPrivateConnection) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// The default user for the database.
func (o ConnectionPoolPrivateConnectionOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPoolPrivateConnection) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ConnectionPoolPrivateConnectionPtrOutput struct{ *pulumi.OutputState }

func (ConnectionPoolPrivateConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPoolPrivateConnection)(nil)).Elem()
}

func (o ConnectionPoolPrivateConnectionPtrOutput) ToConnectionPoolPrivateConnectionPtrOutput() ConnectionPoolPrivateConnectionPtrOutput {
	return o
}

func (o ConnectionPoolPrivateConnectionPtrOutput) ToConnectionPoolPrivateConnectionPtrOutputWithContext(ctx context.Context) ConnectionPoolPrivateConnectionPtrOutput {
	return o
}

func (o ConnectionPoolPrivateConnectionPtrOutput) Elem() ConnectionPoolPrivateConnectionOutput {
	return o.ApplyT(func(v *ConnectionPoolPrivateConnection) ConnectionPoolPrivateConnection {
		if v != nil {
			return *v
		}
		var ret ConnectionPoolPrivateConnection
		return ret
	}).(ConnectionPoolPrivateConnectionOutput)
}

// The name of the default database.
func (o ConnectionPoolPrivateConnectionPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPoolPrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o ConnectionPoolPrivateConnectionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPoolPrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o ConnectionPoolPrivateConnectionPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPoolPrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o ConnectionPoolPrivateConnectionPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionPoolPrivateConnection) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// A boolean value indicating if the connection should be made over SSL.
func (o ConnectionPoolPrivateConnectionPtrOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectionPoolPrivateConnection) *bool {
		if v == nil {
			return nil
		}
		return v.Ssl
	}).(pulumi.BoolPtrOutput)
}

// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
func (o ConnectionPoolPrivateConnectionPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPoolPrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The default user for the database.
func (o ConnectionPoolPrivateConnectionPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPoolPrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

type ConnectionPools struct {
	// An array of connection pool objects.
	Pools []ConnectionPool `pulumi:"pools"`
}

type ConnectionPoolsOutput struct{ *pulumi.OutputState }

func (ConnectionPoolsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPools)(nil)).Elem()
}

func (o ConnectionPoolsOutput) ToConnectionPoolsOutput() ConnectionPoolsOutput {
	return o
}

func (o ConnectionPoolsOutput) ToConnectionPoolsOutputWithContext(ctx context.Context) ConnectionPoolsOutput {
	return o
}

// An array of connection pool objects.
func (o ConnectionPoolsOutput) Pools() ConnectionPoolArrayOutput {
	return o.ApplyT(func(v ConnectionPools) []ConnectionPool { return v.Pools }).(ConnectionPoolArrayOutput)
}

type Database struct {
	// The name of the database.
	Name string `pulumi:"name"`
}

type DatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Database)(nil)).Elem()
}

func (o DatabaseOutput) ToDatabaseOutput() DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return o
}

// The name of the database.
func (o DatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Database) string { return v.Name }).(pulumi.StringOutput)
}

type DatabaseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Database)(nil)).Elem()
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) Index(i pulumi.IntInput) DatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Database {
		return vs[0].([]Database)[vs[1].(int)]
	}).(DatabaseOutput)
}

type DatabaseBackup struct {
	// The timestamp of an existing database cluster backup in ISO8601 combined date and time format. The most recent backup will be used if excluded.
	BackupCreatedAt *string `pulumi:"backupCreatedAt"`
	// The name of an existing database cluster from which the backup will be restored.
	DatabaseName string `pulumi:"databaseName"`
}

// DatabaseBackupInput is an input type that accepts DatabaseBackupArgs and DatabaseBackupOutput values.
// You can construct a concrete instance of `DatabaseBackupInput` via:
//
//	DatabaseBackupArgs{...}
type DatabaseBackupInput interface {
	pulumi.Input

	ToDatabaseBackupOutput() DatabaseBackupOutput
	ToDatabaseBackupOutputWithContext(context.Context) DatabaseBackupOutput
}

type DatabaseBackupArgs struct {
	// The timestamp of an existing database cluster backup in ISO8601 combined date and time format. The most recent backup will be used if excluded.
	BackupCreatedAt pulumi.StringPtrInput `pulumi:"backupCreatedAt"`
	// The name of an existing database cluster from which the backup will be restored.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
}

func (DatabaseBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseBackup)(nil)).Elem()
}

func (i DatabaseBackupArgs) ToDatabaseBackupOutput() DatabaseBackupOutput {
	return i.ToDatabaseBackupOutputWithContext(context.Background())
}

func (i DatabaseBackupArgs) ToDatabaseBackupOutputWithContext(ctx context.Context) DatabaseBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseBackupOutput)
}

func (i DatabaseBackupArgs) ToDatabaseBackupPtrOutput() DatabaseBackupPtrOutput {
	return i.ToDatabaseBackupPtrOutputWithContext(context.Background())
}

func (i DatabaseBackupArgs) ToDatabaseBackupPtrOutputWithContext(ctx context.Context) DatabaseBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseBackupOutput).ToDatabaseBackupPtrOutputWithContext(ctx)
}

// DatabaseBackupPtrInput is an input type that accepts DatabaseBackupArgs, DatabaseBackupPtr and DatabaseBackupPtrOutput values.
// You can construct a concrete instance of `DatabaseBackupPtrInput` via:
//
//	        DatabaseBackupArgs{...}
//
//	or:
//
//	        nil
type DatabaseBackupPtrInput interface {
	pulumi.Input

	ToDatabaseBackupPtrOutput() DatabaseBackupPtrOutput
	ToDatabaseBackupPtrOutputWithContext(context.Context) DatabaseBackupPtrOutput
}

type databaseBackupPtrType DatabaseBackupArgs

func DatabaseBackupPtr(v *DatabaseBackupArgs) DatabaseBackupPtrInput {
	return (*databaseBackupPtrType)(v)
}

func (*databaseBackupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseBackup)(nil)).Elem()
}

func (i *databaseBackupPtrType) ToDatabaseBackupPtrOutput() DatabaseBackupPtrOutput {
	return i.ToDatabaseBackupPtrOutputWithContext(context.Background())
}

func (i *databaseBackupPtrType) ToDatabaseBackupPtrOutputWithContext(ctx context.Context) DatabaseBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseBackupPtrOutput)
}

type DatabaseBackupOutput struct{ *pulumi.OutputState }

func (DatabaseBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseBackup)(nil)).Elem()
}

func (o DatabaseBackupOutput) ToDatabaseBackupOutput() DatabaseBackupOutput {
	return o
}

func (o DatabaseBackupOutput) ToDatabaseBackupOutputWithContext(ctx context.Context) DatabaseBackupOutput {
	return o
}

func (o DatabaseBackupOutput) ToDatabaseBackupPtrOutput() DatabaseBackupPtrOutput {
	return o.ToDatabaseBackupPtrOutputWithContext(context.Background())
}

func (o DatabaseBackupOutput) ToDatabaseBackupPtrOutputWithContext(ctx context.Context) DatabaseBackupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseBackup) *DatabaseBackup {
		return &v
	}).(DatabaseBackupPtrOutput)
}

// The timestamp of an existing database cluster backup in ISO8601 combined date and time format. The most recent backup will be used if excluded.
func (o DatabaseBackupOutput) BackupCreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseBackup) *string { return v.BackupCreatedAt }).(pulumi.StringPtrOutput)
}

// The name of an existing database cluster from which the backup will be restored.
func (o DatabaseBackupOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseBackup) string { return v.DatabaseName }).(pulumi.StringOutput)
}

type DatabaseBackupPtrOutput struct{ *pulumi.OutputState }

func (DatabaseBackupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseBackup)(nil)).Elem()
}

func (o DatabaseBackupPtrOutput) ToDatabaseBackupPtrOutput() DatabaseBackupPtrOutput {
	return o
}

func (o DatabaseBackupPtrOutput) ToDatabaseBackupPtrOutputWithContext(ctx context.Context) DatabaseBackupPtrOutput {
	return o
}

func (o DatabaseBackupPtrOutput) Elem() DatabaseBackupOutput {
	return o.ApplyT(func(v *DatabaseBackup) DatabaseBackup {
		if v != nil {
			return *v
		}
		var ret DatabaseBackup
		return ret
	}).(DatabaseBackupOutput)
}

// The timestamp of an existing database cluster backup in ISO8601 combined date and time format. The most recent backup will be used if excluded.
func (o DatabaseBackupPtrOutput) BackupCreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseBackup) *string {
		if v == nil {
			return nil
		}
		return v.BackupCreatedAt
	}).(pulumi.StringPtrOutput)
}

// The name of an existing database cluster from which the backup will be restored.
func (o DatabaseBackupPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseBackup) *string {
		if v == nil {
			return nil
		}
		return &v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

type DatabaseCluster struct {
	Connection *DatabaseClusterConnection `pulumi:"connection"`
	// A time value given in ISO8601 combined date and time format that represents when the database cluster was created.
	CreatedAt *string `pulumi:"createdAt"`
	// An array of strings containing the names of databases created in the database cluster.
	DbNames []string `pulumi:"dbNames"`
	// A slug representing the database engine used for the cluster. The possible values are: "pg" for PostgreSQL, "mysql" for MySQL, "redis" for Redis, and "mongodb" for MongoDB.
	Engine DatabaseClusterEngine `pulumi:"engine"`
	// A unique ID that can be used to identify and reference a database cluster.
	Id                *string                           `pulumi:"id"`
	MaintenanceWindow *DatabaseClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	// A unique, human-readable name referring to a database cluster.
	Name string `pulumi:"name"`
	// The number of nodes in the database cluster.
	NumNodes          int                               `pulumi:"numNodes"`
	PrivateConnection *DatabaseClusterPrivateConnection `pulumi:"privateConnection"`
	// A string specifying the UUID of the VPC to which the database cluster will be assigned. If excluded, the cluster when creating a new database cluster, it will be assigned to your account's default VPC for the region.
	PrivateNetworkUuid *string `pulumi:"privateNetworkUuid"`
	// The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
	ProjectId *string `pulumi:"projectId"`
	// The slug identifier for the region where the database cluster is located.
	Region string         `pulumi:"region"`
	Rules  []FirewallRule `pulumi:"rules"`
	// A string representing the semantic version of the database engine in use for the cluster.
	SemanticVersion *string `pulumi:"semanticVersion"`
	// The slug identifier representing the size of the nodes in the database cluster.
	Size string `pulumi:"size"`
	// A string representing the current status of the database cluster.
	Status *DatabaseClusterStatus `pulumi:"status"`
	// An array of tags that have been applied to the database cluster.
	Tags  []string       `pulumi:"tags"`
	Users []DatabaseUser `pulumi:"users"`
	// A string representing the version of the database engine in use for the cluster.
	Version *string `pulumi:"version"`
	// A timestamp referring to the date when the particular version will no longer be available for creating new clusters. If null, the version does not have an end of availability timeline.
	VersionEndOfAvailability *string `pulumi:"versionEndOfAvailability"`
	// A timestamp referring to the date when the particular version will no longer be supported. If null, the version does not have an end of life timeline.
	VersionEndOfLife *string `pulumi:"versionEndOfLife"`
}

type DatabaseClusterOutput struct{ *pulumi.OutputState }

func (DatabaseClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseCluster)(nil)).Elem()
}

func (o DatabaseClusterOutput) ToDatabaseClusterOutput() DatabaseClusterOutput {
	return o
}

func (o DatabaseClusterOutput) ToDatabaseClusterOutputWithContext(ctx context.Context) DatabaseClusterOutput {
	return o
}

func (o DatabaseClusterOutput) Connection() DatabaseClusterConnectionPtrOutput {
	return o.ApplyT(func(v DatabaseCluster) *DatabaseClusterConnection { return v.Connection }).(DatabaseClusterConnectionPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the database cluster was created.
func (o DatabaseClusterOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseCluster) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// An array of strings containing the names of databases created in the database cluster.
func (o DatabaseClusterOutput) DbNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseCluster) []string { return v.DbNames }).(pulumi.StringArrayOutput)
}

// A slug representing the database engine used for the cluster. The possible values are: "pg" for PostgreSQL, "mysql" for MySQL, "redis" for Redis, and "mongodb" for MongoDB.
func (o DatabaseClusterOutput) Engine() DatabaseClusterEngineOutput {
	return o.ApplyT(func(v DatabaseCluster) DatabaseClusterEngine { return v.Engine }).(DatabaseClusterEngineOutput)
}

// A unique ID that can be used to identify and reference a database cluster.
func (o DatabaseClusterOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseCluster) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o DatabaseClusterOutput) MaintenanceWindow() DatabaseClusterMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v DatabaseCluster) *DatabaseClusterMaintenanceWindow { return v.MaintenanceWindow }).(DatabaseClusterMaintenanceWindowPtrOutput)
}

// A unique, human-readable name referring to a database cluster.
func (o DatabaseClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseCluster) string { return v.Name }).(pulumi.StringOutput)
}

// The number of nodes in the database cluster.
func (o DatabaseClusterOutput) NumNodes() pulumi.IntOutput {
	return o.ApplyT(func(v DatabaseCluster) int { return v.NumNodes }).(pulumi.IntOutput)
}

func (o DatabaseClusterOutput) PrivateConnection() DatabaseClusterPrivateConnectionPtrOutput {
	return o.ApplyT(func(v DatabaseCluster) *DatabaseClusterPrivateConnection { return v.PrivateConnection }).(DatabaseClusterPrivateConnectionPtrOutput)
}

// A string specifying the UUID of the VPC to which the database cluster will be assigned. If excluded, the cluster when creating a new database cluster, it will be assigned to your account's default VPC for the region.
func (o DatabaseClusterOutput) PrivateNetworkUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseCluster) *string { return v.PrivateNetworkUuid }).(pulumi.StringPtrOutput)
}

// The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
func (o DatabaseClusterOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseCluster) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The slug identifier for the region where the database cluster is located.
func (o DatabaseClusterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseCluster) string { return v.Region }).(pulumi.StringOutput)
}

func (o DatabaseClusterOutput) Rules() FirewallRuleArrayOutput {
	return o.ApplyT(func(v DatabaseCluster) []FirewallRule { return v.Rules }).(FirewallRuleArrayOutput)
}

// A string representing the semantic version of the database engine in use for the cluster.
func (o DatabaseClusterOutput) SemanticVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseCluster) *string { return v.SemanticVersion }).(pulumi.StringPtrOutput)
}

// The slug identifier representing the size of the nodes in the database cluster.
func (o DatabaseClusterOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseCluster) string { return v.Size }).(pulumi.StringOutput)
}

// A string representing the current status of the database cluster.
func (o DatabaseClusterOutput) Status() DatabaseClusterStatusPtrOutput {
	return o.ApplyT(func(v DatabaseCluster) *DatabaseClusterStatus { return v.Status }).(DatabaseClusterStatusPtrOutput)
}

// An array of tags that have been applied to the database cluster.
func (o DatabaseClusterOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseCluster) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o DatabaseClusterOutput) Users() DatabaseUserArrayOutput {
	return o.ApplyT(func(v DatabaseCluster) []DatabaseUser { return v.Users }).(DatabaseUserArrayOutput)
}

// A string representing the version of the database engine in use for the cluster.
func (o DatabaseClusterOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseCluster) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// A timestamp referring to the date when the particular version will no longer be available for creating new clusters. If null, the version does not have an end of availability timeline.
func (o DatabaseClusterOutput) VersionEndOfAvailability() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseCluster) *string { return v.VersionEndOfAvailability }).(pulumi.StringPtrOutput)
}

// A timestamp referring to the date when the particular version will no longer be supported. If null, the version does not have an end of life timeline.
func (o DatabaseClusterOutput) VersionEndOfLife() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseCluster) *string { return v.VersionEndOfLife }).(pulumi.StringPtrOutput)
}

type DatabaseClusterArrayOutput struct{ *pulumi.OutputState }

func (DatabaseClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseCluster)(nil)).Elem()
}

func (o DatabaseClusterArrayOutput) ToDatabaseClusterArrayOutput() DatabaseClusterArrayOutput {
	return o
}

func (o DatabaseClusterArrayOutput) ToDatabaseClusterArrayOutputWithContext(ctx context.Context) DatabaseClusterArrayOutput {
	return o
}

func (o DatabaseClusterArrayOutput) Index(i pulumi.IntInput) DatabaseClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseCluster {
		return vs[0].([]DatabaseCluster)[vs[1].(int)]
	}).(DatabaseClusterOutput)
}

type DatabaseClusterConnection struct {
	// The name of the default database.
	Database *string `pulumi:"database"`
	// The FQDN pointing to the database cluster's current primary node.
	Host *string `pulumi:"host"`
	// The randomly generated password for the default user.
	Password *string `pulumi:"password"`
	// The port on which the database cluster is listening.
	Port *int `pulumi:"port"`
	// A boolean value indicating if the connection should be made over SSL.
	Ssl *bool `pulumi:"ssl"`
	// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
	Uri *string `pulumi:"uri"`
	// The default user for the database.
	User *string `pulumi:"user"`
}

// DatabaseClusterConnectionInput is an input type that accepts DatabaseClusterConnectionArgs and DatabaseClusterConnectionOutput values.
// You can construct a concrete instance of `DatabaseClusterConnectionInput` via:
//
//	DatabaseClusterConnectionArgs{...}
type DatabaseClusterConnectionInput interface {
	pulumi.Input

	ToDatabaseClusterConnectionOutput() DatabaseClusterConnectionOutput
	ToDatabaseClusterConnectionOutputWithContext(context.Context) DatabaseClusterConnectionOutput
}

type DatabaseClusterConnectionArgs struct {
	// The name of the default database.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// The FQDN pointing to the database cluster's current primary node.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The randomly generated password for the default user.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port on which the database cluster is listening.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// A boolean value indicating if the connection should be made over SSL.
	Ssl pulumi.BoolPtrInput `pulumi:"ssl"`
	// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
	// The default user for the database.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (DatabaseClusterConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseClusterConnection)(nil)).Elem()
}

func (i DatabaseClusterConnectionArgs) ToDatabaseClusterConnectionOutput() DatabaseClusterConnectionOutput {
	return i.ToDatabaseClusterConnectionOutputWithContext(context.Background())
}

func (i DatabaseClusterConnectionArgs) ToDatabaseClusterConnectionOutputWithContext(ctx context.Context) DatabaseClusterConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseClusterConnectionOutput)
}

func (i DatabaseClusterConnectionArgs) ToDatabaseClusterConnectionPtrOutput() DatabaseClusterConnectionPtrOutput {
	return i.ToDatabaseClusterConnectionPtrOutputWithContext(context.Background())
}

func (i DatabaseClusterConnectionArgs) ToDatabaseClusterConnectionPtrOutputWithContext(ctx context.Context) DatabaseClusterConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseClusterConnectionOutput).ToDatabaseClusterConnectionPtrOutputWithContext(ctx)
}

// DatabaseClusterConnectionPtrInput is an input type that accepts DatabaseClusterConnectionArgs, DatabaseClusterConnectionPtr and DatabaseClusterConnectionPtrOutput values.
// You can construct a concrete instance of `DatabaseClusterConnectionPtrInput` via:
//
//	        DatabaseClusterConnectionArgs{...}
//
//	or:
//
//	        nil
type DatabaseClusterConnectionPtrInput interface {
	pulumi.Input

	ToDatabaseClusterConnectionPtrOutput() DatabaseClusterConnectionPtrOutput
	ToDatabaseClusterConnectionPtrOutputWithContext(context.Context) DatabaseClusterConnectionPtrOutput
}

type databaseClusterConnectionPtrType DatabaseClusterConnectionArgs

func DatabaseClusterConnectionPtr(v *DatabaseClusterConnectionArgs) DatabaseClusterConnectionPtrInput {
	return (*databaseClusterConnectionPtrType)(v)
}

func (*databaseClusterConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseClusterConnection)(nil)).Elem()
}

func (i *databaseClusterConnectionPtrType) ToDatabaseClusterConnectionPtrOutput() DatabaseClusterConnectionPtrOutput {
	return i.ToDatabaseClusterConnectionPtrOutputWithContext(context.Background())
}

func (i *databaseClusterConnectionPtrType) ToDatabaseClusterConnectionPtrOutputWithContext(ctx context.Context) DatabaseClusterConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseClusterConnectionPtrOutput)
}

type DatabaseClusterConnectionOutput struct{ *pulumi.OutputState }

func (DatabaseClusterConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseClusterConnection)(nil)).Elem()
}

func (o DatabaseClusterConnectionOutput) ToDatabaseClusterConnectionOutput() DatabaseClusterConnectionOutput {
	return o
}

func (o DatabaseClusterConnectionOutput) ToDatabaseClusterConnectionOutputWithContext(ctx context.Context) DatabaseClusterConnectionOutput {
	return o
}

func (o DatabaseClusterConnectionOutput) ToDatabaseClusterConnectionPtrOutput() DatabaseClusterConnectionPtrOutput {
	return o.ToDatabaseClusterConnectionPtrOutputWithContext(context.Background())
}

func (o DatabaseClusterConnectionOutput) ToDatabaseClusterConnectionPtrOutputWithContext(ctx context.Context) DatabaseClusterConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseClusterConnection) *DatabaseClusterConnection {
		return &v
	}).(DatabaseClusterConnectionPtrOutput)
}

// The name of the default database.
func (o DatabaseClusterConnectionOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseClusterConnection) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o DatabaseClusterConnectionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseClusterConnection) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o DatabaseClusterConnectionOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseClusterConnection) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o DatabaseClusterConnectionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseClusterConnection) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A boolean value indicating if the connection should be made over SSL.
func (o DatabaseClusterConnectionOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseClusterConnection) *bool { return v.Ssl }).(pulumi.BoolPtrOutput)
}

// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
func (o DatabaseClusterConnectionOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseClusterConnection) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// The default user for the database.
func (o DatabaseClusterConnectionOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseClusterConnection) *string { return v.User }).(pulumi.StringPtrOutput)
}

type DatabaseClusterConnectionPtrOutput struct{ *pulumi.OutputState }

func (DatabaseClusterConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseClusterConnection)(nil)).Elem()
}

func (o DatabaseClusterConnectionPtrOutput) ToDatabaseClusterConnectionPtrOutput() DatabaseClusterConnectionPtrOutput {
	return o
}

func (o DatabaseClusterConnectionPtrOutput) ToDatabaseClusterConnectionPtrOutputWithContext(ctx context.Context) DatabaseClusterConnectionPtrOutput {
	return o
}

func (o DatabaseClusterConnectionPtrOutput) Elem() DatabaseClusterConnectionOutput {
	return o.ApplyT(func(v *DatabaseClusterConnection) DatabaseClusterConnection {
		if v != nil {
			return *v
		}
		var ret DatabaseClusterConnection
		return ret
	}).(DatabaseClusterConnectionOutput)
}

// The name of the default database.
func (o DatabaseClusterConnectionPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseClusterConnection) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o DatabaseClusterConnectionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseClusterConnection) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o DatabaseClusterConnectionPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseClusterConnection) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o DatabaseClusterConnectionPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseClusterConnection) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// A boolean value indicating if the connection should be made over SSL.
func (o DatabaseClusterConnectionPtrOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseClusterConnection) *bool {
		if v == nil {
			return nil
		}
		return v.Ssl
	}).(pulumi.BoolPtrOutput)
}

// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
func (o DatabaseClusterConnectionPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseClusterConnection) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The default user for the database.
func (o DatabaseClusterConnectionPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseClusterConnection) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

type DatabaseClusterMaintenanceWindow struct {
	// The day of the week on which to apply maintenance updates.
	Day string `pulumi:"day"`
	// A list of strings, each containing information about a pending maintenance update.
	Description []string `pulumi:"description"`
	// The hour in UTC at which maintenance updates will be applied in 24 hour format.
	Hour string `pulumi:"hour"`
	// A boolean value indicating whether any maintenance is scheduled to be performed in the next window.
	Pending *bool `pulumi:"pending"`
}

// DatabaseClusterMaintenanceWindowInput is an input type that accepts DatabaseClusterMaintenanceWindowArgs and DatabaseClusterMaintenanceWindowOutput values.
// You can construct a concrete instance of `DatabaseClusterMaintenanceWindowInput` via:
//
//	DatabaseClusterMaintenanceWindowArgs{...}
type DatabaseClusterMaintenanceWindowInput interface {
	pulumi.Input

	ToDatabaseClusterMaintenanceWindowOutput() DatabaseClusterMaintenanceWindowOutput
	ToDatabaseClusterMaintenanceWindowOutputWithContext(context.Context) DatabaseClusterMaintenanceWindowOutput
}

type DatabaseClusterMaintenanceWindowArgs struct {
	// The day of the week on which to apply maintenance updates.
	Day pulumi.StringInput `pulumi:"day"`
	// A list of strings, each containing information about a pending maintenance update.
	Description pulumi.StringArrayInput `pulumi:"description"`
	// The hour in UTC at which maintenance updates will be applied in 24 hour format.
	Hour pulumi.StringInput `pulumi:"hour"`
	// A boolean value indicating whether any maintenance is scheduled to be performed in the next window.
	Pending pulumi.BoolPtrInput `pulumi:"pending"`
}

func (DatabaseClusterMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseClusterMaintenanceWindow)(nil)).Elem()
}

func (i DatabaseClusterMaintenanceWindowArgs) ToDatabaseClusterMaintenanceWindowOutput() DatabaseClusterMaintenanceWindowOutput {
	return i.ToDatabaseClusterMaintenanceWindowOutputWithContext(context.Background())
}

func (i DatabaseClusterMaintenanceWindowArgs) ToDatabaseClusterMaintenanceWindowOutputWithContext(ctx context.Context) DatabaseClusterMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseClusterMaintenanceWindowOutput)
}

func (i DatabaseClusterMaintenanceWindowArgs) ToDatabaseClusterMaintenanceWindowPtrOutput() DatabaseClusterMaintenanceWindowPtrOutput {
	return i.ToDatabaseClusterMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i DatabaseClusterMaintenanceWindowArgs) ToDatabaseClusterMaintenanceWindowPtrOutputWithContext(ctx context.Context) DatabaseClusterMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseClusterMaintenanceWindowOutput).ToDatabaseClusterMaintenanceWindowPtrOutputWithContext(ctx)
}

// DatabaseClusterMaintenanceWindowPtrInput is an input type that accepts DatabaseClusterMaintenanceWindowArgs, DatabaseClusterMaintenanceWindowPtr and DatabaseClusterMaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `DatabaseClusterMaintenanceWindowPtrInput` via:
//
//	        DatabaseClusterMaintenanceWindowArgs{...}
//
//	or:
//
//	        nil
type DatabaseClusterMaintenanceWindowPtrInput interface {
	pulumi.Input

	ToDatabaseClusterMaintenanceWindowPtrOutput() DatabaseClusterMaintenanceWindowPtrOutput
	ToDatabaseClusterMaintenanceWindowPtrOutputWithContext(context.Context) DatabaseClusterMaintenanceWindowPtrOutput
}

type databaseClusterMaintenanceWindowPtrType DatabaseClusterMaintenanceWindowArgs

func DatabaseClusterMaintenanceWindowPtr(v *DatabaseClusterMaintenanceWindowArgs) DatabaseClusterMaintenanceWindowPtrInput {
	return (*databaseClusterMaintenanceWindowPtrType)(v)
}

func (*databaseClusterMaintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseClusterMaintenanceWindow)(nil)).Elem()
}

func (i *databaseClusterMaintenanceWindowPtrType) ToDatabaseClusterMaintenanceWindowPtrOutput() DatabaseClusterMaintenanceWindowPtrOutput {
	return i.ToDatabaseClusterMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *databaseClusterMaintenanceWindowPtrType) ToDatabaseClusterMaintenanceWindowPtrOutputWithContext(ctx context.Context) DatabaseClusterMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseClusterMaintenanceWindowPtrOutput)
}

type DatabaseClusterMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (DatabaseClusterMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseClusterMaintenanceWindow)(nil)).Elem()
}

func (o DatabaseClusterMaintenanceWindowOutput) ToDatabaseClusterMaintenanceWindowOutput() DatabaseClusterMaintenanceWindowOutput {
	return o
}

func (o DatabaseClusterMaintenanceWindowOutput) ToDatabaseClusterMaintenanceWindowOutputWithContext(ctx context.Context) DatabaseClusterMaintenanceWindowOutput {
	return o
}

func (o DatabaseClusterMaintenanceWindowOutput) ToDatabaseClusterMaintenanceWindowPtrOutput() DatabaseClusterMaintenanceWindowPtrOutput {
	return o.ToDatabaseClusterMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o DatabaseClusterMaintenanceWindowOutput) ToDatabaseClusterMaintenanceWindowPtrOutputWithContext(ctx context.Context) DatabaseClusterMaintenanceWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseClusterMaintenanceWindow) *DatabaseClusterMaintenanceWindow {
		return &v
	}).(DatabaseClusterMaintenanceWindowPtrOutput)
}

// The day of the week on which to apply maintenance updates.
func (o DatabaseClusterMaintenanceWindowOutput) Day() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseClusterMaintenanceWindow) string { return v.Day }).(pulumi.StringOutput)
}

// A list of strings, each containing information about a pending maintenance update.
func (o DatabaseClusterMaintenanceWindowOutput) Description() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseClusterMaintenanceWindow) []string { return v.Description }).(pulumi.StringArrayOutput)
}

// The hour in UTC at which maintenance updates will be applied in 24 hour format.
func (o DatabaseClusterMaintenanceWindowOutput) Hour() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseClusterMaintenanceWindow) string { return v.Hour }).(pulumi.StringOutput)
}

// A boolean value indicating whether any maintenance is scheduled to be performed in the next window.
func (o DatabaseClusterMaintenanceWindowOutput) Pending() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseClusterMaintenanceWindow) *bool { return v.Pending }).(pulumi.BoolPtrOutput)
}

type DatabaseClusterMaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (DatabaseClusterMaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseClusterMaintenanceWindow)(nil)).Elem()
}

func (o DatabaseClusterMaintenanceWindowPtrOutput) ToDatabaseClusterMaintenanceWindowPtrOutput() DatabaseClusterMaintenanceWindowPtrOutput {
	return o
}

func (o DatabaseClusterMaintenanceWindowPtrOutput) ToDatabaseClusterMaintenanceWindowPtrOutputWithContext(ctx context.Context) DatabaseClusterMaintenanceWindowPtrOutput {
	return o
}

func (o DatabaseClusterMaintenanceWindowPtrOutput) Elem() DatabaseClusterMaintenanceWindowOutput {
	return o.ApplyT(func(v *DatabaseClusterMaintenanceWindow) DatabaseClusterMaintenanceWindow {
		if v != nil {
			return *v
		}
		var ret DatabaseClusterMaintenanceWindow
		return ret
	}).(DatabaseClusterMaintenanceWindowOutput)
}

// The day of the week on which to apply maintenance updates.
func (o DatabaseClusterMaintenanceWindowPtrOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseClusterMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.Day
	}).(pulumi.StringPtrOutput)
}

// A list of strings, each containing information about a pending maintenance update.
func (o DatabaseClusterMaintenanceWindowPtrOutput) Description() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseClusterMaintenanceWindow) []string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringArrayOutput)
}

// The hour in UTC at which maintenance updates will be applied in 24 hour format.
func (o DatabaseClusterMaintenanceWindowPtrOutput) Hour() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseClusterMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.Hour
	}).(pulumi.StringPtrOutput)
}

// A boolean value indicating whether any maintenance is scheduled to be performed in the next window.
func (o DatabaseClusterMaintenanceWindowPtrOutput) Pending() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseClusterMaintenanceWindow) *bool {
		if v == nil {
			return nil
		}
		return v.Pending
	}).(pulumi.BoolPtrOutput)
}

type DatabaseClusterPrivateConnection struct {
	// The name of the default database.
	Database *string `pulumi:"database"`
	// The FQDN pointing to the database cluster's current primary node.
	Host *string `pulumi:"host"`
	// The randomly generated password for the default user.
	Password *string `pulumi:"password"`
	// The port on which the database cluster is listening.
	Port *int `pulumi:"port"`
	// A boolean value indicating if the connection should be made over SSL.
	Ssl *bool `pulumi:"ssl"`
	// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
	Uri *string `pulumi:"uri"`
	// The default user for the database.
	User *string `pulumi:"user"`
}

// DatabaseClusterPrivateConnectionInput is an input type that accepts DatabaseClusterPrivateConnectionArgs and DatabaseClusterPrivateConnectionOutput values.
// You can construct a concrete instance of `DatabaseClusterPrivateConnectionInput` via:
//
//	DatabaseClusterPrivateConnectionArgs{...}
type DatabaseClusterPrivateConnectionInput interface {
	pulumi.Input

	ToDatabaseClusterPrivateConnectionOutput() DatabaseClusterPrivateConnectionOutput
	ToDatabaseClusterPrivateConnectionOutputWithContext(context.Context) DatabaseClusterPrivateConnectionOutput
}

type DatabaseClusterPrivateConnectionArgs struct {
	// The name of the default database.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// The FQDN pointing to the database cluster's current primary node.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The randomly generated password for the default user.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port on which the database cluster is listening.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// A boolean value indicating if the connection should be made over SSL.
	Ssl pulumi.BoolPtrInput `pulumi:"ssl"`
	// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
	// The default user for the database.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (DatabaseClusterPrivateConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseClusterPrivateConnection)(nil)).Elem()
}

func (i DatabaseClusterPrivateConnectionArgs) ToDatabaseClusterPrivateConnectionOutput() DatabaseClusterPrivateConnectionOutput {
	return i.ToDatabaseClusterPrivateConnectionOutputWithContext(context.Background())
}

func (i DatabaseClusterPrivateConnectionArgs) ToDatabaseClusterPrivateConnectionOutputWithContext(ctx context.Context) DatabaseClusterPrivateConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseClusterPrivateConnectionOutput)
}

func (i DatabaseClusterPrivateConnectionArgs) ToDatabaseClusterPrivateConnectionPtrOutput() DatabaseClusterPrivateConnectionPtrOutput {
	return i.ToDatabaseClusterPrivateConnectionPtrOutputWithContext(context.Background())
}

func (i DatabaseClusterPrivateConnectionArgs) ToDatabaseClusterPrivateConnectionPtrOutputWithContext(ctx context.Context) DatabaseClusterPrivateConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseClusterPrivateConnectionOutput).ToDatabaseClusterPrivateConnectionPtrOutputWithContext(ctx)
}

// DatabaseClusterPrivateConnectionPtrInput is an input type that accepts DatabaseClusterPrivateConnectionArgs, DatabaseClusterPrivateConnectionPtr and DatabaseClusterPrivateConnectionPtrOutput values.
// You can construct a concrete instance of `DatabaseClusterPrivateConnectionPtrInput` via:
//
//	        DatabaseClusterPrivateConnectionArgs{...}
//
//	or:
//
//	        nil
type DatabaseClusterPrivateConnectionPtrInput interface {
	pulumi.Input

	ToDatabaseClusterPrivateConnectionPtrOutput() DatabaseClusterPrivateConnectionPtrOutput
	ToDatabaseClusterPrivateConnectionPtrOutputWithContext(context.Context) DatabaseClusterPrivateConnectionPtrOutput
}

type databaseClusterPrivateConnectionPtrType DatabaseClusterPrivateConnectionArgs

func DatabaseClusterPrivateConnectionPtr(v *DatabaseClusterPrivateConnectionArgs) DatabaseClusterPrivateConnectionPtrInput {
	return (*databaseClusterPrivateConnectionPtrType)(v)
}

func (*databaseClusterPrivateConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseClusterPrivateConnection)(nil)).Elem()
}

func (i *databaseClusterPrivateConnectionPtrType) ToDatabaseClusterPrivateConnectionPtrOutput() DatabaseClusterPrivateConnectionPtrOutput {
	return i.ToDatabaseClusterPrivateConnectionPtrOutputWithContext(context.Background())
}

func (i *databaseClusterPrivateConnectionPtrType) ToDatabaseClusterPrivateConnectionPtrOutputWithContext(ctx context.Context) DatabaseClusterPrivateConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseClusterPrivateConnectionPtrOutput)
}

type DatabaseClusterPrivateConnectionOutput struct{ *pulumi.OutputState }

func (DatabaseClusterPrivateConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseClusterPrivateConnection)(nil)).Elem()
}

func (o DatabaseClusterPrivateConnectionOutput) ToDatabaseClusterPrivateConnectionOutput() DatabaseClusterPrivateConnectionOutput {
	return o
}

func (o DatabaseClusterPrivateConnectionOutput) ToDatabaseClusterPrivateConnectionOutputWithContext(ctx context.Context) DatabaseClusterPrivateConnectionOutput {
	return o
}

func (o DatabaseClusterPrivateConnectionOutput) ToDatabaseClusterPrivateConnectionPtrOutput() DatabaseClusterPrivateConnectionPtrOutput {
	return o.ToDatabaseClusterPrivateConnectionPtrOutputWithContext(context.Background())
}

func (o DatabaseClusterPrivateConnectionOutput) ToDatabaseClusterPrivateConnectionPtrOutputWithContext(ctx context.Context) DatabaseClusterPrivateConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseClusterPrivateConnection) *DatabaseClusterPrivateConnection {
		return &v
	}).(DatabaseClusterPrivateConnectionPtrOutput)
}

// The name of the default database.
func (o DatabaseClusterPrivateConnectionOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseClusterPrivateConnection) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o DatabaseClusterPrivateConnectionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseClusterPrivateConnection) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o DatabaseClusterPrivateConnectionOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseClusterPrivateConnection) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o DatabaseClusterPrivateConnectionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseClusterPrivateConnection) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A boolean value indicating if the connection should be made over SSL.
func (o DatabaseClusterPrivateConnectionOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseClusterPrivateConnection) *bool { return v.Ssl }).(pulumi.BoolPtrOutput)
}

// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
func (o DatabaseClusterPrivateConnectionOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseClusterPrivateConnection) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// The default user for the database.
func (o DatabaseClusterPrivateConnectionOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseClusterPrivateConnection) *string { return v.User }).(pulumi.StringPtrOutput)
}

type DatabaseClusterPrivateConnectionPtrOutput struct{ *pulumi.OutputState }

func (DatabaseClusterPrivateConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseClusterPrivateConnection)(nil)).Elem()
}

func (o DatabaseClusterPrivateConnectionPtrOutput) ToDatabaseClusterPrivateConnectionPtrOutput() DatabaseClusterPrivateConnectionPtrOutput {
	return o
}

func (o DatabaseClusterPrivateConnectionPtrOutput) ToDatabaseClusterPrivateConnectionPtrOutputWithContext(ctx context.Context) DatabaseClusterPrivateConnectionPtrOutput {
	return o
}

func (o DatabaseClusterPrivateConnectionPtrOutput) Elem() DatabaseClusterPrivateConnectionOutput {
	return o.ApplyT(func(v *DatabaseClusterPrivateConnection) DatabaseClusterPrivateConnection {
		if v != nil {
			return *v
		}
		var ret DatabaseClusterPrivateConnection
		return ret
	}).(DatabaseClusterPrivateConnectionOutput)
}

// The name of the default database.
func (o DatabaseClusterPrivateConnectionPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseClusterPrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o DatabaseClusterPrivateConnectionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseClusterPrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o DatabaseClusterPrivateConnectionPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseClusterPrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o DatabaseClusterPrivateConnectionPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseClusterPrivateConnection) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// A boolean value indicating if the connection should be made over SSL.
func (o DatabaseClusterPrivateConnectionPtrOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseClusterPrivateConnection) *bool {
		if v == nil {
			return nil
		}
		return v.Ssl
	}).(pulumi.BoolPtrOutput)
}

// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
func (o DatabaseClusterPrivateConnectionPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseClusterPrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The default user for the database.
func (o DatabaseClusterPrivateConnectionPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseClusterPrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

type DatabaseConfig struct {
	Config interface{} `pulumi:"config"`
}

type DatabaseConfigOutput struct{ *pulumi.OutputState }

func (DatabaseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseConfig)(nil)).Elem()
}

func (o DatabaseConfigOutput) ToDatabaseConfigOutput() DatabaseConfigOutput {
	return o
}

func (o DatabaseConfigOutput) ToDatabaseConfigOutputWithContext(ctx context.Context) DatabaseConfigOutput {
	return o
}

func (o DatabaseConfigOutput) Config() pulumi.AnyOutput {
	return o.ApplyT(func(v DatabaseConfig) interface{} { return v.Config }).(pulumi.AnyOutput)
}

type DatabaseLayoutOption struct {
	NumNodes *int `pulumi:"numNodes"`
	// An array of objects containing the slugs available with various node counts
	Sizes []string `pulumi:"sizes"`
}

type DatabaseLayoutOptionOutput struct{ *pulumi.OutputState }

func (DatabaseLayoutOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseLayoutOption)(nil)).Elem()
}

func (o DatabaseLayoutOptionOutput) ToDatabaseLayoutOptionOutput() DatabaseLayoutOptionOutput {
	return o
}

func (o DatabaseLayoutOptionOutput) ToDatabaseLayoutOptionOutputWithContext(ctx context.Context) DatabaseLayoutOptionOutput {
	return o
}

func (o DatabaseLayoutOptionOutput) NumNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseLayoutOption) *int { return v.NumNodes }).(pulumi.IntPtrOutput)
}

// An array of objects containing the slugs available with various node counts
func (o DatabaseLayoutOptionOutput) Sizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseLayoutOption) []string { return v.Sizes }).(pulumi.StringArrayOutput)
}

type DatabaseLayoutOptionArrayOutput struct{ *pulumi.OutputState }

func (DatabaseLayoutOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseLayoutOption)(nil)).Elem()
}

func (o DatabaseLayoutOptionArrayOutput) ToDatabaseLayoutOptionArrayOutput() DatabaseLayoutOptionArrayOutput {
	return o
}

func (o DatabaseLayoutOptionArrayOutput) ToDatabaseLayoutOptionArrayOutputWithContext(ctx context.Context) DatabaseLayoutOptionArrayOutput {
	return o
}

func (o DatabaseLayoutOptionArrayOutput) Index(i pulumi.IntInput) DatabaseLayoutOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseLayoutOption {
		return vs[0].([]DatabaseLayoutOption)[vs[1].(int)]
	}).(DatabaseLayoutOptionOutput)
}

type DatabaseReplica struct {
	Connection *DatabaseReplicaConnection `pulumi:"connection"`
	// A time value given in ISO8601 combined date and time format that represents when the database cluster was created.
	CreatedAt *string `pulumi:"createdAt"`
	// A unique ID that can be used to identify and reference a database replica.
	Id *string `pulumi:"id"`
	// The name to give the read-only replicating
	Name              string                            `pulumi:"name"`
	PrivateConnection *DatabaseReplicaPrivateConnection `pulumi:"privateConnection"`
	// A string specifying the UUID of the VPC to which the read-only replica will be assigned. If excluded, the replica will be assigned to your account's default VPC for the region.
	PrivateNetworkUuid *string `pulumi:"privateNetworkUuid"`
	// A slug identifier for the region where the read-only replica will be located. If excluded, the replica will be placed in the same region as the cluster.
	Region *string `pulumi:"region"`
	// A slug identifier representing the size of the node for the read-only replica. The size of the replica must be at least as large as the node size for the database cluster from which it is replicating.
	Size *string `pulumi:"size"`
	// A string representing the current status of the database cluster.
	Status *DatabaseReplicaStatus `pulumi:"status"`
	// A flat array of tag names as strings to apply to the read-only replica after it is created. Tag names can either be existing or new tags.
	Tags []string `pulumi:"tags"`
}

type DatabaseReplicaOutput struct{ *pulumi.OutputState }

func (DatabaseReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseReplica)(nil)).Elem()
}

func (o DatabaseReplicaOutput) ToDatabaseReplicaOutput() DatabaseReplicaOutput {
	return o
}

func (o DatabaseReplicaOutput) ToDatabaseReplicaOutputWithContext(ctx context.Context) DatabaseReplicaOutput {
	return o
}

func (o DatabaseReplicaOutput) Connection() DatabaseReplicaConnectionPtrOutput {
	return o.ApplyT(func(v DatabaseReplica) *DatabaseReplicaConnection { return v.Connection }).(DatabaseReplicaConnectionPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the database cluster was created.
func (o DatabaseReplicaOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseReplica) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// A unique ID that can be used to identify and reference a database replica.
func (o DatabaseReplicaOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseReplica) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name to give the read-only replicating
func (o DatabaseReplicaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseReplica) string { return v.Name }).(pulumi.StringOutput)
}

func (o DatabaseReplicaOutput) PrivateConnection() DatabaseReplicaPrivateConnectionPtrOutput {
	return o.ApplyT(func(v DatabaseReplica) *DatabaseReplicaPrivateConnection { return v.PrivateConnection }).(DatabaseReplicaPrivateConnectionPtrOutput)
}

// A string specifying the UUID of the VPC to which the read-only replica will be assigned. If excluded, the replica will be assigned to your account's default VPC for the region.
func (o DatabaseReplicaOutput) PrivateNetworkUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseReplica) *string { return v.PrivateNetworkUuid }).(pulumi.StringPtrOutput)
}

// A slug identifier for the region where the read-only replica will be located. If excluded, the replica will be placed in the same region as the cluster.
func (o DatabaseReplicaOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseReplica) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// A slug identifier representing the size of the node for the read-only replica. The size of the replica must be at least as large as the node size for the database cluster from which it is replicating.
func (o DatabaseReplicaOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseReplica) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// A string representing the current status of the database cluster.
func (o DatabaseReplicaOutput) Status() DatabaseReplicaStatusPtrOutput {
	return o.ApplyT(func(v DatabaseReplica) *DatabaseReplicaStatus { return v.Status }).(DatabaseReplicaStatusPtrOutput)
}

// A flat array of tag names as strings to apply to the read-only replica after it is created. Tag names can either be existing or new tags.
func (o DatabaseReplicaOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseReplica) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type DatabaseReplicaPtrOutput struct{ *pulumi.OutputState }

func (DatabaseReplicaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseReplica)(nil)).Elem()
}

func (o DatabaseReplicaPtrOutput) ToDatabaseReplicaPtrOutput() DatabaseReplicaPtrOutput {
	return o
}

func (o DatabaseReplicaPtrOutput) ToDatabaseReplicaPtrOutputWithContext(ctx context.Context) DatabaseReplicaPtrOutput {
	return o
}

func (o DatabaseReplicaPtrOutput) Elem() DatabaseReplicaOutput {
	return o.ApplyT(func(v *DatabaseReplica) DatabaseReplica {
		if v != nil {
			return *v
		}
		var ret DatabaseReplica
		return ret
	}).(DatabaseReplicaOutput)
}

func (o DatabaseReplicaPtrOutput) Connection() DatabaseReplicaConnectionPtrOutput {
	return o.ApplyT(func(v *DatabaseReplica) *DatabaseReplicaConnection {
		if v == nil {
			return nil
		}
		return v.Connection
	}).(DatabaseReplicaConnectionPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the database cluster was created.
func (o DatabaseReplicaPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseReplica) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// A unique ID that can be used to identify and reference a database replica.
func (o DatabaseReplicaPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseReplica) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The name to give the read-only replicating
func (o DatabaseReplicaPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseReplica) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o DatabaseReplicaPtrOutput) PrivateConnection() DatabaseReplicaPrivateConnectionPtrOutput {
	return o.ApplyT(func(v *DatabaseReplica) *DatabaseReplicaPrivateConnection {
		if v == nil {
			return nil
		}
		return v.PrivateConnection
	}).(DatabaseReplicaPrivateConnectionPtrOutput)
}

// A string specifying the UUID of the VPC to which the read-only replica will be assigned. If excluded, the replica will be assigned to your account's default VPC for the region.
func (o DatabaseReplicaPtrOutput) PrivateNetworkUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseReplica) *string {
		if v == nil {
			return nil
		}
		return v.PrivateNetworkUuid
	}).(pulumi.StringPtrOutput)
}

// A slug identifier for the region where the read-only replica will be located. If excluded, the replica will be placed in the same region as the cluster.
func (o DatabaseReplicaPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseReplica) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// A slug identifier representing the size of the node for the read-only replica. The size of the replica must be at least as large as the node size for the database cluster from which it is replicating.
func (o DatabaseReplicaPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseReplica) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// A string representing the current status of the database cluster.
func (o DatabaseReplicaPtrOutput) Status() DatabaseReplicaStatusPtrOutput {
	return o.ApplyT(func(v *DatabaseReplica) *DatabaseReplicaStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(DatabaseReplicaStatusPtrOutput)
}

// A flat array of tag names as strings to apply to the read-only replica after it is created. Tag names can either be existing or new tags.
func (o DatabaseReplicaPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseReplica) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

type DatabaseReplicaArrayOutput struct{ *pulumi.OutputState }

func (DatabaseReplicaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseReplica)(nil)).Elem()
}

func (o DatabaseReplicaArrayOutput) ToDatabaseReplicaArrayOutput() DatabaseReplicaArrayOutput {
	return o
}

func (o DatabaseReplicaArrayOutput) ToDatabaseReplicaArrayOutputWithContext(ctx context.Context) DatabaseReplicaArrayOutput {
	return o
}

func (o DatabaseReplicaArrayOutput) Index(i pulumi.IntInput) DatabaseReplicaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseReplica {
		return vs[0].([]DatabaseReplica)[vs[1].(int)]
	}).(DatabaseReplicaOutput)
}

type DatabaseReplicaConnection struct {
	// The name of the default database.
	Database *string `pulumi:"database"`
	// The FQDN pointing to the database cluster's current primary node.
	Host *string `pulumi:"host"`
	// The randomly generated password for the default user.
	Password *string `pulumi:"password"`
	// The port on which the database cluster is listening.
	Port *int `pulumi:"port"`
	// A boolean value indicating if the connection should be made over SSL.
	Ssl *bool `pulumi:"ssl"`
	// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
	Uri *string `pulumi:"uri"`
	// The default user for the database.
	User *string `pulumi:"user"`
}

// DatabaseReplicaConnectionInput is an input type that accepts DatabaseReplicaConnectionArgs and DatabaseReplicaConnectionOutput values.
// You can construct a concrete instance of `DatabaseReplicaConnectionInput` via:
//
//	DatabaseReplicaConnectionArgs{...}
type DatabaseReplicaConnectionInput interface {
	pulumi.Input

	ToDatabaseReplicaConnectionOutput() DatabaseReplicaConnectionOutput
	ToDatabaseReplicaConnectionOutputWithContext(context.Context) DatabaseReplicaConnectionOutput
}

type DatabaseReplicaConnectionArgs struct {
	// The name of the default database.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// The FQDN pointing to the database cluster's current primary node.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The randomly generated password for the default user.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port on which the database cluster is listening.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// A boolean value indicating if the connection should be made over SSL.
	Ssl pulumi.BoolPtrInput `pulumi:"ssl"`
	// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
	// The default user for the database.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (DatabaseReplicaConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseReplicaConnection)(nil)).Elem()
}

func (i DatabaseReplicaConnectionArgs) ToDatabaseReplicaConnectionOutput() DatabaseReplicaConnectionOutput {
	return i.ToDatabaseReplicaConnectionOutputWithContext(context.Background())
}

func (i DatabaseReplicaConnectionArgs) ToDatabaseReplicaConnectionOutputWithContext(ctx context.Context) DatabaseReplicaConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseReplicaConnectionOutput)
}

func (i DatabaseReplicaConnectionArgs) ToDatabaseReplicaConnectionPtrOutput() DatabaseReplicaConnectionPtrOutput {
	return i.ToDatabaseReplicaConnectionPtrOutputWithContext(context.Background())
}

func (i DatabaseReplicaConnectionArgs) ToDatabaseReplicaConnectionPtrOutputWithContext(ctx context.Context) DatabaseReplicaConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseReplicaConnectionOutput).ToDatabaseReplicaConnectionPtrOutputWithContext(ctx)
}

// DatabaseReplicaConnectionPtrInput is an input type that accepts DatabaseReplicaConnectionArgs, DatabaseReplicaConnectionPtr and DatabaseReplicaConnectionPtrOutput values.
// You can construct a concrete instance of `DatabaseReplicaConnectionPtrInput` via:
//
//	        DatabaseReplicaConnectionArgs{...}
//
//	or:
//
//	        nil
type DatabaseReplicaConnectionPtrInput interface {
	pulumi.Input

	ToDatabaseReplicaConnectionPtrOutput() DatabaseReplicaConnectionPtrOutput
	ToDatabaseReplicaConnectionPtrOutputWithContext(context.Context) DatabaseReplicaConnectionPtrOutput
}

type databaseReplicaConnectionPtrType DatabaseReplicaConnectionArgs

func DatabaseReplicaConnectionPtr(v *DatabaseReplicaConnectionArgs) DatabaseReplicaConnectionPtrInput {
	return (*databaseReplicaConnectionPtrType)(v)
}

func (*databaseReplicaConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseReplicaConnection)(nil)).Elem()
}

func (i *databaseReplicaConnectionPtrType) ToDatabaseReplicaConnectionPtrOutput() DatabaseReplicaConnectionPtrOutput {
	return i.ToDatabaseReplicaConnectionPtrOutputWithContext(context.Background())
}

func (i *databaseReplicaConnectionPtrType) ToDatabaseReplicaConnectionPtrOutputWithContext(ctx context.Context) DatabaseReplicaConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseReplicaConnectionPtrOutput)
}

type DatabaseReplicaConnectionOutput struct{ *pulumi.OutputState }

func (DatabaseReplicaConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseReplicaConnection)(nil)).Elem()
}

func (o DatabaseReplicaConnectionOutput) ToDatabaseReplicaConnectionOutput() DatabaseReplicaConnectionOutput {
	return o
}

func (o DatabaseReplicaConnectionOutput) ToDatabaseReplicaConnectionOutputWithContext(ctx context.Context) DatabaseReplicaConnectionOutput {
	return o
}

func (o DatabaseReplicaConnectionOutput) ToDatabaseReplicaConnectionPtrOutput() DatabaseReplicaConnectionPtrOutput {
	return o.ToDatabaseReplicaConnectionPtrOutputWithContext(context.Background())
}

func (o DatabaseReplicaConnectionOutput) ToDatabaseReplicaConnectionPtrOutputWithContext(ctx context.Context) DatabaseReplicaConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseReplicaConnection) *DatabaseReplicaConnection {
		return &v
	}).(DatabaseReplicaConnectionPtrOutput)
}

// The name of the default database.
func (o DatabaseReplicaConnectionOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseReplicaConnection) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o DatabaseReplicaConnectionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseReplicaConnection) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o DatabaseReplicaConnectionOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseReplicaConnection) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o DatabaseReplicaConnectionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseReplicaConnection) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A boolean value indicating if the connection should be made over SSL.
func (o DatabaseReplicaConnectionOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseReplicaConnection) *bool { return v.Ssl }).(pulumi.BoolPtrOutput)
}

// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
func (o DatabaseReplicaConnectionOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseReplicaConnection) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// The default user for the database.
func (o DatabaseReplicaConnectionOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseReplicaConnection) *string { return v.User }).(pulumi.StringPtrOutput)
}

type DatabaseReplicaConnectionPtrOutput struct{ *pulumi.OutputState }

func (DatabaseReplicaConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseReplicaConnection)(nil)).Elem()
}

func (o DatabaseReplicaConnectionPtrOutput) ToDatabaseReplicaConnectionPtrOutput() DatabaseReplicaConnectionPtrOutput {
	return o
}

func (o DatabaseReplicaConnectionPtrOutput) ToDatabaseReplicaConnectionPtrOutputWithContext(ctx context.Context) DatabaseReplicaConnectionPtrOutput {
	return o
}

func (o DatabaseReplicaConnectionPtrOutput) Elem() DatabaseReplicaConnectionOutput {
	return o.ApplyT(func(v *DatabaseReplicaConnection) DatabaseReplicaConnection {
		if v != nil {
			return *v
		}
		var ret DatabaseReplicaConnection
		return ret
	}).(DatabaseReplicaConnectionOutput)
}

// The name of the default database.
func (o DatabaseReplicaConnectionPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseReplicaConnection) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o DatabaseReplicaConnectionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseReplicaConnection) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o DatabaseReplicaConnectionPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseReplicaConnection) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o DatabaseReplicaConnectionPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseReplicaConnection) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// A boolean value indicating if the connection should be made over SSL.
func (o DatabaseReplicaConnectionPtrOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseReplicaConnection) *bool {
		if v == nil {
			return nil
		}
		return v.Ssl
	}).(pulumi.BoolPtrOutput)
}

// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
func (o DatabaseReplicaConnectionPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseReplicaConnection) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The default user for the database.
func (o DatabaseReplicaConnectionPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseReplicaConnection) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

type DatabaseReplicaPrivateConnection struct {
	// The name of the default database.
	Database *string `pulumi:"database"`
	// The FQDN pointing to the database cluster's current primary node.
	Host *string `pulumi:"host"`
	// The randomly generated password for the default user.
	Password *string `pulumi:"password"`
	// The port on which the database cluster is listening.
	Port *int `pulumi:"port"`
	// A boolean value indicating if the connection should be made over SSL.
	Ssl *bool `pulumi:"ssl"`
	// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
	Uri *string `pulumi:"uri"`
	// The default user for the database.
	User *string `pulumi:"user"`
}

// DatabaseReplicaPrivateConnectionInput is an input type that accepts DatabaseReplicaPrivateConnectionArgs and DatabaseReplicaPrivateConnectionOutput values.
// You can construct a concrete instance of `DatabaseReplicaPrivateConnectionInput` via:
//
//	DatabaseReplicaPrivateConnectionArgs{...}
type DatabaseReplicaPrivateConnectionInput interface {
	pulumi.Input

	ToDatabaseReplicaPrivateConnectionOutput() DatabaseReplicaPrivateConnectionOutput
	ToDatabaseReplicaPrivateConnectionOutputWithContext(context.Context) DatabaseReplicaPrivateConnectionOutput
}

type DatabaseReplicaPrivateConnectionArgs struct {
	// The name of the default database.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// The FQDN pointing to the database cluster's current primary node.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The randomly generated password for the default user.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port on which the database cluster is listening.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// A boolean value indicating if the connection should be made over SSL.
	Ssl pulumi.BoolPtrInput `pulumi:"ssl"`
	// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
	// The default user for the database.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (DatabaseReplicaPrivateConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseReplicaPrivateConnection)(nil)).Elem()
}

func (i DatabaseReplicaPrivateConnectionArgs) ToDatabaseReplicaPrivateConnectionOutput() DatabaseReplicaPrivateConnectionOutput {
	return i.ToDatabaseReplicaPrivateConnectionOutputWithContext(context.Background())
}

func (i DatabaseReplicaPrivateConnectionArgs) ToDatabaseReplicaPrivateConnectionOutputWithContext(ctx context.Context) DatabaseReplicaPrivateConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseReplicaPrivateConnectionOutput)
}

func (i DatabaseReplicaPrivateConnectionArgs) ToDatabaseReplicaPrivateConnectionPtrOutput() DatabaseReplicaPrivateConnectionPtrOutput {
	return i.ToDatabaseReplicaPrivateConnectionPtrOutputWithContext(context.Background())
}

func (i DatabaseReplicaPrivateConnectionArgs) ToDatabaseReplicaPrivateConnectionPtrOutputWithContext(ctx context.Context) DatabaseReplicaPrivateConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseReplicaPrivateConnectionOutput).ToDatabaseReplicaPrivateConnectionPtrOutputWithContext(ctx)
}

// DatabaseReplicaPrivateConnectionPtrInput is an input type that accepts DatabaseReplicaPrivateConnectionArgs, DatabaseReplicaPrivateConnectionPtr and DatabaseReplicaPrivateConnectionPtrOutput values.
// You can construct a concrete instance of `DatabaseReplicaPrivateConnectionPtrInput` via:
//
//	        DatabaseReplicaPrivateConnectionArgs{...}
//
//	or:
//
//	        nil
type DatabaseReplicaPrivateConnectionPtrInput interface {
	pulumi.Input

	ToDatabaseReplicaPrivateConnectionPtrOutput() DatabaseReplicaPrivateConnectionPtrOutput
	ToDatabaseReplicaPrivateConnectionPtrOutputWithContext(context.Context) DatabaseReplicaPrivateConnectionPtrOutput
}

type databaseReplicaPrivateConnectionPtrType DatabaseReplicaPrivateConnectionArgs

func DatabaseReplicaPrivateConnectionPtr(v *DatabaseReplicaPrivateConnectionArgs) DatabaseReplicaPrivateConnectionPtrInput {
	return (*databaseReplicaPrivateConnectionPtrType)(v)
}

func (*databaseReplicaPrivateConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseReplicaPrivateConnection)(nil)).Elem()
}

func (i *databaseReplicaPrivateConnectionPtrType) ToDatabaseReplicaPrivateConnectionPtrOutput() DatabaseReplicaPrivateConnectionPtrOutput {
	return i.ToDatabaseReplicaPrivateConnectionPtrOutputWithContext(context.Background())
}

func (i *databaseReplicaPrivateConnectionPtrType) ToDatabaseReplicaPrivateConnectionPtrOutputWithContext(ctx context.Context) DatabaseReplicaPrivateConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseReplicaPrivateConnectionPtrOutput)
}

type DatabaseReplicaPrivateConnectionOutput struct{ *pulumi.OutputState }

func (DatabaseReplicaPrivateConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseReplicaPrivateConnection)(nil)).Elem()
}

func (o DatabaseReplicaPrivateConnectionOutput) ToDatabaseReplicaPrivateConnectionOutput() DatabaseReplicaPrivateConnectionOutput {
	return o
}

func (o DatabaseReplicaPrivateConnectionOutput) ToDatabaseReplicaPrivateConnectionOutputWithContext(ctx context.Context) DatabaseReplicaPrivateConnectionOutput {
	return o
}

func (o DatabaseReplicaPrivateConnectionOutput) ToDatabaseReplicaPrivateConnectionPtrOutput() DatabaseReplicaPrivateConnectionPtrOutput {
	return o.ToDatabaseReplicaPrivateConnectionPtrOutputWithContext(context.Background())
}

func (o DatabaseReplicaPrivateConnectionOutput) ToDatabaseReplicaPrivateConnectionPtrOutputWithContext(ctx context.Context) DatabaseReplicaPrivateConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseReplicaPrivateConnection) *DatabaseReplicaPrivateConnection {
		return &v
	}).(DatabaseReplicaPrivateConnectionPtrOutput)
}

// The name of the default database.
func (o DatabaseReplicaPrivateConnectionOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseReplicaPrivateConnection) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o DatabaseReplicaPrivateConnectionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseReplicaPrivateConnection) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o DatabaseReplicaPrivateConnectionOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseReplicaPrivateConnection) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o DatabaseReplicaPrivateConnectionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseReplicaPrivateConnection) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A boolean value indicating if the connection should be made over SSL.
func (o DatabaseReplicaPrivateConnectionOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseReplicaPrivateConnection) *bool { return v.Ssl }).(pulumi.BoolPtrOutput)
}

// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
func (o DatabaseReplicaPrivateConnectionOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseReplicaPrivateConnection) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// The default user for the database.
func (o DatabaseReplicaPrivateConnectionOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseReplicaPrivateConnection) *string { return v.User }).(pulumi.StringPtrOutput)
}

type DatabaseReplicaPrivateConnectionPtrOutput struct{ *pulumi.OutputState }

func (DatabaseReplicaPrivateConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseReplicaPrivateConnection)(nil)).Elem()
}

func (o DatabaseReplicaPrivateConnectionPtrOutput) ToDatabaseReplicaPrivateConnectionPtrOutput() DatabaseReplicaPrivateConnectionPtrOutput {
	return o
}

func (o DatabaseReplicaPrivateConnectionPtrOutput) ToDatabaseReplicaPrivateConnectionPtrOutputWithContext(ctx context.Context) DatabaseReplicaPrivateConnectionPtrOutput {
	return o
}

func (o DatabaseReplicaPrivateConnectionPtrOutput) Elem() DatabaseReplicaPrivateConnectionOutput {
	return o.ApplyT(func(v *DatabaseReplicaPrivateConnection) DatabaseReplicaPrivateConnection {
		if v != nil {
			return *v
		}
		var ret DatabaseReplicaPrivateConnection
		return ret
	}).(DatabaseReplicaPrivateConnectionOutput)
}

// The name of the default database.
func (o DatabaseReplicaPrivateConnectionPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseReplicaPrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o DatabaseReplicaPrivateConnectionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseReplicaPrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o DatabaseReplicaPrivateConnectionPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseReplicaPrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o DatabaseReplicaPrivateConnectionPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseReplicaPrivateConnection) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// A boolean value indicating if the connection should be made over SSL.
func (o DatabaseReplicaPrivateConnectionPtrOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseReplicaPrivateConnection) *bool {
		if v == nil {
			return nil
		}
		return v.Ssl
	}).(pulumi.BoolPtrOutput)
}

// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
func (o DatabaseReplicaPrivateConnectionPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseReplicaPrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The default user for the database.
func (o DatabaseReplicaPrivateConnectionPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseReplicaPrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

type DatabaseUser struct {
	MysqlSettings *MysqlSettings `pulumi:"mysqlSettings"`
	// The name of a database user.
	Name string `pulumi:"name"`
	// A randomly generated password for the database user.
	Password *string `pulumi:"password"`
	// A string representing the database user's role. The value will be either
	// "primary" or "normal".
	Role *DatabaseUserRole `pulumi:"role"`
}

// DatabaseUserInput is an input type that accepts DatabaseUserArgs and DatabaseUserOutput values.
// You can construct a concrete instance of `DatabaseUserInput` via:
//
//	DatabaseUserArgs{...}
type DatabaseUserInput interface {
	pulumi.Input

	ToDatabaseUserOutput() DatabaseUserOutput
	ToDatabaseUserOutputWithContext(context.Context) DatabaseUserOutput
}

type DatabaseUserArgs struct {
	MysqlSettings MysqlSettingsPtrInput `pulumi:"mysqlSettings"`
	// The name of a database user.
	Name pulumi.StringInput `pulumi:"name"`
	// A randomly generated password for the database user.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A string representing the database user's role. The value will be either
	// "primary" or "normal".
	Role DatabaseUserRolePtrInput `pulumi:"role"`
}

func (DatabaseUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseUser)(nil)).Elem()
}

func (i DatabaseUserArgs) ToDatabaseUserOutput() DatabaseUserOutput {
	return i.ToDatabaseUserOutputWithContext(context.Background())
}

func (i DatabaseUserArgs) ToDatabaseUserOutputWithContext(ctx context.Context) DatabaseUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserOutput)
}

// DatabaseUserArrayInput is an input type that accepts DatabaseUserArray and DatabaseUserArrayOutput values.
// You can construct a concrete instance of `DatabaseUserArrayInput` via:
//
//	DatabaseUserArray{ DatabaseUserArgs{...} }
type DatabaseUserArrayInput interface {
	pulumi.Input

	ToDatabaseUserArrayOutput() DatabaseUserArrayOutput
	ToDatabaseUserArrayOutputWithContext(context.Context) DatabaseUserArrayOutput
}

type DatabaseUserArray []DatabaseUserInput

func (DatabaseUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseUser)(nil)).Elem()
}

func (i DatabaseUserArray) ToDatabaseUserArrayOutput() DatabaseUserArrayOutput {
	return i.ToDatabaseUserArrayOutputWithContext(context.Background())
}

func (i DatabaseUserArray) ToDatabaseUserArrayOutputWithContext(ctx context.Context) DatabaseUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserArrayOutput)
}

type DatabaseUserOutput struct{ *pulumi.OutputState }

func (DatabaseUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseUser)(nil)).Elem()
}

func (o DatabaseUserOutput) ToDatabaseUserOutput() DatabaseUserOutput {
	return o
}

func (o DatabaseUserOutput) ToDatabaseUserOutputWithContext(ctx context.Context) DatabaseUserOutput {
	return o
}

func (o DatabaseUserOutput) MysqlSettings() MysqlSettingsPtrOutput {
	return o.ApplyT(func(v DatabaseUser) *MysqlSettings { return v.MysqlSettings }).(MysqlSettingsPtrOutput)
}

// The name of a database user.
func (o DatabaseUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseUser) string { return v.Name }).(pulumi.StringOutput)
}

// A randomly generated password for the database user.
func (o DatabaseUserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseUser) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A string representing the database user's role. The value will be either
// "primary" or "normal".
func (o DatabaseUserOutput) Role() DatabaseUserRolePtrOutput {
	return o.ApplyT(func(v DatabaseUser) *DatabaseUserRole { return v.Role }).(DatabaseUserRolePtrOutput)
}

type DatabaseUserArrayOutput struct{ *pulumi.OutputState }

func (DatabaseUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseUser)(nil)).Elem()
}

func (o DatabaseUserArrayOutput) ToDatabaseUserArrayOutput() DatabaseUserArrayOutput {
	return o
}

func (o DatabaseUserArrayOutput) ToDatabaseUserArrayOutputWithContext(ctx context.Context) DatabaseUserArrayOutput {
	return o
}

func (o DatabaseUserArrayOutput) Index(i pulumi.IntInput) DatabaseUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseUser {
		return vs[0].([]DatabaseUser)[vs[1].(int)]
	}).(DatabaseUserOutput)
}

type DatabaseVersionAvailability struct {
	// A timestamp referring to the date when the particular version will no longer be available for creating new clusters. If null, the version does not have an end of availability timeline.
	EndOfAvailability *string `pulumi:"endOfAvailability"`
	// A timestamp referring to the date when the particular version will no longer be supported. If null, the version does not have an end of life timeline.
	EndOfLife *string `pulumi:"endOfLife"`
	// The engine version.
	Version *string `pulumi:"version"`
}

type DatabaseVersionAvailabilityOutput struct{ *pulumi.OutputState }

func (DatabaseVersionAvailabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseVersionAvailability)(nil)).Elem()
}

func (o DatabaseVersionAvailabilityOutput) ToDatabaseVersionAvailabilityOutput() DatabaseVersionAvailabilityOutput {
	return o
}

func (o DatabaseVersionAvailabilityOutput) ToDatabaseVersionAvailabilityOutputWithContext(ctx context.Context) DatabaseVersionAvailabilityOutput {
	return o
}

// A timestamp referring to the date when the particular version will no longer be available for creating new clusters. If null, the version does not have an end of availability timeline.
func (o DatabaseVersionAvailabilityOutput) EndOfAvailability() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseVersionAvailability) *string { return v.EndOfAvailability }).(pulumi.StringPtrOutput)
}

// A timestamp referring to the date when the particular version will no longer be supported. If null, the version does not have an end of life timeline.
func (o DatabaseVersionAvailabilityOutput) EndOfLife() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseVersionAvailability) *string { return v.EndOfLife }).(pulumi.StringPtrOutput)
}

// The engine version.
func (o DatabaseVersionAvailabilityOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseVersionAvailability) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DatabaseVersionAvailabilityArrayOutput struct{ *pulumi.OutputState }

func (DatabaseVersionAvailabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseVersionAvailability)(nil)).Elem()
}

func (o DatabaseVersionAvailabilityArrayOutput) ToDatabaseVersionAvailabilityArrayOutput() DatabaseVersionAvailabilityArrayOutput {
	return o
}

func (o DatabaseVersionAvailabilityArrayOutput) ToDatabaseVersionAvailabilityArrayOutputWithContext(ctx context.Context) DatabaseVersionAvailabilityArrayOutput {
	return o
}

func (o DatabaseVersionAvailabilityArrayOutput) Index(i pulumi.IntInput) DatabaseVersionAvailabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseVersionAvailability {
		return vs[0].([]DatabaseVersionAvailability)[vs[1].(int)]
	}).(DatabaseVersionAvailabilityOutput)
}

type FirewallRule struct {
	// A unique ID for the database cluster to which the rule is applied.
	ClusterUuid *string `pulumi:"clusterUuid"`
	// A time value given in ISO8601 combined date and time format that represents when the firewall rule was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The type of resource that the firewall rule allows to access the database cluster.
	Type FirewallRuleType `pulumi:"type"`
	// A unique ID for the firewall rule itself.
	Uuid *string `pulumi:"uuid"`
	// The ID of the specific resource, the name of a tag applied to a group of resources, or the IP address that the firewall rule allows to access the database cluster.
	Value string `pulumi:"value"`
}

// FirewallRuleInput is an input type that accepts FirewallRuleArgs and FirewallRuleOutput values.
// You can construct a concrete instance of `FirewallRuleInput` via:
//
//	FirewallRuleArgs{...}
type FirewallRuleInput interface {
	pulumi.Input

	ToFirewallRuleOutput() FirewallRuleOutput
	ToFirewallRuleOutputWithContext(context.Context) FirewallRuleOutput
}

type FirewallRuleArgs struct {
	// A unique ID for the database cluster to which the rule is applied.
	ClusterUuid pulumi.StringPtrInput `pulumi:"clusterUuid"`
	// A time value given in ISO8601 combined date and time format that represents when the firewall rule was created.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// The type of resource that the firewall rule allows to access the database cluster.
	Type FirewallRuleTypeInput `pulumi:"type"`
	// A unique ID for the firewall rule itself.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// The ID of the specific resource, the name of a tag applied to a group of resources, or the IP address that the firewall rule allows to access the database cluster.
	Value pulumi.StringInput `pulumi:"value"`
}

func (FirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRule)(nil)).Elem()
}

func (i FirewallRuleArgs) ToFirewallRuleOutput() FirewallRuleOutput {
	return i.ToFirewallRuleOutputWithContext(context.Background())
}

func (i FirewallRuleArgs) ToFirewallRuleOutputWithContext(ctx context.Context) FirewallRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRuleOutput)
}

// FirewallRuleArrayInput is an input type that accepts FirewallRuleArray and FirewallRuleArrayOutput values.
// You can construct a concrete instance of `FirewallRuleArrayInput` via:
//
//	FirewallRuleArray{ FirewallRuleArgs{...} }
type FirewallRuleArrayInput interface {
	pulumi.Input

	ToFirewallRuleArrayOutput() FirewallRuleArrayOutput
	ToFirewallRuleArrayOutputWithContext(context.Context) FirewallRuleArrayOutput
}

type FirewallRuleArray []FirewallRuleInput

func (FirewallRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallRule)(nil)).Elem()
}

func (i FirewallRuleArray) ToFirewallRuleArrayOutput() FirewallRuleArrayOutput {
	return i.ToFirewallRuleArrayOutputWithContext(context.Background())
}

func (i FirewallRuleArray) ToFirewallRuleArrayOutputWithContext(ctx context.Context) FirewallRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRuleArrayOutput)
}

type FirewallRuleOutput struct{ *pulumi.OutputState }

func (FirewallRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRule)(nil)).Elem()
}

func (o FirewallRuleOutput) ToFirewallRuleOutput() FirewallRuleOutput {
	return o
}

func (o FirewallRuleOutput) ToFirewallRuleOutputWithContext(ctx context.Context) FirewallRuleOutput {
	return o
}

// A unique ID for the database cluster to which the rule is applied.
func (o FirewallRuleOutput) ClusterUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRule) *string { return v.ClusterUuid }).(pulumi.StringPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the firewall rule was created.
func (o FirewallRuleOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRule) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The type of resource that the firewall rule allows to access the database cluster.
func (o FirewallRuleOutput) Type() FirewallRuleTypeOutput {
	return o.ApplyT(func(v FirewallRule) FirewallRuleType { return v.Type }).(FirewallRuleTypeOutput)
}

// A unique ID for the firewall rule itself.
func (o FirewallRuleOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRule) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

// The ID of the specific resource, the name of a tag applied to a group of resources, or the IP address that the firewall rule allows to access the database cluster.
func (o FirewallRuleOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallRule) string { return v.Value }).(pulumi.StringOutput)
}

type FirewallRuleArrayOutput struct{ *pulumi.OutputState }

func (FirewallRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallRule)(nil)).Elem()
}

func (o FirewallRuleArrayOutput) ToFirewallRuleArrayOutput() FirewallRuleArrayOutput {
	return o
}

func (o FirewallRuleArrayOutput) ToFirewallRuleArrayOutputWithContext(ctx context.Context) FirewallRuleArrayOutput {
	return o
}

func (o FirewallRuleArrayOutput) Index(i pulumi.IntInput) FirewallRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallRule {
		return vs[0].([]FirewallRule)[vs[1].(int)]
	}).(FirewallRuleOutput)
}

type GetDatabasesCaProperties struct {
	Ca Ca `pulumi:"ca"`
}

type GetDatabasesCaPropertiesOutput struct{ *pulumi.OutputState }

func (GetDatabasesCaPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesCaProperties)(nil)).Elem()
}

func (o GetDatabasesCaPropertiesOutput) ToGetDatabasesCaPropertiesOutput() GetDatabasesCaPropertiesOutput {
	return o
}

func (o GetDatabasesCaPropertiesOutput) ToGetDatabasesCaPropertiesOutputWithContext(ctx context.Context) GetDatabasesCaPropertiesOutput {
	return o
}

func (o GetDatabasesCaPropertiesOutput) Ca() CaOutput {
	return o.ApplyT(func(v GetDatabasesCaProperties) Ca { return v.Ca }).(CaOutput)
}

type GetDatabasesClusterProperties struct {
	Database DatabaseCluster `pulumi:"database"`
}

type GetDatabasesClusterPropertiesOutput struct{ *pulumi.OutputState }

func (GetDatabasesClusterPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesClusterProperties)(nil)).Elem()
}

func (o GetDatabasesClusterPropertiesOutput) ToGetDatabasesClusterPropertiesOutput() GetDatabasesClusterPropertiesOutput {
	return o
}

func (o GetDatabasesClusterPropertiesOutput) ToGetDatabasesClusterPropertiesOutputWithContext(ctx context.Context) GetDatabasesClusterPropertiesOutput {
	return o
}

func (o GetDatabasesClusterPropertiesOutput) Database() DatabaseClusterOutput {
	return o.ApplyT(func(v GetDatabasesClusterProperties) DatabaseCluster { return v.Database }).(DatabaseClusterOutput)
}

type GetDatabasesConnectionPoolProperties struct {
	Pool ConnectionPool `pulumi:"pool"`
}

type GetDatabasesConnectionPoolPropertiesOutput struct{ *pulumi.OutputState }

func (GetDatabasesConnectionPoolPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesConnectionPoolProperties)(nil)).Elem()
}

func (o GetDatabasesConnectionPoolPropertiesOutput) ToGetDatabasesConnectionPoolPropertiesOutput() GetDatabasesConnectionPoolPropertiesOutput {
	return o
}

func (o GetDatabasesConnectionPoolPropertiesOutput) ToGetDatabasesConnectionPoolPropertiesOutputWithContext(ctx context.Context) GetDatabasesConnectionPoolPropertiesOutput {
	return o
}

func (o GetDatabasesConnectionPoolPropertiesOutput) Pool() ConnectionPoolOutput {
	return o.ApplyT(func(v GetDatabasesConnectionPoolProperties) ConnectionPool { return v.Pool }).(ConnectionPoolOutput)
}

type GetDatabasesEvictionPolicyProperties struct {
	// A string specifying the desired eviction policy for the Redis cluster.
	//
	// - `noeviction`: Don't evict any data, returns error when memory limit is reached.
	// - `allkeys_lru:` Evict any key, least recently used (LRU) first.
	// - `allkeys_random`: Evict keys in a random order.
	// - `volatile_lru`: Evict keys with expiration only, least recently used (LRU) first.
	// - `volatile_random`: Evict keys with expiration only in a random order.
	// - `volatile_ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.
	EvictionPolicy GetDatabasesEvictionPolicyPropertiesEvictionPolicy `pulumi:"evictionPolicy"`
}

type GetDatabasesEvictionPolicyPropertiesOutput struct{ *pulumi.OutputState }

func (GetDatabasesEvictionPolicyPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesEvictionPolicyProperties)(nil)).Elem()
}

func (o GetDatabasesEvictionPolicyPropertiesOutput) ToGetDatabasesEvictionPolicyPropertiesOutput() GetDatabasesEvictionPolicyPropertiesOutput {
	return o
}

func (o GetDatabasesEvictionPolicyPropertiesOutput) ToGetDatabasesEvictionPolicyPropertiesOutputWithContext(ctx context.Context) GetDatabasesEvictionPolicyPropertiesOutput {
	return o
}

// A string specifying the desired eviction policy for the Redis cluster.
//
// - `noeviction`: Don't evict any data, returns error when memory limit is reached.
// - `allkeys_lru:` Evict any key, least recently used (LRU) first.
// - `allkeys_random`: Evict keys in a random order.
// - `volatile_lru`: Evict keys with expiration only, least recently used (LRU) first.
// - `volatile_random`: Evict keys with expiration only in a random order.
// - `volatile_ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.
func (o GetDatabasesEvictionPolicyPropertiesOutput) EvictionPolicy() GetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput {
	return o.ApplyT(func(v GetDatabasesEvictionPolicyProperties) GetDatabasesEvictionPolicyPropertiesEvictionPolicy {
		return v.EvictionPolicy
	}).(GetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput)
}

type GetDatabasesProperties struct {
	Db Database `pulumi:"db"`
}

type GetDatabasesPropertiesOutput struct{ *pulumi.OutputState }

func (GetDatabasesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesProperties)(nil)).Elem()
}

func (o GetDatabasesPropertiesOutput) ToGetDatabasesPropertiesOutput() GetDatabasesPropertiesOutput {
	return o
}

func (o GetDatabasesPropertiesOutput) ToGetDatabasesPropertiesOutputWithContext(ctx context.Context) GetDatabasesPropertiesOutput {
	return o
}

func (o GetDatabasesPropertiesOutput) Db() DatabaseOutput {
	return o.ApplyT(func(v GetDatabasesProperties) Database { return v.Db }).(DatabaseOutput)
}

type GetDatabasesReplicaProperties struct {
	Replica *DatabaseReplica `pulumi:"replica"`
}

type GetDatabasesReplicaPropertiesOutput struct{ *pulumi.OutputState }

func (GetDatabasesReplicaPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesReplicaProperties)(nil)).Elem()
}

func (o GetDatabasesReplicaPropertiesOutput) ToGetDatabasesReplicaPropertiesOutput() GetDatabasesReplicaPropertiesOutput {
	return o
}

func (o GetDatabasesReplicaPropertiesOutput) ToGetDatabasesReplicaPropertiesOutputWithContext(ctx context.Context) GetDatabasesReplicaPropertiesOutput {
	return o
}

func (o GetDatabasesReplicaPropertiesOutput) Replica() DatabaseReplicaPtrOutput {
	return o.ApplyT(func(v GetDatabasesReplicaProperties) *DatabaseReplica { return v.Replica }).(DatabaseReplicaPtrOutput)
}

type GetDatabasesUserProperties struct {
	User DatabaseUser `pulumi:"user"`
}

type GetDatabasesUserPropertiesOutput struct{ *pulumi.OutputState }

func (GetDatabasesUserPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesUserProperties)(nil)).Elem()
}

func (o GetDatabasesUserPropertiesOutput) ToGetDatabasesUserPropertiesOutput() GetDatabasesUserPropertiesOutput {
	return o
}

func (o GetDatabasesUserPropertiesOutput) ToGetDatabasesUserPropertiesOutputWithContext(ctx context.Context) GetDatabasesUserPropertiesOutput {
	return o
}

func (o GetDatabasesUserPropertiesOutput) User() DatabaseUserOutput {
	return o.ApplyT(func(v GetDatabasesUserProperties) DatabaseUser { return v.User }).(DatabaseUserOutput)
}

type ListDatabasesBackupsProperties struct {
	Backups []Backup `pulumi:"backups"`
}

type ListDatabasesBackupsPropertiesOutput struct{ *pulumi.OutputState }

func (ListDatabasesBackupsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListDatabasesBackupsProperties)(nil)).Elem()
}

func (o ListDatabasesBackupsPropertiesOutput) ToListDatabasesBackupsPropertiesOutput() ListDatabasesBackupsPropertiesOutput {
	return o
}

func (o ListDatabasesBackupsPropertiesOutput) ToListDatabasesBackupsPropertiesOutputWithContext(ctx context.Context) ListDatabasesBackupsPropertiesOutput {
	return o
}

func (o ListDatabasesBackupsPropertiesOutput) Backups() BackupArrayOutput {
	return o.ApplyT(func(v ListDatabasesBackupsProperties) []Backup { return v.Backups }).(BackupArrayOutput)
}

type ListDatabasesClustersProperties struct {
	Databases []DatabaseCluster `pulumi:"databases"`
}

type ListDatabasesClustersPropertiesOutput struct{ *pulumi.OutputState }

func (ListDatabasesClustersPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListDatabasesClustersProperties)(nil)).Elem()
}

func (o ListDatabasesClustersPropertiesOutput) ToListDatabasesClustersPropertiesOutput() ListDatabasesClustersPropertiesOutput {
	return o
}

func (o ListDatabasesClustersPropertiesOutput) ToListDatabasesClustersPropertiesOutputWithContext(ctx context.Context) ListDatabasesClustersPropertiesOutput {
	return o
}

func (o ListDatabasesClustersPropertiesOutput) Databases() DatabaseClusterArrayOutput {
	return o.ApplyT(func(v ListDatabasesClustersProperties) []DatabaseCluster { return v.Databases }).(DatabaseClusterArrayOutput)
}

type ListDatabasesFirewallRulesProperties struct {
	Rules []FirewallRule `pulumi:"rules"`
}

type ListDatabasesFirewallRulesPropertiesOutput struct{ *pulumi.OutputState }

func (ListDatabasesFirewallRulesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListDatabasesFirewallRulesProperties)(nil)).Elem()
}

func (o ListDatabasesFirewallRulesPropertiesOutput) ToListDatabasesFirewallRulesPropertiesOutput() ListDatabasesFirewallRulesPropertiesOutput {
	return o
}

func (o ListDatabasesFirewallRulesPropertiesOutput) ToListDatabasesFirewallRulesPropertiesOutputWithContext(ctx context.Context) ListDatabasesFirewallRulesPropertiesOutput {
	return o
}

func (o ListDatabasesFirewallRulesPropertiesOutput) Rules() FirewallRuleArrayOutput {
	return o.ApplyT(func(v ListDatabasesFirewallRulesProperties) []FirewallRule { return v.Rules }).(FirewallRuleArrayOutput)
}

type ListDatabasesProperties struct {
	Dbs []Database `pulumi:"dbs"`
}

type ListDatabasesPropertiesOutput struct{ *pulumi.OutputState }

func (ListDatabasesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListDatabasesProperties)(nil)).Elem()
}

func (o ListDatabasesPropertiesOutput) ToListDatabasesPropertiesOutput() ListDatabasesPropertiesOutput {
	return o
}

func (o ListDatabasesPropertiesOutput) ToListDatabasesPropertiesOutputWithContext(ctx context.Context) ListDatabasesPropertiesOutput {
	return o
}

func (o ListDatabasesPropertiesOutput) Dbs() DatabaseArrayOutput {
	return o.ApplyT(func(v ListDatabasesProperties) []Database { return v.Dbs }).(DatabaseArrayOutput)
}

type ListDatabasesReplicasProperties struct {
	Replicas []DatabaseReplica `pulumi:"replicas"`
}

type ListDatabasesReplicasPropertiesOutput struct{ *pulumi.OutputState }

func (ListDatabasesReplicasPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListDatabasesReplicasProperties)(nil)).Elem()
}

func (o ListDatabasesReplicasPropertiesOutput) ToListDatabasesReplicasPropertiesOutput() ListDatabasesReplicasPropertiesOutput {
	return o
}

func (o ListDatabasesReplicasPropertiesOutput) ToListDatabasesReplicasPropertiesOutputWithContext(ctx context.Context) ListDatabasesReplicasPropertiesOutput {
	return o
}

func (o ListDatabasesReplicasPropertiesOutput) Replicas() DatabaseReplicaArrayOutput {
	return o.ApplyT(func(v ListDatabasesReplicasProperties) []DatabaseReplica { return v.Replicas }).(DatabaseReplicaArrayOutput)
}

type ListDatabasesUsersProperties struct {
	Users []DatabaseUser `pulumi:"users"`
}

type ListDatabasesUsersPropertiesOutput struct{ *pulumi.OutputState }

func (ListDatabasesUsersPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListDatabasesUsersProperties)(nil)).Elem()
}

func (o ListDatabasesUsersPropertiesOutput) ToListDatabasesUsersPropertiesOutput() ListDatabasesUsersPropertiesOutput {
	return o
}

func (o ListDatabasesUsersPropertiesOutput) ToListDatabasesUsersPropertiesOutputWithContext(ctx context.Context) ListDatabasesUsersPropertiesOutput {
	return o
}

func (o ListDatabasesUsersPropertiesOutput) Users() DatabaseUserArrayOutput {
	return o.ApplyT(func(v ListDatabasesUsersProperties) []DatabaseUser { return v.Users }).(DatabaseUserArrayOutput)
}

type Mysql struct {
	// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupHour *int `pulumi:"backupHour"`
	// The minute of the backup hour when backup for the service starts. New backup  only starts if previous backup has already completed.
	BackupMinute *int `pulumi:"backupMinute"`
	// The minimum amount of time, in seconds, to keep binlog entries before deletion.  This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
	BinlogRetentionPeriod *float64 `pulumi:"binlogRetentionPeriod"`
	// The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or 'SYSTEM' to use the MySQL server default.
	DefaultTimeZone *string `pulumi:"defaultTimeZone"`
	// The maximum permitted result length, in bytes, for the GROUP_CONCAT() function.
	GroupConcatMaxLen *int `pulumi:"groupConcatMaxLen"`
	// The time, in seconds, before cached statistics expire.
	InformationSchemaStatsExpiry *int `pulumi:"informationSchemaStatsExpiry"`
	// The minimum length of words that an InnoDB FULLTEXT index stores.
	InnodbFtMinTokenSize *int `pulumi:"innodbFtMinTokenSize"`
	// The InnoDB FULLTEXT index stopword list for all InnoDB tables.
	InnodbFtServerStopwordTable *string `pulumi:"innodbFtServerStopwordTable"`
	// The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
	InnodbLockWaitTimeout *int `pulumi:"innodbLockWaitTimeout"`
	// The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
	InnodbLogBufferSize *int `pulumi:"innodbLogBufferSize"`
	// The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
	InnodbOnlineAlterLogMaxSize *int `pulumi:"innodbOnlineAlterLogMaxSize"`
	// When enabled, records information about all deadlocks in InnoDB user transactions  in the error log. Disabled by default.
	InnodbPrintAllDeadlocks *bool `pulumi:"innodbPrintAllDeadlocks"`
	// When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
	InnodbRollbackOnTimeout *bool `pulumi:"innodbRollbackOnTimeout"`
	// The time, in seconds, the server waits for activity on an interactive. connection before closing it.
	InteractiveTimeout *int `pulumi:"interactiveTimeout"`
	// The storage engine for in-memory internal temporary tables.
	InternalTmpMemStorageEngine *MysqlInternalTmpMemStorageEngine `pulumi:"internalTmpMemStorageEngine"`
	// The time, in seconds, for a query to take to execute before  being captured by slow_query_logs. Default is 10 seconds.
	LongQueryTime *float64 `pulumi:"longQueryTime"`
	// The size of the largest message, in bytes, that can be received by the server. Default is 67108864 (64M).
	MaxAllowedPacket *int `pulumi:"maxAllowedPacket"`
	// The maximum size, in bytes, of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)
	MaxHeapTableSize *int `pulumi:"maxHeapTableSize"`
	// The time, in seconds, to wait for more data from an existing connection. aborting the read.
	NetReadTimeout *int `pulumi:"netReadTimeout"`
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	NetWriteTimeout *int `pulumi:"netWriteTimeout"`
	// When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
	SlowQueryLog *bool `pulumi:"slowQueryLog"`
	// The sort buffer size, in bytes, for ORDER BY optimization. Default is 262144. (256K).
	SortBufferSize *int `pulumi:"sortBufferSize"`
	// Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
	SqlMode *string `pulumi:"sqlMode"`
	// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
	SqlRequirePrimaryKey *bool `pulumi:"sqlRequirePrimaryKey"`
	// The maximum size, in bytes, of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
	TmpTableSize *int    `pulumi:"tmpTableSize"`
	Type         *string `pulumi:"type"`
	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	WaitTimeout *int `pulumi:"waitTimeout"`
}

// Defaults sets the appropriate defaults for Mysql
func (val *Mysql) Defaults() *Mysql {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "mysql"
		tmp.Type = &type_
	}
	return &tmp
}

type MysqlOutput struct{ *pulumi.OutputState }

func (MysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Mysql)(nil)).Elem()
}

func (o MysqlOutput) ToMysqlOutput() MysqlOutput {
	return o
}

func (o MysqlOutput) ToMysqlOutputWithContext(ctx context.Context) MysqlOutput {
	return o
}

// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
func (o MysqlOutput) BackupHour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mysql) *int { return v.BackupHour }).(pulumi.IntPtrOutput)
}

// The minute of the backup hour when backup for the service starts. New backup  only starts if previous backup has already completed.
func (o MysqlOutput) BackupMinute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mysql) *int { return v.BackupMinute }).(pulumi.IntPtrOutput)
}

// The minimum amount of time, in seconds, to keep binlog entries before deletion.  This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
func (o MysqlOutput) BinlogRetentionPeriod() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Mysql) *float64 { return v.BinlogRetentionPeriod }).(pulumi.Float64PtrOutput)
}

// The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
func (o MysqlOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mysql) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or 'SYSTEM' to use the MySQL server default.
func (o MysqlOutput) DefaultTimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Mysql) *string { return v.DefaultTimeZone }).(pulumi.StringPtrOutput)
}

// The maximum permitted result length, in bytes, for the GROUP_CONCAT() function.
func (o MysqlOutput) GroupConcatMaxLen() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mysql) *int { return v.GroupConcatMaxLen }).(pulumi.IntPtrOutput)
}

// The time, in seconds, before cached statistics expire.
func (o MysqlOutput) InformationSchemaStatsExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mysql) *int { return v.InformationSchemaStatsExpiry }).(pulumi.IntPtrOutput)
}

// The minimum length of words that an InnoDB FULLTEXT index stores.
func (o MysqlOutput) InnodbFtMinTokenSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mysql) *int { return v.InnodbFtMinTokenSize }).(pulumi.IntPtrOutput)
}

// The InnoDB FULLTEXT index stopword list for all InnoDB tables.
func (o MysqlOutput) InnodbFtServerStopwordTable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Mysql) *string { return v.InnodbFtServerStopwordTable }).(pulumi.StringPtrOutput)
}

// The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
func (o MysqlOutput) InnodbLockWaitTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mysql) *int { return v.InnodbLockWaitTimeout }).(pulumi.IntPtrOutput)
}

// The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
func (o MysqlOutput) InnodbLogBufferSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mysql) *int { return v.InnodbLogBufferSize }).(pulumi.IntPtrOutput)
}

// The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
func (o MysqlOutput) InnodbOnlineAlterLogMaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mysql) *int { return v.InnodbOnlineAlterLogMaxSize }).(pulumi.IntPtrOutput)
}

// When enabled, records information about all deadlocks in InnoDB user transactions  in the error log. Disabled by default.
func (o MysqlOutput) InnodbPrintAllDeadlocks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Mysql) *bool { return v.InnodbPrintAllDeadlocks }).(pulumi.BoolPtrOutput)
}

// When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
func (o MysqlOutput) InnodbRollbackOnTimeout() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Mysql) *bool { return v.InnodbRollbackOnTimeout }).(pulumi.BoolPtrOutput)
}

// The time, in seconds, the server waits for activity on an interactive. connection before closing it.
func (o MysqlOutput) InteractiveTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mysql) *int { return v.InteractiveTimeout }).(pulumi.IntPtrOutput)
}

// The storage engine for in-memory internal temporary tables.
func (o MysqlOutput) InternalTmpMemStorageEngine() MysqlInternalTmpMemStorageEnginePtrOutput {
	return o.ApplyT(func(v Mysql) *MysqlInternalTmpMemStorageEngine { return v.InternalTmpMemStorageEngine }).(MysqlInternalTmpMemStorageEnginePtrOutput)
}

// The time, in seconds, for a query to take to execute before  being captured by slow_query_logs. Default is 10 seconds.
func (o MysqlOutput) LongQueryTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Mysql) *float64 { return v.LongQueryTime }).(pulumi.Float64PtrOutput)
}

// The size of the largest message, in bytes, that can be received by the server. Default is 67108864 (64M).
func (o MysqlOutput) MaxAllowedPacket() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mysql) *int { return v.MaxAllowedPacket }).(pulumi.IntPtrOutput)
}

// The maximum size, in bytes, of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)
func (o MysqlOutput) MaxHeapTableSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mysql) *int { return v.MaxHeapTableSize }).(pulumi.IntPtrOutput)
}

// The time, in seconds, to wait for more data from an existing connection. aborting the read.
func (o MysqlOutput) NetReadTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mysql) *int { return v.NetReadTimeout }).(pulumi.IntPtrOutput)
}

// The number of seconds to wait for a block to be written to a connection before aborting the write.
func (o MysqlOutput) NetWriteTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mysql) *int { return v.NetWriteTimeout }).(pulumi.IntPtrOutput)
}

// When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
func (o MysqlOutput) SlowQueryLog() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Mysql) *bool { return v.SlowQueryLog }).(pulumi.BoolPtrOutput)
}

// The sort buffer size, in bytes, for ORDER BY optimization. Default is 262144. (256K).
func (o MysqlOutput) SortBufferSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mysql) *int { return v.SortBufferSize }).(pulumi.IntPtrOutput)
}

// Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
func (o MysqlOutput) SqlMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Mysql) *string { return v.SqlMode }).(pulumi.StringPtrOutput)
}

// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
func (o MysqlOutput) SqlRequirePrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Mysql) *bool { return v.SqlRequirePrimaryKey }).(pulumi.BoolPtrOutput)
}

// The maximum size, in bytes, of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
func (o MysqlOutput) TmpTableSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mysql) *int { return v.TmpTableSize }).(pulumi.IntPtrOutput)
}

func (o MysqlOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Mysql) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The number of seconds the server waits for activity on a noninteractive connection before closing it.
func (o MysqlOutput) WaitTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mysql) *int { return v.WaitTimeout }).(pulumi.IntPtrOutput)
}

type MysqlPtrOutput struct{ *pulumi.OutputState }

func (MysqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mysql)(nil)).Elem()
}

func (o MysqlPtrOutput) ToMysqlPtrOutput() MysqlPtrOutput {
	return o
}

func (o MysqlPtrOutput) ToMysqlPtrOutputWithContext(ctx context.Context) MysqlPtrOutput {
	return o
}

func (o MysqlPtrOutput) Elem() MysqlOutput {
	return o.ApplyT(func(v *Mysql) Mysql {
		if v != nil {
			return *v
		}
		var ret Mysql
		return ret
	}).(MysqlOutput)
}

// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
func (o MysqlPtrOutput) BackupHour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mysql) *int {
		if v == nil {
			return nil
		}
		return v.BackupHour
	}).(pulumi.IntPtrOutput)
}

// The minute of the backup hour when backup for the service starts. New backup  only starts if previous backup has already completed.
func (o MysqlPtrOutput) BackupMinute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mysql) *int {
		if v == nil {
			return nil
		}
		return v.BackupMinute
	}).(pulumi.IntPtrOutput)
}

// The minimum amount of time, in seconds, to keep binlog entries before deletion.  This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
func (o MysqlPtrOutput) BinlogRetentionPeriod() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Mysql) *float64 {
		if v == nil {
			return nil
		}
		return v.BinlogRetentionPeriod
	}).(pulumi.Float64PtrOutput)
}

// The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
func (o MysqlPtrOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mysql) *int {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.IntPtrOutput)
}

// Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or 'SYSTEM' to use the MySQL server default.
func (o MysqlPtrOutput) DefaultTimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mysql) *string {
		if v == nil {
			return nil
		}
		return v.DefaultTimeZone
	}).(pulumi.StringPtrOutput)
}

// The maximum permitted result length, in bytes, for the GROUP_CONCAT() function.
func (o MysqlPtrOutput) GroupConcatMaxLen() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mysql) *int {
		if v == nil {
			return nil
		}
		return v.GroupConcatMaxLen
	}).(pulumi.IntPtrOutput)
}

// The time, in seconds, before cached statistics expire.
func (o MysqlPtrOutput) InformationSchemaStatsExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mysql) *int {
		if v == nil {
			return nil
		}
		return v.InformationSchemaStatsExpiry
	}).(pulumi.IntPtrOutput)
}

// The minimum length of words that an InnoDB FULLTEXT index stores.
func (o MysqlPtrOutput) InnodbFtMinTokenSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mysql) *int {
		if v == nil {
			return nil
		}
		return v.InnodbFtMinTokenSize
	}).(pulumi.IntPtrOutput)
}

// The InnoDB FULLTEXT index stopword list for all InnoDB tables.
func (o MysqlPtrOutput) InnodbFtServerStopwordTable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mysql) *string {
		if v == nil {
			return nil
		}
		return v.InnodbFtServerStopwordTable
	}).(pulumi.StringPtrOutput)
}

// The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
func (o MysqlPtrOutput) InnodbLockWaitTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mysql) *int {
		if v == nil {
			return nil
		}
		return v.InnodbLockWaitTimeout
	}).(pulumi.IntPtrOutput)
}

// The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
func (o MysqlPtrOutput) InnodbLogBufferSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mysql) *int {
		if v == nil {
			return nil
		}
		return v.InnodbLogBufferSize
	}).(pulumi.IntPtrOutput)
}

// The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
func (o MysqlPtrOutput) InnodbOnlineAlterLogMaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mysql) *int {
		if v == nil {
			return nil
		}
		return v.InnodbOnlineAlterLogMaxSize
	}).(pulumi.IntPtrOutput)
}

// When enabled, records information about all deadlocks in InnoDB user transactions  in the error log. Disabled by default.
func (o MysqlPtrOutput) InnodbPrintAllDeadlocks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Mysql) *bool {
		if v == nil {
			return nil
		}
		return v.InnodbPrintAllDeadlocks
	}).(pulumi.BoolPtrOutput)
}

// When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
func (o MysqlPtrOutput) InnodbRollbackOnTimeout() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Mysql) *bool {
		if v == nil {
			return nil
		}
		return v.InnodbRollbackOnTimeout
	}).(pulumi.BoolPtrOutput)
}

// The time, in seconds, the server waits for activity on an interactive. connection before closing it.
func (o MysqlPtrOutput) InteractiveTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mysql) *int {
		if v == nil {
			return nil
		}
		return v.InteractiveTimeout
	}).(pulumi.IntPtrOutput)
}

// The storage engine for in-memory internal temporary tables.
func (o MysqlPtrOutput) InternalTmpMemStorageEngine() MysqlInternalTmpMemStorageEnginePtrOutput {
	return o.ApplyT(func(v *Mysql) *MysqlInternalTmpMemStorageEngine {
		if v == nil {
			return nil
		}
		return v.InternalTmpMemStorageEngine
	}).(MysqlInternalTmpMemStorageEnginePtrOutput)
}

// The time, in seconds, for a query to take to execute before  being captured by slow_query_logs. Default is 10 seconds.
func (o MysqlPtrOutput) LongQueryTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Mysql) *float64 {
		if v == nil {
			return nil
		}
		return v.LongQueryTime
	}).(pulumi.Float64PtrOutput)
}

// The size of the largest message, in bytes, that can be received by the server. Default is 67108864 (64M).
func (o MysqlPtrOutput) MaxAllowedPacket() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mysql) *int {
		if v == nil {
			return nil
		}
		return v.MaxAllowedPacket
	}).(pulumi.IntPtrOutput)
}

// The maximum size, in bytes, of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)
func (o MysqlPtrOutput) MaxHeapTableSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mysql) *int {
		if v == nil {
			return nil
		}
		return v.MaxHeapTableSize
	}).(pulumi.IntPtrOutput)
}

// The time, in seconds, to wait for more data from an existing connection. aborting the read.
func (o MysqlPtrOutput) NetReadTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mysql) *int {
		if v == nil {
			return nil
		}
		return v.NetReadTimeout
	}).(pulumi.IntPtrOutput)
}

// The number of seconds to wait for a block to be written to a connection before aborting the write.
func (o MysqlPtrOutput) NetWriteTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mysql) *int {
		if v == nil {
			return nil
		}
		return v.NetWriteTimeout
	}).(pulumi.IntPtrOutput)
}

// When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
func (o MysqlPtrOutput) SlowQueryLog() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Mysql) *bool {
		if v == nil {
			return nil
		}
		return v.SlowQueryLog
	}).(pulumi.BoolPtrOutput)
}

// The sort buffer size, in bytes, for ORDER BY optimization. Default is 262144. (256K).
func (o MysqlPtrOutput) SortBufferSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mysql) *int {
		if v == nil {
			return nil
		}
		return v.SortBufferSize
	}).(pulumi.IntPtrOutput)
}

// Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
func (o MysqlPtrOutput) SqlMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mysql) *string {
		if v == nil {
			return nil
		}
		return v.SqlMode
	}).(pulumi.StringPtrOutput)
}

// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
func (o MysqlPtrOutput) SqlRequirePrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Mysql) *bool {
		if v == nil {
			return nil
		}
		return v.SqlRequirePrimaryKey
	}).(pulumi.BoolPtrOutput)
}

// The maximum size, in bytes, of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
func (o MysqlPtrOutput) TmpTableSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mysql) *int {
		if v == nil {
			return nil
		}
		return v.TmpTableSize
	}).(pulumi.IntPtrOutput)
}

func (o MysqlPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mysql) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The number of seconds the server waits for activity on a noninteractive connection before closing it.
func (o MysqlPtrOutput) WaitTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mysql) *int {
		if v == nil {
			return nil
		}
		return v.WaitTimeout
	}).(pulumi.IntPtrOutput)
}

type MysqlSettings struct {
	// A string specifying the authentication method to be used for connections
	// to the MySQL user account. The valid values are `mysql_native_password`
	// or `caching_sha2_password`. If excluded when creating a new user, the
	// default for the version of MySQL in use will be used. As of MySQL 8.0, the
	// default is `caching_sha2_password`.
	AuthPlugin MysqlSettingsAuthPlugin `pulumi:"authPlugin"`
}

// MysqlSettingsInput is an input type that accepts MysqlSettingsArgs and MysqlSettingsOutput values.
// You can construct a concrete instance of `MysqlSettingsInput` via:
//
//	MysqlSettingsArgs{...}
type MysqlSettingsInput interface {
	pulumi.Input

	ToMysqlSettingsOutput() MysqlSettingsOutput
	ToMysqlSettingsOutputWithContext(context.Context) MysqlSettingsOutput
}

type MysqlSettingsArgs struct {
	// A string specifying the authentication method to be used for connections
	// to the MySQL user account. The valid values are `mysql_native_password`
	// or `caching_sha2_password`. If excluded when creating a new user, the
	// default for the version of MySQL in use will be used. As of MySQL 8.0, the
	// default is `caching_sha2_password`.
	AuthPlugin MysqlSettingsAuthPluginInput `pulumi:"authPlugin"`
}

func (MysqlSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSettings)(nil)).Elem()
}

func (i MysqlSettingsArgs) ToMysqlSettingsOutput() MysqlSettingsOutput {
	return i.ToMysqlSettingsOutputWithContext(context.Background())
}

func (i MysqlSettingsArgs) ToMysqlSettingsOutputWithContext(ctx context.Context) MysqlSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSettingsOutput)
}

func (i MysqlSettingsArgs) ToMysqlSettingsPtrOutput() MysqlSettingsPtrOutput {
	return i.ToMysqlSettingsPtrOutputWithContext(context.Background())
}

func (i MysqlSettingsArgs) ToMysqlSettingsPtrOutputWithContext(ctx context.Context) MysqlSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSettingsOutput).ToMysqlSettingsPtrOutputWithContext(ctx)
}

// MysqlSettingsPtrInput is an input type that accepts MysqlSettingsArgs, MysqlSettingsPtr and MysqlSettingsPtrOutput values.
// You can construct a concrete instance of `MysqlSettingsPtrInput` via:
//
//	        MysqlSettingsArgs{...}
//
//	or:
//
//	        nil
type MysqlSettingsPtrInput interface {
	pulumi.Input

	ToMysqlSettingsPtrOutput() MysqlSettingsPtrOutput
	ToMysqlSettingsPtrOutputWithContext(context.Context) MysqlSettingsPtrOutput
}

type mysqlSettingsPtrType MysqlSettingsArgs

func MysqlSettingsPtr(v *MysqlSettingsArgs) MysqlSettingsPtrInput {
	return (*mysqlSettingsPtrType)(v)
}

func (*mysqlSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlSettings)(nil)).Elem()
}

func (i *mysqlSettingsPtrType) ToMysqlSettingsPtrOutput() MysqlSettingsPtrOutput {
	return i.ToMysqlSettingsPtrOutputWithContext(context.Background())
}

func (i *mysqlSettingsPtrType) ToMysqlSettingsPtrOutputWithContext(ctx context.Context) MysqlSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSettingsPtrOutput)
}

type MysqlSettingsOutput struct{ *pulumi.OutputState }

func (MysqlSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSettings)(nil)).Elem()
}

func (o MysqlSettingsOutput) ToMysqlSettingsOutput() MysqlSettingsOutput {
	return o
}

func (o MysqlSettingsOutput) ToMysqlSettingsOutputWithContext(ctx context.Context) MysqlSettingsOutput {
	return o
}

func (o MysqlSettingsOutput) ToMysqlSettingsPtrOutput() MysqlSettingsPtrOutput {
	return o.ToMysqlSettingsPtrOutputWithContext(context.Background())
}

func (o MysqlSettingsOutput) ToMysqlSettingsPtrOutputWithContext(ctx context.Context) MysqlSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlSettings) *MysqlSettings {
		return &v
	}).(MysqlSettingsPtrOutput)
}

// A string specifying the authentication method to be used for connections
// to the MySQL user account. The valid values are `mysql_native_password`
// or `caching_sha2_password`. If excluded when creating a new user, the
// default for the version of MySQL in use will be used. As of MySQL 8.0, the
// default is `caching_sha2_password`.
func (o MysqlSettingsOutput) AuthPlugin() MysqlSettingsAuthPluginOutput {
	return o.ApplyT(func(v MysqlSettings) MysqlSettingsAuthPlugin { return v.AuthPlugin }).(MysqlSettingsAuthPluginOutput)
}

type MysqlSettingsPtrOutput struct{ *pulumi.OutputState }

func (MysqlSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlSettings)(nil)).Elem()
}

func (o MysqlSettingsPtrOutput) ToMysqlSettingsPtrOutput() MysqlSettingsPtrOutput {
	return o
}

func (o MysqlSettingsPtrOutput) ToMysqlSettingsPtrOutputWithContext(ctx context.Context) MysqlSettingsPtrOutput {
	return o
}

func (o MysqlSettingsPtrOutput) Elem() MysqlSettingsOutput {
	return o.ApplyT(func(v *MysqlSettings) MysqlSettings {
		if v != nil {
			return *v
		}
		var ret MysqlSettings
		return ret
	}).(MysqlSettingsOutput)
}

// A string specifying the authentication method to be used for connections
// to the MySQL user account. The valid values are `mysql_native_password`
// or `caching_sha2_password`. If excluded when creating a new user, the
// default for the version of MySQL in use will be used. As of MySQL 8.0, the
// default is `caching_sha2_password`.
func (o MysqlSettingsPtrOutput) AuthPlugin() MysqlSettingsAuthPluginPtrOutput {
	return o.ApplyT(func(v *MysqlSettings) *MysqlSettingsAuthPlugin {
		if v == nil {
			return nil
		}
		return &v.AuthPlugin
	}).(MysqlSettingsAuthPluginPtrOutput)
}

type OnlineMigration struct {
	// The time the migration was initiated, in ISO 8601 format.
	CreatedAt *string `pulumi:"createdAt"`
	// The ID of the most recent migration.
	Id *string `pulumi:"id"`
	// The current status of the migration.
	Status *OnlineMigrationStatus `pulumi:"status"`
}

type OnlineMigrationOutput struct{ *pulumi.OutputState }

func (OnlineMigrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineMigration)(nil)).Elem()
}

func (o OnlineMigrationOutput) ToOnlineMigrationOutput() OnlineMigrationOutput {
	return o
}

func (o OnlineMigrationOutput) ToOnlineMigrationOutputWithContext(ctx context.Context) OnlineMigrationOutput {
	return o
}

// The time the migration was initiated, in ISO 8601 format.
func (o OnlineMigrationOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineMigration) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The ID of the most recent migration.
func (o OnlineMigrationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineMigration) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The current status of the migration.
func (o OnlineMigrationOutput) Status() OnlineMigrationStatusPtrOutput {
	return o.ApplyT(func(v OnlineMigration) *OnlineMigrationStatus { return v.Status }).(OnlineMigrationStatusPtrOutput)
}

type Options struct {
	Options             *OptionsOptionsProperties             `pulumi:"options"`
	VersionAvailability *OptionsVersionAvailabilityProperties `pulumi:"versionAvailability"`
}

type OptionsOutput struct{ *pulumi.OutputState }

func (OptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Options)(nil)).Elem()
}

func (o OptionsOutput) ToOptionsOutput() OptionsOutput {
	return o
}

func (o OptionsOutput) ToOptionsOutputWithContext(ctx context.Context) OptionsOutput {
	return o
}

func (o OptionsOutput) Options() OptionsOptionsPropertiesPtrOutput {
	return o.ApplyT(func(v Options) *OptionsOptionsProperties { return v.Options }).(OptionsOptionsPropertiesPtrOutput)
}

func (o OptionsOutput) VersionAvailability() OptionsVersionAvailabilityPropertiesPtrOutput {
	return o.ApplyT(func(v Options) *OptionsVersionAvailabilityProperties { return v.VersionAvailability }).(OptionsVersionAvailabilityPropertiesPtrOutput)
}

type OptionsOptionsProperties struct {
	Mongodb *OptionsOptionsPropertiesMongodb `pulumi:"mongodb"`
	Mysql   *OptionsOptionsPropertiesMysql   `pulumi:"mysql"`
	Pg      *OptionsOptionsPropertiesPg      `pulumi:"pg"`
	Redis   *OptionsOptionsPropertiesRedis   `pulumi:"redis"`
}

type OptionsOptionsPropertiesOutput struct{ *pulumi.OutputState }

func (OptionsOptionsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionsOptionsProperties)(nil)).Elem()
}

func (o OptionsOptionsPropertiesOutput) ToOptionsOptionsPropertiesOutput() OptionsOptionsPropertiesOutput {
	return o
}

func (o OptionsOptionsPropertiesOutput) ToOptionsOptionsPropertiesOutputWithContext(ctx context.Context) OptionsOptionsPropertiesOutput {
	return o
}

func (o OptionsOptionsPropertiesOutput) Mongodb() OptionsOptionsPropertiesMongodbPtrOutput {
	return o.ApplyT(func(v OptionsOptionsProperties) *OptionsOptionsPropertiesMongodb { return v.Mongodb }).(OptionsOptionsPropertiesMongodbPtrOutput)
}

func (o OptionsOptionsPropertiesOutput) Mysql() OptionsOptionsPropertiesMysqlPtrOutput {
	return o.ApplyT(func(v OptionsOptionsProperties) *OptionsOptionsPropertiesMysql { return v.Mysql }).(OptionsOptionsPropertiesMysqlPtrOutput)
}

func (o OptionsOptionsPropertiesOutput) Pg() OptionsOptionsPropertiesPgPtrOutput {
	return o.ApplyT(func(v OptionsOptionsProperties) *OptionsOptionsPropertiesPg { return v.Pg }).(OptionsOptionsPropertiesPgPtrOutput)
}

func (o OptionsOptionsPropertiesOutput) Redis() OptionsOptionsPropertiesRedisPtrOutput {
	return o.ApplyT(func(v OptionsOptionsProperties) *OptionsOptionsPropertiesRedis { return v.Redis }).(OptionsOptionsPropertiesRedisPtrOutput)
}

type OptionsOptionsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (OptionsOptionsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OptionsOptionsProperties)(nil)).Elem()
}

func (o OptionsOptionsPropertiesPtrOutput) ToOptionsOptionsPropertiesPtrOutput() OptionsOptionsPropertiesPtrOutput {
	return o
}

func (o OptionsOptionsPropertiesPtrOutput) ToOptionsOptionsPropertiesPtrOutputWithContext(ctx context.Context) OptionsOptionsPropertiesPtrOutput {
	return o
}

func (o OptionsOptionsPropertiesPtrOutput) Elem() OptionsOptionsPropertiesOutput {
	return o.ApplyT(func(v *OptionsOptionsProperties) OptionsOptionsProperties {
		if v != nil {
			return *v
		}
		var ret OptionsOptionsProperties
		return ret
	}).(OptionsOptionsPropertiesOutput)
}

func (o OptionsOptionsPropertiesPtrOutput) Mongodb() OptionsOptionsPropertiesMongodbPtrOutput {
	return o.ApplyT(func(v *OptionsOptionsProperties) *OptionsOptionsPropertiesMongodb {
		if v == nil {
			return nil
		}
		return v.Mongodb
	}).(OptionsOptionsPropertiesMongodbPtrOutput)
}

func (o OptionsOptionsPropertiesPtrOutput) Mysql() OptionsOptionsPropertiesMysqlPtrOutput {
	return o.ApplyT(func(v *OptionsOptionsProperties) *OptionsOptionsPropertiesMysql {
		if v == nil {
			return nil
		}
		return v.Mysql
	}).(OptionsOptionsPropertiesMysqlPtrOutput)
}

func (o OptionsOptionsPropertiesPtrOutput) Pg() OptionsOptionsPropertiesPgPtrOutput {
	return o.ApplyT(func(v *OptionsOptionsProperties) *OptionsOptionsPropertiesPg {
		if v == nil {
			return nil
		}
		return v.Pg
	}).(OptionsOptionsPropertiesPgPtrOutput)
}

func (o OptionsOptionsPropertiesPtrOutput) Redis() OptionsOptionsPropertiesRedisPtrOutput {
	return o.ApplyT(func(v *OptionsOptionsProperties) *OptionsOptionsPropertiesRedis {
		if v == nil {
			return nil
		}
		return v.Redis
	}).(OptionsOptionsPropertiesRedisPtrOutput)
}

type OptionsOptionsPropertiesMongodb struct {
	// An array of objects, each indicating the node sizes (otherwise referred to as slugs) that are available with various numbers of nodes in the database cluster. Each slugs denotes the node's identifier, CPU, and RAM (in that order).
	Layouts []DatabaseLayoutOption `pulumi:"layouts"`
	// An array of strings containing the names of available regions
	Regions []string `pulumi:"regions"`
	// An array of strings containing the names of available regions
	Versions []string `pulumi:"versions"`
}

type OptionsOptionsPropertiesMongodbOutput struct{ *pulumi.OutputState }

func (OptionsOptionsPropertiesMongodbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionsOptionsPropertiesMongodb)(nil)).Elem()
}

func (o OptionsOptionsPropertiesMongodbOutput) ToOptionsOptionsPropertiesMongodbOutput() OptionsOptionsPropertiesMongodbOutput {
	return o
}

func (o OptionsOptionsPropertiesMongodbOutput) ToOptionsOptionsPropertiesMongodbOutputWithContext(ctx context.Context) OptionsOptionsPropertiesMongodbOutput {
	return o
}

// An array of objects, each indicating the node sizes (otherwise referred to as slugs) that are available with various numbers of nodes in the database cluster. Each slugs denotes the node's identifier, CPU, and RAM (in that order).
func (o OptionsOptionsPropertiesMongodbOutput) Layouts() DatabaseLayoutOptionArrayOutput {
	return o.ApplyT(func(v OptionsOptionsPropertiesMongodb) []DatabaseLayoutOption { return v.Layouts }).(DatabaseLayoutOptionArrayOutput)
}

// An array of strings containing the names of available regions
func (o OptionsOptionsPropertiesMongodbOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OptionsOptionsPropertiesMongodb) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// An array of strings containing the names of available regions
func (o OptionsOptionsPropertiesMongodbOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OptionsOptionsPropertiesMongodb) []string { return v.Versions }).(pulumi.StringArrayOutput)
}

type OptionsOptionsPropertiesMongodbPtrOutput struct{ *pulumi.OutputState }

func (OptionsOptionsPropertiesMongodbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OptionsOptionsPropertiesMongodb)(nil)).Elem()
}

func (o OptionsOptionsPropertiesMongodbPtrOutput) ToOptionsOptionsPropertiesMongodbPtrOutput() OptionsOptionsPropertiesMongodbPtrOutput {
	return o
}

func (o OptionsOptionsPropertiesMongodbPtrOutput) ToOptionsOptionsPropertiesMongodbPtrOutputWithContext(ctx context.Context) OptionsOptionsPropertiesMongodbPtrOutput {
	return o
}

func (o OptionsOptionsPropertiesMongodbPtrOutput) Elem() OptionsOptionsPropertiesMongodbOutput {
	return o.ApplyT(func(v *OptionsOptionsPropertiesMongodb) OptionsOptionsPropertiesMongodb {
		if v != nil {
			return *v
		}
		var ret OptionsOptionsPropertiesMongodb
		return ret
	}).(OptionsOptionsPropertiesMongodbOutput)
}

// An array of objects, each indicating the node sizes (otherwise referred to as slugs) that are available with various numbers of nodes in the database cluster. Each slugs denotes the node's identifier, CPU, and RAM (in that order).
func (o OptionsOptionsPropertiesMongodbPtrOutput) Layouts() DatabaseLayoutOptionArrayOutput {
	return o.ApplyT(func(v *OptionsOptionsPropertiesMongodb) []DatabaseLayoutOption {
		if v == nil {
			return nil
		}
		return v.Layouts
	}).(DatabaseLayoutOptionArrayOutput)
}

// An array of strings containing the names of available regions
func (o OptionsOptionsPropertiesMongodbPtrOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OptionsOptionsPropertiesMongodb) []string {
		if v == nil {
			return nil
		}
		return v.Regions
	}).(pulumi.StringArrayOutput)
}

// An array of strings containing the names of available regions
func (o OptionsOptionsPropertiesMongodbPtrOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OptionsOptionsPropertiesMongodb) []string {
		if v == nil {
			return nil
		}
		return v.Versions
	}).(pulumi.StringArrayOutput)
}

type OptionsOptionsPropertiesMysql struct {
	// An array of objects, each indicating the node sizes (otherwise referred to as slugs) that are available with various numbers of nodes in the database cluster. Each slugs denotes the node's identifier, CPU, and RAM (in that order).
	Layouts []DatabaseLayoutOption `pulumi:"layouts"`
	// An array of strings containing the names of available regions
	Regions []string `pulumi:"regions"`
	// An array of strings containing the names of available regions
	Versions []string `pulumi:"versions"`
}

type OptionsOptionsPropertiesMysqlOutput struct{ *pulumi.OutputState }

func (OptionsOptionsPropertiesMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionsOptionsPropertiesMysql)(nil)).Elem()
}

func (o OptionsOptionsPropertiesMysqlOutput) ToOptionsOptionsPropertiesMysqlOutput() OptionsOptionsPropertiesMysqlOutput {
	return o
}

func (o OptionsOptionsPropertiesMysqlOutput) ToOptionsOptionsPropertiesMysqlOutputWithContext(ctx context.Context) OptionsOptionsPropertiesMysqlOutput {
	return o
}

// An array of objects, each indicating the node sizes (otherwise referred to as slugs) that are available with various numbers of nodes in the database cluster. Each slugs denotes the node's identifier, CPU, and RAM (in that order).
func (o OptionsOptionsPropertiesMysqlOutput) Layouts() DatabaseLayoutOptionArrayOutput {
	return o.ApplyT(func(v OptionsOptionsPropertiesMysql) []DatabaseLayoutOption { return v.Layouts }).(DatabaseLayoutOptionArrayOutput)
}

// An array of strings containing the names of available regions
func (o OptionsOptionsPropertiesMysqlOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OptionsOptionsPropertiesMysql) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// An array of strings containing the names of available regions
func (o OptionsOptionsPropertiesMysqlOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OptionsOptionsPropertiesMysql) []string { return v.Versions }).(pulumi.StringArrayOutput)
}

type OptionsOptionsPropertiesMysqlPtrOutput struct{ *pulumi.OutputState }

func (OptionsOptionsPropertiesMysqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OptionsOptionsPropertiesMysql)(nil)).Elem()
}

func (o OptionsOptionsPropertiesMysqlPtrOutput) ToOptionsOptionsPropertiesMysqlPtrOutput() OptionsOptionsPropertiesMysqlPtrOutput {
	return o
}

func (o OptionsOptionsPropertiesMysqlPtrOutput) ToOptionsOptionsPropertiesMysqlPtrOutputWithContext(ctx context.Context) OptionsOptionsPropertiesMysqlPtrOutput {
	return o
}

func (o OptionsOptionsPropertiesMysqlPtrOutput) Elem() OptionsOptionsPropertiesMysqlOutput {
	return o.ApplyT(func(v *OptionsOptionsPropertiesMysql) OptionsOptionsPropertiesMysql {
		if v != nil {
			return *v
		}
		var ret OptionsOptionsPropertiesMysql
		return ret
	}).(OptionsOptionsPropertiesMysqlOutput)
}

// An array of objects, each indicating the node sizes (otherwise referred to as slugs) that are available with various numbers of nodes in the database cluster. Each slugs denotes the node's identifier, CPU, and RAM (in that order).
func (o OptionsOptionsPropertiesMysqlPtrOutput) Layouts() DatabaseLayoutOptionArrayOutput {
	return o.ApplyT(func(v *OptionsOptionsPropertiesMysql) []DatabaseLayoutOption {
		if v == nil {
			return nil
		}
		return v.Layouts
	}).(DatabaseLayoutOptionArrayOutput)
}

// An array of strings containing the names of available regions
func (o OptionsOptionsPropertiesMysqlPtrOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OptionsOptionsPropertiesMysql) []string {
		if v == nil {
			return nil
		}
		return v.Regions
	}).(pulumi.StringArrayOutput)
}

// An array of strings containing the names of available regions
func (o OptionsOptionsPropertiesMysqlPtrOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OptionsOptionsPropertiesMysql) []string {
		if v == nil {
			return nil
		}
		return v.Versions
	}).(pulumi.StringArrayOutput)
}

type OptionsOptionsPropertiesPg struct {
	// An array of objects, each indicating the node sizes (otherwise referred to as slugs) that are available with various numbers of nodes in the database cluster. Each slugs denotes the node's identifier, CPU, and RAM (in that order).
	Layouts []DatabaseLayoutOption `pulumi:"layouts"`
	// An array of strings containing the names of available regions
	Regions []string `pulumi:"regions"`
	// An array of strings containing the names of available regions
	Versions []string `pulumi:"versions"`
}

type OptionsOptionsPropertiesPgOutput struct{ *pulumi.OutputState }

func (OptionsOptionsPropertiesPgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionsOptionsPropertiesPg)(nil)).Elem()
}

func (o OptionsOptionsPropertiesPgOutput) ToOptionsOptionsPropertiesPgOutput() OptionsOptionsPropertiesPgOutput {
	return o
}

func (o OptionsOptionsPropertiesPgOutput) ToOptionsOptionsPropertiesPgOutputWithContext(ctx context.Context) OptionsOptionsPropertiesPgOutput {
	return o
}

// An array of objects, each indicating the node sizes (otherwise referred to as slugs) that are available with various numbers of nodes in the database cluster. Each slugs denotes the node's identifier, CPU, and RAM (in that order).
func (o OptionsOptionsPropertiesPgOutput) Layouts() DatabaseLayoutOptionArrayOutput {
	return o.ApplyT(func(v OptionsOptionsPropertiesPg) []DatabaseLayoutOption { return v.Layouts }).(DatabaseLayoutOptionArrayOutput)
}

// An array of strings containing the names of available regions
func (o OptionsOptionsPropertiesPgOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OptionsOptionsPropertiesPg) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// An array of strings containing the names of available regions
func (o OptionsOptionsPropertiesPgOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OptionsOptionsPropertiesPg) []string { return v.Versions }).(pulumi.StringArrayOutput)
}

type OptionsOptionsPropertiesPgPtrOutput struct{ *pulumi.OutputState }

func (OptionsOptionsPropertiesPgPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OptionsOptionsPropertiesPg)(nil)).Elem()
}

func (o OptionsOptionsPropertiesPgPtrOutput) ToOptionsOptionsPropertiesPgPtrOutput() OptionsOptionsPropertiesPgPtrOutput {
	return o
}

func (o OptionsOptionsPropertiesPgPtrOutput) ToOptionsOptionsPropertiesPgPtrOutputWithContext(ctx context.Context) OptionsOptionsPropertiesPgPtrOutput {
	return o
}

func (o OptionsOptionsPropertiesPgPtrOutput) Elem() OptionsOptionsPropertiesPgOutput {
	return o.ApplyT(func(v *OptionsOptionsPropertiesPg) OptionsOptionsPropertiesPg {
		if v != nil {
			return *v
		}
		var ret OptionsOptionsPropertiesPg
		return ret
	}).(OptionsOptionsPropertiesPgOutput)
}

// An array of objects, each indicating the node sizes (otherwise referred to as slugs) that are available with various numbers of nodes in the database cluster. Each slugs denotes the node's identifier, CPU, and RAM (in that order).
func (o OptionsOptionsPropertiesPgPtrOutput) Layouts() DatabaseLayoutOptionArrayOutput {
	return o.ApplyT(func(v *OptionsOptionsPropertiesPg) []DatabaseLayoutOption {
		if v == nil {
			return nil
		}
		return v.Layouts
	}).(DatabaseLayoutOptionArrayOutput)
}

// An array of strings containing the names of available regions
func (o OptionsOptionsPropertiesPgPtrOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OptionsOptionsPropertiesPg) []string {
		if v == nil {
			return nil
		}
		return v.Regions
	}).(pulumi.StringArrayOutput)
}

// An array of strings containing the names of available regions
func (o OptionsOptionsPropertiesPgPtrOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OptionsOptionsPropertiesPg) []string {
		if v == nil {
			return nil
		}
		return v.Versions
	}).(pulumi.StringArrayOutput)
}

type OptionsOptionsPropertiesRedis struct {
	// An array of objects, each indicating the node sizes (otherwise referred to as slugs) that are available with various numbers of nodes in the database cluster. Each slugs denotes the node's identifier, CPU, and RAM (in that order).
	Layouts []DatabaseLayoutOption `pulumi:"layouts"`
	// An array of strings containing the names of available regions
	Regions []string `pulumi:"regions"`
	// An array of strings containing the names of available regions
	Versions []string `pulumi:"versions"`
}

type OptionsOptionsPropertiesRedisOutput struct{ *pulumi.OutputState }

func (OptionsOptionsPropertiesRedisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionsOptionsPropertiesRedis)(nil)).Elem()
}

func (o OptionsOptionsPropertiesRedisOutput) ToOptionsOptionsPropertiesRedisOutput() OptionsOptionsPropertiesRedisOutput {
	return o
}

func (o OptionsOptionsPropertiesRedisOutput) ToOptionsOptionsPropertiesRedisOutputWithContext(ctx context.Context) OptionsOptionsPropertiesRedisOutput {
	return o
}

// An array of objects, each indicating the node sizes (otherwise referred to as slugs) that are available with various numbers of nodes in the database cluster. Each slugs denotes the node's identifier, CPU, and RAM (in that order).
func (o OptionsOptionsPropertiesRedisOutput) Layouts() DatabaseLayoutOptionArrayOutput {
	return o.ApplyT(func(v OptionsOptionsPropertiesRedis) []DatabaseLayoutOption { return v.Layouts }).(DatabaseLayoutOptionArrayOutput)
}

// An array of strings containing the names of available regions
func (o OptionsOptionsPropertiesRedisOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OptionsOptionsPropertiesRedis) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// An array of strings containing the names of available regions
func (o OptionsOptionsPropertiesRedisOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OptionsOptionsPropertiesRedis) []string { return v.Versions }).(pulumi.StringArrayOutput)
}

type OptionsOptionsPropertiesRedisPtrOutput struct{ *pulumi.OutputState }

func (OptionsOptionsPropertiesRedisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OptionsOptionsPropertiesRedis)(nil)).Elem()
}

func (o OptionsOptionsPropertiesRedisPtrOutput) ToOptionsOptionsPropertiesRedisPtrOutput() OptionsOptionsPropertiesRedisPtrOutput {
	return o
}

func (o OptionsOptionsPropertiesRedisPtrOutput) ToOptionsOptionsPropertiesRedisPtrOutputWithContext(ctx context.Context) OptionsOptionsPropertiesRedisPtrOutput {
	return o
}

func (o OptionsOptionsPropertiesRedisPtrOutput) Elem() OptionsOptionsPropertiesRedisOutput {
	return o.ApplyT(func(v *OptionsOptionsPropertiesRedis) OptionsOptionsPropertiesRedis {
		if v != nil {
			return *v
		}
		var ret OptionsOptionsPropertiesRedis
		return ret
	}).(OptionsOptionsPropertiesRedisOutput)
}

// An array of objects, each indicating the node sizes (otherwise referred to as slugs) that are available with various numbers of nodes in the database cluster. Each slugs denotes the node's identifier, CPU, and RAM (in that order).
func (o OptionsOptionsPropertiesRedisPtrOutput) Layouts() DatabaseLayoutOptionArrayOutput {
	return o.ApplyT(func(v *OptionsOptionsPropertiesRedis) []DatabaseLayoutOption {
		if v == nil {
			return nil
		}
		return v.Layouts
	}).(DatabaseLayoutOptionArrayOutput)
}

// An array of strings containing the names of available regions
func (o OptionsOptionsPropertiesRedisPtrOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OptionsOptionsPropertiesRedis) []string {
		if v == nil {
			return nil
		}
		return v.Regions
	}).(pulumi.StringArrayOutput)
}

// An array of strings containing the names of available regions
func (o OptionsOptionsPropertiesRedisPtrOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OptionsOptionsPropertiesRedis) []string {
		if v == nil {
			return nil
		}
		return v.Versions
	}).(pulumi.StringArrayOutput)
}

type OptionsVersionAvailabilityProperties struct {
	// An array of objects, each indicating the version end-of-life, end-of-availability for various database engines
	Mongodb []DatabaseVersionAvailability `pulumi:"mongodb"`
	// An array of objects, each indicating the version end-of-life, end-of-availability for various database engines
	Mysql []DatabaseVersionAvailability `pulumi:"mysql"`
	// An array of objects, each indicating the version end-of-life, end-of-availability for various database engines
	Pg []DatabaseVersionAvailability `pulumi:"pg"`
	// An array of objects, each indicating the version end-of-life, end-of-availability for various database engines
	Redis []DatabaseVersionAvailability `pulumi:"redis"`
}

type OptionsVersionAvailabilityPropertiesOutput struct{ *pulumi.OutputState }

func (OptionsVersionAvailabilityPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionsVersionAvailabilityProperties)(nil)).Elem()
}

func (o OptionsVersionAvailabilityPropertiesOutput) ToOptionsVersionAvailabilityPropertiesOutput() OptionsVersionAvailabilityPropertiesOutput {
	return o
}

func (o OptionsVersionAvailabilityPropertiesOutput) ToOptionsVersionAvailabilityPropertiesOutputWithContext(ctx context.Context) OptionsVersionAvailabilityPropertiesOutput {
	return o
}

// An array of objects, each indicating the version end-of-life, end-of-availability for various database engines
func (o OptionsVersionAvailabilityPropertiesOutput) Mongodb() DatabaseVersionAvailabilityArrayOutput {
	return o.ApplyT(func(v OptionsVersionAvailabilityProperties) []DatabaseVersionAvailability { return v.Mongodb }).(DatabaseVersionAvailabilityArrayOutput)
}

// An array of objects, each indicating the version end-of-life, end-of-availability for various database engines
func (o OptionsVersionAvailabilityPropertiesOutput) Mysql() DatabaseVersionAvailabilityArrayOutput {
	return o.ApplyT(func(v OptionsVersionAvailabilityProperties) []DatabaseVersionAvailability { return v.Mysql }).(DatabaseVersionAvailabilityArrayOutput)
}

// An array of objects, each indicating the version end-of-life, end-of-availability for various database engines
func (o OptionsVersionAvailabilityPropertiesOutput) Pg() DatabaseVersionAvailabilityArrayOutput {
	return o.ApplyT(func(v OptionsVersionAvailabilityProperties) []DatabaseVersionAvailability { return v.Pg }).(DatabaseVersionAvailabilityArrayOutput)
}

// An array of objects, each indicating the version end-of-life, end-of-availability for various database engines
func (o OptionsVersionAvailabilityPropertiesOutput) Redis() DatabaseVersionAvailabilityArrayOutput {
	return o.ApplyT(func(v OptionsVersionAvailabilityProperties) []DatabaseVersionAvailability { return v.Redis }).(DatabaseVersionAvailabilityArrayOutput)
}

type OptionsVersionAvailabilityPropertiesPtrOutput struct{ *pulumi.OutputState }

func (OptionsVersionAvailabilityPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OptionsVersionAvailabilityProperties)(nil)).Elem()
}

func (o OptionsVersionAvailabilityPropertiesPtrOutput) ToOptionsVersionAvailabilityPropertiesPtrOutput() OptionsVersionAvailabilityPropertiesPtrOutput {
	return o
}

func (o OptionsVersionAvailabilityPropertiesPtrOutput) ToOptionsVersionAvailabilityPropertiesPtrOutputWithContext(ctx context.Context) OptionsVersionAvailabilityPropertiesPtrOutput {
	return o
}

func (o OptionsVersionAvailabilityPropertiesPtrOutput) Elem() OptionsVersionAvailabilityPropertiesOutput {
	return o.ApplyT(func(v *OptionsVersionAvailabilityProperties) OptionsVersionAvailabilityProperties {
		if v != nil {
			return *v
		}
		var ret OptionsVersionAvailabilityProperties
		return ret
	}).(OptionsVersionAvailabilityPropertiesOutput)
}

// An array of objects, each indicating the version end-of-life, end-of-availability for various database engines
func (o OptionsVersionAvailabilityPropertiesPtrOutput) Mongodb() DatabaseVersionAvailabilityArrayOutput {
	return o.ApplyT(func(v *OptionsVersionAvailabilityProperties) []DatabaseVersionAvailability {
		if v == nil {
			return nil
		}
		return v.Mongodb
	}).(DatabaseVersionAvailabilityArrayOutput)
}

// An array of objects, each indicating the version end-of-life, end-of-availability for various database engines
func (o OptionsVersionAvailabilityPropertiesPtrOutput) Mysql() DatabaseVersionAvailabilityArrayOutput {
	return o.ApplyT(func(v *OptionsVersionAvailabilityProperties) []DatabaseVersionAvailability {
		if v == nil {
			return nil
		}
		return v.Mysql
	}).(DatabaseVersionAvailabilityArrayOutput)
}

// An array of objects, each indicating the version end-of-life, end-of-availability for various database engines
func (o OptionsVersionAvailabilityPropertiesPtrOutput) Pg() DatabaseVersionAvailabilityArrayOutput {
	return o.ApplyT(func(v *OptionsVersionAvailabilityProperties) []DatabaseVersionAvailability {
		if v == nil {
			return nil
		}
		return v.Pg
	}).(DatabaseVersionAvailabilityArrayOutput)
}

// An array of objects, each indicating the version end-of-life, end-of-availability for various database engines
func (o OptionsVersionAvailabilityPropertiesPtrOutput) Redis() DatabaseVersionAvailabilityArrayOutput {
	return o.ApplyT(func(v *OptionsVersionAvailabilityProperties) []DatabaseVersionAvailability {
		if v == nil {
			return nil
		}
		return v.Redis
	}).(DatabaseVersionAvailabilityArrayOutput)
}

// PGBouncer connection pooling settings
type Pgbouncer struct {
	// If the automatically-created database pools have been unused this many seconds, they are freed. If 0, timeout is disabled.
	AutodbIdleTimeout *int `pulumi:"autodbIdleTimeout"`
	// Only allows a maximum this many server connections per database (regardless of user). If 0, allows unlimited connections.
	AutodbMaxDbConnections *int `pulumi:"autodbMaxDbConnections"`
	// PGBouncer pool mode
	AutodbPoolMode *PgbouncerAutodbPoolMode `pulumi:"autodbPoolMode"`
	// If non-zero, automatically creates a pool of that size per user when a pool doesn't exist.
	AutodbPoolSize *int `pulumi:"autodbPoolSize"`
	// List of parameters to ignore when given in startup packet.
	IgnoreStartupParameters []PgbouncerIgnoreStartupParametersItem `pulumi:"ignoreStartupParameters"`
	// If current server connections are below this number, adds more. Improves behavior when usual load comes suddenly back after period of total inactivity. The value is effectively capped at the pool size.
	MinPoolSize *int `pulumi:"minPoolSize"`
	// Drops server connections if they have been idle more than this many seconds.  If 0, timeout is disabled.
	ServerIdleTimeout *int `pulumi:"serverIdleTimeout"`
	// The pooler closes any unused server connection that has been connected longer than this amount of seconds.
	ServerLifetime *int `pulumi:"serverLifetime"`
	// Run server_reset_query (DISCARD ALL) in all pooling modes.
	ServerResetQueryAlways *bool `pulumi:"serverResetQueryAlways"`
}

// PGBouncer connection pooling settings
type PgbouncerOutput struct{ *pulumi.OutputState }

func (PgbouncerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Pgbouncer)(nil)).Elem()
}

func (o PgbouncerOutput) ToPgbouncerOutput() PgbouncerOutput {
	return o
}

func (o PgbouncerOutput) ToPgbouncerOutputWithContext(ctx context.Context) PgbouncerOutput {
	return o
}

// If the automatically-created database pools have been unused this many seconds, they are freed. If 0, timeout is disabled.
func (o PgbouncerOutput) AutodbIdleTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Pgbouncer) *int { return v.AutodbIdleTimeout }).(pulumi.IntPtrOutput)
}

// Only allows a maximum this many server connections per database (regardless of user). If 0, allows unlimited connections.
func (o PgbouncerOutput) AutodbMaxDbConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Pgbouncer) *int { return v.AutodbMaxDbConnections }).(pulumi.IntPtrOutput)
}

// PGBouncer pool mode
func (o PgbouncerOutput) AutodbPoolMode() PgbouncerAutodbPoolModePtrOutput {
	return o.ApplyT(func(v Pgbouncer) *PgbouncerAutodbPoolMode { return v.AutodbPoolMode }).(PgbouncerAutodbPoolModePtrOutput)
}

// If non-zero, automatically creates a pool of that size per user when a pool doesn't exist.
func (o PgbouncerOutput) AutodbPoolSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Pgbouncer) *int { return v.AutodbPoolSize }).(pulumi.IntPtrOutput)
}

// List of parameters to ignore when given in startup packet.
func (o PgbouncerOutput) IgnoreStartupParameters() PgbouncerIgnoreStartupParametersItemArrayOutput {
	return o.ApplyT(func(v Pgbouncer) []PgbouncerIgnoreStartupParametersItem { return v.IgnoreStartupParameters }).(PgbouncerIgnoreStartupParametersItemArrayOutput)
}

// If current server connections are below this number, adds more. Improves behavior when usual load comes suddenly back after period of total inactivity. The value is effectively capped at the pool size.
func (o PgbouncerOutput) MinPoolSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Pgbouncer) *int { return v.MinPoolSize }).(pulumi.IntPtrOutput)
}

// Drops server connections if they have been idle more than this many seconds.  If 0, timeout is disabled.
func (o PgbouncerOutput) ServerIdleTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Pgbouncer) *int { return v.ServerIdleTimeout }).(pulumi.IntPtrOutput)
}

// The pooler closes any unused server connection that has been connected longer than this amount of seconds.
func (o PgbouncerOutput) ServerLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Pgbouncer) *int { return v.ServerLifetime }).(pulumi.IntPtrOutput)
}

// Run server_reset_query (DISCARD ALL) in all pooling modes.
func (o PgbouncerOutput) ServerResetQueryAlways() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Pgbouncer) *bool { return v.ServerResetQueryAlways }).(pulumi.BoolPtrOutput)
}

type PgbouncerPtrOutput struct{ *pulumi.OutputState }

func (PgbouncerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pgbouncer)(nil)).Elem()
}

func (o PgbouncerPtrOutput) ToPgbouncerPtrOutput() PgbouncerPtrOutput {
	return o
}

func (o PgbouncerPtrOutput) ToPgbouncerPtrOutputWithContext(ctx context.Context) PgbouncerPtrOutput {
	return o
}

func (o PgbouncerPtrOutput) Elem() PgbouncerOutput {
	return o.ApplyT(func(v *Pgbouncer) Pgbouncer {
		if v != nil {
			return *v
		}
		var ret Pgbouncer
		return ret
	}).(PgbouncerOutput)
}

// If the automatically-created database pools have been unused this many seconds, they are freed. If 0, timeout is disabled.
func (o PgbouncerPtrOutput) AutodbIdleTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pgbouncer) *int {
		if v == nil {
			return nil
		}
		return v.AutodbIdleTimeout
	}).(pulumi.IntPtrOutput)
}

// Only allows a maximum this many server connections per database (regardless of user). If 0, allows unlimited connections.
func (o PgbouncerPtrOutput) AutodbMaxDbConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pgbouncer) *int {
		if v == nil {
			return nil
		}
		return v.AutodbMaxDbConnections
	}).(pulumi.IntPtrOutput)
}

// PGBouncer pool mode
func (o PgbouncerPtrOutput) AutodbPoolMode() PgbouncerAutodbPoolModePtrOutput {
	return o.ApplyT(func(v *Pgbouncer) *PgbouncerAutodbPoolMode {
		if v == nil {
			return nil
		}
		return v.AutodbPoolMode
	}).(PgbouncerAutodbPoolModePtrOutput)
}

// If non-zero, automatically creates a pool of that size per user when a pool doesn't exist.
func (o PgbouncerPtrOutput) AutodbPoolSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pgbouncer) *int {
		if v == nil {
			return nil
		}
		return v.AutodbPoolSize
	}).(pulumi.IntPtrOutput)
}

// List of parameters to ignore when given in startup packet.
func (o PgbouncerPtrOutput) IgnoreStartupParameters() PgbouncerIgnoreStartupParametersItemArrayOutput {
	return o.ApplyT(func(v *Pgbouncer) []PgbouncerIgnoreStartupParametersItem {
		if v == nil {
			return nil
		}
		return v.IgnoreStartupParameters
	}).(PgbouncerIgnoreStartupParametersItemArrayOutput)
}

// If current server connections are below this number, adds more. Improves behavior when usual load comes suddenly back after period of total inactivity. The value is effectively capped at the pool size.
func (o PgbouncerPtrOutput) MinPoolSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pgbouncer) *int {
		if v == nil {
			return nil
		}
		return v.MinPoolSize
	}).(pulumi.IntPtrOutput)
}

// Drops server connections if they have been idle more than this many seconds.  If 0, timeout is disabled.
func (o PgbouncerPtrOutput) ServerIdleTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pgbouncer) *int {
		if v == nil {
			return nil
		}
		return v.ServerIdleTimeout
	}).(pulumi.IntPtrOutput)
}

// The pooler closes any unused server connection that has been connected longer than this amount of seconds.
func (o PgbouncerPtrOutput) ServerLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pgbouncer) *int {
		if v == nil {
			return nil
		}
		return v.ServerLifetime
	}).(pulumi.IntPtrOutput)
}

// Run server_reset_query (DISCARD ALL) in all pooling modes.
func (o PgbouncerPtrOutput) ServerResetQueryAlways() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Pgbouncer) *bool {
		if v == nil {
			return nil
		}
		return v.ServerResetQueryAlways
	}).(pulumi.BoolPtrOutput)
}

type Postgres struct {
	// Specifies a fraction, in a decimal value, of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
	AutovacuumAnalyzeScaleFactor *float64 `pulumi:"autovacuumAnalyzeScaleFactor"`
	// Specifies the minimum number of inserted, updated, or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
	AutovacuumAnalyzeThreshold *int `pulumi:"autovacuumAnalyzeThreshold"`
	// Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
	AutovacuumFreezeMaxAge *int `pulumi:"autovacuumFreezeMaxAge"`
	// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
	AutovacuumMaxWorkers *int `pulumi:"autovacuumMaxWorkers"`
	// Specifies the minimum delay, in seconds, between autovacuum runs on any given database. The default is one minute.
	AutovacuumNaptime *int `pulumi:"autovacuumNaptime"`
	// Specifies the cost delay value, in milliseconds, that will be used in automatic VACUUM operations. If -1, uses the regular vacuum_cost_delay value, which is 20 milliseconds.
	AutovacuumVacuumCostDelay *int `pulumi:"autovacuumVacuumCostDelay"`
	// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
	AutovacuumVacuumCostLimit *int `pulumi:"autovacuumVacuumCostLimit"`
	// Specifies a fraction, in a decimal value, of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
	AutovacuumVacuumScaleFactor *float64 `pulumi:"autovacuumVacuumScaleFactor"`
	// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
	AutovacuumVacuumThreshold *int `pulumi:"autovacuumVacuumThreshold"`
	// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupHour *int `pulumi:"backupHour"`
	// The minute of the backup hour when backup for the service starts. New backup is only started if previous backup has already completed.
	BackupMinute *int `pulumi:"backupMinute"`
	// Specifies the delay, in milliseconds, between activity rounds for the background writer. Default is 200 ms.
	BgwriterDelay *int `pulumi:"bgwriterDelay"`
	// The amount of kilobytes that need to be written by the background writer before attempting to force the OS to issue these writes to underlying storage. Specified in kilobytes, default is 512.  Setting of 0 disables forced writeback.
	BgwriterFlushAfter *int `pulumi:"bgwriterFlushAfter"`
	// The maximum number of buffers that the background writer can write. Setting this to zero disables background writing. Default is 100.
	BgwriterLruMaxpages *int `pulumi:"bgwriterLruMaxpages"`
	// The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
	BgwriterLruMultiplier *float64 `pulumi:"bgwriterLruMultiplier"`
	// The amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
	DeadlockTimeout *int `pulumi:"deadlockTimeout"`
	// Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
	DefaultToastCompression *PostgresDefaultToastCompression `pulumi:"defaultToastCompression"`
	// Time out sessions with open transactions after this number of milliseconds
	IdleInTransactionSessionTimeout *int `pulumi:"idleInTransactionSessionTimeout"`
	// Activates, in a boolean, the system-wide use of Just-in-Time Compilation (JIT).
	Jit *bool `pulumi:"jit"`
	// Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
	LogAutovacuumMinDuration *int `pulumi:"logAutovacuumMinDuration"`
	// Controls the amount of detail written in the server log for each message that is logged.
	LogErrorVerbosity *PostgresLogErrorVerbosity `pulumi:"logErrorVerbosity"`
	// Selects one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze, etc.
	LogLinePrefix *PostgresLogLinePrefix `pulumi:"logLinePrefix"`
	// Log statements that take more than this number of milliseconds to run. If -1, disables.
	LogMinDurationStatement *int `pulumi:"logMinDurationStatement"`
	// PostgreSQL maximum number of files that can be open per process.
	MaxFilesPerProcess *int `pulumi:"maxFilesPerProcess"`
	// PostgreSQL maximum locks per transaction. Once increased, this parameter cannot be lowered from its set value.
	MaxLocksPerTransaction *int `pulumi:"maxLocksPerTransaction"`
	// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
	MaxLogicalReplicationWorkers *int `pulumi:"maxLogicalReplicationWorkers"`
	// Sets the maximum number of workers that the system can support for parallel queries.
	MaxParallelWorkers *int `pulumi:"maxParallelWorkers"`
	// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
	MaxParallelWorkersPerGather *int `pulumi:"maxParallelWorkersPerGather"`
	// PostgreSQL maximum predicate locks per transaction.
	MaxPredLocksPerTransaction *int `pulumi:"maxPredLocksPerTransaction"`
	// PostgreSQL maximum prepared transactions. Once increased, this parameter cannot be lowered from its set value.
	MaxPreparedTransactions *int `pulumi:"maxPreparedTransactions"`
	// PostgreSQL maximum replication slots.
	MaxReplicationSlots *int `pulumi:"maxReplicationSlots"`
	// Maximum depth of the stack in bytes.
	MaxStackDepth *int `pulumi:"maxStackDepth"`
	// Max standby archive delay in milliseconds.
	MaxStandbyArchiveDelay *int `pulumi:"maxStandbyArchiveDelay"`
	// Max standby streaming delay in milliseconds.
	MaxStandbyStreamingDelay *int `pulumi:"maxStandbyStreamingDelay"`
	// PostgreSQL maximum WAL senders. Once increased, this parameter cannot be lowered from its set value.
	MaxWalSenders *int `pulumi:"maxWalSenders"`
	// Sets the maximum number of background processes that the system can support. Once increased, this parameter cannot be lowered from its set value.
	MaxWorkerProcesses *int `pulumi:"maxWorkerProcesses"`
	// Sets the time interval to run pg_partman's scheduled tasks.
	PgPartmanBgwInterval *int `pulumi:"pgPartmanBgwInterval"`
	// Controls which role to use for pg_partman's scheduled background tasks. Must consist of alpha-numeric characters, dots, underscores, or dashes. May not start with dash or dot. Maximum of 64 characters.
	PgPartmanBgwRole *string `pulumi:"pgPartmanBgwRole"`
	// Controls which statements are counted. Specify 'top' to track top-level statements (those issued directly by clients), 'all' to also track nested statements (such as statements invoked within functions), or 'none' to disable statement statistics collection. The default value is top.
	PgStatStatementsTrack *PostgresPgStatStatementsTrack `pulumi:"pgStatStatementsTrack"`
	// PGBouncer connection pooling settings
	Pgbouncer *Pgbouncer `pulumi:"pgbouncer"`
	// Percentage of total RAM that the database server uses for shared memory buffers.  Valid range is 20-60 (float), which corresponds to 20% - 60%.  This setting adjusts the shared_buffers configuration value.
	SharedBuffersPercentage *float64 `pulumi:"sharedBuffersPercentage"`
	// Enable the pg_stat_monitor extension. <b>Enabling this extension will cause the cluster to be restarted.</b> When this extension is enabled, pg_stat_statements results for utility commands are unreliable.
	StatMonitorEnable *bool `pulumi:"statMonitorEnable"`
	// Synchronous replication type. Note that the service plan also needs to support synchronous replication.
	SynchronousReplication *PostgresSynchronousReplication `pulumi:"synchronousReplication"`
	// PostgreSQL temporary file limit in KiB. If -1, sets to unlimited.
	TempFileLimit *int `pulumi:"tempFileLimit"`
	// TimescaleDB extension configuration values
	Timescaledb *Timescaledb `pulumi:"timescaledb"`
	// PostgreSQL service timezone
	Timezone *string `pulumi:"timezone"`
	// Specifies the number of bytes reserved to track the currently executing command for each active session.
	TrackActivityQuerySize *int `pulumi:"trackActivityQuerySize"`
	// Record commit time of transactions.
	TrackCommitTimestamp *PostgresTrackCommitTimestamp `pulumi:"trackCommitTimestamp"`
	// Enables tracking of function call counts and time used.
	TrackFunctions *PostgresTrackFunctions `pulumi:"trackFunctions"`
	// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
	TrackIoTiming *PostgresTrackIoTiming `pulumi:"trackIoTiming"`
	Type          *string                `pulumi:"type"`
	// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Must be either 0 or between 5000 and 10800000.
	WalSenderTimeout *int `pulumi:"walSenderTimeout"`
	// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
	WalWriterDelay *int `pulumi:"walWriterDelay"`
	// The maximum amount of memory, in MB, used by a query operation (such as a sort or hash table) before writing to temporary disk files. Default is 1MB + 0.075% of total RAM (up to 32MB).
	WorkMem *int `pulumi:"workMem"`
}

// Defaults sets the appropriate defaults for Postgres
func (val *Postgres) Defaults() *Postgres {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "postgres"
		tmp.Type = &type_
	}
	return &tmp
}

type PostgresOutput struct{ *pulumi.OutputState }

func (PostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Postgres)(nil)).Elem()
}

func (o PostgresOutput) ToPostgresOutput() PostgresOutput {
	return o
}

func (o PostgresOutput) ToPostgresOutputWithContext(ctx context.Context) PostgresOutput {
	return o
}

// Specifies a fraction, in a decimal value, of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
func (o PostgresOutput) AutovacuumAnalyzeScaleFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Postgres) *float64 { return v.AutovacuumAnalyzeScaleFactor }).(pulumi.Float64PtrOutput)
}

// Specifies the minimum number of inserted, updated, or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
func (o PostgresOutput) AutovacuumAnalyzeThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.AutovacuumAnalyzeThreshold }).(pulumi.IntPtrOutput)
}

// Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
func (o PostgresOutput) AutovacuumFreezeMaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.AutovacuumFreezeMaxAge }).(pulumi.IntPtrOutput)
}

// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
func (o PostgresOutput) AutovacuumMaxWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.AutovacuumMaxWorkers }).(pulumi.IntPtrOutput)
}

// Specifies the minimum delay, in seconds, between autovacuum runs on any given database. The default is one minute.
func (o PostgresOutput) AutovacuumNaptime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.AutovacuumNaptime }).(pulumi.IntPtrOutput)
}

// Specifies the cost delay value, in milliseconds, that will be used in automatic VACUUM operations. If -1, uses the regular vacuum_cost_delay value, which is 20 milliseconds.
func (o PostgresOutput) AutovacuumVacuumCostDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.AutovacuumVacuumCostDelay }).(pulumi.IntPtrOutput)
}

// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
func (o PostgresOutput) AutovacuumVacuumCostLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.AutovacuumVacuumCostLimit }).(pulumi.IntPtrOutput)
}

// Specifies a fraction, in a decimal value, of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
func (o PostgresOutput) AutovacuumVacuumScaleFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Postgres) *float64 { return v.AutovacuumVacuumScaleFactor }).(pulumi.Float64PtrOutput)
}

// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
func (o PostgresOutput) AutovacuumVacuumThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.AutovacuumVacuumThreshold }).(pulumi.IntPtrOutput)
}

// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
func (o PostgresOutput) BackupHour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.BackupHour }).(pulumi.IntPtrOutput)
}

// The minute of the backup hour when backup for the service starts. New backup is only started if previous backup has already completed.
func (o PostgresOutput) BackupMinute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.BackupMinute }).(pulumi.IntPtrOutput)
}

// Specifies the delay, in milliseconds, between activity rounds for the background writer. Default is 200 ms.
func (o PostgresOutput) BgwriterDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.BgwriterDelay }).(pulumi.IntPtrOutput)
}

// The amount of kilobytes that need to be written by the background writer before attempting to force the OS to issue these writes to underlying storage. Specified in kilobytes, default is 512.  Setting of 0 disables forced writeback.
func (o PostgresOutput) BgwriterFlushAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.BgwriterFlushAfter }).(pulumi.IntPtrOutput)
}

// The maximum number of buffers that the background writer can write. Setting this to zero disables background writing. Default is 100.
func (o PostgresOutput) BgwriterLruMaxpages() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.BgwriterLruMaxpages }).(pulumi.IntPtrOutput)
}

// The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
func (o PostgresOutput) BgwriterLruMultiplier() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Postgres) *float64 { return v.BgwriterLruMultiplier }).(pulumi.Float64PtrOutput)
}

// The amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
func (o PostgresOutput) DeadlockTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.DeadlockTimeout }).(pulumi.IntPtrOutput)
}

// Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
func (o PostgresOutput) DefaultToastCompression() PostgresDefaultToastCompressionPtrOutput {
	return o.ApplyT(func(v Postgres) *PostgresDefaultToastCompression { return v.DefaultToastCompression }).(PostgresDefaultToastCompressionPtrOutput)
}

// Time out sessions with open transactions after this number of milliseconds
func (o PostgresOutput) IdleInTransactionSessionTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.IdleInTransactionSessionTimeout }).(pulumi.IntPtrOutput)
}

// Activates, in a boolean, the system-wide use of Just-in-Time Compilation (JIT).
func (o PostgresOutput) Jit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Postgres) *bool { return v.Jit }).(pulumi.BoolPtrOutput)
}

// Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
func (o PostgresOutput) LogAutovacuumMinDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.LogAutovacuumMinDuration }).(pulumi.IntPtrOutput)
}

// Controls the amount of detail written in the server log for each message that is logged.
func (o PostgresOutput) LogErrorVerbosity() PostgresLogErrorVerbosityPtrOutput {
	return o.ApplyT(func(v Postgres) *PostgresLogErrorVerbosity { return v.LogErrorVerbosity }).(PostgresLogErrorVerbosityPtrOutput)
}

// Selects one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze, etc.
func (o PostgresOutput) LogLinePrefix() PostgresLogLinePrefixPtrOutput {
	return o.ApplyT(func(v Postgres) *PostgresLogLinePrefix { return v.LogLinePrefix }).(PostgresLogLinePrefixPtrOutput)
}

// Log statements that take more than this number of milliseconds to run. If -1, disables.
func (o PostgresOutput) LogMinDurationStatement() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.LogMinDurationStatement }).(pulumi.IntPtrOutput)
}

// PostgreSQL maximum number of files that can be open per process.
func (o PostgresOutput) MaxFilesPerProcess() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.MaxFilesPerProcess }).(pulumi.IntPtrOutput)
}

// PostgreSQL maximum locks per transaction. Once increased, this parameter cannot be lowered from its set value.
func (o PostgresOutput) MaxLocksPerTransaction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.MaxLocksPerTransaction }).(pulumi.IntPtrOutput)
}

// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
func (o PostgresOutput) MaxLogicalReplicationWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.MaxLogicalReplicationWorkers }).(pulumi.IntPtrOutput)
}

// Sets the maximum number of workers that the system can support for parallel queries.
func (o PostgresOutput) MaxParallelWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.MaxParallelWorkers }).(pulumi.IntPtrOutput)
}

// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
func (o PostgresOutput) MaxParallelWorkersPerGather() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.MaxParallelWorkersPerGather }).(pulumi.IntPtrOutput)
}

// PostgreSQL maximum predicate locks per transaction.
func (o PostgresOutput) MaxPredLocksPerTransaction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.MaxPredLocksPerTransaction }).(pulumi.IntPtrOutput)
}

// PostgreSQL maximum prepared transactions. Once increased, this parameter cannot be lowered from its set value.
func (o PostgresOutput) MaxPreparedTransactions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.MaxPreparedTransactions }).(pulumi.IntPtrOutput)
}

// PostgreSQL maximum replication slots.
func (o PostgresOutput) MaxReplicationSlots() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.MaxReplicationSlots }).(pulumi.IntPtrOutput)
}

// Maximum depth of the stack in bytes.
func (o PostgresOutput) MaxStackDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.MaxStackDepth }).(pulumi.IntPtrOutput)
}

// Max standby archive delay in milliseconds.
func (o PostgresOutput) MaxStandbyArchiveDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.MaxStandbyArchiveDelay }).(pulumi.IntPtrOutput)
}

// Max standby streaming delay in milliseconds.
func (o PostgresOutput) MaxStandbyStreamingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.MaxStandbyStreamingDelay }).(pulumi.IntPtrOutput)
}

// PostgreSQL maximum WAL senders. Once increased, this parameter cannot be lowered from its set value.
func (o PostgresOutput) MaxWalSenders() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.MaxWalSenders }).(pulumi.IntPtrOutput)
}

// Sets the maximum number of background processes that the system can support. Once increased, this parameter cannot be lowered from its set value.
func (o PostgresOutput) MaxWorkerProcesses() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.MaxWorkerProcesses }).(pulumi.IntPtrOutput)
}

// Sets the time interval to run pg_partman's scheduled tasks.
func (o PostgresOutput) PgPartmanBgwInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.PgPartmanBgwInterval }).(pulumi.IntPtrOutput)
}

// Controls which role to use for pg_partman's scheduled background tasks. Must consist of alpha-numeric characters, dots, underscores, or dashes. May not start with dash or dot. Maximum of 64 characters.
func (o PostgresOutput) PgPartmanBgwRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Postgres) *string { return v.PgPartmanBgwRole }).(pulumi.StringPtrOutput)
}

// Controls which statements are counted. Specify 'top' to track top-level statements (those issued directly by clients), 'all' to also track nested statements (such as statements invoked within functions), or 'none' to disable statement statistics collection. The default value is top.
func (o PostgresOutput) PgStatStatementsTrack() PostgresPgStatStatementsTrackPtrOutput {
	return o.ApplyT(func(v Postgres) *PostgresPgStatStatementsTrack { return v.PgStatStatementsTrack }).(PostgresPgStatStatementsTrackPtrOutput)
}

// PGBouncer connection pooling settings
func (o PostgresOutput) Pgbouncer() PgbouncerPtrOutput {
	return o.ApplyT(func(v Postgres) *Pgbouncer { return v.Pgbouncer }).(PgbouncerPtrOutput)
}

// Percentage of total RAM that the database server uses for shared memory buffers.  Valid range is 20-60 (float), which corresponds to 20% - 60%.  This setting adjusts the shared_buffers configuration value.
func (o PostgresOutput) SharedBuffersPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Postgres) *float64 { return v.SharedBuffersPercentage }).(pulumi.Float64PtrOutput)
}

// Enable the pg_stat_monitor extension. <b>Enabling this extension will cause the cluster to be restarted.</b> When this extension is enabled, pg_stat_statements results for utility commands are unreliable.
func (o PostgresOutput) StatMonitorEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Postgres) *bool { return v.StatMonitorEnable }).(pulumi.BoolPtrOutput)
}

// Synchronous replication type. Note that the service plan also needs to support synchronous replication.
func (o PostgresOutput) SynchronousReplication() PostgresSynchronousReplicationPtrOutput {
	return o.ApplyT(func(v Postgres) *PostgresSynchronousReplication { return v.SynchronousReplication }).(PostgresSynchronousReplicationPtrOutput)
}

// PostgreSQL temporary file limit in KiB. If -1, sets to unlimited.
func (o PostgresOutput) TempFileLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.TempFileLimit }).(pulumi.IntPtrOutput)
}

// TimescaleDB extension configuration values
func (o PostgresOutput) Timescaledb() TimescaledbPtrOutput {
	return o.ApplyT(func(v Postgres) *Timescaledb { return v.Timescaledb }).(TimescaledbPtrOutput)
}

// PostgreSQL service timezone
func (o PostgresOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Postgres) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

// Specifies the number of bytes reserved to track the currently executing command for each active session.
func (o PostgresOutput) TrackActivityQuerySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.TrackActivityQuerySize }).(pulumi.IntPtrOutput)
}

// Record commit time of transactions.
func (o PostgresOutput) TrackCommitTimestamp() PostgresTrackCommitTimestampPtrOutput {
	return o.ApplyT(func(v Postgres) *PostgresTrackCommitTimestamp { return v.TrackCommitTimestamp }).(PostgresTrackCommitTimestampPtrOutput)
}

// Enables tracking of function call counts and time used.
func (o PostgresOutput) TrackFunctions() PostgresTrackFunctionsPtrOutput {
	return o.ApplyT(func(v Postgres) *PostgresTrackFunctions { return v.TrackFunctions }).(PostgresTrackFunctionsPtrOutput)
}

// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
func (o PostgresOutput) TrackIoTiming() PostgresTrackIoTimingPtrOutput {
	return o.ApplyT(func(v Postgres) *PostgresTrackIoTiming { return v.TrackIoTiming }).(PostgresTrackIoTimingPtrOutput)
}

func (o PostgresOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Postgres) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Must be either 0 or between 5000 and 10800000.
func (o PostgresOutput) WalSenderTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.WalSenderTimeout }).(pulumi.IntPtrOutput)
}

// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
func (o PostgresOutput) WalWriterDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.WalWriterDelay }).(pulumi.IntPtrOutput)
}

// The maximum amount of memory, in MB, used by a query operation (such as a sort or hash table) before writing to temporary disk files. Default is 1MB + 0.075% of total RAM (up to 32MB).
func (o PostgresOutput) WorkMem() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Postgres) *int { return v.WorkMem }).(pulumi.IntPtrOutput)
}

type PostgresPtrOutput struct{ *pulumi.OutputState }

func (PostgresPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Postgres)(nil)).Elem()
}

func (o PostgresPtrOutput) ToPostgresPtrOutput() PostgresPtrOutput {
	return o
}

func (o PostgresPtrOutput) ToPostgresPtrOutputWithContext(ctx context.Context) PostgresPtrOutput {
	return o
}

func (o PostgresPtrOutput) Elem() PostgresOutput {
	return o.ApplyT(func(v *Postgres) Postgres {
		if v != nil {
			return *v
		}
		var ret Postgres
		return ret
	}).(PostgresOutput)
}

// Specifies a fraction, in a decimal value, of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
func (o PostgresPtrOutput) AutovacuumAnalyzeScaleFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Postgres) *float64 {
		if v == nil {
			return nil
		}
		return v.AutovacuumAnalyzeScaleFactor
	}).(pulumi.Float64PtrOutput)
}

// Specifies the minimum number of inserted, updated, or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
func (o PostgresPtrOutput) AutovacuumAnalyzeThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.AutovacuumAnalyzeThreshold
	}).(pulumi.IntPtrOutput)
}

// Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
func (o PostgresPtrOutput) AutovacuumFreezeMaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.AutovacuumFreezeMaxAge
	}).(pulumi.IntPtrOutput)
}

// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
func (o PostgresPtrOutput) AutovacuumMaxWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.AutovacuumMaxWorkers
	}).(pulumi.IntPtrOutput)
}

// Specifies the minimum delay, in seconds, between autovacuum runs on any given database. The default is one minute.
func (o PostgresPtrOutput) AutovacuumNaptime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.AutovacuumNaptime
	}).(pulumi.IntPtrOutput)
}

// Specifies the cost delay value, in milliseconds, that will be used in automatic VACUUM operations. If -1, uses the regular vacuum_cost_delay value, which is 20 milliseconds.
func (o PostgresPtrOutput) AutovacuumVacuumCostDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.AutovacuumVacuumCostDelay
	}).(pulumi.IntPtrOutput)
}

// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
func (o PostgresPtrOutput) AutovacuumVacuumCostLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.AutovacuumVacuumCostLimit
	}).(pulumi.IntPtrOutput)
}

// Specifies a fraction, in a decimal value, of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
func (o PostgresPtrOutput) AutovacuumVacuumScaleFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Postgres) *float64 {
		if v == nil {
			return nil
		}
		return v.AutovacuumVacuumScaleFactor
	}).(pulumi.Float64PtrOutput)
}

// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
func (o PostgresPtrOutput) AutovacuumVacuumThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.AutovacuumVacuumThreshold
	}).(pulumi.IntPtrOutput)
}

// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
func (o PostgresPtrOutput) BackupHour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.BackupHour
	}).(pulumi.IntPtrOutput)
}

// The minute of the backup hour when backup for the service starts. New backup is only started if previous backup has already completed.
func (o PostgresPtrOutput) BackupMinute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.BackupMinute
	}).(pulumi.IntPtrOutput)
}

// Specifies the delay, in milliseconds, between activity rounds for the background writer. Default is 200 ms.
func (o PostgresPtrOutput) BgwriterDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.BgwriterDelay
	}).(pulumi.IntPtrOutput)
}

// The amount of kilobytes that need to be written by the background writer before attempting to force the OS to issue these writes to underlying storage. Specified in kilobytes, default is 512.  Setting of 0 disables forced writeback.
func (o PostgresPtrOutput) BgwriterFlushAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.BgwriterFlushAfter
	}).(pulumi.IntPtrOutput)
}

// The maximum number of buffers that the background writer can write. Setting this to zero disables background writing. Default is 100.
func (o PostgresPtrOutput) BgwriterLruMaxpages() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.BgwriterLruMaxpages
	}).(pulumi.IntPtrOutput)
}

// The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
func (o PostgresPtrOutput) BgwriterLruMultiplier() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Postgres) *float64 {
		if v == nil {
			return nil
		}
		return v.BgwriterLruMultiplier
	}).(pulumi.Float64PtrOutput)
}

// The amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
func (o PostgresPtrOutput) DeadlockTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.DeadlockTimeout
	}).(pulumi.IntPtrOutput)
}

// Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
func (o PostgresPtrOutput) DefaultToastCompression() PostgresDefaultToastCompressionPtrOutput {
	return o.ApplyT(func(v *Postgres) *PostgresDefaultToastCompression {
		if v == nil {
			return nil
		}
		return v.DefaultToastCompression
	}).(PostgresDefaultToastCompressionPtrOutput)
}

// Time out sessions with open transactions after this number of milliseconds
func (o PostgresPtrOutput) IdleInTransactionSessionTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.IdleInTransactionSessionTimeout
	}).(pulumi.IntPtrOutput)
}

// Activates, in a boolean, the system-wide use of Just-in-Time Compilation (JIT).
func (o PostgresPtrOutput) Jit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Postgres) *bool {
		if v == nil {
			return nil
		}
		return v.Jit
	}).(pulumi.BoolPtrOutput)
}

// Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
func (o PostgresPtrOutput) LogAutovacuumMinDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.LogAutovacuumMinDuration
	}).(pulumi.IntPtrOutput)
}

// Controls the amount of detail written in the server log for each message that is logged.
func (o PostgresPtrOutput) LogErrorVerbosity() PostgresLogErrorVerbosityPtrOutput {
	return o.ApplyT(func(v *Postgres) *PostgresLogErrorVerbosity {
		if v == nil {
			return nil
		}
		return v.LogErrorVerbosity
	}).(PostgresLogErrorVerbosityPtrOutput)
}

// Selects one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze, etc.
func (o PostgresPtrOutput) LogLinePrefix() PostgresLogLinePrefixPtrOutput {
	return o.ApplyT(func(v *Postgres) *PostgresLogLinePrefix {
		if v == nil {
			return nil
		}
		return v.LogLinePrefix
	}).(PostgresLogLinePrefixPtrOutput)
}

// Log statements that take more than this number of milliseconds to run. If -1, disables.
func (o PostgresPtrOutput) LogMinDurationStatement() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.LogMinDurationStatement
	}).(pulumi.IntPtrOutput)
}

// PostgreSQL maximum number of files that can be open per process.
func (o PostgresPtrOutput) MaxFilesPerProcess() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.MaxFilesPerProcess
	}).(pulumi.IntPtrOutput)
}

// PostgreSQL maximum locks per transaction. Once increased, this parameter cannot be lowered from its set value.
func (o PostgresPtrOutput) MaxLocksPerTransaction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.MaxLocksPerTransaction
	}).(pulumi.IntPtrOutput)
}

// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
func (o PostgresPtrOutput) MaxLogicalReplicationWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.MaxLogicalReplicationWorkers
	}).(pulumi.IntPtrOutput)
}

// Sets the maximum number of workers that the system can support for parallel queries.
func (o PostgresPtrOutput) MaxParallelWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.MaxParallelWorkers
	}).(pulumi.IntPtrOutput)
}

// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
func (o PostgresPtrOutput) MaxParallelWorkersPerGather() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.MaxParallelWorkersPerGather
	}).(pulumi.IntPtrOutput)
}

// PostgreSQL maximum predicate locks per transaction.
func (o PostgresPtrOutput) MaxPredLocksPerTransaction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.MaxPredLocksPerTransaction
	}).(pulumi.IntPtrOutput)
}

// PostgreSQL maximum prepared transactions. Once increased, this parameter cannot be lowered from its set value.
func (o PostgresPtrOutput) MaxPreparedTransactions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.MaxPreparedTransactions
	}).(pulumi.IntPtrOutput)
}

// PostgreSQL maximum replication slots.
func (o PostgresPtrOutput) MaxReplicationSlots() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.MaxReplicationSlots
	}).(pulumi.IntPtrOutput)
}

// Maximum depth of the stack in bytes.
func (o PostgresPtrOutput) MaxStackDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.MaxStackDepth
	}).(pulumi.IntPtrOutput)
}

// Max standby archive delay in milliseconds.
func (o PostgresPtrOutput) MaxStandbyArchiveDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.MaxStandbyArchiveDelay
	}).(pulumi.IntPtrOutput)
}

// Max standby streaming delay in milliseconds.
func (o PostgresPtrOutput) MaxStandbyStreamingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.MaxStandbyStreamingDelay
	}).(pulumi.IntPtrOutput)
}

// PostgreSQL maximum WAL senders. Once increased, this parameter cannot be lowered from its set value.
func (o PostgresPtrOutput) MaxWalSenders() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.MaxWalSenders
	}).(pulumi.IntPtrOutput)
}

// Sets the maximum number of background processes that the system can support. Once increased, this parameter cannot be lowered from its set value.
func (o PostgresPtrOutput) MaxWorkerProcesses() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.MaxWorkerProcesses
	}).(pulumi.IntPtrOutput)
}

// Sets the time interval to run pg_partman's scheduled tasks.
func (o PostgresPtrOutput) PgPartmanBgwInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.PgPartmanBgwInterval
	}).(pulumi.IntPtrOutput)
}

// Controls which role to use for pg_partman's scheduled background tasks. Must consist of alpha-numeric characters, dots, underscores, or dashes. May not start with dash or dot. Maximum of 64 characters.
func (o PostgresPtrOutput) PgPartmanBgwRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Postgres) *string {
		if v == nil {
			return nil
		}
		return v.PgPartmanBgwRole
	}).(pulumi.StringPtrOutput)
}

// Controls which statements are counted. Specify 'top' to track top-level statements (those issued directly by clients), 'all' to also track nested statements (such as statements invoked within functions), or 'none' to disable statement statistics collection. The default value is top.
func (o PostgresPtrOutput) PgStatStatementsTrack() PostgresPgStatStatementsTrackPtrOutput {
	return o.ApplyT(func(v *Postgres) *PostgresPgStatStatementsTrack {
		if v == nil {
			return nil
		}
		return v.PgStatStatementsTrack
	}).(PostgresPgStatStatementsTrackPtrOutput)
}

// PGBouncer connection pooling settings
func (o PostgresPtrOutput) Pgbouncer() PgbouncerPtrOutput {
	return o.ApplyT(func(v *Postgres) *Pgbouncer {
		if v == nil {
			return nil
		}
		return v.Pgbouncer
	}).(PgbouncerPtrOutput)
}

// Percentage of total RAM that the database server uses for shared memory buffers.  Valid range is 20-60 (float), which corresponds to 20% - 60%.  This setting adjusts the shared_buffers configuration value.
func (o PostgresPtrOutput) SharedBuffersPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Postgres) *float64 {
		if v == nil {
			return nil
		}
		return v.SharedBuffersPercentage
	}).(pulumi.Float64PtrOutput)
}

// Enable the pg_stat_monitor extension. <b>Enabling this extension will cause the cluster to be restarted.</b> When this extension is enabled, pg_stat_statements results for utility commands are unreliable.
func (o PostgresPtrOutput) StatMonitorEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Postgres) *bool {
		if v == nil {
			return nil
		}
		return v.StatMonitorEnable
	}).(pulumi.BoolPtrOutput)
}

// Synchronous replication type. Note that the service plan also needs to support synchronous replication.
func (o PostgresPtrOutput) SynchronousReplication() PostgresSynchronousReplicationPtrOutput {
	return o.ApplyT(func(v *Postgres) *PostgresSynchronousReplication {
		if v == nil {
			return nil
		}
		return v.SynchronousReplication
	}).(PostgresSynchronousReplicationPtrOutput)
}

// PostgreSQL temporary file limit in KiB. If -1, sets to unlimited.
func (o PostgresPtrOutput) TempFileLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.TempFileLimit
	}).(pulumi.IntPtrOutput)
}

// TimescaleDB extension configuration values
func (o PostgresPtrOutput) Timescaledb() TimescaledbPtrOutput {
	return o.ApplyT(func(v *Postgres) *Timescaledb {
		if v == nil {
			return nil
		}
		return v.Timescaledb
	}).(TimescaledbPtrOutput)
}

// PostgreSQL service timezone
func (o PostgresPtrOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Postgres) *string {
		if v == nil {
			return nil
		}
		return v.Timezone
	}).(pulumi.StringPtrOutput)
}

// Specifies the number of bytes reserved to track the currently executing command for each active session.
func (o PostgresPtrOutput) TrackActivityQuerySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.TrackActivityQuerySize
	}).(pulumi.IntPtrOutput)
}

// Record commit time of transactions.
func (o PostgresPtrOutput) TrackCommitTimestamp() PostgresTrackCommitTimestampPtrOutput {
	return o.ApplyT(func(v *Postgres) *PostgresTrackCommitTimestamp {
		if v == nil {
			return nil
		}
		return v.TrackCommitTimestamp
	}).(PostgresTrackCommitTimestampPtrOutput)
}

// Enables tracking of function call counts and time used.
func (o PostgresPtrOutput) TrackFunctions() PostgresTrackFunctionsPtrOutput {
	return o.ApplyT(func(v *Postgres) *PostgresTrackFunctions {
		if v == nil {
			return nil
		}
		return v.TrackFunctions
	}).(PostgresTrackFunctionsPtrOutput)
}

// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
func (o PostgresPtrOutput) TrackIoTiming() PostgresTrackIoTimingPtrOutput {
	return o.ApplyT(func(v *Postgres) *PostgresTrackIoTiming {
		if v == nil {
			return nil
		}
		return v.TrackIoTiming
	}).(PostgresTrackIoTimingPtrOutput)
}

func (o PostgresPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Postgres) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Must be either 0 or between 5000 and 10800000.
func (o PostgresPtrOutput) WalSenderTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.WalSenderTimeout
	}).(pulumi.IntPtrOutput)
}

// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
func (o PostgresPtrOutput) WalWriterDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.WalWriterDelay
	}).(pulumi.IntPtrOutput)
}

// The maximum amount of memory, in MB, used by a query operation (such as a sort or hash table) before writing to temporary disk files. Default is 1MB + 0.075% of total RAM (up to 32MB).
func (o PostgresPtrOutput) WorkMem() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) *int {
		if v == nil {
			return nil
		}
		return v.WorkMem
	}).(pulumi.IntPtrOutput)
}

type PrivateConnection struct {
	// The name of the default database.
	Database *string `pulumi:"database"`
	// The FQDN pointing to the database cluster's current primary node.
	Host *string `pulumi:"host"`
	// The randomly generated password for the default user.
	Password *string `pulumi:"password"`
	// The port on which the database cluster is listening.
	Port *int `pulumi:"port"`
	// A boolean value indicating if the connection should be made over SSL.
	Ssl *bool `pulumi:"ssl"`
	// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
	Uri *string `pulumi:"uri"`
	// The default user for the database.
	User *string `pulumi:"user"`
}

// PrivateConnectionInput is an input type that accepts PrivateConnectionArgs and PrivateConnectionOutput values.
// You can construct a concrete instance of `PrivateConnectionInput` via:
//
//	PrivateConnectionArgs{...}
type PrivateConnectionInput interface {
	pulumi.Input

	ToPrivateConnectionOutput() PrivateConnectionOutput
	ToPrivateConnectionOutputWithContext(context.Context) PrivateConnectionOutput
}

type PrivateConnectionArgs struct {
	// The name of the default database.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// The FQDN pointing to the database cluster's current primary node.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The randomly generated password for the default user.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port on which the database cluster is listening.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// A boolean value indicating if the connection should be made over SSL.
	Ssl pulumi.BoolPtrInput `pulumi:"ssl"`
	// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
	// The default user for the database.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (PrivateConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnection)(nil)).Elem()
}

func (i PrivateConnectionArgs) ToPrivateConnectionOutput() PrivateConnectionOutput {
	return i.ToPrivateConnectionOutputWithContext(context.Background())
}

func (i PrivateConnectionArgs) ToPrivateConnectionOutputWithContext(ctx context.Context) PrivateConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectionOutput)
}

func (i PrivateConnectionArgs) ToPrivateConnectionPtrOutput() PrivateConnectionPtrOutput {
	return i.ToPrivateConnectionPtrOutputWithContext(context.Background())
}

func (i PrivateConnectionArgs) ToPrivateConnectionPtrOutputWithContext(ctx context.Context) PrivateConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectionOutput).ToPrivateConnectionPtrOutputWithContext(ctx)
}

// PrivateConnectionPtrInput is an input type that accepts PrivateConnectionArgs, PrivateConnectionPtr and PrivateConnectionPtrOutput values.
// You can construct a concrete instance of `PrivateConnectionPtrInput` via:
//
//	        PrivateConnectionArgs{...}
//
//	or:
//
//	        nil
type PrivateConnectionPtrInput interface {
	pulumi.Input

	ToPrivateConnectionPtrOutput() PrivateConnectionPtrOutput
	ToPrivateConnectionPtrOutputWithContext(context.Context) PrivateConnectionPtrOutput
}

type privateConnectionPtrType PrivateConnectionArgs

func PrivateConnectionPtr(v *PrivateConnectionArgs) PrivateConnectionPtrInput {
	return (*privateConnectionPtrType)(v)
}

func (*privateConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnection)(nil)).Elem()
}

func (i *privateConnectionPtrType) ToPrivateConnectionPtrOutput() PrivateConnectionPtrOutput {
	return i.ToPrivateConnectionPtrOutputWithContext(context.Background())
}

func (i *privateConnectionPtrType) ToPrivateConnectionPtrOutputWithContext(ctx context.Context) PrivateConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectionPtrOutput)
}

type PrivateConnectionOutput struct{ *pulumi.OutputState }

func (PrivateConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnection)(nil)).Elem()
}

func (o PrivateConnectionOutput) ToPrivateConnectionOutput() PrivateConnectionOutput {
	return o
}

func (o PrivateConnectionOutput) ToPrivateConnectionOutputWithContext(ctx context.Context) PrivateConnectionOutput {
	return o
}

func (o PrivateConnectionOutput) ToPrivateConnectionPtrOutput() PrivateConnectionPtrOutput {
	return o.ToPrivateConnectionPtrOutputWithContext(context.Background())
}

func (o PrivateConnectionOutput) ToPrivateConnectionPtrOutputWithContext(ctx context.Context) PrivateConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateConnection) *PrivateConnection {
		return &v
	}).(PrivateConnectionPtrOutput)
}

// The name of the default database.
func (o PrivateConnectionOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateConnection) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o PrivateConnectionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateConnection) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o PrivateConnectionOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateConnection) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o PrivateConnectionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PrivateConnection) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A boolean value indicating if the connection should be made over SSL.
func (o PrivateConnectionOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateConnection) *bool { return v.Ssl }).(pulumi.BoolPtrOutput)
}

// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
func (o PrivateConnectionOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateConnection) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// The default user for the database.
func (o PrivateConnectionOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateConnection) *string { return v.User }).(pulumi.StringPtrOutput)
}

type PrivateConnectionPtrOutput struct{ *pulumi.OutputState }

func (PrivateConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnection)(nil)).Elem()
}

func (o PrivateConnectionPtrOutput) ToPrivateConnectionPtrOutput() PrivateConnectionPtrOutput {
	return o
}

func (o PrivateConnectionPtrOutput) ToPrivateConnectionPtrOutputWithContext(ctx context.Context) PrivateConnectionPtrOutput {
	return o
}

func (o PrivateConnectionPtrOutput) Elem() PrivateConnectionOutput {
	return o.ApplyT(func(v *PrivateConnection) PrivateConnection {
		if v != nil {
			return *v
		}
		var ret PrivateConnection
		return ret
	}).(PrivateConnectionOutput)
}

// The name of the default database.
func (o PrivateConnectionPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o PrivateConnectionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o PrivateConnectionPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o PrivateConnectionPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PrivateConnection) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// A boolean value indicating if the connection should be made over SSL.
func (o PrivateConnectionPtrOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateConnection) *bool {
		if v == nil {
			return nil
		}
		return v.Ssl
	}).(pulumi.BoolPtrOutput)
}

// A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.
func (o PrivateConnectionPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The default user for the database.
func (o PrivateConnectionPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateConnection) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

type Redis struct {
	// Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn't affect Redis configuration acl-pubsub-default.
	RedisAclChannelsDefault *RedisRedisAclChannelsDefault `pulumi:"redisAclChannelsDefault"`
	// Redis IO thread count
	RedisIoThreads *int `pulumi:"redisIoThreads"`
	// LFU maxmemory-policy counter decay time in minutes
	RedisLfuDecayTime *int `pulumi:"redisLfuDecayTime"`
	// Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies
	RedisLfuLogFactor *int `pulumi:"redisLfuLogFactor"`
	// A string specifying the desired eviction policy for the Redis cluster.
	//
	// - `noeviction`: Don't evict any data, returns error when memory limit is reached.
	// - `allkeys_lru:` Evict any key, least recently used (LRU) first.
	// - `allkeys_random`: Evict keys in a random order.
	// - `volatile_lru`: Evict keys with expiration only, least recently used (LRU) first.
	// - `volatile_random`: Evict keys with expiration only in a random order.
	// - `volatile_ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.
	RedisMaxmemoryPolicy *RedisRedisMaxmemoryPolicy `pulumi:"redisMaxmemoryPolicy"`
	// Set notify-keyspace-events option
	RedisNotifyKeyspaceEvents *string `pulumi:"redisNotifyKeyspaceEvents"`
	// Set number of redis databases. Changing this will cause a restart of redis service.
	RedisNumberOfDatabases *int `pulumi:"redisNumberOfDatabases"`
	// When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
	RedisPersistence *RedisRedisPersistence `pulumi:"redisPersistence"`
	// Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
	RedisPubsubClientOutputBufferLimit *int `pulumi:"redisPubsubClientOutputBufferLimit"`
	// Require SSL to access Redis
	RedisSsl *bool `pulumi:"redisSsl"`
	// Redis idle connection timeout in seconds
	RedisTimeout *int    `pulumi:"redisTimeout"`
	Type         *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for Redis
func (val *Redis) Defaults() *Redis {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RedisLfuDecayTime == nil {
		redisLfuDecayTime_ := 1
		tmp.RedisLfuDecayTime = &redisLfuDecayTime_
	}
	if tmp.RedisLfuLogFactor == nil {
		redisLfuLogFactor_ := 10
		tmp.RedisLfuLogFactor = &redisLfuLogFactor_
	}
	if tmp.RedisNotifyKeyspaceEvents == nil {
		redisNotifyKeyspaceEvents_ := ""
		tmp.RedisNotifyKeyspaceEvents = &redisNotifyKeyspaceEvents_
	}
	if tmp.RedisSsl == nil {
		redisSsl_ := true
		tmp.RedisSsl = &redisSsl_
	}
	if tmp.RedisTimeout == nil {
		redisTimeout_ := 300
		tmp.RedisTimeout = &redisTimeout_
	}
	if tmp.Type == nil {
		type_ := "redis"
		tmp.Type = &type_
	}
	return &tmp
}

type RedisOutput struct{ *pulumi.OutputState }

func (RedisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Redis)(nil)).Elem()
}

func (o RedisOutput) ToRedisOutput() RedisOutput {
	return o
}

func (o RedisOutput) ToRedisOutputWithContext(ctx context.Context) RedisOutput {
	return o
}

// Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn't affect Redis configuration acl-pubsub-default.
func (o RedisOutput) RedisAclChannelsDefault() RedisRedisAclChannelsDefaultPtrOutput {
	return o.ApplyT(func(v Redis) *RedisRedisAclChannelsDefault { return v.RedisAclChannelsDefault }).(RedisRedisAclChannelsDefaultPtrOutput)
}

// Redis IO thread count
func (o RedisOutput) RedisIoThreads() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Redis) *int { return v.RedisIoThreads }).(pulumi.IntPtrOutput)
}

// LFU maxmemory-policy counter decay time in minutes
func (o RedisOutput) RedisLfuDecayTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Redis) *int { return v.RedisLfuDecayTime }).(pulumi.IntPtrOutput)
}

// Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies
func (o RedisOutput) RedisLfuLogFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Redis) *int { return v.RedisLfuLogFactor }).(pulumi.IntPtrOutput)
}

// A string specifying the desired eviction policy for the Redis cluster.
//
// - `noeviction`: Don't evict any data, returns error when memory limit is reached.
// - `allkeys_lru:` Evict any key, least recently used (LRU) first.
// - `allkeys_random`: Evict keys in a random order.
// - `volatile_lru`: Evict keys with expiration only, least recently used (LRU) first.
// - `volatile_random`: Evict keys with expiration only in a random order.
// - `volatile_ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.
func (o RedisOutput) RedisMaxmemoryPolicy() RedisRedisMaxmemoryPolicyPtrOutput {
	return o.ApplyT(func(v Redis) *RedisRedisMaxmemoryPolicy { return v.RedisMaxmemoryPolicy }).(RedisRedisMaxmemoryPolicyPtrOutput)
}

// Set notify-keyspace-events option
func (o RedisOutput) RedisNotifyKeyspaceEvents() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Redis) *string { return v.RedisNotifyKeyspaceEvents }).(pulumi.StringPtrOutput)
}

// Set number of redis databases. Changing this will cause a restart of redis service.
func (o RedisOutput) RedisNumberOfDatabases() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Redis) *int { return v.RedisNumberOfDatabases }).(pulumi.IntPtrOutput)
}

// When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
func (o RedisOutput) RedisPersistence() RedisRedisPersistencePtrOutput {
	return o.ApplyT(func(v Redis) *RedisRedisPersistence { return v.RedisPersistence }).(RedisRedisPersistencePtrOutput)
}

// Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
func (o RedisOutput) RedisPubsubClientOutputBufferLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Redis) *int { return v.RedisPubsubClientOutputBufferLimit }).(pulumi.IntPtrOutput)
}

// Require SSL to access Redis
func (o RedisOutput) RedisSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Redis) *bool { return v.RedisSsl }).(pulumi.BoolPtrOutput)
}

// Redis idle connection timeout in seconds
func (o RedisOutput) RedisTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Redis) *int { return v.RedisTimeout }).(pulumi.IntPtrOutput)
}

func (o RedisOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Redis) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RedisPtrOutput struct{ *pulumi.OutputState }

func (RedisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Redis)(nil)).Elem()
}

func (o RedisPtrOutput) ToRedisPtrOutput() RedisPtrOutput {
	return o
}

func (o RedisPtrOutput) ToRedisPtrOutputWithContext(ctx context.Context) RedisPtrOutput {
	return o
}

func (o RedisPtrOutput) Elem() RedisOutput {
	return o.ApplyT(func(v *Redis) Redis {
		if v != nil {
			return *v
		}
		var ret Redis
		return ret
	}).(RedisOutput)
}

// Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn't affect Redis configuration acl-pubsub-default.
func (o RedisPtrOutput) RedisAclChannelsDefault() RedisRedisAclChannelsDefaultPtrOutput {
	return o.ApplyT(func(v *Redis) *RedisRedisAclChannelsDefault {
		if v == nil {
			return nil
		}
		return v.RedisAclChannelsDefault
	}).(RedisRedisAclChannelsDefaultPtrOutput)
}

// Redis IO thread count
func (o RedisPtrOutput) RedisIoThreads() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Redis) *int {
		if v == nil {
			return nil
		}
		return v.RedisIoThreads
	}).(pulumi.IntPtrOutput)
}

// LFU maxmemory-policy counter decay time in minutes
func (o RedisPtrOutput) RedisLfuDecayTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Redis) *int {
		if v == nil {
			return nil
		}
		return v.RedisLfuDecayTime
	}).(pulumi.IntPtrOutput)
}

// Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies
func (o RedisPtrOutput) RedisLfuLogFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Redis) *int {
		if v == nil {
			return nil
		}
		return v.RedisLfuLogFactor
	}).(pulumi.IntPtrOutput)
}

// A string specifying the desired eviction policy for the Redis cluster.
//
// - `noeviction`: Don't evict any data, returns error when memory limit is reached.
// - `allkeys_lru:` Evict any key, least recently used (LRU) first.
// - `allkeys_random`: Evict keys in a random order.
// - `volatile_lru`: Evict keys with expiration only, least recently used (LRU) first.
// - `volatile_random`: Evict keys with expiration only in a random order.
// - `volatile_ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.
func (o RedisPtrOutput) RedisMaxmemoryPolicy() RedisRedisMaxmemoryPolicyPtrOutput {
	return o.ApplyT(func(v *Redis) *RedisRedisMaxmemoryPolicy {
		if v == nil {
			return nil
		}
		return v.RedisMaxmemoryPolicy
	}).(RedisRedisMaxmemoryPolicyPtrOutput)
}

// Set notify-keyspace-events option
func (o RedisPtrOutput) RedisNotifyKeyspaceEvents() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Redis) *string {
		if v == nil {
			return nil
		}
		return v.RedisNotifyKeyspaceEvents
	}).(pulumi.StringPtrOutput)
}

// Set number of redis databases. Changing this will cause a restart of redis service.
func (o RedisPtrOutput) RedisNumberOfDatabases() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Redis) *int {
		if v == nil {
			return nil
		}
		return v.RedisNumberOfDatabases
	}).(pulumi.IntPtrOutput)
}

// When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
func (o RedisPtrOutput) RedisPersistence() RedisRedisPersistencePtrOutput {
	return o.ApplyT(func(v *Redis) *RedisRedisPersistence {
		if v == nil {
			return nil
		}
		return v.RedisPersistence
	}).(RedisRedisPersistencePtrOutput)
}

// Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
func (o RedisPtrOutput) RedisPubsubClientOutputBufferLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Redis) *int {
		if v == nil {
			return nil
		}
		return v.RedisPubsubClientOutputBufferLimit
	}).(pulumi.IntPtrOutput)
}

// Require SSL to access Redis
func (o RedisPtrOutput) RedisSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Redis) *bool {
		if v == nil {
			return nil
		}
		return v.RedisSsl
	}).(pulumi.BoolPtrOutput)
}

// Redis idle connection timeout in seconds
func (o RedisPtrOutput) RedisTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Redis) *int {
		if v == nil {
			return nil
		}
		return v.RedisTimeout
	}).(pulumi.IntPtrOutput)
}

func (o RedisPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Redis) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type SourceProperties struct {
	// The name of the default database.
	Dbname *string `pulumi:"dbname"`
	// The FQDN pointing to the database cluster's current primary node.
	Host *string `pulumi:"host"`
	// The randomly generated password for the default user.
	Password *string `pulumi:"password"`
	// The port on which the database cluster is listening.
	Port *int `pulumi:"port"`
	// The default user for the database.
	Username *string `pulumi:"username"`
}

// SourcePropertiesInput is an input type that accepts SourcePropertiesArgs and SourcePropertiesOutput values.
// You can construct a concrete instance of `SourcePropertiesInput` via:
//
//	SourcePropertiesArgs{...}
type SourcePropertiesInput interface {
	pulumi.Input

	ToSourcePropertiesOutput() SourcePropertiesOutput
	ToSourcePropertiesOutputWithContext(context.Context) SourcePropertiesOutput
}

type SourcePropertiesArgs struct {
	// The name of the default database.
	Dbname pulumi.StringPtrInput `pulumi:"dbname"`
	// The FQDN pointing to the database cluster's current primary node.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The randomly generated password for the default user.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port on which the database cluster is listening.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The default user for the database.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceProperties)(nil)).Elem()
}

func (i SourcePropertiesArgs) ToSourcePropertiesOutput() SourcePropertiesOutput {
	return i.ToSourcePropertiesOutputWithContext(context.Background())
}

func (i SourcePropertiesArgs) ToSourcePropertiesOutputWithContext(ctx context.Context) SourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePropertiesOutput)
}

func (i SourcePropertiesArgs) ToSourcePropertiesPtrOutput() SourcePropertiesPtrOutput {
	return i.ToSourcePropertiesPtrOutputWithContext(context.Background())
}

func (i SourcePropertiesArgs) ToSourcePropertiesPtrOutputWithContext(ctx context.Context) SourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePropertiesOutput).ToSourcePropertiesPtrOutputWithContext(ctx)
}

// SourcePropertiesPtrInput is an input type that accepts SourcePropertiesArgs, SourcePropertiesPtr and SourcePropertiesPtrOutput values.
// You can construct a concrete instance of `SourcePropertiesPtrInput` via:
//
//	        SourcePropertiesArgs{...}
//
//	or:
//
//	        nil
type SourcePropertiesPtrInput interface {
	pulumi.Input

	ToSourcePropertiesPtrOutput() SourcePropertiesPtrOutput
	ToSourcePropertiesPtrOutputWithContext(context.Context) SourcePropertiesPtrOutput
}

type sourcePropertiesPtrType SourcePropertiesArgs

func SourcePropertiesPtr(v *SourcePropertiesArgs) SourcePropertiesPtrInput {
	return (*sourcePropertiesPtrType)(v)
}

func (*sourcePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceProperties)(nil)).Elem()
}

func (i *sourcePropertiesPtrType) ToSourcePropertiesPtrOutput() SourcePropertiesPtrOutput {
	return i.ToSourcePropertiesPtrOutputWithContext(context.Background())
}

func (i *sourcePropertiesPtrType) ToSourcePropertiesPtrOutputWithContext(ctx context.Context) SourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePropertiesPtrOutput)
}

type SourcePropertiesOutput struct{ *pulumi.OutputState }

func (SourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceProperties)(nil)).Elem()
}

func (o SourcePropertiesOutput) ToSourcePropertiesOutput() SourcePropertiesOutput {
	return o
}

func (o SourcePropertiesOutput) ToSourcePropertiesOutputWithContext(ctx context.Context) SourcePropertiesOutput {
	return o
}

func (o SourcePropertiesOutput) ToSourcePropertiesPtrOutput() SourcePropertiesPtrOutput {
	return o.ToSourcePropertiesPtrOutputWithContext(context.Background())
}

func (o SourcePropertiesOutput) ToSourcePropertiesPtrOutputWithContext(ctx context.Context) SourcePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceProperties) *SourceProperties {
		return &v
	}).(SourcePropertiesPtrOutput)
}

// The name of the default database.
func (o SourcePropertiesOutput) Dbname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceProperties) *string { return v.Dbname }).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o SourcePropertiesOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceProperties) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o SourcePropertiesOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceProperties) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o SourcePropertiesOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SourceProperties) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The default user for the database.
func (o SourcePropertiesOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceProperties) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type SourcePropertiesPtrOutput struct{ *pulumi.OutputState }

func (SourcePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceProperties)(nil)).Elem()
}

func (o SourcePropertiesPtrOutput) ToSourcePropertiesPtrOutput() SourcePropertiesPtrOutput {
	return o
}

func (o SourcePropertiesPtrOutput) ToSourcePropertiesPtrOutputWithContext(ctx context.Context) SourcePropertiesPtrOutput {
	return o
}

func (o SourcePropertiesPtrOutput) Elem() SourcePropertiesOutput {
	return o.ApplyT(func(v *SourceProperties) SourceProperties {
		if v != nil {
			return *v
		}
		var ret SourceProperties
		return ret
	}).(SourcePropertiesOutput)
}

// The name of the default database.
func (o SourcePropertiesPtrOutput) Dbname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Dbname
	}).(pulumi.StringPtrOutput)
}

// The FQDN pointing to the database cluster's current primary node.
func (o SourcePropertiesPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The randomly generated password for the default user.
func (o SourcePropertiesPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port on which the database cluster is listening.
func (o SourcePropertiesPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SourceProperties) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The default user for the database.
func (o SourcePropertiesPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type SqlMode struct {
	// A string specifying the configured SQL modes for the MySQL cluster.
	SqlMode string `pulumi:"sqlMode"`
}

type SqlModeOutput struct{ *pulumi.OutputState }

func (SqlModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlMode)(nil)).Elem()
}

func (o SqlModeOutput) ToSqlModeOutput() SqlModeOutput {
	return o
}

func (o SqlModeOutput) ToSqlModeOutputWithContext(ctx context.Context) SqlModeOutput {
	return o
}

// A string specifying the configured SQL modes for the MySQL cluster.
func (o SqlModeOutput) SqlMode() pulumi.StringOutput {
	return o.ApplyT(func(v SqlMode) string { return v.SqlMode }).(pulumi.StringOutput)
}

// TimescaleDB extension configuration values
type Timescaledb struct {
	// The number of background workers for timescaledb operations.  Set to the sum of your number of databases and the total number of concurrent background workers you want running at any given point in time.
	MaxBackgroundWorkers *int `pulumi:"maxBackgroundWorkers"`
}

// TimescaleDB extension configuration values
type TimescaledbOutput struct{ *pulumi.OutputState }

func (TimescaledbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Timescaledb)(nil)).Elem()
}

func (o TimescaledbOutput) ToTimescaledbOutput() TimescaledbOutput {
	return o
}

func (o TimescaledbOutput) ToTimescaledbOutputWithContext(ctx context.Context) TimescaledbOutput {
	return o
}

// The number of background workers for timescaledb operations.  Set to the sum of your number of databases and the total number of concurrent background workers you want running at any given point in time.
func (o TimescaledbOutput) MaxBackgroundWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Timescaledb) *int { return v.MaxBackgroundWorkers }).(pulumi.IntPtrOutput)
}

type TimescaledbPtrOutput struct{ *pulumi.OutputState }

func (TimescaledbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Timescaledb)(nil)).Elem()
}

func (o TimescaledbPtrOutput) ToTimescaledbPtrOutput() TimescaledbPtrOutput {
	return o
}

func (o TimescaledbPtrOutput) ToTimescaledbPtrOutputWithContext(ctx context.Context) TimescaledbPtrOutput {
	return o
}

func (o TimescaledbPtrOutput) Elem() TimescaledbOutput {
	return o.ApplyT(func(v *Timescaledb) Timescaledb {
		if v != nil {
			return *v
		}
		var ret Timescaledb
		return ret
	}).(TimescaledbOutput)
}

// The number of background workers for timescaledb operations.  Set to the sum of your number of databases and the total number of concurrent background workers you want running at any given point in time.
func (o TimescaledbPtrOutput) MaxBackgroundWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Timescaledb) *int {
		if v == nil {
			return nil
		}
		return v.MaxBackgroundWorkers
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), ConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPtrInput)(nil)).Elem(), ConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseBackupInput)(nil)).Elem(), DatabaseBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseBackupPtrInput)(nil)).Elem(), DatabaseBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseClusterConnectionInput)(nil)).Elem(), DatabaseClusterConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseClusterConnectionPtrInput)(nil)).Elem(), DatabaseClusterConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseClusterMaintenanceWindowInput)(nil)).Elem(), DatabaseClusterMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseClusterMaintenanceWindowPtrInput)(nil)).Elem(), DatabaseClusterMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseClusterPrivateConnectionInput)(nil)).Elem(), DatabaseClusterPrivateConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseClusterPrivateConnectionPtrInput)(nil)).Elem(), DatabaseClusterPrivateConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseReplicaConnectionInput)(nil)).Elem(), DatabaseReplicaConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseReplicaConnectionPtrInput)(nil)).Elem(), DatabaseReplicaConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseReplicaPrivateConnectionInput)(nil)).Elem(), DatabaseReplicaPrivateConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseReplicaPrivateConnectionPtrInput)(nil)).Elem(), DatabaseReplicaPrivateConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserInput)(nil)).Elem(), DatabaseUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserArrayInput)(nil)).Elem(), DatabaseUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleInput)(nil)).Elem(), FirewallRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleArrayInput)(nil)).Elem(), FirewallRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlSettingsInput)(nil)).Elem(), MysqlSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlSettingsPtrInput)(nil)).Elem(), MysqlSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectionInput)(nil)).Elem(), PrivateConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectionPtrInput)(nil)).Elem(), PrivateConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourcePropertiesInput)(nil)).Elem(), SourcePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourcePropertiesPtrInput)(nil)).Elem(), SourcePropertiesArgs{})
	pulumi.RegisterOutputType(BackupOutput{})
	pulumi.RegisterOutputType(BackupArrayOutput{})
	pulumi.RegisterOutputType(CaOutput{})
	pulumi.RegisterOutputType(ConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionPtrOutput{})
	pulumi.RegisterOutputType(ConnectionPoolOutput{})
	pulumi.RegisterOutputType(ConnectionPoolArrayOutput{})
	pulumi.RegisterOutputType(ConnectionPoolConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionPoolConnectionPtrOutput{})
	pulumi.RegisterOutputType(ConnectionPoolPrivateConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionPoolPrivateConnectionPtrOutput{})
	pulumi.RegisterOutputType(ConnectionPoolsOutput{})
	pulumi.RegisterOutputType(DatabaseOutput{})
	pulumi.RegisterOutputType(DatabaseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseBackupOutput{})
	pulumi.RegisterOutputType(DatabaseBackupPtrOutput{})
	pulumi.RegisterOutputType(DatabaseClusterOutput{})
	pulumi.RegisterOutputType(DatabaseClusterArrayOutput{})
	pulumi.RegisterOutputType(DatabaseClusterConnectionOutput{})
	pulumi.RegisterOutputType(DatabaseClusterConnectionPtrOutput{})
	pulumi.RegisterOutputType(DatabaseClusterMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(DatabaseClusterMaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(DatabaseClusterPrivateConnectionOutput{})
	pulumi.RegisterOutputType(DatabaseClusterPrivateConnectionPtrOutput{})
	pulumi.RegisterOutputType(DatabaseConfigOutput{})
	pulumi.RegisterOutputType(DatabaseLayoutOptionOutput{})
	pulumi.RegisterOutputType(DatabaseLayoutOptionArrayOutput{})
	pulumi.RegisterOutputType(DatabaseReplicaOutput{})
	pulumi.RegisterOutputType(DatabaseReplicaPtrOutput{})
	pulumi.RegisterOutputType(DatabaseReplicaArrayOutput{})
	pulumi.RegisterOutputType(DatabaseReplicaConnectionOutput{})
	pulumi.RegisterOutputType(DatabaseReplicaConnectionPtrOutput{})
	pulumi.RegisterOutputType(DatabaseReplicaPrivateConnectionOutput{})
	pulumi.RegisterOutputType(DatabaseReplicaPrivateConnectionPtrOutput{})
	pulumi.RegisterOutputType(DatabaseUserOutput{})
	pulumi.RegisterOutputType(DatabaseUserArrayOutput{})
	pulumi.RegisterOutputType(DatabaseVersionAvailabilityOutput{})
	pulumi.RegisterOutputType(DatabaseVersionAvailabilityArrayOutput{})
	pulumi.RegisterOutputType(FirewallRuleOutput{})
	pulumi.RegisterOutputType(FirewallRuleArrayOutput{})
	pulumi.RegisterOutputType(GetDatabasesCaPropertiesOutput{})
	pulumi.RegisterOutputType(GetDatabasesClusterPropertiesOutput{})
	pulumi.RegisterOutputType(GetDatabasesConnectionPoolPropertiesOutput{})
	pulumi.RegisterOutputType(GetDatabasesEvictionPolicyPropertiesOutput{})
	pulumi.RegisterOutputType(GetDatabasesPropertiesOutput{})
	pulumi.RegisterOutputType(GetDatabasesReplicaPropertiesOutput{})
	pulumi.RegisterOutputType(GetDatabasesUserPropertiesOutput{})
	pulumi.RegisterOutputType(ListDatabasesBackupsPropertiesOutput{})
	pulumi.RegisterOutputType(ListDatabasesClustersPropertiesOutput{})
	pulumi.RegisterOutputType(ListDatabasesFirewallRulesPropertiesOutput{})
	pulumi.RegisterOutputType(ListDatabasesPropertiesOutput{})
	pulumi.RegisterOutputType(ListDatabasesReplicasPropertiesOutput{})
	pulumi.RegisterOutputType(ListDatabasesUsersPropertiesOutput{})
	pulumi.RegisterOutputType(MysqlOutput{})
	pulumi.RegisterOutputType(MysqlPtrOutput{})
	pulumi.RegisterOutputType(MysqlSettingsOutput{})
	pulumi.RegisterOutputType(MysqlSettingsPtrOutput{})
	pulumi.RegisterOutputType(OnlineMigrationOutput{})
	pulumi.RegisterOutputType(OptionsOutput{})
	pulumi.RegisterOutputType(OptionsOptionsPropertiesOutput{})
	pulumi.RegisterOutputType(OptionsOptionsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(OptionsOptionsPropertiesMongodbOutput{})
	pulumi.RegisterOutputType(OptionsOptionsPropertiesMongodbPtrOutput{})
	pulumi.RegisterOutputType(OptionsOptionsPropertiesMysqlOutput{})
	pulumi.RegisterOutputType(OptionsOptionsPropertiesMysqlPtrOutput{})
	pulumi.RegisterOutputType(OptionsOptionsPropertiesPgOutput{})
	pulumi.RegisterOutputType(OptionsOptionsPropertiesPgPtrOutput{})
	pulumi.RegisterOutputType(OptionsOptionsPropertiesRedisOutput{})
	pulumi.RegisterOutputType(OptionsOptionsPropertiesRedisPtrOutput{})
	pulumi.RegisterOutputType(OptionsVersionAvailabilityPropertiesOutput{})
	pulumi.RegisterOutputType(OptionsVersionAvailabilityPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PgbouncerOutput{})
	pulumi.RegisterOutputType(PgbouncerPtrOutput{})
	pulumi.RegisterOutputType(PostgresOutput{})
	pulumi.RegisterOutputType(PostgresPtrOutput{})
	pulumi.RegisterOutputType(PrivateConnectionOutput{})
	pulumi.RegisterOutputType(PrivateConnectionPtrOutput{})
	pulumi.RegisterOutputType(RedisOutput{})
	pulumi.RegisterOutputType(RedisPtrOutput{})
	pulumi.RegisterOutputType(SourcePropertiesOutput{})
	pulumi.RegisterOutputType(SourcePropertiesPtrOutput{})
	pulumi.RegisterOutputType(SqlModeOutput{})
	pulumi.RegisterOutputType(TimescaledbOutput{})
	pulumi.RegisterOutputType(TimescaledbPtrOutput{})
}
