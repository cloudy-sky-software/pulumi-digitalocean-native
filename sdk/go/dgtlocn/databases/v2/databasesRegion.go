// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabasesRegion struct {
	pulumi.CustomResourceState

	// A slug identifier for the region to which the database cluster will be migrated.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewDatabasesRegion registers a new resource with the given unique name, arguments, and options.
func NewDatabasesRegion(ctx *pulumi.Context,
	name string, args *DatabasesRegionArgs, opts ...pulumi.ResourceOption) (*DatabasesRegion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabasesRegion
	err := ctx.RegisterResource("digitalocean-native:databases/v2:DatabasesRegion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabasesRegion gets an existing DatabasesRegion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabasesRegion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabasesRegionState, opts ...pulumi.ResourceOption) (*DatabasesRegion, error) {
	var resource DatabasesRegion
	err := ctx.ReadResource("digitalocean-native:databases/v2:DatabasesRegion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabasesRegion resources.
type databasesRegionState struct {
}

type DatabasesRegionState struct {
}

func (DatabasesRegionState) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesRegionState)(nil)).Elem()
}

type databasesRegionArgs struct {
	// A unique identifier for a database cluster.
	DatabaseClusterUuid *string `pulumi:"databaseClusterUuid"`
	// A slug identifier for the region to which the database cluster will be migrated.
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a DatabasesRegion resource.
type DatabasesRegionArgs struct {
	// A unique identifier for a database cluster.
	DatabaseClusterUuid pulumi.StringPtrInput
	// A slug identifier for the region to which the database cluster will be migrated.
	Region pulumi.StringInput
}

func (DatabasesRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesRegionArgs)(nil)).Elem()
}

type DatabasesRegionInput interface {
	pulumi.Input

	ToDatabasesRegionOutput() DatabasesRegionOutput
	ToDatabasesRegionOutputWithContext(ctx context.Context) DatabasesRegionOutput
}

func (*DatabasesRegion) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesRegion)(nil)).Elem()
}

func (i *DatabasesRegion) ToDatabasesRegionOutput() DatabasesRegionOutput {
	return i.ToDatabasesRegionOutputWithContext(context.Background())
}

func (i *DatabasesRegion) ToDatabasesRegionOutputWithContext(ctx context.Context) DatabasesRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesRegionOutput)
}

type DatabasesRegionOutput struct{ *pulumi.OutputState }

func (DatabasesRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesRegion)(nil)).Elem()
}

func (o DatabasesRegionOutput) ToDatabasesRegionOutput() DatabasesRegionOutput {
	return o
}

func (o DatabasesRegionOutput) ToDatabasesRegionOutputWithContext(ctx context.Context) DatabasesRegionOutput {
	return o
}

// A slug identifier for the region to which the database cluster will be migrated.
func (o DatabasesRegionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasesRegion) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesRegionInput)(nil)).Elem(), &DatabasesRegion{})
	pulumi.RegisterOutputType(DatabasesRegionOutput{})
}
