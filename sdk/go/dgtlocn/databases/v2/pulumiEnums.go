// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A slug representing the database engine used for the cluster. The possible values are: "pg" for PostgreSQL, "mysql" for MySQL, "redis" for Redis, and "mongodb" for MongoDB.
type DatabaseClusterEngine string

const (
	DatabaseClusterEnginePg      = DatabaseClusterEngine("pg")
	DatabaseClusterEngineMysql   = DatabaseClusterEngine("mysql")
	DatabaseClusterEngineRedis   = DatabaseClusterEngine("redis")
	DatabaseClusterEngineMongodb = DatabaseClusterEngine("mongodb")
)

func (DatabaseClusterEngine) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseClusterEngine)(nil)).Elem()
}

func (e DatabaseClusterEngine) ToDatabaseClusterEngineOutput() DatabaseClusterEngineOutput {
	return pulumi.ToOutput(e).(DatabaseClusterEngineOutput)
}

func (e DatabaseClusterEngine) ToDatabaseClusterEngineOutputWithContext(ctx context.Context) DatabaseClusterEngineOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatabaseClusterEngineOutput)
}

func (e DatabaseClusterEngine) ToDatabaseClusterEnginePtrOutput() DatabaseClusterEnginePtrOutput {
	return e.ToDatabaseClusterEnginePtrOutputWithContext(context.Background())
}

func (e DatabaseClusterEngine) ToDatabaseClusterEnginePtrOutputWithContext(ctx context.Context) DatabaseClusterEnginePtrOutput {
	return DatabaseClusterEngine(e).ToDatabaseClusterEngineOutputWithContext(ctx).ToDatabaseClusterEnginePtrOutputWithContext(ctx)
}

func (e DatabaseClusterEngine) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseClusterEngine) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseClusterEngine) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatabaseClusterEngine) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatabaseClusterEngineOutput struct{ *pulumi.OutputState }

func (DatabaseClusterEngineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseClusterEngine)(nil)).Elem()
}

func (o DatabaseClusterEngineOutput) ToDatabaseClusterEngineOutput() DatabaseClusterEngineOutput {
	return o
}

func (o DatabaseClusterEngineOutput) ToDatabaseClusterEngineOutputWithContext(ctx context.Context) DatabaseClusterEngineOutput {
	return o
}

func (o DatabaseClusterEngineOutput) ToDatabaseClusterEnginePtrOutput() DatabaseClusterEnginePtrOutput {
	return o.ToDatabaseClusterEnginePtrOutputWithContext(context.Background())
}

func (o DatabaseClusterEngineOutput) ToDatabaseClusterEnginePtrOutputWithContext(ctx context.Context) DatabaseClusterEnginePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseClusterEngine) *DatabaseClusterEngine {
		return &v
	}).(DatabaseClusterEnginePtrOutput)
}

func (o DatabaseClusterEngineOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatabaseClusterEngineOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseClusterEngine) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatabaseClusterEngineOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseClusterEngineOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseClusterEngine) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatabaseClusterEnginePtrOutput struct{ *pulumi.OutputState }

func (DatabaseClusterEnginePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseClusterEngine)(nil)).Elem()
}

func (o DatabaseClusterEnginePtrOutput) ToDatabaseClusterEnginePtrOutput() DatabaseClusterEnginePtrOutput {
	return o
}

func (o DatabaseClusterEnginePtrOutput) ToDatabaseClusterEnginePtrOutputWithContext(ctx context.Context) DatabaseClusterEnginePtrOutput {
	return o
}

func (o DatabaseClusterEnginePtrOutput) Elem() DatabaseClusterEngineOutput {
	return o.ApplyT(func(v *DatabaseClusterEngine) DatabaseClusterEngine {
		if v != nil {
			return *v
		}
		var ret DatabaseClusterEngine
		return ret
	}).(DatabaseClusterEngineOutput)
}

func (o DatabaseClusterEnginePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseClusterEnginePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatabaseClusterEngine) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatabaseClusterEngineInput is an input type that accepts values of the DatabaseClusterEngine enum
// A concrete instance of `DatabaseClusterEngineInput` can be one of the following:
//
//	DatabaseClusterEnginePg
//	DatabaseClusterEngineMysql
//	DatabaseClusterEngineRedis
//	DatabaseClusterEngineMongodb
type DatabaseClusterEngineInput interface {
	pulumi.Input

	ToDatabaseClusterEngineOutput() DatabaseClusterEngineOutput
	ToDatabaseClusterEngineOutputWithContext(context.Context) DatabaseClusterEngineOutput
}

var databaseClusterEnginePtrType = reflect.TypeOf((**DatabaseClusterEngine)(nil)).Elem()

type DatabaseClusterEnginePtrInput interface {
	pulumi.Input

	ToDatabaseClusterEnginePtrOutput() DatabaseClusterEnginePtrOutput
	ToDatabaseClusterEnginePtrOutputWithContext(context.Context) DatabaseClusterEnginePtrOutput
}

type databaseClusterEnginePtr string

func DatabaseClusterEnginePtr(v string) DatabaseClusterEnginePtrInput {
	return (*databaseClusterEnginePtr)(&v)
}

func (*databaseClusterEnginePtr) ElementType() reflect.Type {
	return databaseClusterEnginePtrType
}

func (in *databaseClusterEnginePtr) ToDatabaseClusterEnginePtrOutput() DatabaseClusterEnginePtrOutput {
	return pulumi.ToOutput(in).(DatabaseClusterEnginePtrOutput)
}

func (in *databaseClusterEnginePtr) ToDatabaseClusterEnginePtrOutputWithContext(ctx context.Context) DatabaseClusterEnginePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatabaseClusterEnginePtrOutput)
}

// A string representing the current status of the database cluster.
type DatabaseClusterStatus string

const (
	DatabaseClusterStatusCreating  = DatabaseClusterStatus("creating")
	DatabaseClusterStatusOnline    = DatabaseClusterStatus("online")
	DatabaseClusterStatusResizing  = DatabaseClusterStatus("resizing")
	DatabaseClusterStatusMigrating = DatabaseClusterStatus("migrating")
	DatabaseClusterStatusForking   = DatabaseClusterStatus("forking")
)

func (DatabaseClusterStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseClusterStatus)(nil)).Elem()
}

func (e DatabaseClusterStatus) ToDatabaseClusterStatusOutput() DatabaseClusterStatusOutput {
	return pulumi.ToOutput(e).(DatabaseClusterStatusOutput)
}

func (e DatabaseClusterStatus) ToDatabaseClusterStatusOutputWithContext(ctx context.Context) DatabaseClusterStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatabaseClusterStatusOutput)
}

func (e DatabaseClusterStatus) ToDatabaseClusterStatusPtrOutput() DatabaseClusterStatusPtrOutput {
	return e.ToDatabaseClusterStatusPtrOutputWithContext(context.Background())
}

func (e DatabaseClusterStatus) ToDatabaseClusterStatusPtrOutputWithContext(ctx context.Context) DatabaseClusterStatusPtrOutput {
	return DatabaseClusterStatus(e).ToDatabaseClusterStatusOutputWithContext(ctx).ToDatabaseClusterStatusPtrOutputWithContext(ctx)
}

func (e DatabaseClusterStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseClusterStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseClusterStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatabaseClusterStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatabaseClusterStatusOutput struct{ *pulumi.OutputState }

func (DatabaseClusterStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseClusterStatus)(nil)).Elem()
}

func (o DatabaseClusterStatusOutput) ToDatabaseClusterStatusOutput() DatabaseClusterStatusOutput {
	return o
}

func (o DatabaseClusterStatusOutput) ToDatabaseClusterStatusOutputWithContext(ctx context.Context) DatabaseClusterStatusOutput {
	return o
}

func (o DatabaseClusterStatusOutput) ToDatabaseClusterStatusPtrOutput() DatabaseClusterStatusPtrOutput {
	return o.ToDatabaseClusterStatusPtrOutputWithContext(context.Background())
}

func (o DatabaseClusterStatusOutput) ToDatabaseClusterStatusPtrOutputWithContext(ctx context.Context) DatabaseClusterStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseClusterStatus) *DatabaseClusterStatus {
		return &v
	}).(DatabaseClusterStatusPtrOutput)
}

func (o DatabaseClusterStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatabaseClusterStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseClusterStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatabaseClusterStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseClusterStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseClusterStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatabaseClusterStatusPtrOutput struct{ *pulumi.OutputState }

func (DatabaseClusterStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseClusterStatus)(nil)).Elem()
}

func (o DatabaseClusterStatusPtrOutput) ToDatabaseClusterStatusPtrOutput() DatabaseClusterStatusPtrOutput {
	return o
}

func (o DatabaseClusterStatusPtrOutput) ToDatabaseClusterStatusPtrOutputWithContext(ctx context.Context) DatabaseClusterStatusPtrOutput {
	return o
}

func (o DatabaseClusterStatusPtrOutput) Elem() DatabaseClusterStatusOutput {
	return o.ApplyT(func(v *DatabaseClusterStatus) DatabaseClusterStatus {
		if v != nil {
			return *v
		}
		var ret DatabaseClusterStatus
		return ret
	}).(DatabaseClusterStatusOutput)
}

func (o DatabaseClusterStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseClusterStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatabaseClusterStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatabaseClusterStatusInput is an input type that accepts values of the DatabaseClusterStatus enum
// A concrete instance of `DatabaseClusterStatusInput` can be one of the following:
//
//	DatabaseClusterStatusCreating
//	DatabaseClusterStatusOnline
//	DatabaseClusterStatusResizing
//	DatabaseClusterStatusMigrating
//	DatabaseClusterStatusForking
type DatabaseClusterStatusInput interface {
	pulumi.Input

	ToDatabaseClusterStatusOutput() DatabaseClusterStatusOutput
	ToDatabaseClusterStatusOutputWithContext(context.Context) DatabaseClusterStatusOutput
}

var databaseClusterStatusPtrType = reflect.TypeOf((**DatabaseClusterStatus)(nil)).Elem()

type DatabaseClusterStatusPtrInput interface {
	pulumi.Input

	ToDatabaseClusterStatusPtrOutput() DatabaseClusterStatusPtrOutput
	ToDatabaseClusterStatusPtrOutputWithContext(context.Context) DatabaseClusterStatusPtrOutput
}

type databaseClusterStatusPtr string

func DatabaseClusterStatusPtr(v string) DatabaseClusterStatusPtrInput {
	return (*databaseClusterStatusPtr)(&v)
}

func (*databaseClusterStatusPtr) ElementType() reflect.Type {
	return databaseClusterStatusPtrType
}

func (in *databaseClusterStatusPtr) ToDatabaseClusterStatusPtrOutput() DatabaseClusterStatusPtrOutput {
	return pulumi.ToOutput(in).(DatabaseClusterStatusPtrOutput)
}

func (in *databaseClusterStatusPtr) ToDatabaseClusterStatusPtrOutputWithContext(ctx context.Context) DatabaseClusterStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatabaseClusterStatusPtrOutput)
}

// A string representing the current status of the database cluster.
type DatabaseReplicaStatus string

const (
	DatabaseReplicaStatusCreating  = DatabaseReplicaStatus("creating")
	DatabaseReplicaStatusOnline    = DatabaseReplicaStatus("online")
	DatabaseReplicaStatusResizing  = DatabaseReplicaStatus("resizing")
	DatabaseReplicaStatusMigrating = DatabaseReplicaStatus("migrating")
	DatabaseReplicaStatusForking   = DatabaseReplicaStatus("forking")
)

func (DatabaseReplicaStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseReplicaStatus)(nil)).Elem()
}

func (e DatabaseReplicaStatus) ToDatabaseReplicaStatusOutput() DatabaseReplicaStatusOutput {
	return pulumi.ToOutput(e).(DatabaseReplicaStatusOutput)
}

func (e DatabaseReplicaStatus) ToDatabaseReplicaStatusOutputWithContext(ctx context.Context) DatabaseReplicaStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatabaseReplicaStatusOutput)
}

func (e DatabaseReplicaStatus) ToDatabaseReplicaStatusPtrOutput() DatabaseReplicaStatusPtrOutput {
	return e.ToDatabaseReplicaStatusPtrOutputWithContext(context.Background())
}

func (e DatabaseReplicaStatus) ToDatabaseReplicaStatusPtrOutputWithContext(ctx context.Context) DatabaseReplicaStatusPtrOutput {
	return DatabaseReplicaStatus(e).ToDatabaseReplicaStatusOutputWithContext(ctx).ToDatabaseReplicaStatusPtrOutputWithContext(ctx)
}

func (e DatabaseReplicaStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseReplicaStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseReplicaStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatabaseReplicaStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatabaseReplicaStatusOutput struct{ *pulumi.OutputState }

func (DatabaseReplicaStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseReplicaStatus)(nil)).Elem()
}

func (o DatabaseReplicaStatusOutput) ToDatabaseReplicaStatusOutput() DatabaseReplicaStatusOutput {
	return o
}

func (o DatabaseReplicaStatusOutput) ToDatabaseReplicaStatusOutputWithContext(ctx context.Context) DatabaseReplicaStatusOutput {
	return o
}

func (o DatabaseReplicaStatusOutput) ToDatabaseReplicaStatusPtrOutput() DatabaseReplicaStatusPtrOutput {
	return o.ToDatabaseReplicaStatusPtrOutputWithContext(context.Background())
}

func (o DatabaseReplicaStatusOutput) ToDatabaseReplicaStatusPtrOutputWithContext(ctx context.Context) DatabaseReplicaStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseReplicaStatus) *DatabaseReplicaStatus {
		return &v
	}).(DatabaseReplicaStatusPtrOutput)
}

func (o DatabaseReplicaStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatabaseReplicaStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseReplicaStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatabaseReplicaStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseReplicaStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseReplicaStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatabaseReplicaStatusPtrOutput struct{ *pulumi.OutputState }

func (DatabaseReplicaStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseReplicaStatus)(nil)).Elem()
}

func (o DatabaseReplicaStatusPtrOutput) ToDatabaseReplicaStatusPtrOutput() DatabaseReplicaStatusPtrOutput {
	return o
}

func (o DatabaseReplicaStatusPtrOutput) ToDatabaseReplicaStatusPtrOutputWithContext(ctx context.Context) DatabaseReplicaStatusPtrOutput {
	return o
}

func (o DatabaseReplicaStatusPtrOutput) Elem() DatabaseReplicaStatusOutput {
	return o.ApplyT(func(v *DatabaseReplicaStatus) DatabaseReplicaStatus {
		if v != nil {
			return *v
		}
		var ret DatabaseReplicaStatus
		return ret
	}).(DatabaseReplicaStatusOutput)
}

func (o DatabaseReplicaStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseReplicaStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatabaseReplicaStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatabaseReplicaStatusInput is an input type that accepts values of the DatabaseReplicaStatus enum
// A concrete instance of `DatabaseReplicaStatusInput` can be one of the following:
//
//	DatabaseReplicaStatusCreating
//	DatabaseReplicaStatusOnline
//	DatabaseReplicaStatusResizing
//	DatabaseReplicaStatusMigrating
//	DatabaseReplicaStatusForking
type DatabaseReplicaStatusInput interface {
	pulumi.Input

	ToDatabaseReplicaStatusOutput() DatabaseReplicaStatusOutput
	ToDatabaseReplicaStatusOutputWithContext(context.Context) DatabaseReplicaStatusOutput
}

var databaseReplicaStatusPtrType = reflect.TypeOf((**DatabaseReplicaStatus)(nil)).Elem()

type DatabaseReplicaStatusPtrInput interface {
	pulumi.Input

	ToDatabaseReplicaStatusPtrOutput() DatabaseReplicaStatusPtrOutput
	ToDatabaseReplicaStatusPtrOutputWithContext(context.Context) DatabaseReplicaStatusPtrOutput
}

type databaseReplicaStatusPtr string

func DatabaseReplicaStatusPtr(v string) DatabaseReplicaStatusPtrInput {
	return (*databaseReplicaStatusPtr)(&v)
}

func (*databaseReplicaStatusPtr) ElementType() reflect.Type {
	return databaseReplicaStatusPtrType
}

func (in *databaseReplicaStatusPtr) ToDatabaseReplicaStatusPtrOutput() DatabaseReplicaStatusPtrOutput {
	return pulumi.ToOutput(in).(DatabaseReplicaStatusPtrOutput)
}

func (in *databaseReplicaStatusPtr) ToDatabaseReplicaStatusPtrOutputWithContext(ctx context.Context) DatabaseReplicaStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatabaseReplicaStatusPtrOutput)
}

// A string representing the database user's role. The value will be either
// "primary" or "normal".
type DatabaseUserRole string

const (
	DatabaseUserRolePrimary = DatabaseUserRole("primary")
	DatabaseUserRoleNormal  = DatabaseUserRole("normal")
)

func (DatabaseUserRole) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseUserRole)(nil)).Elem()
}

func (e DatabaseUserRole) ToDatabaseUserRoleOutput() DatabaseUserRoleOutput {
	return pulumi.ToOutput(e).(DatabaseUserRoleOutput)
}

func (e DatabaseUserRole) ToDatabaseUserRoleOutputWithContext(ctx context.Context) DatabaseUserRoleOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatabaseUserRoleOutput)
}

func (e DatabaseUserRole) ToDatabaseUserRolePtrOutput() DatabaseUserRolePtrOutput {
	return e.ToDatabaseUserRolePtrOutputWithContext(context.Background())
}

func (e DatabaseUserRole) ToDatabaseUserRolePtrOutputWithContext(ctx context.Context) DatabaseUserRolePtrOutput {
	return DatabaseUserRole(e).ToDatabaseUserRoleOutputWithContext(ctx).ToDatabaseUserRolePtrOutputWithContext(ctx)
}

func (e DatabaseUserRole) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseUserRole) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseUserRole) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatabaseUserRole) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatabaseUserRoleOutput struct{ *pulumi.OutputState }

func (DatabaseUserRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseUserRole)(nil)).Elem()
}

func (o DatabaseUserRoleOutput) ToDatabaseUserRoleOutput() DatabaseUserRoleOutput {
	return o
}

func (o DatabaseUserRoleOutput) ToDatabaseUserRoleOutputWithContext(ctx context.Context) DatabaseUserRoleOutput {
	return o
}

func (o DatabaseUserRoleOutput) ToDatabaseUserRolePtrOutput() DatabaseUserRolePtrOutput {
	return o.ToDatabaseUserRolePtrOutputWithContext(context.Background())
}

func (o DatabaseUserRoleOutput) ToDatabaseUserRolePtrOutputWithContext(ctx context.Context) DatabaseUserRolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseUserRole) *DatabaseUserRole {
		return &v
	}).(DatabaseUserRolePtrOutput)
}

func (o DatabaseUserRoleOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatabaseUserRoleOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseUserRole) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatabaseUserRoleOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseUserRoleOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseUserRole) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatabaseUserRolePtrOutput struct{ *pulumi.OutputState }

func (DatabaseUserRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseUserRole)(nil)).Elem()
}

func (o DatabaseUserRolePtrOutput) ToDatabaseUserRolePtrOutput() DatabaseUserRolePtrOutput {
	return o
}

func (o DatabaseUserRolePtrOutput) ToDatabaseUserRolePtrOutputWithContext(ctx context.Context) DatabaseUserRolePtrOutput {
	return o
}

func (o DatabaseUserRolePtrOutput) Elem() DatabaseUserRoleOutput {
	return o.ApplyT(func(v *DatabaseUserRole) DatabaseUserRole {
		if v != nil {
			return *v
		}
		var ret DatabaseUserRole
		return ret
	}).(DatabaseUserRoleOutput)
}

func (o DatabaseUserRolePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseUserRolePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatabaseUserRole) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatabaseUserRoleInput is an input type that accepts values of the DatabaseUserRole enum
// A concrete instance of `DatabaseUserRoleInput` can be one of the following:
//
//	DatabaseUserRolePrimary
//	DatabaseUserRoleNormal
type DatabaseUserRoleInput interface {
	pulumi.Input

	ToDatabaseUserRoleOutput() DatabaseUserRoleOutput
	ToDatabaseUserRoleOutputWithContext(context.Context) DatabaseUserRoleOutput
}

var databaseUserRolePtrType = reflect.TypeOf((**DatabaseUserRole)(nil)).Elem()

type DatabaseUserRolePtrInput interface {
	pulumi.Input

	ToDatabaseUserRolePtrOutput() DatabaseUserRolePtrOutput
	ToDatabaseUserRolePtrOutputWithContext(context.Context) DatabaseUserRolePtrOutput
}

type databaseUserRolePtr string

func DatabaseUserRolePtr(v string) DatabaseUserRolePtrInput {
	return (*databaseUserRolePtr)(&v)
}

func (*databaseUserRolePtr) ElementType() reflect.Type {
	return databaseUserRolePtrType
}

func (in *databaseUserRolePtr) ToDatabaseUserRolePtrOutput() DatabaseUserRolePtrOutput {
	return pulumi.ToOutput(in).(DatabaseUserRolePtrOutput)
}

func (in *databaseUserRolePtr) ToDatabaseUserRolePtrOutputWithContext(ctx context.Context) DatabaseUserRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatabaseUserRolePtrOutput)
}

// A string specifying the desired eviction policy for the Redis cluster.
//
// - `noeviction`: Don't evict any data, returns error when memory limit is reached.
// - `allkeys_lru:` Evict any key, least recently used (LRU) first.
// - `allkeys_random`: Evict keys in a random order.
// - `volatile_lru`: Evict keys with expiration only, least recently used (LRU) first.
// - `volatile_random`: Evict keys with expiration only in a random order.
// - `volatile_ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.
type EvictionPolicy string

const (
	EvictionPolicyNoeviction     = EvictionPolicy("noeviction")
	EvictionPolicyAllkeysLru     = EvictionPolicy("allkeys_lru")
	EvictionPolicyAllkeysRandom  = EvictionPolicy("allkeys_random")
	EvictionPolicyVolatileLru    = EvictionPolicy("volatile_lru")
	EvictionPolicyVolatileRandom = EvictionPolicy("volatile_random")
	EvictionPolicyVolatileTtl    = EvictionPolicy("volatile_ttl")
)

func (EvictionPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*EvictionPolicy)(nil)).Elem()
}

func (e EvictionPolicy) ToEvictionPolicyOutput() EvictionPolicyOutput {
	return pulumi.ToOutput(e).(EvictionPolicyOutput)
}

func (e EvictionPolicy) ToEvictionPolicyOutputWithContext(ctx context.Context) EvictionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EvictionPolicyOutput)
}

func (e EvictionPolicy) ToEvictionPolicyPtrOutput() EvictionPolicyPtrOutput {
	return e.ToEvictionPolicyPtrOutputWithContext(context.Background())
}

func (e EvictionPolicy) ToEvictionPolicyPtrOutputWithContext(ctx context.Context) EvictionPolicyPtrOutput {
	return EvictionPolicy(e).ToEvictionPolicyOutputWithContext(ctx).ToEvictionPolicyPtrOutputWithContext(ctx)
}

func (e EvictionPolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EvictionPolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EvictionPolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EvictionPolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EvictionPolicyOutput struct{ *pulumi.OutputState }

func (EvictionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EvictionPolicy)(nil)).Elem()
}

func (o EvictionPolicyOutput) ToEvictionPolicyOutput() EvictionPolicyOutput {
	return o
}

func (o EvictionPolicyOutput) ToEvictionPolicyOutputWithContext(ctx context.Context) EvictionPolicyOutput {
	return o
}

func (o EvictionPolicyOutput) ToEvictionPolicyPtrOutput() EvictionPolicyPtrOutput {
	return o.ToEvictionPolicyPtrOutputWithContext(context.Background())
}

func (o EvictionPolicyOutput) ToEvictionPolicyPtrOutputWithContext(ctx context.Context) EvictionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EvictionPolicy) *EvictionPolicy {
		return &v
	}).(EvictionPolicyPtrOutput)
}

func (o EvictionPolicyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EvictionPolicyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EvictionPolicy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EvictionPolicyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EvictionPolicyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EvictionPolicy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EvictionPolicyPtrOutput struct{ *pulumi.OutputState }

func (EvictionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EvictionPolicy)(nil)).Elem()
}

func (o EvictionPolicyPtrOutput) ToEvictionPolicyPtrOutput() EvictionPolicyPtrOutput {
	return o
}

func (o EvictionPolicyPtrOutput) ToEvictionPolicyPtrOutputWithContext(ctx context.Context) EvictionPolicyPtrOutput {
	return o
}

func (o EvictionPolicyPtrOutput) Elem() EvictionPolicyOutput {
	return o.ApplyT(func(v *EvictionPolicy) EvictionPolicy {
		if v != nil {
			return *v
		}
		var ret EvictionPolicy
		return ret
	}).(EvictionPolicyOutput)
}

func (o EvictionPolicyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EvictionPolicyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EvictionPolicy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EvictionPolicyInput is an input type that accepts values of the EvictionPolicy enum
// A concrete instance of `EvictionPolicyInput` can be one of the following:
//
//	EvictionPolicyNoeviction
//	EvictionPolicyAllkeysLru
//	EvictionPolicyAllkeysRandom
//	EvictionPolicyVolatileLru
//	EvictionPolicyVolatileRandom
//	EvictionPolicyVolatileTtl
type EvictionPolicyInput interface {
	pulumi.Input

	ToEvictionPolicyOutput() EvictionPolicyOutput
	ToEvictionPolicyOutputWithContext(context.Context) EvictionPolicyOutput
}

var evictionPolicyPtrType = reflect.TypeOf((**EvictionPolicy)(nil)).Elem()

type EvictionPolicyPtrInput interface {
	pulumi.Input

	ToEvictionPolicyPtrOutput() EvictionPolicyPtrOutput
	ToEvictionPolicyPtrOutputWithContext(context.Context) EvictionPolicyPtrOutput
}

type evictionPolicyPtr string

func EvictionPolicyPtr(v string) EvictionPolicyPtrInput {
	return (*evictionPolicyPtr)(&v)
}

func (*evictionPolicyPtr) ElementType() reflect.Type {
	return evictionPolicyPtrType
}

func (in *evictionPolicyPtr) ToEvictionPolicyPtrOutput() EvictionPolicyPtrOutput {
	return pulumi.ToOutput(in).(EvictionPolicyPtrOutput)
}

func (in *evictionPolicyPtr) ToEvictionPolicyPtrOutputWithContext(ctx context.Context) EvictionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EvictionPolicyPtrOutput)
}

// The type of resource that the firewall rule allows to access the database cluster.
type FirewallRuleType string

const (
	FirewallRuleTypeDroplet = FirewallRuleType("droplet")
	FirewallRuleTypeK8s     = FirewallRuleType("k8s")
	FirewallRuleTypeIpAddr  = FirewallRuleType("ip_addr")
	FirewallRuleTypeTag     = FirewallRuleType("tag")
	FirewallRuleTypeApp     = FirewallRuleType("app")
)

func (FirewallRuleType) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRuleType)(nil)).Elem()
}

func (e FirewallRuleType) ToFirewallRuleTypeOutput() FirewallRuleTypeOutput {
	return pulumi.ToOutput(e).(FirewallRuleTypeOutput)
}

func (e FirewallRuleType) ToFirewallRuleTypeOutputWithContext(ctx context.Context) FirewallRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FirewallRuleTypeOutput)
}

func (e FirewallRuleType) ToFirewallRuleTypePtrOutput() FirewallRuleTypePtrOutput {
	return e.ToFirewallRuleTypePtrOutputWithContext(context.Background())
}

func (e FirewallRuleType) ToFirewallRuleTypePtrOutputWithContext(ctx context.Context) FirewallRuleTypePtrOutput {
	return FirewallRuleType(e).ToFirewallRuleTypeOutputWithContext(ctx).ToFirewallRuleTypePtrOutputWithContext(ctx)
}

func (e FirewallRuleType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FirewallRuleType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FirewallRuleType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FirewallRuleType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FirewallRuleTypeOutput struct{ *pulumi.OutputState }

func (FirewallRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRuleType)(nil)).Elem()
}

func (o FirewallRuleTypeOutput) ToFirewallRuleTypeOutput() FirewallRuleTypeOutput {
	return o
}

func (o FirewallRuleTypeOutput) ToFirewallRuleTypeOutputWithContext(ctx context.Context) FirewallRuleTypeOutput {
	return o
}

func (o FirewallRuleTypeOutput) ToFirewallRuleTypePtrOutput() FirewallRuleTypePtrOutput {
	return o.ToFirewallRuleTypePtrOutputWithContext(context.Background())
}

func (o FirewallRuleTypeOutput) ToFirewallRuleTypePtrOutputWithContext(ctx context.Context) FirewallRuleTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirewallRuleType) *FirewallRuleType {
		return &v
	}).(FirewallRuleTypePtrOutput)
}

func (o FirewallRuleTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FirewallRuleTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FirewallRuleType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FirewallRuleTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FirewallRuleTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FirewallRuleType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FirewallRuleTypePtrOutput struct{ *pulumi.OutputState }

func (FirewallRuleTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallRuleType)(nil)).Elem()
}

func (o FirewallRuleTypePtrOutput) ToFirewallRuleTypePtrOutput() FirewallRuleTypePtrOutput {
	return o
}

func (o FirewallRuleTypePtrOutput) ToFirewallRuleTypePtrOutputWithContext(ctx context.Context) FirewallRuleTypePtrOutput {
	return o
}

func (o FirewallRuleTypePtrOutput) Elem() FirewallRuleTypeOutput {
	return o.ApplyT(func(v *FirewallRuleType) FirewallRuleType {
		if v != nil {
			return *v
		}
		var ret FirewallRuleType
		return ret
	}).(FirewallRuleTypeOutput)
}

func (o FirewallRuleTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FirewallRuleTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FirewallRuleType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FirewallRuleTypeInput is an input type that accepts values of the FirewallRuleType enum
// A concrete instance of `FirewallRuleTypeInput` can be one of the following:
//
//	FirewallRuleTypeDroplet
//	FirewallRuleTypeK8s
//	FirewallRuleTypeIpAddr
//	FirewallRuleTypeTag
//	FirewallRuleTypeApp
type FirewallRuleTypeInput interface {
	pulumi.Input

	ToFirewallRuleTypeOutput() FirewallRuleTypeOutput
	ToFirewallRuleTypeOutputWithContext(context.Context) FirewallRuleTypeOutput
}

var firewallRuleTypePtrType = reflect.TypeOf((**FirewallRuleType)(nil)).Elem()

type FirewallRuleTypePtrInput interface {
	pulumi.Input

	ToFirewallRuleTypePtrOutput() FirewallRuleTypePtrOutput
	ToFirewallRuleTypePtrOutputWithContext(context.Context) FirewallRuleTypePtrOutput
}

type firewallRuleTypePtr string

func FirewallRuleTypePtr(v string) FirewallRuleTypePtrInput {
	return (*firewallRuleTypePtr)(&v)
}

func (*firewallRuleTypePtr) ElementType() reflect.Type {
	return firewallRuleTypePtrType
}

func (in *firewallRuleTypePtr) ToFirewallRuleTypePtrOutput() FirewallRuleTypePtrOutput {
	return pulumi.ToOutput(in).(FirewallRuleTypePtrOutput)
}

func (in *firewallRuleTypePtr) ToFirewallRuleTypePtrOutputWithContext(ctx context.Context) FirewallRuleTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FirewallRuleTypePtrOutput)
}

// A string specifying the desired eviction policy for the Redis cluster.
//
// - `noeviction`: Don't evict any data, returns error when memory limit is reached.
// - `allkeys_lru:` Evict any key, least recently used (LRU) first.
// - `allkeys_random`: Evict keys in a random order.
// - `volatile_lru`: Evict keys with expiration only, least recently used (LRU) first.
// - `volatile_random`: Evict keys with expiration only in a random order.
// - `volatile_ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.
type GetDatabasesEvictionPolicyPropertiesEvictionPolicy string

const (
	GetDatabasesEvictionPolicyPropertiesEvictionPolicyNoeviction     = GetDatabasesEvictionPolicyPropertiesEvictionPolicy("noeviction")
	GetDatabasesEvictionPolicyPropertiesEvictionPolicyAllkeysLru     = GetDatabasesEvictionPolicyPropertiesEvictionPolicy("allkeys_lru")
	GetDatabasesEvictionPolicyPropertiesEvictionPolicyAllkeysRandom  = GetDatabasesEvictionPolicyPropertiesEvictionPolicy("allkeys_random")
	GetDatabasesEvictionPolicyPropertiesEvictionPolicyVolatileLru    = GetDatabasesEvictionPolicyPropertiesEvictionPolicy("volatile_lru")
	GetDatabasesEvictionPolicyPropertiesEvictionPolicyVolatileRandom = GetDatabasesEvictionPolicyPropertiesEvictionPolicy("volatile_random")
	GetDatabasesEvictionPolicyPropertiesEvictionPolicyVolatileTtl    = GetDatabasesEvictionPolicyPropertiesEvictionPolicy("volatile_ttl")
)

type GetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput struct{ *pulumi.OutputState }

func (GetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesEvictionPolicyPropertiesEvictionPolicy)(nil)).Elem()
}

func (o GetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput) ToGetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput() GetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput {
	return o
}

func (o GetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput) ToGetDatabasesEvictionPolicyPropertiesEvictionPolicyOutputWithContext(ctx context.Context) GetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput {
	return o
}

func (o GetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput) ToGetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutput() GetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutput {
	return o.ToGetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutputWithContext(context.Background())
}

func (o GetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput) ToGetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutputWithContext(ctx context.Context) GetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetDatabasesEvictionPolicyPropertiesEvictionPolicy) *GetDatabasesEvictionPolicyPropertiesEvictionPolicy {
		return &v
	}).(GetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutput)
}

func (o GetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o GetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GetDatabasesEvictionPolicyPropertiesEvictionPolicy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o GetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GetDatabasesEvictionPolicyPropertiesEvictionPolicy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type GetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutput struct{ *pulumi.OutputState }

func (GetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDatabasesEvictionPolicyPropertiesEvictionPolicy)(nil)).Elem()
}

func (o GetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutput) ToGetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutput() GetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutput {
	return o
}

func (o GetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutput) ToGetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutputWithContext(ctx context.Context) GetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutput {
	return o
}

func (o GetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutput) Elem() GetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput {
	return o.ApplyT(func(v *GetDatabasesEvictionPolicyPropertiesEvictionPolicy) GetDatabasesEvictionPolicyPropertiesEvictionPolicy {
		if v != nil {
			return *v
		}
		var ret GetDatabasesEvictionPolicyPropertiesEvictionPolicy
		return ret
	}).(GetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput)
}

func (o GetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *GetDatabasesEvictionPolicyPropertiesEvictionPolicy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// The storage engine for in-memory internal temporary tables.
type MysqlInternalTmpMemStorageEngine string

const (
	MysqlInternalTmpMemStorageEngineTempTable = MysqlInternalTmpMemStorageEngine("TempTable")
	MysqlInternalTmpMemStorageEngineMemory    = MysqlInternalTmpMemStorageEngine("MEMORY")
)

type MysqlInternalTmpMemStorageEngineOutput struct{ *pulumi.OutputState }

func (MysqlInternalTmpMemStorageEngineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlInternalTmpMemStorageEngine)(nil)).Elem()
}

func (o MysqlInternalTmpMemStorageEngineOutput) ToMysqlInternalTmpMemStorageEngineOutput() MysqlInternalTmpMemStorageEngineOutput {
	return o
}

func (o MysqlInternalTmpMemStorageEngineOutput) ToMysqlInternalTmpMemStorageEngineOutputWithContext(ctx context.Context) MysqlInternalTmpMemStorageEngineOutput {
	return o
}

func (o MysqlInternalTmpMemStorageEngineOutput) ToMysqlInternalTmpMemStorageEnginePtrOutput() MysqlInternalTmpMemStorageEnginePtrOutput {
	return o.ToMysqlInternalTmpMemStorageEnginePtrOutputWithContext(context.Background())
}

func (o MysqlInternalTmpMemStorageEngineOutput) ToMysqlInternalTmpMemStorageEnginePtrOutputWithContext(ctx context.Context) MysqlInternalTmpMemStorageEnginePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlInternalTmpMemStorageEngine) *MysqlInternalTmpMemStorageEngine {
		return &v
	}).(MysqlInternalTmpMemStorageEnginePtrOutput)
}

func (o MysqlInternalTmpMemStorageEngineOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MysqlInternalTmpMemStorageEngineOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MysqlInternalTmpMemStorageEngine) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MysqlInternalTmpMemStorageEngineOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MysqlInternalTmpMemStorageEngineOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MysqlInternalTmpMemStorageEngine) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MysqlInternalTmpMemStorageEnginePtrOutput struct{ *pulumi.OutputState }

func (MysqlInternalTmpMemStorageEnginePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlInternalTmpMemStorageEngine)(nil)).Elem()
}

func (o MysqlInternalTmpMemStorageEnginePtrOutput) ToMysqlInternalTmpMemStorageEnginePtrOutput() MysqlInternalTmpMemStorageEnginePtrOutput {
	return o
}

func (o MysqlInternalTmpMemStorageEnginePtrOutput) ToMysqlInternalTmpMemStorageEnginePtrOutputWithContext(ctx context.Context) MysqlInternalTmpMemStorageEnginePtrOutput {
	return o
}

func (o MysqlInternalTmpMemStorageEnginePtrOutput) Elem() MysqlInternalTmpMemStorageEngineOutput {
	return o.ApplyT(func(v *MysqlInternalTmpMemStorageEngine) MysqlInternalTmpMemStorageEngine {
		if v != nil {
			return *v
		}
		var ret MysqlInternalTmpMemStorageEngine
		return ret
	}).(MysqlInternalTmpMemStorageEngineOutput)
}

func (o MysqlInternalTmpMemStorageEnginePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MysqlInternalTmpMemStorageEnginePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MysqlInternalTmpMemStorageEngine) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// A string specifying the authentication method to be used for connections
// to the MySQL user account. The valid values are `mysql_native_password`
// or `caching_sha2_password`. If excluded when creating a new user, the
// default for the version of MySQL in use will be used. As of MySQL 8.0, the
// default is `caching_sha2_password`.
type MysqlSettingsAuthPlugin string

const (
	MysqlSettingsAuthPluginMysqlNativePassword = MysqlSettingsAuthPlugin("mysql_native_password")
	MysqlSettingsAuthPluginCachingSha2Password = MysqlSettingsAuthPlugin("caching_sha2_password")
)

func (MysqlSettingsAuthPlugin) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSettingsAuthPlugin)(nil)).Elem()
}

func (e MysqlSettingsAuthPlugin) ToMysqlSettingsAuthPluginOutput() MysqlSettingsAuthPluginOutput {
	return pulumi.ToOutput(e).(MysqlSettingsAuthPluginOutput)
}

func (e MysqlSettingsAuthPlugin) ToMysqlSettingsAuthPluginOutputWithContext(ctx context.Context) MysqlSettingsAuthPluginOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MysqlSettingsAuthPluginOutput)
}

func (e MysqlSettingsAuthPlugin) ToMysqlSettingsAuthPluginPtrOutput() MysqlSettingsAuthPluginPtrOutput {
	return e.ToMysqlSettingsAuthPluginPtrOutputWithContext(context.Background())
}

func (e MysqlSettingsAuthPlugin) ToMysqlSettingsAuthPluginPtrOutputWithContext(ctx context.Context) MysqlSettingsAuthPluginPtrOutput {
	return MysqlSettingsAuthPlugin(e).ToMysqlSettingsAuthPluginOutputWithContext(ctx).ToMysqlSettingsAuthPluginPtrOutputWithContext(ctx)
}

func (e MysqlSettingsAuthPlugin) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MysqlSettingsAuthPlugin) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MysqlSettingsAuthPlugin) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MysqlSettingsAuthPlugin) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MysqlSettingsAuthPluginOutput struct{ *pulumi.OutputState }

func (MysqlSettingsAuthPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSettingsAuthPlugin)(nil)).Elem()
}

func (o MysqlSettingsAuthPluginOutput) ToMysqlSettingsAuthPluginOutput() MysqlSettingsAuthPluginOutput {
	return o
}

func (o MysqlSettingsAuthPluginOutput) ToMysqlSettingsAuthPluginOutputWithContext(ctx context.Context) MysqlSettingsAuthPluginOutput {
	return o
}

func (o MysqlSettingsAuthPluginOutput) ToMysqlSettingsAuthPluginPtrOutput() MysqlSettingsAuthPluginPtrOutput {
	return o.ToMysqlSettingsAuthPluginPtrOutputWithContext(context.Background())
}

func (o MysqlSettingsAuthPluginOutput) ToMysqlSettingsAuthPluginPtrOutputWithContext(ctx context.Context) MysqlSettingsAuthPluginPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlSettingsAuthPlugin) *MysqlSettingsAuthPlugin {
		return &v
	}).(MysqlSettingsAuthPluginPtrOutput)
}

func (o MysqlSettingsAuthPluginOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MysqlSettingsAuthPluginOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MysqlSettingsAuthPlugin) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MysqlSettingsAuthPluginOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MysqlSettingsAuthPluginOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MysqlSettingsAuthPlugin) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MysqlSettingsAuthPluginPtrOutput struct{ *pulumi.OutputState }

func (MysqlSettingsAuthPluginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlSettingsAuthPlugin)(nil)).Elem()
}

func (o MysqlSettingsAuthPluginPtrOutput) ToMysqlSettingsAuthPluginPtrOutput() MysqlSettingsAuthPluginPtrOutput {
	return o
}

func (o MysqlSettingsAuthPluginPtrOutput) ToMysqlSettingsAuthPluginPtrOutputWithContext(ctx context.Context) MysqlSettingsAuthPluginPtrOutput {
	return o
}

func (o MysqlSettingsAuthPluginPtrOutput) Elem() MysqlSettingsAuthPluginOutput {
	return o.ApplyT(func(v *MysqlSettingsAuthPlugin) MysqlSettingsAuthPlugin {
		if v != nil {
			return *v
		}
		var ret MysqlSettingsAuthPlugin
		return ret
	}).(MysqlSettingsAuthPluginOutput)
}

func (o MysqlSettingsAuthPluginPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MysqlSettingsAuthPluginPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MysqlSettingsAuthPlugin) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MysqlSettingsAuthPluginInput is an input type that accepts values of the MysqlSettingsAuthPlugin enum
// A concrete instance of `MysqlSettingsAuthPluginInput` can be one of the following:
//
//	MysqlSettingsAuthPluginMysqlNativePassword
//	MysqlSettingsAuthPluginCachingSha2Password
type MysqlSettingsAuthPluginInput interface {
	pulumi.Input

	ToMysqlSettingsAuthPluginOutput() MysqlSettingsAuthPluginOutput
	ToMysqlSettingsAuthPluginOutputWithContext(context.Context) MysqlSettingsAuthPluginOutput
}

var mysqlSettingsAuthPluginPtrType = reflect.TypeOf((**MysqlSettingsAuthPlugin)(nil)).Elem()

type MysqlSettingsAuthPluginPtrInput interface {
	pulumi.Input

	ToMysqlSettingsAuthPluginPtrOutput() MysqlSettingsAuthPluginPtrOutput
	ToMysqlSettingsAuthPluginPtrOutputWithContext(context.Context) MysqlSettingsAuthPluginPtrOutput
}

type mysqlSettingsAuthPluginPtr string

func MysqlSettingsAuthPluginPtr(v string) MysqlSettingsAuthPluginPtrInput {
	return (*mysqlSettingsAuthPluginPtr)(&v)
}

func (*mysqlSettingsAuthPluginPtr) ElementType() reflect.Type {
	return mysqlSettingsAuthPluginPtrType
}

func (in *mysqlSettingsAuthPluginPtr) ToMysqlSettingsAuthPluginPtrOutput() MysqlSettingsAuthPluginPtrOutput {
	return pulumi.ToOutput(in).(MysqlSettingsAuthPluginPtrOutput)
}

func (in *mysqlSettingsAuthPluginPtr) ToMysqlSettingsAuthPluginPtrOutputWithContext(ctx context.Context) MysqlSettingsAuthPluginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MysqlSettingsAuthPluginPtrOutput)
}

// The current status of the migration.
type OnlineMigrationStatus string

const (
	OnlineMigrationStatusRunning  = OnlineMigrationStatus("running")
	OnlineMigrationStatusCanceled = OnlineMigrationStatus("canceled")
	OnlineMigrationStatusError    = OnlineMigrationStatus("error")
	OnlineMigrationStatusDone     = OnlineMigrationStatus("done")
)

type OnlineMigrationStatusOutput struct{ *pulumi.OutputState }

func (OnlineMigrationStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineMigrationStatus)(nil)).Elem()
}

func (o OnlineMigrationStatusOutput) ToOnlineMigrationStatusOutput() OnlineMigrationStatusOutput {
	return o
}

func (o OnlineMigrationStatusOutput) ToOnlineMigrationStatusOutputWithContext(ctx context.Context) OnlineMigrationStatusOutput {
	return o
}

func (o OnlineMigrationStatusOutput) ToOnlineMigrationStatusPtrOutput() OnlineMigrationStatusPtrOutput {
	return o.ToOnlineMigrationStatusPtrOutputWithContext(context.Background())
}

func (o OnlineMigrationStatusOutput) ToOnlineMigrationStatusPtrOutputWithContext(ctx context.Context) OnlineMigrationStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OnlineMigrationStatus) *OnlineMigrationStatus {
		return &v
	}).(OnlineMigrationStatusPtrOutput)
}

func (o OnlineMigrationStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OnlineMigrationStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OnlineMigrationStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OnlineMigrationStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OnlineMigrationStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OnlineMigrationStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OnlineMigrationStatusPtrOutput struct{ *pulumi.OutputState }

func (OnlineMigrationStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnlineMigrationStatus)(nil)).Elem()
}

func (o OnlineMigrationStatusPtrOutput) ToOnlineMigrationStatusPtrOutput() OnlineMigrationStatusPtrOutput {
	return o
}

func (o OnlineMigrationStatusPtrOutput) ToOnlineMigrationStatusPtrOutputWithContext(ctx context.Context) OnlineMigrationStatusPtrOutput {
	return o
}

func (o OnlineMigrationStatusPtrOutput) Elem() OnlineMigrationStatusOutput {
	return o.ApplyT(func(v *OnlineMigrationStatus) OnlineMigrationStatus {
		if v != nil {
			return *v
		}
		var ret OnlineMigrationStatus
		return ret
	}).(OnlineMigrationStatusOutput)
}

func (o OnlineMigrationStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OnlineMigrationStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OnlineMigrationStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PGBouncer pool mode
type PgbouncerAutodbPoolMode string

const (
	PgbouncerAutodbPoolModeSession     = PgbouncerAutodbPoolMode("session")
	PgbouncerAutodbPoolModeTransaction = PgbouncerAutodbPoolMode("transaction")
	PgbouncerAutodbPoolModeStatement   = PgbouncerAutodbPoolMode("statement")
)

type PgbouncerAutodbPoolModeOutput struct{ *pulumi.OutputState }

func (PgbouncerAutodbPoolModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PgbouncerAutodbPoolMode)(nil)).Elem()
}

func (o PgbouncerAutodbPoolModeOutput) ToPgbouncerAutodbPoolModeOutput() PgbouncerAutodbPoolModeOutput {
	return o
}

func (o PgbouncerAutodbPoolModeOutput) ToPgbouncerAutodbPoolModeOutputWithContext(ctx context.Context) PgbouncerAutodbPoolModeOutput {
	return o
}

func (o PgbouncerAutodbPoolModeOutput) ToPgbouncerAutodbPoolModePtrOutput() PgbouncerAutodbPoolModePtrOutput {
	return o.ToPgbouncerAutodbPoolModePtrOutputWithContext(context.Background())
}

func (o PgbouncerAutodbPoolModeOutput) ToPgbouncerAutodbPoolModePtrOutputWithContext(ctx context.Context) PgbouncerAutodbPoolModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PgbouncerAutodbPoolMode) *PgbouncerAutodbPoolMode {
		return &v
	}).(PgbouncerAutodbPoolModePtrOutput)
}

func (o PgbouncerAutodbPoolModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PgbouncerAutodbPoolModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PgbouncerAutodbPoolMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PgbouncerAutodbPoolModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PgbouncerAutodbPoolModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PgbouncerAutodbPoolMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PgbouncerAutodbPoolModePtrOutput struct{ *pulumi.OutputState }

func (PgbouncerAutodbPoolModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PgbouncerAutodbPoolMode)(nil)).Elem()
}

func (o PgbouncerAutodbPoolModePtrOutput) ToPgbouncerAutodbPoolModePtrOutput() PgbouncerAutodbPoolModePtrOutput {
	return o
}

func (o PgbouncerAutodbPoolModePtrOutput) ToPgbouncerAutodbPoolModePtrOutputWithContext(ctx context.Context) PgbouncerAutodbPoolModePtrOutput {
	return o
}

func (o PgbouncerAutodbPoolModePtrOutput) Elem() PgbouncerAutodbPoolModeOutput {
	return o.ApplyT(func(v *PgbouncerAutodbPoolMode) PgbouncerAutodbPoolMode {
		if v != nil {
			return *v
		}
		var ret PgbouncerAutodbPoolMode
		return ret
	}).(PgbouncerAutodbPoolModeOutput)
}

func (o PgbouncerAutodbPoolModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PgbouncerAutodbPoolModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PgbouncerAutodbPoolMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// Enum of parameters to ignore when given in startup packet.
type PgbouncerIgnoreStartupParametersItem string

const (
	PgbouncerIgnoreStartupParametersItemExtraFloatDigits = PgbouncerIgnoreStartupParametersItem("extra_float_digits")
	PgbouncerIgnoreStartupParametersItemSearchPath       = PgbouncerIgnoreStartupParametersItem("search_path")
)

type PgbouncerIgnoreStartupParametersItemOutput struct{ *pulumi.OutputState }

func (PgbouncerIgnoreStartupParametersItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PgbouncerIgnoreStartupParametersItem)(nil)).Elem()
}

func (o PgbouncerIgnoreStartupParametersItemOutput) ToPgbouncerIgnoreStartupParametersItemOutput() PgbouncerIgnoreStartupParametersItemOutput {
	return o
}

func (o PgbouncerIgnoreStartupParametersItemOutput) ToPgbouncerIgnoreStartupParametersItemOutputWithContext(ctx context.Context) PgbouncerIgnoreStartupParametersItemOutput {
	return o
}

func (o PgbouncerIgnoreStartupParametersItemOutput) ToPgbouncerIgnoreStartupParametersItemPtrOutput() PgbouncerIgnoreStartupParametersItemPtrOutput {
	return o.ToPgbouncerIgnoreStartupParametersItemPtrOutputWithContext(context.Background())
}

func (o PgbouncerIgnoreStartupParametersItemOutput) ToPgbouncerIgnoreStartupParametersItemPtrOutputWithContext(ctx context.Context) PgbouncerIgnoreStartupParametersItemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PgbouncerIgnoreStartupParametersItem) *PgbouncerIgnoreStartupParametersItem {
		return &v
	}).(PgbouncerIgnoreStartupParametersItemPtrOutput)
}

func (o PgbouncerIgnoreStartupParametersItemOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PgbouncerIgnoreStartupParametersItemOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PgbouncerIgnoreStartupParametersItem) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PgbouncerIgnoreStartupParametersItemOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PgbouncerIgnoreStartupParametersItemOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PgbouncerIgnoreStartupParametersItem) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PgbouncerIgnoreStartupParametersItemPtrOutput struct{ *pulumi.OutputState }

func (PgbouncerIgnoreStartupParametersItemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PgbouncerIgnoreStartupParametersItem)(nil)).Elem()
}

func (o PgbouncerIgnoreStartupParametersItemPtrOutput) ToPgbouncerIgnoreStartupParametersItemPtrOutput() PgbouncerIgnoreStartupParametersItemPtrOutput {
	return o
}

func (o PgbouncerIgnoreStartupParametersItemPtrOutput) ToPgbouncerIgnoreStartupParametersItemPtrOutputWithContext(ctx context.Context) PgbouncerIgnoreStartupParametersItemPtrOutput {
	return o
}

func (o PgbouncerIgnoreStartupParametersItemPtrOutput) Elem() PgbouncerIgnoreStartupParametersItemOutput {
	return o.ApplyT(func(v *PgbouncerIgnoreStartupParametersItem) PgbouncerIgnoreStartupParametersItem {
		if v != nil {
			return *v
		}
		var ret PgbouncerIgnoreStartupParametersItem
		return ret
	}).(PgbouncerIgnoreStartupParametersItemOutput)
}

func (o PgbouncerIgnoreStartupParametersItemPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PgbouncerIgnoreStartupParametersItemPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PgbouncerIgnoreStartupParametersItem) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PgbouncerIgnoreStartupParametersItemArrayOutput struct{ *pulumi.OutputState }

func (PgbouncerIgnoreStartupParametersItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PgbouncerIgnoreStartupParametersItem)(nil)).Elem()
}

func (o PgbouncerIgnoreStartupParametersItemArrayOutput) ToPgbouncerIgnoreStartupParametersItemArrayOutput() PgbouncerIgnoreStartupParametersItemArrayOutput {
	return o
}

func (o PgbouncerIgnoreStartupParametersItemArrayOutput) ToPgbouncerIgnoreStartupParametersItemArrayOutputWithContext(ctx context.Context) PgbouncerIgnoreStartupParametersItemArrayOutput {
	return o
}

func (o PgbouncerIgnoreStartupParametersItemArrayOutput) Index(i pulumi.IntInput) PgbouncerIgnoreStartupParametersItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PgbouncerIgnoreStartupParametersItem {
		return vs[0].([]PgbouncerIgnoreStartupParametersItem)[vs[1].(int)]
	}).(PgbouncerIgnoreStartupParametersItemOutput)
}

// Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
type PostgresDefaultToastCompression string

const (
	PostgresDefaultToastCompressionLz4  = PostgresDefaultToastCompression("lz4")
	PostgresDefaultToastCompressionPglz = PostgresDefaultToastCompression("pglz")
)

type PostgresDefaultToastCompressionOutput struct{ *pulumi.OutputState }

func (PostgresDefaultToastCompressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresDefaultToastCompression)(nil)).Elem()
}

func (o PostgresDefaultToastCompressionOutput) ToPostgresDefaultToastCompressionOutput() PostgresDefaultToastCompressionOutput {
	return o
}

func (o PostgresDefaultToastCompressionOutput) ToPostgresDefaultToastCompressionOutputWithContext(ctx context.Context) PostgresDefaultToastCompressionOutput {
	return o
}

func (o PostgresDefaultToastCompressionOutput) ToPostgresDefaultToastCompressionPtrOutput() PostgresDefaultToastCompressionPtrOutput {
	return o.ToPostgresDefaultToastCompressionPtrOutputWithContext(context.Background())
}

func (o PostgresDefaultToastCompressionOutput) ToPostgresDefaultToastCompressionPtrOutputWithContext(ctx context.Context) PostgresDefaultToastCompressionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresDefaultToastCompression) *PostgresDefaultToastCompression {
		return &v
	}).(PostgresDefaultToastCompressionPtrOutput)
}

func (o PostgresDefaultToastCompressionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PostgresDefaultToastCompressionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresDefaultToastCompression) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PostgresDefaultToastCompressionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresDefaultToastCompressionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresDefaultToastCompression) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PostgresDefaultToastCompressionPtrOutput struct{ *pulumi.OutputState }

func (PostgresDefaultToastCompressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresDefaultToastCompression)(nil)).Elem()
}

func (o PostgresDefaultToastCompressionPtrOutput) ToPostgresDefaultToastCompressionPtrOutput() PostgresDefaultToastCompressionPtrOutput {
	return o
}

func (o PostgresDefaultToastCompressionPtrOutput) ToPostgresDefaultToastCompressionPtrOutputWithContext(ctx context.Context) PostgresDefaultToastCompressionPtrOutput {
	return o
}

func (o PostgresDefaultToastCompressionPtrOutput) Elem() PostgresDefaultToastCompressionOutput {
	return o.ApplyT(func(v *PostgresDefaultToastCompression) PostgresDefaultToastCompression {
		if v != nil {
			return *v
		}
		var ret PostgresDefaultToastCompression
		return ret
	}).(PostgresDefaultToastCompressionOutput)
}

func (o PostgresDefaultToastCompressionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresDefaultToastCompressionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PostgresDefaultToastCompression) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// Controls the amount of detail written in the server log for each message that is logged.
type PostgresLogErrorVerbosity string

const (
	PostgresLogErrorVerbosityTerse   = PostgresLogErrorVerbosity("TERSE")
	PostgresLogErrorVerbosityDefault = PostgresLogErrorVerbosity("DEFAULT")
	PostgresLogErrorVerbosityVerbose = PostgresLogErrorVerbosity("VERBOSE")
)

type PostgresLogErrorVerbosityOutput struct{ *pulumi.OutputState }

func (PostgresLogErrorVerbosityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresLogErrorVerbosity)(nil)).Elem()
}

func (o PostgresLogErrorVerbosityOutput) ToPostgresLogErrorVerbosityOutput() PostgresLogErrorVerbosityOutput {
	return o
}

func (o PostgresLogErrorVerbosityOutput) ToPostgresLogErrorVerbosityOutputWithContext(ctx context.Context) PostgresLogErrorVerbosityOutput {
	return o
}

func (o PostgresLogErrorVerbosityOutput) ToPostgresLogErrorVerbosityPtrOutput() PostgresLogErrorVerbosityPtrOutput {
	return o.ToPostgresLogErrorVerbosityPtrOutputWithContext(context.Background())
}

func (o PostgresLogErrorVerbosityOutput) ToPostgresLogErrorVerbosityPtrOutputWithContext(ctx context.Context) PostgresLogErrorVerbosityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresLogErrorVerbosity) *PostgresLogErrorVerbosity {
		return &v
	}).(PostgresLogErrorVerbosityPtrOutput)
}

func (o PostgresLogErrorVerbosityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PostgresLogErrorVerbosityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresLogErrorVerbosity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PostgresLogErrorVerbosityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresLogErrorVerbosityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresLogErrorVerbosity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PostgresLogErrorVerbosityPtrOutput struct{ *pulumi.OutputState }

func (PostgresLogErrorVerbosityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresLogErrorVerbosity)(nil)).Elem()
}

func (o PostgresLogErrorVerbosityPtrOutput) ToPostgresLogErrorVerbosityPtrOutput() PostgresLogErrorVerbosityPtrOutput {
	return o
}

func (o PostgresLogErrorVerbosityPtrOutput) ToPostgresLogErrorVerbosityPtrOutputWithContext(ctx context.Context) PostgresLogErrorVerbosityPtrOutput {
	return o
}

func (o PostgresLogErrorVerbosityPtrOutput) Elem() PostgresLogErrorVerbosityOutput {
	return o.ApplyT(func(v *PostgresLogErrorVerbosity) PostgresLogErrorVerbosity {
		if v != nil {
			return *v
		}
		var ret PostgresLogErrorVerbosity
		return ret
	}).(PostgresLogErrorVerbosityOutput)
}

func (o PostgresLogErrorVerbosityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresLogErrorVerbosityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PostgresLogErrorVerbosity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// Selects one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze, etc.
type PostgresLogLinePrefix string

const (
	PostgresLogLinePrefixPidpuserudbdappaclienth = PostgresLogLinePrefix("pid=%p,user=%u,db=%d,app=%a,client=%h")
	PostgresLogLinePrefixMpquserudbdappa         = PostgresLogLinePrefix("%m [%p] %q[user=%u,db=%d,app=%a]")
	PostgresLogLinePrefixTpl1Userudbdappaclienth = PostgresLogLinePrefix("%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h")
)

type PostgresLogLinePrefixOutput struct{ *pulumi.OutputState }

func (PostgresLogLinePrefixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresLogLinePrefix)(nil)).Elem()
}

func (o PostgresLogLinePrefixOutput) ToPostgresLogLinePrefixOutput() PostgresLogLinePrefixOutput {
	return o
}

func (o PostgresLogLinePrefixOutput) ToPostgresLogLinePrefixOutputWithContext(ctx context.Context) PostgresLogLinePrefixOutput {
	return o
}

func (o PostgresLogLinePrefixOutput) ToPostgresLogLinePrefixPtrOutput() PostgresLogLinePrefixPtrOutput {
	return o.ToPostgresLogLinePrefixPtrOutputWithContext(context.Background())
}

func (o PostgresLogLinePrefixOutput) ToPostgresLogLinePrefixPtrOutputWithContext(ctx context.Context) PostgresLogLinePrefixPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresLogLinePrefix) *PostgresLogLinePrefix {
		return &v
	}).(PostgresLogLinePrefixPtrOutput)
}

func (o PostgresLogLinePrefixOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PostgresLogLinePrefixOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresLogLinePrefix) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PostgresLogLinePrefixOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresLogLinePrefixOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresLogLinePrefix) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PostgresLogLinePrefixPtrOutput struct{ *pulumi.OutputState }

func (PostgresLogLinePrefixPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresLogLinePrefix)(nil)).Elem()
}

func (o PostgresLogLinePrefixPtrOutput) ToPostgresLogLinePrefixPtrOutput() PostgresLogLinePrefixPtrOutput {
	return o
}

func (o PostgresLogLinePrefixPtrOutput) ToPostgresLogLinePrefixPtrOutputWithContext(ctx context.Context) PostgresLogLinePrefixPtrOutput {
	return o
}

func (o PostgresLogLinePrefixPtrOutput) Elem() PostgresLogLinePrefixOutput {
	return o.ApplyT(func(v *PostgresLogLinePrefix) PostgresLogLinePrefix {
		if v != nil {
			return *v
		}
		var ret PostgresLogLinePrefix
		return ret
	}).(PostgresLogLinePrefixOutput)
}

func (o PostgresLogLinePrefixPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresLogLinePrefixPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PostgresLogLinePrefix) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// Controls which statements are counted. Specify 'top' to track top-level statements (those issued directly by clients), 'all' to also track nested statements (such as statements invoked within functions), or 'none' to disable statement statistics collection. The default value is top.
type PostgresPgStatStatementsTrack string

const (
	PostgresPgStatStatementsTrackAll  = PostgresPgStatStatementsTrack("all")
	PostgresPgStatStatementsTrackTop  = PostgresPgStatStatementsTrack("top")
	PostgresPgStatStatementsTrackNone = PostgresPgStatStatementsTrack("none")
)

type PostgresPgStatStatementsTrackOutput struct{ *pulumi.OutputState }

func (PostgresPgStatStatementsTrackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresPgStatStatementsTrack)(nil)).Elem()
}

func (o PostgresPgStatStatementsTrackOutput) ToPostgresPgStatStatementsTrackOutput() PostgresPgStatStatementsTrackOutput {
	return o
}

func (o PostgresPgStatStatementsTrackOutput) ToPostgresPgStatStatementsTrackOutputWithContext(ctx context.Context) PostgresPgStatStatementsTrackOutput {
	return o
}

func (o PostgresPgStatStatementsTrackOutput) ToPostgresPgStatStatementsTrackPtrOutput() PostgresPgStatStatementsTrackPtrOutput {
	return o.ToPostgresPgStatStatementsTrackPtrOutputWithContext(context.Background())
}

func (o PostgresPgStatStatementsTrackOutput) ToPostgresPgStatStatementsTrackPtrOutputWithContext(ctx context.Context) PostgresPgStatStatementsTrackPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresPgStatStatementsTrack) *PostgresPgStatStatementsTrack {
		return &v
	}).(PostgresPgStatStatementsTrackPtrOutput)
}

func (o PostgresPgStatStatementsTrackOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PostgresPgStatStatementsTrackOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresPgStatStatementsTrack) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PostgresPgStatStatementsTrackOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresPgStatStatementsTrackOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresPgStatStatementsTrack) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PostgresPgStatStatementsTrackPtrOutput struct{ *pulumi.OutputState }

func (PostgresPgStatStatementsTrackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresPgStatStatementsTrack)(nil)).Elem()
}

func (o PostgresPgStatStatementsTrackPtrOutput) ToPostgresPgStatStatementsTrackPtrOutput() PostgresPgStatStatementsTrackPtrOutput {
	return o
}

func (o PostgresPgStatStatementsTrackPtrOutput) ToPostgresPgStatStatementsTrackPtrOutputWithContext(ctx context.Context) PostgresPgStatStatementsTrackPtrOutput {
	return o
}

func (o PostgresPgStatStatementsTrackPtrOutput) Elem() PostgresPgStatStatementsTrackOutput {
	return o.ApplyT(func(v *PostgresPgStatStatementsTrack) PostgresPgStatStatementsTrack {
		if v != nil {
			return *v
		}
		var ret PostgresPgStatStatementsTrack
		return ret
	}).(PostgresPgStatStatementsTrackOutput)
}

func (o PostgresPgStatStatementsTrackPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresPgStatStatementsTrackPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PostgresPgStatStatementsTrack) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// Synchronous replication type. Note that the service plan also needs to support synchronous replication.
type PostgresSynchronousReplication string

const (
	PostgresSynchronousReplicationOff    = PostgresSynchronousReplication("off")
	PostgresSynchronousReplicationQuorum = PostgresSynchronousReplication("quorum")
)

type PostgresSynchronousReplicationOutput struct{ *pulumi.OutputState }

func (PostgresSynchronousReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresSynchronousReplication)(nil)).Elem()
}

func (o PostgresSynchronousReplicationOutput) ToPostgresSynchronousReplicationOutput() PostgresSynchronousReplicationOutput {
	return o
}

func (o PostgresSynchronousReplicationOutput) ToPostgresSynchronousReplicationOutputWithContext(ctx context.Context) PostgresSynchronousReplicationOutput {
	return o
}

func (o PostgresSynchronousReplicationOutput) ToPostgresSynchronousReplicationPtrOutput() PostgresSynchronousReplicationPtrOutput {
	return o.ToPostgresSynchronousReplicationPtrOutputWithContext(context.Background())
}

func (o PostgresSynchronousReplicationOutput) ToPostgresSynchronousReplicationPtrOutputWithContext(ctx context.Context) PostgresSynchronousReplicationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresSynchronousReplication) *PostgresSynchronousReplication {
		return &v
	}).(PostgresSynchronousReplicationPtrOutput)
}

func (o PostgresSynchronousReplicationOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PostgresSynchronousReplicationOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresSynchronousReplication) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PostgresSynchronousReplicationOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresSynchronousReplicationOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresSynchronousReplication) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PostgresSynchronousReplicationPtrOutput struct{ *pulumi.OutputState }

func (PostgresSynchronousReplicationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresSynchronousReplication)(nil)).Elem()
}

func (o PostgresSynchronousReplicationPtrOutput) ToPostgresSynchronousReplicationPtrOutput() PostgresSynchronousReplicationPtrOutput {
	return o
}

func (o PostgresSynchronousReplicationPtrOutput) ToPostgresSynchronousReplicationPtrOutputWithContext(ctx context.Context) PostgresSynchronousReplicationPtrOutput {
	return o
}

func (o PostgresSynchronousReplicationPtrOutput) Elem() PostgresSynchronousReplicationOutput {
	return o.ApplyT(func(v *PostgresSynchronousReplication) PostgresSynchronousReplication {
		if v != nil {
			return *v
		}
		var ret PostgresSynchronousReplication
		return ret
	}).(PostgresSynchronousReplicationOutput)
}

func (o PostgresSynchronousReplicationPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresSynchronousReplicationPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PostgresSynchronousReplication) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// Record commit time of transactions.
type PostgresTrackCommitTimestamp string

const (
	PostgresTrackCommitTimestampOff = PostgresTrackCommitTimestamp("off")
	PostgresTrackCommitTimestampOn  = PostgresTrackCommitTimestamp("on")
)

type PostgresTrackCommitTimestampOutput struct{ *pulumi.OutputState }

func (PostgresTrackCommitTimestampOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresTrackCommitTimestamp)(nil)).Elem()
}

func (o PostgresTrackCommitTimestampOutput) ToPostgresTrackCommitTimestampOutput() PostgresTrackCommitTimestampOutput {
	return o
}

func (o PostgresTrackCommitTimestampOutput) ToPostgresTrackCommitTimestampOutputWithContext(ctx context.Context) PostgresTrackCommitTimestampOutput {
	return o
}

func (o PostgresTrackCommitTimestampOutput) ToPostgresTrackCommitTimestampPtrOutput() PostgresTrackCommitTimestampPtrOutput {
	return o.ToPostgresTrackCommitTimestampPtrOutputWithContext(context.Background())
}

func (o PostgresTrackCommitTimestampOutput) ToPostgresTrackCommitTimestampPtrOutputWithContext(ctx context.Context) PostgresTrackCommitTimestampPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresTrackCommitTimestamp) *PostgresTrackCommitTimestamp {
		return &v
	}).(PostgresTrackCommitTimestampPtrOutput)
}

func (o PostgresTrackCommitTimestampOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PostgresTrackCommitTimestampOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresTrackCommitTimestamp) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PostgresTrackCommitTimestampOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresTrackCommitTimestampOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresTrackCommitTimestamp) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PostgresTrackCommitTimestampPtrOutput struct{ *pulumi.OutputState }

func (PostgresTrackCommitTimestampPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresTrackCommitTimestamp)(nil)).Elem()
}

func (o PostgresTrackCommitTimestampPtrOutput) ToPostgresTrackCommitTimestampPtrOutput() PostgresTrackCommitTimestampPtrOutput {
	return o
}

func (o PostgresTrackCommitTimestampPtrOutput) ToPostgresTrackCommitTimestampPtrOutputWithContext(ctx context.Context) PostgresTrackCommitTimestampPtrOutput {
	return o
}

func (o PostgresTrackCommitTimestampPtrOutput) Elem() PostgresTrackCommitTimestampOutput {
	return o.ApplyT(func(v *PostgresTrackCommitTimestamp) PostgresTrackCommitTimestamp {
		if v != nil {
			return *v
		}
		var ret PostgresTrackCommitTimestamp
		return ret
	}).(PostgresTrackCommitTimestampOutput)
}

func (o PostgresTrackCommitTimestampPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresTrackCommitTimestampPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PostgresTrackCommitTimestamp) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// Enables tracking of function call counts and time used.
type PostgresTrackFunctions string

const (
	PostgresTrackFunctionsAll  = PostgresTrackFunctions("all")
	PostgresTrackFunctionsPl   = PostgresTrackFunctions("pl")
	PostgresTrackFunctionsNone = PostgresTrackFunctions("none")
)

type PostgresTrackFunctionsOutput struct{ *pulumi.OutputState }

func (PostgresTrackFunctionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresTrackFunctions)(nil)).Elem()
}

func (o PostgresTrackFunctionsOutput) ToPostgresTrackFunctionsOutput() PostgresTrackFunctionsOutput {
	return o
}

func (o PostgresTrackFunctionsOutput) ToPostgresTrackFunctionsOutputWithContext(ctx context.Context) PostgresTrackFunctionsOutput {
	return o
}

func (o PostgresTrackFunctionsOutput) ToPostgresTrackFunctionsPtrOutput() PostgresTrackFunctionsPtrOutput {
	return o.ToPostgresTrackFunctionsPtrOutputWithContext(context.Background())
}

func (o PostgresTrackFunctionsOutput) ToPostgresTrackFunctionsPtrOutputWithContext(ctx context.Context) PostgresTrackFunctionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresTrackFunctions) *PostgresTrackFunctions {
		return &v
	}).(PostgresTrackFunctionsPtrOutput)
}

func (o PostgresTrackFunctionsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PostgresTrackFunctionsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresTrackFunctions) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PostgresTrackFunctionsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresTrackFunctionsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresTrackFunctions) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PostgresTrackFunctionsPtrOutput struct{ *pulumi.OutputState }

func (PostgresTrackFunctionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresTrackFunctions)(nil)).Elem()
}

func (o PostgresTrackFunctionsPtrOutput) ToPostgresTrackFunctionsPtrOutput() PostgresTrackFunctionsPtrOutput {
	return o
}

func (o PostgresTrackFunctionsPtrOutput) ToPostgresTrackFunctionsPtrOutputWithContext(ctx context.Context) PostgresTrackFunctionsPtrOutput {
	return o
}

func (o PostgresTrackFunctionsPtrOutput) Elem() PostgresTrackFunctionsOutput {
	return o.ApplyT(func(v *PostgresTrackFunctions) PostgresTrackFunctions {
		if v != nil {
			return *v
		}
		var ret PostgresTrackFunctions
		return ret
	}).(PostgresTrackFunctionsOutput)
}

func (o PostgresTrackFunctionsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresTrackFunctionsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PostgresTrackFunctions) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
type PostgresTrackIoTiming string

const (
	PostgresTrackIoTimingOff = PostgresTrackIoTiming("off")
	PostgresTrackIoTimingOn  = PostgresTrackIoTiming("on")
)

type PostgresTrackIoTimingOutput struct{ *pulumi.OutputState }

func (PostgresTrackIoTimingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresTrackIoTiming)(nil)).Elem()
}

func (o PostgresTrackIoTimingOutput) ToPostgresTrackIoTimingOutput() PostgresTrackIoTimingOutput {
	return o
}

func (o PostgresTrackIoTimingOutput) ToPostgresTrackIoTimingOutputWithContext(ctx context.Context) PostgresTrackIoTimingOutput {
	return o
}

func (o PostgresTrackIoTimingOutput) ToPostgresTrackIoTimingPtrOutput() PostgresTrackIoTimingPtrOutput {
	return o.ToPostgresTrackIoTimingPtrOutputWithContext(context.Background())
}

func (o PostgresTrackIoTimingOutput) ToPostgresTrackIoTimingPtrOutputWithContext(ctx context.Context) PostgresTrackIoTimingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresTrackIoTiming) *PostgresTrackIoTiming {
		return &v
	}).(PostgresTrackIoTimingPtrOutput)
}

func (o PostgresTrackIoTimingOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PostgresTrackIoTimingOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresTrackIoTiming) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PostgresTrackIoTimingOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresTrackIoTimingOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresTrackIoTiming) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PostgresTrackIoTimingPtrOutput struct{ *pulumi.OutputState }

func (PostgresTrackIoTimingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresTrackIoTiming)(nil)).Elem()
}

func (o PostgresTrackIoTimingPtrOutput) ToPostgresTrackIoTimingPtrOutput() PostgresTrackIoTimingPtrOutput {
	return o
}

func (o PostgresTrackIoTimingPtrOutput) ToPostgresTrackIoTimingPtrOutputWithContext(ctx context.Context) PostgresTrackIoTimingPtrOutput {
	return o
}

func (o PostgresTrackIoTimingPtrOutput) Elem() PostgresTrackIoTimingOutput {
	return o.ApplyT(func(v *PostgresTrackIoTiming) PostgresTrackIoTiming {
		if v != nil {
			return *v
		}
		var ret PostgresTrackIoTiming
		return ret
	}).(PostgresTrackIoTimingOutput)
}

func (o PostgresTrackIoTimingPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresTrackIoTimingPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PostgresTrackIoTiming) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn't affect Redis configuration acl-pubsub-default.
type RedisRedisAclChannelsDefault string

const (
	RedisRedisAclChannelsDefaultAllchannels   = RedisRedisAclChannelsDefault("allchannels")
	RedisRedisAclChannelsDefaultResetchannels = RedisRedisAclChannelsDefault("resetchannels")
)

type RedisRedisAclChannelsDefaultOutput struct{ *pulumi.OutputState }

func (RedisRedisAclChannelsDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisRedisAclChannelsDefault)(nil)).Elem()
}

func (o RedisRedisAclChannelsDefaultOutput) ToRedisRedisAclChannelsDefaultOutput() RedisRedisAclChannelsDefaultOutput {
	return o
}

func (o RedisRedisAclChannelsDefaultOutput) ToRedisRedisAclChannelsDefaultOutputWithContext(ctx context.Context) RedisRedisAclChannelsDefaultOutput {
	return o
}

func (o RedisRedisAclChannelsDefaultOutput) ToRedisRedisAclChannelsDefaultPtrOutput() RedisRedisAclChannelsDefaultPtrOutput {
	return o.ToRedisRedisAclChannelsDefaultPtrOutputWithContext(context.Background())
}

func (o RedisRedisAclChannelsDefaultOutput) ToRedisRedisAclChannelsDefaultPtrOutputWithContext(ctx context.Context) RedisRedisAclChannelsDefaultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisRedisAclChannelsDefault) *RedisRedisAclChannelsDefault {
		return &v
	}).(RedisRedisAclChannelsDefaultPtrOutput)
}

func (o RedisRedisAclChannelsDefaultOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RedisRedisAclChannelsDefaultOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RedisRedisAclChannelsDefault) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RedisRedisAclChannelsDefaultOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RedisRedisAclChannelsDefaultOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RedisRedisAclChannelsDefault) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RedisRedisAclChannelsDefaultPtrOutput struct{ *pulumi.OutputState }

func (RedisRedisAclChannelsDefaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisRedisAclChannelsDefault)(nil)).Elem()
}

func (o RedisRedisAclChannelsDefaultPtrOutput) ToRedisRedisAclChannelsDefaultPtrOutput() RedisRedisAclChannelsDefaultPtrOutput {
	return o
}

func (o RedisRedisAclChannelsDefaultPtrOutput) ToRedisRedisAclChannelsDefaultPtrOutputWithContext(ctx context.Context) RedisRedisAclChannelsDefaultPtrOutput {
	return o
}

func (o RedisRedisAclChannelsDefaultPtrOutput) Elem() RedisRedisAclChannelsDefaultOutput {
	return o.ApplyT(func(v *RedisRedisAclChannelsDefault) RedisRedisAclChannelsDefault {
		if v != nil {
			return *v
		}
		var ret RedisRedisAclChannelsDefault
		return ret
	}).(RedisRedisAclChannelsDefaultOutput)
}

func (o RedisRedisAclChannelsDefaultPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RedisRedisAclChannelsDefaultPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RedisRedisAclChannelsDefault) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// A string specifying the desired eviction policy for the Redis cluster.
//
// - `noeviction`: Don't evict any data, returns error when memory limit is reached.
// - `allkeys_lru:` Evict any key, least recently used (LRU) first.
// - `allkeys_random`: Evict keys in a random order.
// - `volatile_lru`: Evict keys with expiration only, least recently used (LRU) first.
// - `volatile_random`: Evict keys with expiration only in a random order.
// - `volatile_ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.
type RedisRedisMaxmemoryPolicy string

const (
	RedisRedisMaxmemoryPolicyNoeviction     = RedisRedisMaxmemoryPolicy("noeviction")
	RedisRedisMaxmemoryPolicyAllkeysLru     = RedisRedisMaxmemoryPolicy("allkeys_lru")
	RedisRedisMaxmemoryPolicyAllkeysRandom  = RedisRedisMaxmemoryPolicy("allkeys_random")
	RedisRedisMaxmemoryPolicyVolatileLru    = RedisRedisMaxmemoryPolicy("volatile_lru")
	RedisRedisMaxmemoryPolicyVolatileRandom = RedisRedisMaxmemoryPolicy("volatile_random")
	RedisRedisMaxmemoryPolicyVolatileTtl    = RedisRedisMaxmemoryPolicy("volatile_ttl")
)

type RedisRedisMaxmemoryPolicyOutput struct{ *pulumi.OutputState }

func (RedisRedisMaxmemoryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisRedisMaxmemoryPolicy)(nil)).Elem()
}

func (o RedisRedisMaxmemoryPolicyOutput) ToRedisRedisMaxmemoryPolicyOutput() RedisRedisMaxmemoryPolicyOutput {
	return o
}

func (o RedisRedisMaxmemoryPolicyOutput) ToRedisRedisMaxmemoryPolicyOutputWithContext(ctx context.Context) RedisRedisMaxmemoryPolicyOutput {
	return o
}

func (o RedisRedisMaxmemoryPolicyOutput) ToRedisRedisMaxmemoryPolicyPtrOutput() RedisRedisMaxmemoryPolicyPtrOutput {
	return o.ToRedisRedisMaxmemoryPolicyPtrOutputWithContext(context.Background())
}

func (o RedisRedisMaxmemoryPolicyOutput) ToRedisRedisMaxmemoryPolicyPtrOutputWithContext(ctx context.Context) RedisRedisMaxmemoryPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisRedisMaxmemoryPolicy) *RedisRedisMaxmemoryPolicy {
		return &v
	}).(RedisRedisMaxmemoryPolicyPtrOutput)
}

func (o RedisRedisMaxmemoryPolicyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RedisRedisMaxmemoryPolicyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RedisRedisMaxmemoryPolicy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RedisRedisMaxmemoryPolicyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RedisRedisMaxmemoryPolicyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RedisRedisMaxmemoryPolicy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RedisRedisMaxmemoryPolicyPtrOutput struct{ *pulumi.OutputState }

func (RedisRedisMaxmemoryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisRedisMaxmemoryPolicy)(nil)).Elem()
}

func (o RedisRedisMaxmemoryPolicyPtrOutput) ToRedisRedisMaxmemoryPolicyPtrOutput() RedisRedisMaxmemoryPolicyPtrOutput {
	return o
}

func (o RedisRedisMaxmemoryPolicyPtrOutput) ToRedisRedisMaxmemoryPolicyPtrOutputWithContext(ctx context.Context) RedisRedisMaxmemoryPolicyPtrOutput {
	return o
}

func (o RedisRedisMaxmemoryPolicyPtrOutput) Elem() RedisRedisMaxmemoryPolicyOutput {
	return o.ApplyT(func(v *RedisRedisMaxmemoryPolicy) RedisRedisMaxmemoryPolicy {
		if v != nil {
			return *v
		}
		var ret RedisRedisMaxmemoryPolicy
		return ret
	}).(RedisRedisMaxmemoryPolicyOutput)
}

func (o RedisRedisMaxmemoryPolicyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RedisRedisMaxmemoryPolicyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RedisRedisMaxmemoryPolicy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
type RedisRedisPersistence string

const (
	RedisRedisPersistenceOff = RedisRedisPersistence("off")
	RedisRedisPersistenceRdb = RedisRedisPersistence("rdb")
)

type RedisRedisPersistenceOutput struct{ *pulumi.OutputState }

func (RedisRedisPersistenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisRedisPersistence)(nil)).Elem()
}

func (o RedisRedisPersistenceOutput) ToRedisRedisPersistenceOutput() RedisRedisPersistenceOutput {
	return o
}

func (o RedisRedisPersistenceOutput) ToRedisRedisPersistenceOutputWithContext(ctx context.Context) RedisRedisPersistenceOutput {
	return o
}

func (o RedisRedisPersistenceOutput) ToRedisRedisPersistencePtrOutput() RedisRedisPersistencePtrOutput {
	return o.ToRedisRedisPersistencePtrOutputWithContext(context.Background())
}

func (o RedisRedisPersistenceOutput) ToRedisRedisPersistencePtrOutputWithContext(ctx context.Context) RedisRedisPersistencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisRedisPersistence) *RedisRedisPersistence {
		return &v
	}).(RedisRedisPersistencePtrOutput)
}

func (o RedisRedisPersistenceOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RedisRedisPersistenceOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RedisRedisPersistence) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RedisRedisPersistenceOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RedisRedisPersistenceOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RedisRedisPersistence) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RedisRedisPersistencePtrOutput struct{ *pulumi.OutputState }

func (RedisRedisPersistencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisRedisPersistence)(nil)).Elem()
}

func (o RedisRedisPersistencePtrOutput) ToRedisRedisPersistencePtrOutput() RedisRedisPersistencePtrOutput {
	return o
}

func (o RedisRedisPersistencePtrOutput) ToRedisRedisPersistencePtrOutputWithContext(ctx context.Context) RedisRedisPersistencePtrOutput {
	return o
}

func (o RedisRedisPersistencePtrOutput) Elem() RedisRedisPersistenceOutput {
	return o.ApplyT(func(v *RedisRedisPersistence) RedisRedisPersistence {
		if v != nil {
			return *v
		}
		var ret RedisRedisPersistence
		return ret
	}).(RedisRedisPersistenceOutput)
}

func (o RedisRedisPersistencePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RedisRedisPersistencePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RedisRedisPersistence) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// The current status of the migration.
type Status string

const (
	StatusRunning  = Status("running")
	StatusCanceled = Status("canceled")
	StatusError    = Status("error")
	StatusDone     = Status("done")
)

type StatusOutput struct{ *pulumi.OutputState }

func (StatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (o StatusOutput) ToStatusOutput() StatusOutput {
	return o
}

func (o StatusOutput) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return o
}

func (o StatusOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o.ToStatusPtrOutputWithContext(context.Background())
}

func (o StatusOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Status) *Status {
		return &v
	}).(StatusPtrOutput)
}

func (o StatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Status) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Status) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StatusPtrOutput struct{ *pulumi.OutputState }

func (StatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (o StatusPtrOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) Elem() StatusOutput {
	return o.ApplyT(func(v *Status) Status {
		if v != nil {
			return *v
		}
		var ret Status
		return ret
	}).(StatusOutput)
}

func (o StatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Status) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseClusterEngineInput)(nil)).Elem(), DatabaseClusterEngine("pg"))
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseClusterEnginePtrInput)(nil)).Elem(), DatabaseClusterEngine("pg"))
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseClusterStatusInput)(nil)).Elem(), DatabaseClusterStatus("creating"))
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseClusterStatusPtrInput)(nil)).Elem(), DatabaseClusterStatus("creating"))
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseReplicaStatusInput)(nil)).Elem(), DatabaseReplicaStatus("creating"))
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseReplicaStatusPtrInput)(nil)).Elem(), DatabaseReplicaStatus("creating"))
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserRoleInput)(nil)).Elem(), DatabaseUserRole("primary"))
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserRolePtrInput)(nil)).Elem(), DatabaseUserRole("primary"))
	pulumi.RegisterInputType(reflect.TypeOf((*EvictionPolicyInput)(nil)).Elem(), EvictionPolicy("noeviction"))
	pulumi.RegisterInputType(reflect.TypeOf((*EvictionPolicyPtrInput)(nil)).Elem(), EvictionPolicy("noeviction"))
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleTypeInput)(nil)).Elem(), FirewallRuleType("droplet"))
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleTypePtrInput)(nil)).Elem(), FirewallRuleType("droplet"))
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlSettingsAuthPluginInput)(nil)).Elem(), MysqlSettingsAuthPlugin("mysql_native_password"))
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlSettingsAuthPluginPtrInput)(nil)).Elem(), MysqlSettingsAuthPlugin("mysql_native_password"))
	pulumi.RegisterOutputType(DatabaseClusterEngineOutput{})
	pulumi.RegisterOutputType(DatabaseClusterEnginePtrOutput{})
	pulumi.RegisterOutputType(DatabaseClusterStatusOutput{})
	pulumi.RegisterOutputType(DatabaseClusterStatusPtrOutput{})
	pulumi.RegisterOutputType(DatabaseReplicaStatusOutput{})
	pulumi.RegisterOutputType(DatabaseReplicaStatusPtrOutput{})
	pulumi.RegisterOutputType(DatabaseUserRoleOutput{})
	pulumi.RegisterOutputType(DatabaseUserRolePtrOutput{})
	pulumi.RegisterOutputType(EvictionPolicyOutput{})
	pulumi.RegisterOutputType(EvictionPolicyPtrOutput{})
	pulumi.RegisterOutputType(FirewallRuleTypeOutput{})
	pulumi.RegisterOutputType(FirewallRuleTypePtrOutput{})
	pulumi.RegisterOutputType(GetDatabasesEvictionPolicyPropertiesEvictionPolicyOutput{})
	pulumi.RegisterOutputType(GetDatabasesEvictionPolicyPropertiesEvictionPolicyPtrOutput{})
	pulumi.RegisterOutputType(MysqlInternalTmpMemStorageEngineOutput{})
	pulumi.RegisterOutputType(MysqlInternalTmpMemStorageEnginePtrOutput{})
	pulumi.RegisterOutputType(MysqlSettingsAuthPluginOutput{})
	pulumi.RegisterOutputType(MysqlSettingsAuthPluginPtrOutput{})
	pulumi.RegisterOutputType(OnlineMigrationStatusOutput{})
	pulumi.RegisterOutputType(OnlineMigrationStatusPtrOutput{})
	pulumi.RegisterOutputType(PgbouncerAutodbPoolModeOutput{})
	pulumi.RegisterOutputType(PgbouncerAutodbPoolModePtrOutput{})
	pulumi.RegisterOutputType(PgbouncerIgnoreStartupParametersItemOutput{})
	pulumi.RegisterOutputType(PgbouncerIgnoreStartupParametersItemPtrOutput{})
	pulumi.RegisterOutputType(PgbouncerIgnoreStartupParametersItemArrayOutput{})
	pulumi.RegisterOutputType(PostgresDefaultToastCompressionOutput{})
	pulumi.RegisterOutputType(PostgresDefaultToastCompressionPtrOutput{})
	pulumi.RegisterOutputType(PostgresLogErrorVerbosityOutput{})
	pulumi.RegisterOutputType(PostgresLogErrorVerbosityPtrOutput{})
	pulumi.RegisterOutputType(PostgresLogLinePrefixOutput{})
	pulumi.RegisterOutputType(PostgresLogLinePrefixPtrOutput{})
	pulumi.RegisterOutputType(PostgresPgStatStatementsTrackOutput{})
	pulumi.RegisterOutputType(PostgresPgStatStatementsTrackPtrOutput{})
	pulumi.RegisterOutputType(PostgresSynchronousReplicationOutput{})
	pulumi.RegisterOutputType(PostgresSynchronousReplicationPtrOutput{})
	pulumi.RegisterOutputType(PostgresTrackCommitTimestampOutput{})
	pulumi.RegisterOutputType(PostgresTrackCommitTimestampPtrOutput{})
	pulumi.RegisterOutputType(PostgresTrackFunctionsOutput{})
	pulumi.RegisterOutputType(PostgresTrackFunctionsPtrOutput{})
	pulumi.RegisterOutputType(PostgresTrackIoTimingOutput{})
	pulumi.RegisterOutputType(PostgresTrackIoTimingPtrOutput{})
	pulumi.RegisterOutputType(RedisRedisAclChannelsDefaultOutput{})
	pulumi.RegisterOutputType(RedisRedisAclChannelsDefaultPtrOutput{})
	pulumi.RegisterOutputType(RedisRedisMaxmemoryPolicyOutput{})
	pulumi.RegisterOutputType(RedisRedisMaxmemoryPolicyPtrOutput{})
	pulumi.RegisterOutputType(RedisRedisPersistenceOutput{})
	pulumi.RegisterOutputType(RedisRedisPersistencePtrOutput{})
	pulumi.RegisterOutputType(StatusOutput{})
	pulumi.RegisterOutputType(StatusPtrOutput{})
}
