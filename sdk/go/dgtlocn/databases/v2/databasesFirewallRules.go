// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabasesFirewallRules struct {
	pulumi.CustomResourceState

	Rules FirewallRuleArrayOutput `pulumi:"rules"`
}

// NewDatabasesFirewallRules registers a new resource with the given unique name, arguments, and options.
func NewDatabasesFirewallRules(ctx *pulumi.Context,
	name string, args *DatabasesFirewallRulesArgs, opts ...pulumi.ResourceOption) (*DatabasesFirewallRules, error) {
	if args == nil {
		args = &DatabasesFirewallRulesArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabasesFirewallRules
	err := ctx.RegisterResource("digitalocean-native:databases/v2:DatabasesFirewallRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabasesFirewallRules gets an existing DatabasesFirewallRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabasesFirewallRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabasesFirewallRulesState, opts ...pulumi.ResourceOption) (*DatabasesFirewallRules, error) {
	var resource DatabasesFirewallRules
	err := ctx.ReadResource("digitalocean-native:databases/v2:DatabasesFirewallRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabasesFirewallRules resources.
type databasesFirewallRulesState struct {
}

type DatabasesFirewallRulesState struct {
}

func (DatabasesFirewallRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesFirewallRulesState)(nil)).Elem()
}

type databasesFirewallRulesArgs struct {
	// A unique identifier for a database cluster.
	DatabaseClusterUuid *string        `pulumi:"databaseClusterUuid"`
	Rules               []FirewallRule `pulumi:"rules"`
}

// The set of arguments for constructing a DatabasesFirewallRules resource.
type DatabasesFirewallRulesArgs struct {
	// A unique identifier for a database cluster.
	DatabaseClusterUuid pulumi.StringPtrInput
	Rules               FirewallRuleArrayInput
}

func (DatabasesFirewallRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesFirewallRulesArgs)(nil)).Elem()
}

type DatabasesFirewallRulesInput interface {
	pulumi.Input

	ToDatabasesFirewallRulesOutput() DatabasesFirewallRulesOutput
	ToDatabasesFirewallRulesOutputWithContext(ctx context.Context) DatabasesFirewallRulesOutput
}

func (*DatabasesFirewallRules) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesFirewallRules)(nil)).Elem()
}

func (i *DatabasesFirewallRules) ToDatabasesFirewallRulesOutput() DatabasesFirewallRulesOutput {
	return i.ToDatabasesFirewallRulesOutputWithContext(context.Background())
}

func (i *DatabasesFirewallRules) ToDatabasesFirewallRulesOutputWithContext(ctx context.Context) DatabasesFirewallRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesFirewallRulesOutput)
}

type DatabasesFirewallRulesOutput struct{ *pulumi.OutputState }

func (DatabasesFirewallRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesFirewallRules)(nil)).Elem()
}

func (o DatabasesFirewallRulesOutput) ToDatabasesFirewallRulesOutput() DatabasesFirewallRulesOutput {
	return o
}

func (o DatabasesFirewallRulesOutput) ToDatabasesFirewallRulesOutputWithContext(ctx context.Context) DatabasesFirewallRulesOutput {
	return o
}

func (o DatabasesFirewallRulesOutput) Rules() FirewallRuleArrayOutput {
	return o.ApplyT(func(v *DatabasesFirewallRules) FirewallRuleArrayOutput { return v.Rules }).(FirewallRuleArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesFirewallRulesInput)(nil)).Elem(), &DatabasesFirewallRules{})
	pulumi.RegisterOutputType(DatabasesFirewallRulesOutput{})
}
