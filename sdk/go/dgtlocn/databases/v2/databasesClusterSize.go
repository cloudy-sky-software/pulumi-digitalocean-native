// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabasesClusterSize struct {
	pulumi.CustomResourceState

	// The number of nodes in the database cluster. Valid values are are 1-3. In addition to the primary node, up to two standby nodes may be added for highly available configurations.
	NumNodes pulumi.IntOutput `pulumi:"numNodes"`
	// A slug identifier representing desired the size of the nodes in the database cluster.
	Size pulumi.StringOutput `pulumi:"size"`
}

// NewDatabasesClusterSize registers a new resource with the given unique name, arguments, and options.
func NewDatabasesClusterSize(ctx *pulumi.Context,
	name string, args *DatabasesClusterSizeArgs, opts ...pulumi.ResourceOption) (*DatabasesClusterSize, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NumNodes == nil {
		return nil, errors.New("invalid value for required argument 'NumNodes'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabasesClusterSize
	err := ctx.RegisterResource("digitalocean-native:databases/v2:DatabasesClusterSize", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabasesClusterSize gets an existing DatabasesClusterSize resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabasesClusterSize(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabasesClusterSizeState, opts ...pulumi.ResourceOption) (*DatabasesClusterSize, error) {
	var resource DatabasesClusterSize
	err := ctx.ReadResource("digitalocean-native:databases/v2:DatabasesClusterSize", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabasesClusterSize resources.
type databasesClusterSizeState struct {
}

type DatabasesClusterSizeState struct {
}

func (DatabasesClusterSizeState) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesClusterSizeState)(nil)).Elem()
}

type databasesClusterSizeArgs struct {
	// A unique identifier for a database cluster.
	DatabaseClusterUuid *string `pulumi:"databaseClusterUuid"`
	// The number of nodes in the database cluster. Valid values are are 1-3. In addition to the primary node, up to two standby nodes may be added for highly available configurations.
	NumNodes int `pulumi:"numNodes"`
	// A slug identifier representing desired the size of the nodes in the database cluster.
	Size string `pulumi:"size"`
}

// The set of arguments for constructing a DatabasesClusterSize resource.
type DatabasesClusterSizeArgs struct {
	// A unique identifier for a database cluster.
	DatabaseClusterUuid pulumi.StringPtrInput
	// The number of nodes in the database cluster. Valid values are are 1-3. In addition to the primary node, up to two standby nodes may be added for highly available configurations.
	NumNodes pulumi.IntInput
	// A slug identifier representing desired the size of the nodes in the database cluster.
	Size pulumi.StringInput
}

func (DatabasesClusterSizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesClusterSizeArgs)(nil)).Elem()
}

type DatabasesClusterSizeInput interface {
	pulumi.Input

	ToDatabasesClusterSizeOutput() DatabasesClusterSizeOutput
	ToDatabasesClusterSizeOutputWithContext(ctx context.Context) DatabasesClusterSizeOutput
}

func (*DatabasesClusterSize) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesClusterSize)(nil)).Elem()
}

func (i *DatabasesClusterSize) ToDatabasesClusterSizeOutput() DatabasesClusterSizeOutput {
	return i.ToDatabasesClusterSizeOutputWithContext(context.Background())
}

func (i *DatabasesClusterSize) ToDatabasesClusterSizeOutputWithContext(ctx context.Context) DatabasesClusterSizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesClusterSizeOutput)
}

type DatabasesClusterSizeOutput struct{ *pulumi.OutputState }

func (DatabasesClusterSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesClusterSize)(nil)).Elem()
}

func (o DatabasesClusterSizeOutput) ToDatabasesClusterSizeOutput() DatabasesClusterSizeOutput {
	return o
}

func (o DatabasesClusterSizeOutput) ToDatabasesClusterSizeOutputWithContext(ctx context.Context) DatabasesClusterSizeOutput {
	return o
}

// The number of nodes in the database cluster. Valid values are are 1-3. In addition to the primary node, up to two standby nodes may be added for highly available configurations.
func (o DatabasesClusterSizeOutput) NumNodes() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasesClusterSize) pulumi.IntOutput { return v.NumNodes }).(pulumi.IntOutput)
}

// A slug identifier representing desired the size of the nodes in the database cluster.
func (o DatabasesClusterSizeOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasesClusterSize) pulumi.StringOutput { return v.Size }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesClusterSizeInput)(nil)).Elem(), &DatabasesClusterSize{})
	pulumi.RegisterOutputType(DatabasesClusterSizeOutput{})
}
