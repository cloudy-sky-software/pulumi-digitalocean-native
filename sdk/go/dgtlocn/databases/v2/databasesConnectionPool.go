// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabasesConnectionPool struct {
	pulumi.CustomResourceState

	Connection ConnectionPtrOutput `pulumi:"connection"`
	// The database for use with the connection pool.
	Db pulumi.StringOutput `pulumi:"db"`
	// The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// A unique name for the connection pool. Must be between 3 and 60 characters.
	Name              pulumi.StringOutput        `pulumi:"name"`
	Pool              ConnectionPoolOutput       `pulumi:"pool"`
	PrivateConnection PrivateConnectionPtrOutput `pulumi:"privateConnection"`
	// The desired size of the PGBouncer connection pool. The maximum allowed size is determined by the size of the cluster's primary node. 25 backend server connections are allowed for every 1GB of RAM. Three are reserved for maintenance. For example, a primary node with 1 GB of RAM allows for a maximum of 22 backend server connections while one with 4 GB would allow for 97. Note that these are shared across all connection pools in a cluster.
	Size pulumi.IntOutput `pulumi:"size"`
	// The name of the user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
	User pulumi.StringPtrOutput `pulumi:"user"`
}

// NewDatabasesConnectionPool registers a new resource with the given unique name, arguments, and options.
func NewDatabasesConnectionPool(ctx *pulumi.Context,
	name string, args *DatabasesConnectionPoolArgs, opts ...pulumi.ResourceOption) (*DatabasesConnectionPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Db == nil {
		return nil, errors.New("invalid value for required argument 'Db'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabasesConnectionPool
	err := ctx.RegisterResource("digitalocean-native:databases/v2:DatabasesConnectionPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabasesConnectionPool gets an existing DatabasesConnectionPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabasesConnectionPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabasesConnectionPoolState, opts ...pulumi.ResourceOption) (*DatabasesConnectionPool, error) {
	var resource DatabasesConnectionPool
	err := ctx.ReadResource("digitalocean-native:databases/v2:DatabasesConnectionPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabasesConnectionPool resources.
type databasesConnectionPoolState struct {
}

type DatabasesConnectionPoolState struct {
}

func (DatabasesConnectionPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesConnectionPoolState)(nil)).Elem()
}

type databasesConnectionPoolArgs struct {
	Connection *Connection `pulumi:"connection"`
	// A unique identifier for a database cluster.
	DatabaseClusterUuid *string `pulumi:"databaseClusterUuid"`
	// The database for use with the connection pool.
	Db string `pulumi:"db"`
	// The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
	Mode string `pulumi:"mode"`
	// A unique name for the connection pool. Must be between 3 and 60 characters.
	Name              *string            `pulumi:"name"`
	PrivateConnection *PrivateConnection `pulumi:"privateConnection"`
	// The desired size of the PGBouncer connection pool. The maximum allowed size is determined by the size of the cluster's primary node. 25 backend server connections are allowed for every 1GB of RAM. Three are reserved for maintenance. For example, a primary node with 1 GB of RAM allows for a maximum of 22 backend server connections while one with 4 GB would allow for 97. Note that these are shared across all connection pools in a cluster.
	Size int `pulumi:"size"`
	// The name of the user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a DatabasesConnectionPool resource.
type DatabasesConnectionPoolArgs struct {
	Connection ConnectionPtrInput
	// A unique identifier for a database cluster.
	DatabaseClusterUuid pulumi.StringPtrInput
	// The database for use with the connection pool.
	Db pulumi.StringInput
	// The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
	Mode pulumi.StringInput
	// A unique name for the connection pool. Must be between 3 and 60 characters.
	Name              pulumi.StringPtrInput
	PrivateConnection PrivateConnectionPtrInput
	// The desired size of the PGBouncer connection pool. The maximum allowed size is determined by the size of the cluster's primary node. 25 backend server connections are allowed for every 1GB of RAM. Three are reserved for maintenance. For example, a primary node with 1 GB of RAM allows for a maximum of 22 backend server connections while one with 4 GB would allow for 97. Note that these are shared across all connection pools in a cluster.
	Size pulumi.IntInput
	// The name of the user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
	User pulumi.StringPtrInput
}

func (DatabasesConnectionPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databasesConnectionPoolArgs)(nil)).Elem()
}

type DatabasesConnectionPoolInput interface {
	pulumi.Input

	ToDatabasesConnectionPoolOutput() DatabasesConnectionPoolOutput
	ToDatabasesConnectionPoolOutputWithContext(ctx context.Context) DatabasesConnectionPoolOutput
}

func (*DatabasesConnectionPool) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesConnectionPool)(nil)).Elem()
}

func (i *DatabasesConnectionPool) ToDatabasesConnectionPoolOutput() DatabasesConnectionPoolOutput {
	return i.ToDatabasesConnectionPoolOutputWithContext(context.Background())
}

func (i *DatabasesConnectionPool) ToDatabasesConnectionPoolOutputWithContext(ctx context.Context) DatabasesConnectionPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesConnectionPoolOutput)
}

type DatabasesConnectionPoolOutput struct{ *pulumi.OutputState }

func (DatabasesConnectionPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasesConnectionPool)(nil)).Elem()
}

func (o DatabasesConnectionPoolOutput) ToDatabasesConnectionPoolOutput() DatabasesConnectionPoolOutput {
	return o
}

func (o DatabasesConnectionPoolOutput) ToDatabasesConnectionPoolOutputWithContext(ctx context.Context) DatabasesConnectionPoolOutput {
	return o
}

func (o DatabasesConnectionPoolOutput) Connection() ConnectionPtrOutput {
	return o.ApplyT(func(v *DatabasesConnectionPool) ConnectionPtrOutput { return v.Connection }).(ConnectionPtrOutput)
}

// The database for use with the connection pool.
func (o DatabasesConnectionPoolOutput) Db() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasesConnectionPool) pulumi.StringOutput { return v.Db }).(pulumi.StringOutput)
}

// The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
func (o DatabasesConnectionPoolOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasesConnectionPool) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// A unique name for the connection pool. Must be between 3 and 60 characters.
func (o DatabasesConnectionPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasesConnectionPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DatabasesConnectionPoolOutput) Pool() ConnectionPoolOutput {
	return o.ApplyT(func(v *DatabasesConnectionPool) ConnectionPoolOutput { return v.Pool }).(ConnectionPoolOutput)
}

func (o DatabasesConnectionPoolOutput) PrivateConnection() PrivateConnectionPtrOutput {
	return o.ApplyT(func(v *DatabasesConnectionPool) PrivateConnectionPtrOutput { return v.PrivateConnection }).(PrivateConnectionPtrOutput)
}

// The desired size of the PGBouncer connection pool. The maximum allowed size is determined by the size of the cluster's primary node. 25 backend server connections are allowed for every 1GB of RAM. Three are reserved for maintenance. For example, a primary node with 1 GB of RAM allows for a maximum of 22 backend server connections while one with 4 GB would allow for 97. Note that these are shared across all connection pools in a cluster.
func (o DatabasesConnectionPoolOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasesConnectionPool) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The name of the user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
func (o DatabasesConnectionPoolOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasesConnectionPool) pulumi.StringPtrOutput { return v.User }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesConnectionPoolInput)(nil)).Elem(), &DatabasesConnectionPool{})
	pulumi.RegisterOutputType(DatabasesConnectionPoolOutput{})
}
