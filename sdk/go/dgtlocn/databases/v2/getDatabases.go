// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupDatabases(ctx *pulumi.Context, args *LookupDatabasesArgs, opts ...pulumi.InvokeOption) (*LookupDatabasesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDatabasesResult
	err := ctx.Invoke("digitalocean-native:databases/v2:getDatabases", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDatabasesArgs struct {
	// A unique identifier for a database cluster.
	DatabaseClusterUuid string `pulumi:"databaseClusterUuid"`
	// The name of the database.
	DatabaseName string `pulumi:"databaseName"`
}

type LookupDatabasesResult struct {
	Items GetDatabasesProperties `pulumi:"items"`
}

func LookupDatabasesOutput(ctx *pulumi.Context, args LookupDatabasesOutputArgs, opts ...pulumi.InvokeOption) LookupDatabasesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDatabasesResult, error) {
			args := v.(LookupDatabasesArgs)
			r, err := LookupDatabases(ctx, &args, opts...)
			var s LookupDatabasesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDatabasesResultOutput)
}

type LookupDatabasesOutputArgs struct {
	// A unique identifier for a database cluster.
	DatabaseClusterUuid pulumi.StringInput `pulumi:"databaseClusterUuid"`
	// The name of the database.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
}

func (LookupDatabasesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabasesArgs)(nil)).Elem()
}

type LookupDatabasesResultOutput struct{ *pulumi.OutputState }

func (LookupDatabasesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabasesResult)(nil)).Elem()
}

func (o LookupDatabasesResultOutput) ToLookupDatabasesResultOutput() LookupDatabasesResultOutput {
	return o
}

func (o LookupDatabasesResultOutput) ToLookupDatabasesResultOutputWithContext(ctx context.Context) LookupDatabasesResultOutput {
	return o
}

func (o LookupDatabasesResultOutput) Items() GetDatabasesPropertiesOutput {
	return o.ApplyT(func(v LookupDatabasesResult) GetDatabasesProperties { return v.Items }).(GetDatabasesPropertiesOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabasesResultOutput{})
}
