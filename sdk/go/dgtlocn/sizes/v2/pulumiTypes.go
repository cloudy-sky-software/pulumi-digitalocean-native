// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ListSizes struct {
	Links *PageLinks `pulumi:"links"`
	Meta  MetaMeta   `pulumi:"meta"`
	Sizes []Size     `pulumi:"sizes"`
}

type ListSizesOutput struct{ *pulumi.OutputState }

func (ListSizesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListSizes)(nil)).Elem()
}

func (o ListSizesOutput) ToListSizesOutput() ListSizesOutput {
	return o
}

func (o ListSizesOutput) ToListSizesOutputWithContext(ctx context.Context) ListSizesOutput {
	return o
}

func (o ListSizesOutput) Links() PageLinksPtrOutput {
	return o.ApplyT(func(v ListSizes) *PageLinks { return v.Links }).(PageLinksPtrOutput)
}

func (o ListSizesOutput) Meta() MetaMetaOutput {
	return o.ApplyT(func(v ListSizes) MetaMeta { return v.Meta }).(MetaMetaOutput)
}

func (o ListSizesOutput) Sizes() SizeArrayOutput {
	return o.ApplyT(func(v ListSizes) []Size { return v.Sizes }).(SizeArrayOutput)
}

type MetaMeta struct {
	// Number of objects returned by the request.
	Total *int `pulumi:"total"`
}

type MetaMetaOutput struct{ *pulumi.OutputState }

func (MetaMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetaMeta)(nil)).Elem()
}

func (o MetaMetaOutput) ToMetaMetaOutput() MetaMetaOutput {
	return o
}

func (o MetaMetaOutput) ToMetaMetaOutputWithContext(ctx context.Context) MetaMetaOutput {
	return o
}

// Number of objects returned by the request.
func (o MetaMetaOutput) Total() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetaMeta) *int { return v.Total }).(pulumi.IntPtrOutput)
}

type PageLinks struct {
	Pages *PageLinksPagesProperties `pulumi:"pages"`
}

type PageLinksOutput struct{ *pulumi.OutputState }

func (PageLinksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PageLinks)(nil)).Elem()
}

func (o PageLinksOutput) ToPageLinksOutput() PageLinksOutput {
	return o
}

func (o PageLinksOutput) ToPageLinksOutputWithContext(ctx context.Context) PageLinksOutput {
	return o
}

func (o PageLinksOutput) Pages() PageLinksPagesPropertiesPtrOutput {
	return o.ApplyT(func(v PageLinks) *PageLinksPagesProperties { return v.Pages }).(PageLinksPagesPropertiesPtrOutput)
}

type PageLinksPtrOutput struct{ *pulumi.OutputState }

func (PageLinksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PageLinks)(nil)).Elem()
}

func (o PageLinksPtrOutput) ToPageLinksPtrOutput() PageLinksPtrOutput {
	return o
}

func (o PageLinksPtrOutput) ToPageLinksPtrOutputWithContext(ctx context.Context) PageLinksPtrOutput {
	return o
}

func (o PageLinksPtrOutput) Elem() PageLinksOutput {
	return o.ApplyT(func(v *PageLinks) PageLinks {
		if v != nil {
			return *v
		}
		var ret PageLinks
		return ret
	}).(PageLinksOutput)
}

func (o PageLinksPtrOutput) Pages() PageLinksPagesPropertiesPtrOutput {
	return o.ApplyT(func(v *PageLinks) *PageLinksPagesProperties {
		if v == nil {
			return nil
		}
		return v.Pages
	}).(PageLinksPagesPropertiesPtrOutput)
}

type PageLinksPagesProperties struct {
	First *string `pulumi:"first"`
	Last  *string `pulumi:"last"`
	Next  *string `pulumi:"next"`
	Prev  *string `pulumi:"prev"`
}

type PageLinksPagesPropertiesOutput struct{ *pulumi.OutputState }

func (PageLinksPagesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PageLinksPagesProperties)(nil)).Elem()
}

func (o PageLinksPagesPropertiesOutput) ToPageLinksPagesPropertiesOutput() PageLinksPagesPropertiesOutput {
	return o
}

func (o PageLinksPagesPropertiesOutput) ToPageLinksPagesPropertiesOutputWithContext(ctx context.Context) PageLinksPagesPropertiesOutput {
	return o
}

func (o PageLinksPagesPropertiesOutput) First() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.First }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Last() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Last }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Next() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Next }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Prev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Prev }).(pulumi.StringPtrOutput)
}

type PageLinksPagesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PageLinksPagesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PageLinksPagesProperties)(nil)).Elem()
}

func (o PageLinksPagesPropertiesPtrOutput) ToPageLinksPagesPropertiesPtrOutput() PageLinksPagesPropertiesPtrOutput {
	return o
}

func (o PageLinksPagesPropertiesPtrOutput) ToPageLinksPagesPropertiesPtrOutputWithContext(ctx context.Context) PageLinksPagesPropertiesPtrOutput {
	return o
}

func (o PageLinksPagesPropertiesPtrOutput) Elem() PageLinksPagesPropertiesOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) PageLinksPagesProperties {
		if v != nil {
			return *v
		}
		var ret PageLinksPagesProperties
		return ret
	}).(PageLinksPagesPropertiesOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) First() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.First
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Last() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Last
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Next() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Next
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Prev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Prev
	}).(pulumi.StringPtrOutput)
}

type Size struct {
	// This is a boolean value that represents whether new Droplets can be created with this size.
	Available bool `pulumi:"available"`
	// A string describing the class of Droplets created from this size. For example: Basic, General Purpose, CPU-Optimized, Memory-Optimized, or Storage-Optimized.
	Description string `pulumi:"description"`
	// The amount of disk space set aside for Droplets of this size. The value is represented in gigabytes.
	Disk int `pulumi:"disk"`
	// The amount of RAM allocated to Droplets created of this size. The value is represented in megabytes.
	Memory int `pulumi:"memory"`
	// This describes the price of the Droplet size as measured hourly. The value is measured in US dollars.
	PriceHourly float64 `pulumi:"priceHourly"`
	// This attribute describes the monthly cost of this Droplet size if the Droplet is kept for an entire month. The value is measured in US dollars.
	PriceMonthly float64 `pulumi:"priceMonthly"`
	// An array containing the region slugs where this size is available for Droplet creates.
	Regions []string `pulumi:"regions"`
	// A human-readable string that is used to uniquely identify each size.
	Slug string `pulumi:"slug"`
	// The amount of transfer bandwidth that is available for Droplets created in this size. This only counts traffic on the public interface. The value is given in terabytes.
	Transfer float64 `pulumi:"transfer"`
	// The integer of number CPUs allocated to Droplets of this size.
	Vcpus int `pulumi:"vcpus"`
}

// Defaults sets the appropriate defaults for Size
func (val *Size) Defaults() *Size {
	if val == nil {
		return nil
	}
	tmp := *val
	if internal.IsZero(tmp.Available) {
		tmp.Available = true
	}
	return &tmp
}

type SizeOutput struct{ *pulumi.OutputState }

func (SizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Size)(nil)).Elem()
}

func (o SizeOutput) ToSizeOutput() SizeOutput {
	return o
}

func (o SizeOutput) ToSizeOutputWithContext(ctx context.Context) SizeOutput {
	return o
}

// This is a boolean value that represents whether new Droplets can be created with this size.
func (o SizeOutput) Available() pulumi.BoolOutput {
	return o.ApplyT(func(v Size) bool { return v.Available }).(pulumi.BoolOutput)
}

// A string describing the class of Droplets created from this size. For example: Basic, General Purpose, CPU-Optimized, Memory-Optimized, or Storage-Optimized.
func (o SizeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v Size) string { return v.Description }).(pulumi.StringOutput)
}

// The amount of disk space set aside for Droplets of this size. The value is represented in gigabytes.
func (o SizeOutput) Disk() pulumi.IntOutput {
	return o.ApplyT(func(v Size) int { return v.Disk }).(pulumi.IntOutput)
}

// The amount of RAM allocated to Droplets created of this size. The value is represented in megabytes.
func (o SizeOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v Size) int { return v.Memory }).(pulumi.IntOutput)
}

// This describes the price of the Droplet size as measured hourly. The value is measured in US dollars.
func (o SizeOutput) PriceHourly() pulumi.Float64Output {
	return o.ApplyT(func(v Size) float64 { return v.PriceHourly }).(pulumi.Float64Output)
}

// This attribute describes the monthly cost of this Droplet size if the Droplet is kept for an entire month. The value is measured in US dollars.
func (o SizeOutput) PriceMonthly() pulumi.Float64Output {
	return o.ApplyT(func(v Size) float64 { return v.PriceMonthly }).(pulumi.Float64Output)
}

// An array containing the region slugs where this size is available for Droplet creates.
func (o SizeOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Size) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// A human-readable string that is used to uniquely identify each size.
func (o SizeOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v Size) string { return v.Slug }).(pulumi.StringOutput)
}

// The amount of transfer bandwidth that is available for Droplets created in this size. This only counts traffic on the public interface. The value is given in terabytes.
func (o SizeOutput) Transfer() pulumi.Float64Output {
	return o.ApplyT(func(v Size) float64 { return v.Transfer }).(pulumi.Float64Output)
}

// The integer of number CPUs allocated to Droplets of this size.
func (o SizeOutput) Vcpus() pulumi.IntOutput {
	return o.ApplyT(func(v Size) int { return v.Vcpus }).(pulumi.IntOutput)
}

type SizeArrayOutput struct{ *pulumi.OutputState }

func (SizeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Size)(nil)).Elem()
}

func (o SizeArrayOutput) ToSizeArrayOutput() SizeArrayOutput {
	return o
}

func (o SizeArrayOutput) ToSizeArrayOutputWithContext(ctx context.Context) SizeArrayOutput {
	return o
}

func (o SizeArrayOutput) Index(i pulumi.IntInput) SizeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Size {
		return vs[0].([]Size)[vs[1].(int)]
	}).(SizeOutput)
}

func init() {
	pulumi.RegisterOutputType(ListSizesOutput{})
	pulumi.RegisterOutputType(MetaMetaOutput{})
	pulumi.RegisterOutputType(PageLinksOutput{})
	pulumi.RegisterOutputType(PageLinksPtrOutput{})
	pulumi.RegisterOutputType(PageLinksPagesPropertiesOutput{})
	pulumi.RegisterOutputType(PageLinksPagesPropertiesPtrOutput{})
	pulumi.RegisterOutputType(SizeOutput{})
	pulumi.RegisterOutputType(SizeArrayOutput{})
}
