// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FunctionsNamespace struct {
	pulumi.CustomResourceState

	// The namespace's unique name.
	Label     pulumi.StringOutput    `pulumi:"label"`
	Namespace NamespaceInfoPtrOutput `pulumi:"namespace"`
	// The [datacenter region](https://docs.digitalocean.com/products/platform/availability-matrix/#available-datacenters) in which to create the namespace.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewFunctionsNamespace registers a new resource with the given unique name, arguments, and options.
func NewFunctionsNamespace(ctx *pulumi.Context,
	name string, args *FunctionsNamespaceArgs, opts ...pulumi.ResourceOption) (*FunctionsNamespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FunctionsNamespace
	err := ctx.RegisterResource("digitalocean-native:functions/v2:FunctionsNamespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunctionsNamespace gets an existing FunctionsNamespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunctionsNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionsNamespaceState, opts ...pulumi.ResourceOption) (*FunctionsNamespace, error) {
	var resource FunctionsNamespace
	err := ctx.ReadResource("digitalocean-native:functions/v2:FunctionsNamespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FunctionsNamespace resources.
type functionsNamespaceState struct {
}

type FunctionsNamespaceState struct {
}

func (FunctionsNamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionsNamespaceState)(nil)).Elem()
}

type functionsNamespaceArgs struct {
	// The namespace's unique name.
	Label string `pulumi:"label"`
	// The [datacenter region](https://docs.digitalocean.com/products/platform/availability-matrix/#available-datacenters) in which to create the namespace.
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a FunctionsNamespace resource.
type FunctionsNamespaceArgs struct {
	// The namespace's unique name.
	Label pulumi.StringInput
	// The [datacenter region](https://docs.digitalocean.com/products/platform/availability-matrix/#available-datacenters) in which to create the namespace.
	Region pulumi.StringInput
}

func (FunctionsNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionsNamespaceArgs)(nil)).Elem()
}

type FunctionsNamespaceInput interface {
	pulumi.Input

	ToFunctionsNamespaceOutput() FunctionsNamespaceOutput
	ToFunctionsNamespaceOutputWithContext(ctx context.Context) FunctionsNamespaceOutput
}

func (*FunctionsNamespace) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionsNamespace)(nil)).Elem()
}

func (i *FunctionsNamespace) ToFunctionsNamespaceOutput() FunctionsNamespaceOutput {
	return i.ToFunctionsNamespaceOutputWithContext(context.Background())
}

func (i *FunctionsNamespace) ToFunctionsNamespaceOutputWithContext(ctx context.Context) FunctionsNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionsNamespaceOutput)
}

type FunctionsNamespaceOutput struct{ *pulumi.OutputState }

func (FunctionsNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionsNamespace)(nil)).Elem()
}

func (o FunctionsNamespaceOutput) ToFunctionsNamespaceOutput() FunctionsNamespaceOutput {
	return o
}

func (o FunctionsNamespaceOutput) ToFunctionsNamespaceOutputWithContext(ctx context.Context) FunctionsNamespaceOutput {
	return o
}

// The namespace's unique name.
func (o FunctionsNamespaceOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionsNamespace) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

func (o FunctionsNamespaceOutput) Namespace() NamespaceInfoPtrOutput {
	return o.ApplyT(func(v *FunctionsNamespace) NamespaceInfoPtrOutput { return v.Namespace }).(NamespaceInfoPtrOutput)
}

// The [datacenter region](https://docs.digitalocean.com/products/platform/availability-matrix/#available-datacenters) in which to create the namespace.
func (o FunctionsNamespaceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionsNamespace) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionsNamespaceInput)(nil)).Elem(), &FunctionsNamespace{})
	pulumi.RegisterOutputType(FunctionsNamespaceOutput{})
}
