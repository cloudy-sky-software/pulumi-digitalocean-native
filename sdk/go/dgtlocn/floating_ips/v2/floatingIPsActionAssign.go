// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FloatingIPsActionAssign struct {
	pulumi.CustomResourceState

	Action ActionPtrOutput `pulumi:"action"`
	// The ID of the Droplet that the floating IP will be assigned to.
	DropletId pulumi.IntPtrOutput `pulumi:"dropletId"`
	// The type of action to initiate for the floating IP.
	Type FloatingIPsActionTypePtrOutput `pulumi:"type"`
}

// NewFloatingIPsActionAssign registers a new resource with the given unique name, arguments, and options.
func NewFloatingIPsActionAssign(ctx *pulumi.Context,
	name string, args *FloatingIPsActionAssignArgs, opts ...pulumi.ResourceOption) (*FloatingIPsActionAssign, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DropletId == nil {
		return nil, errors.New("invalid value for required argument 'DropletId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FloatingIPsActionAssign
	err := ctx.RegisterResource("digitalocean-native:floating_ips/v2:FloatingIPsActionAssign", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFloatingIPsActionAssign gets an existing FloatingIPsActionAssign resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFloatingIPsActionAssign(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FloatingIPsActionAssignState, opts ...pulumi.ResourceOption) (*FloatingIPsActionAssign, error) {
	var resource FloatingIPsActionAssign
	err := ctx.ReadResource("digitalocean-native:floating_ips/v2:FloatingIPsActionAssign", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FloatingIPsActionAssign resources.
type floatingIPsActionAssignState struct {
}

type FloatingIPsActionAssignState struct {
}

func (FloatingIPsActionAssignState) ElementType() reflect.Type {
	return reflect.TypeOf((*floatingIPsActionAssignState)(nil)).Elem()
}

type floatingIPsActionAssignArgs struct {
	// The ID of the Droplet that the floating IP will be assigned to.
	DropletId int `pulumi:"dropletId"`
	// A floating IP address.
	FloatingIp *string `pulumi:"floatingIp"`
	// The type of action to initiate for the floating IP.
	Type FloatingIPsActionType `pulumi:"type"`
}

// The set of arguments for constructing a FloatingIPsActionAssign resource.
type FloatingIPsActionAssignArgs struct {
	// The ID of the Droplet that the floating IP will be assigned to.
	DropletId pulumi.IntInput
	// A floating IP address.
	FloatingIp pulumi.StringPtrInput
	// The type of action to initiate for the floating IP.
	Type FloatingIPsActionTypeInput
}

func (FloatingIPsActionAssignArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*floatingIPsActionAssignArgs)(nil)).Elem()
}

type FloatingIPsActionAssignInput interface {
	pulumi.Input

	ToFloatingIPsActionAssignOutput() FloatingIPsActionAssignOutput
	ToFloatingIPsActionAssignOutputWithContext(ctx context.Context) FloatingIPsActionAssignOutput
}

func (*FloatingIPsActionAssign) ElementType() reflect.Type {
	return reflect.TypeOf((**FloatingIPsActionAssign)(nil)).Elem()
}

func (i *FloatingIPsActionAssign) ToFloatingIPsActionAssignOutput() FloatingIPsActionAssignOutput {
	return i.ToFloatingIPsActionAssignOutputWithContext(context.Background())
}

func (i *FloatingIPsActionAssign) ToFloatingIPsActionAssignOutputWithContext(ctx context.Context) FloatingIPsActionAssignOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FloatingIPsActionAssignOutput)
}

type FloatingIPsActionAssignOutput struct{ *pulumi.OutputState }

func (FloatingIPsActionAssignOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FloatingIPsActionAssign)(nil)).Elem()
}

func (o FloatingIPsActionAssignOutput) ToFloatingIPsActionAssignOutput() FloatingIPsActionAssignOutput {
	return o
}

func (o FloatingIPsActionAssignOutput) ToFloatingIPsActionAssignOutputWithContext(ctx context.Context) FloatingIPsActionAssignOutput {
	return o
}

func (o FloatingIPsActionAssignOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v *FloatingIPsActionAssign) ActionPtrOutput { return v.Action }).(ActionPtrOutput)
}

// The ID of the Droplet that the floating IP will be assigned to.
func (o FloatingIPsActionAssignOutput) DropletId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FloatingIPsActionAssign) pulumi.IntPtrOutput { return v.DropletId }).(pulumi.IntPtrOutput)
}

// The type of action to initiate for the floating IP.
func (o FloatingIPsActionAssignOutput) Type() FloatingIPsActionTypePtrOutput {
	return o.ApplyT(func(v *FloatingIPsActionAssign) FloatingIPsActionTypePtrOutput { return v.Type }).(FloatingIPsActionTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FloatingIPsActionAssignInput)(nil)).Elem(), &FloatingIPsActionAssign{})
	pulumi.RegisterOutputType(FloatingIPsActionAssignOutput{})
}
