// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FloatingIPs struct {
	pulumi.CustomResourceState

	FloatingIp FloatingIpPtrOutput      `pulumi:"floatingIp"`
	Links      LinksPropertiesPtrOutput `pulumi:"links"`
}

// NewFloatingIPs registers a new resource with the given unique name, arguments, and options.
func NewFloatingIPs(ctx *pulumi.Context,
	name string, args *FloatingIPsArgs, opts ...pulumi.ResourceOption) (*FloatingIPs, error) {
	if args == nil {
		args = &FloatingIPsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FloatingIPs
	err := ctx.RegisterResource("digitalocean-native:floating_ips/v2:FloatingIPs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFloatingIPs gets an existing FloatingIPs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFloatingIPs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FloatingIPsState, opts ...pulumi.ResourceOption) (*FloatingIPs, error) {
	var resource FloatingIPs
	err := ctx.ReadResource("digitalocean-native:floating_ips/v2:FloatingIPs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FloatingIPs resources.
type floatingIPsState struct {
}

type FloatingIPsState struct {
}

func (FloatingIPsState) ElementType() reflect.Type {
	return reflect.TypeOf((*floatingIPsState)(nil)).Elem()
}

type floatingIPsArgs struct {
}

// The set of arguments for constructing a FloatingIPs resource.
type FloatingIPsArgs struct {
}

func (FloatingIPsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*floatingIPsArgs)(nil)).Elem()
}

type FloatingIPsInput interface {
	pulumi.Input

	ToFloatingIPsOutput() FloatingIPsOutput
	ToFloatingIPsOutputWithContext(ctx context.Context) FloatingIPsOutput
}

func (*FloatingIPs) ElementType() reflect.Type {
	return reflect.TypeOf((**FloatingIPs)(nil)).Elem()
}

func (i *FloatingIPs) ToFloatingIPsOutput() FloatingIPsOutput {
	return i.ToFloatingIPsOutputWithContext(context.Background())
}

func (i *FloatingIPs) ToFloatingIPsOutputWithContext(ctx context.Context) FloatingIPsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FloatingIPsOutput)
}

type FloatingIPsOutput struct{ *pulumi.OutputState }

func (FloatingIPsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FloatingIPs)(nil)).Elem()
}

func (o FloatingIPsOutput) ToFloatingIPsOutput() FloatingIPsOutput {
	return o
}

func (o FloatingIPsOutput) ToFloatingIPsOutputWithContext(ctx context.Context) FloatingIPsOutput {
	return o
}

func (o FloatingIPsOutput) FloatingIp() FloatingIpPtrOutput {
	return o.ApplyT(func(v *FloatingIPs) FloatingIpPtrOutput { return v.FloatingIp }).(FloatingIpPtrOutput)
}

func (o FloatingIPsOutput) Links() LinksPropertiesPtrOutput {
	return o.ApplyT(func(v *FloatingIPs) LinksPropertiesPtrOutput { return v.Links }).(LinksPropertiesPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FloatingIPsInput)(nil)).Elem(), &FloatingIPs{})
	pulumi.RegisterOutputType(FloatingIPsOutput{})
}
