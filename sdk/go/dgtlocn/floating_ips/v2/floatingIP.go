// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FloatingIP struct {
	pulumi.CustomResourceState

	FloatingIp FloatingIpTypePtrOutput  `pulumi:"floatingIp"`
	Links      LinksPropertiesPtrOutput `pulumi:"links"`
	// The UUID of the project to which the floating IP will be assigned.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// The slug identifier for the region the floating IP will be reserved to.
	Region pulumi.StringPtrOutput `pulumi:"region"`
}

// NewFloatingIP registers a new resource with the given unique name, arguments, and options.
func NewFloatingIP(ctx *pulumi.Context,
	name string, args *FloatingIPArgs, opts ...pulumi.ResourceOption) (*FloatingIP, error) {
	if args == nil {
		args = &FloatingIPArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FloatingIP
	err := ctx.RegisterResource("digitalocean-native:floating_ips/v2:FloatingIP", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFloatingIP gets an existing FloatingIP resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFloatingIP(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FloatingIPState, opts ...pulumi.ResourceOption) (*FloatingIP, error) {
	var resource FloatingIP
	err := ctx.ReadResource("digitalocean-native:floating_ips/v2:FloatingIP", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FloatingIP resources.
type floatingIPState struct {
}

type FloatingIPState struct {
}

func (FloatingIPState) ElementType() reflect.Type {
	return reflect.TypeOf((*floatingIPState)(nil)).Elem()
}

type floatingIPArgs struct {
	// The UUID of the project to which the floating IP will be assigned.
	ProjectId *string `pulumi:"projectId"`
	// The slug identifier for the region the floating IP will be reserved to.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a FloatingIP resource.
type FloatingIPArgs struct {
	// The UUID of the project to which the floating IP will be assigned.
	ProjectId pulumi.StringPtrInput
	// The slug identifier for the region the floating IP will be reserved to.
	Region pulumi.StringPtrInput
}

func (FloatingIPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*floatingIPArgs)(nil)).Elem()
}

type FloatingIPInput interface {
	pulumi.Input

	ToFloatingIPOutput() FloatingIPOutput
	ToFloatingIPOutputWithContext(ctx context.Context) FloatingIPOutput
}

func (*FloatingIP) ElementType() reflect.Type {
	return reflect.TypeOf((**FloatingIP)(nil)).Elem()
}

func (i *FloatingIP) ToFloatingIPOutput() FloatingIPOutput {
	return i.ToFloatingIPOutputWithContext(context.Background())
}

func (i *FloatingIP) ToFloatingIPOutputWithContext(ctx context.Context) FloatingIPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FloatingIPOutput)
}

type FloatingIPOutput struct{ *pulumi.OutputState }

func (FloatingIPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FloatingIP)(nil)).Elem()
}

func (o FloatingIPOutput) ToFloatingIPOutput() FloatingIPOutput {
	return o
}

func (o FloatingIPOutput) ToFloatingIPOutputWithContext(ctx context.Context) FloatingIPOutput {
	return o
}

func (o FloatingIPOutput) FloatingIp() FloatingIpTypePtrOutput {
	return o.ApplyT(func(v *FloatingIP) FloatingIpTypePtrOutput { return v.FloatingIp }).(FloatingIpTypePtrOutput)
}

func (o FloatingIPOutput) Links() LinksPropertiesPtrOutput {
	return o.ApplyT(func(v *FloatingIP) LinksPropertiesPtrOutput { return v.Links }).(LinksPropertiesPtrOutput)
}

// The UUID of the project to which the floating IP will be assigned.
func (o FloatingIPOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FloatingIP) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The slug identifier for the region the floating IP will be reserved to.
func (o FloatingIPOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FloatingIP) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FloatingIPInput)(nil)).Elem(), &FloatingIP{})
	pulumi.RegisterOutputType(FloatingIPOutput{})
}
