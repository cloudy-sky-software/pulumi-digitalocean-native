// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Vpcs struct {
	pulumi.CustomResourceState

	// A free-form text field for describing the VPC's purpose. It may be a maximum of 255 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The range of IP addresses in the VPC in CIDR notation. Network ranges cannot overlap with other networks in the same account and must be in range of private addresses as defined in RFC1918. It may not be smaller than `/28` nor larger than `/16`. If no IP range is specified, a `/20` network range is generated that won't conflict with other VPC networks in your account.
	IpRange pulumi.StringPtrOutput `pulumi:"ipRange"`
	// The name of the VPC. Must be unique and may only contain alphanumeric characters, dashes, and periods.
	Name pulumi.StringOutput `pulumi:"name"`
	// The slug identifier for the region where the VPC will be created.
	Region pulumi.StringOutput `pulumi:"region"`
	Vpc    VpcPtrOutput        `pulumi:"vpc"`
}

// NewVpcs registers a new resource with the given unique name, arguments, and options.
func NewVpcs(ctx *pulumi.Context,
	name string, args *VpcsArgs, opts ...pulumi.ResourceOption) (*Vpcs, error) {
	if args == nil {
		args = &VpcsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vpcs
	err := ctx.RegisterResource("digitalocean-native:vpcs/v2:Vpcs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcs gets an existing Vpcs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcsState, opts ...pulumi.ResourceOption) (*Vpcs, error) {
	var resource Vpcs
	err := ctx.ReadResource("digitalocean-native:vpcs/v2:Vpcs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vpcs resources.
type vpcsState struct {
}

type VpcsState struct {
}

func (VpcsState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcsState)(nil)).Elem()
}

type vpcsArgs struct {
	// A free-form text field for describing the VPC's purpose. It may be a maximum of 255 characters.
	Description *string `pulumi:"description"`
	// The range of IP addresses in the VPC in CIDR notation. Network ranges cannot overlap with other networks in the same account and must be in range of private addresses as defined in RFC1918. It may not be smaller than `/28` nor larger than `/16`. If no IP range is specified, a `/20` network range is generated that won't conflict with other VPC networks in your account.
	IpRange *string `pulumi:"ipRange"`
	// The name of the VPC. Must be unique and may only contain alphanumeric characters, dashes, and periods.
	Name *string `pulumi:"name"`
	// The slug identifier for the region where the VPC will be created.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Vpcs resource.
type VpcsArgs struct {
	// A free-form text field for describing the VPC's purpose. It may be a maximum of 255 characters.
	Description pulumi.StringPtrInput
	// The range of IP addresses in the VPC in CIDR notation. Network ranges cannot overlap with other networks in the same account and must be in range of private addresses as defined in RFC1918. It may not be smaller than `/28` nor larger than `/16`. If no IP range is specified, a `/20` network range is generated that won't conflict with other VPC networks in your account.
	IpRange pulumi.StringPtrInput
	// The name of the VPC. Must be unique and may only contain alphanumeric characters, dashes, and periods.
	Name pulumi.StringPtrInput
	// The slug identifier for the region where the VPC will be created.
	Region pulumi.StringPtrInput
}

func (VpcsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcsArgs)(nil)).Elem()
}

type VpcsInput interface {
	pulumi.Input

	ToVpcsOutput() VpcsOutput
	ToVpcsOutputWithContext(ctx context.Context) VpcsOutput
}

func (*Vpcs) ElementType() reflect.Type {
	return reflect.TypeOf((**Vpcs)(nil)).Elem()
}

func (i *Vpcs) ToVpcsOutput() VpcsOutput {
	return i.ToVpcsOutputWithContext(context.Background())
}

func (i *Vpcs) ToVpcsOutputWithContext(ctx context.Context) VpcsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcsOutput)
}

type VpcsOutput struct{ *pulumi.OutputState }

func (VpcsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vpcs)(nil)).Elem()
}

func (o VpcsOutput) ToVpcsOutput() VpcsOutput {
	return o
}

func (o VpcsOutput) ToVpcsOutputWithContext(ctx context.Context) VpcsOutput {
	return o
}

// A free-form text field for describing the VPC's purpose. It may be a maximum of 255 characters.
func (o VpcsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vpcs) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The range of IP addresses in the VPC in CIDR notation. Network ranges cannot overlap with other networks in the same account and must be in range of private addresses as defined in RFC1918. It may not be smaller than `/28` nor larger than `/16`. If no IP range is specified, a `/20` network range is generated that won't conflict with other VPC networks in your account.
func (o VpcsOutput) IpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vpcs) pulumi.StringPtrOutput { return v.IpRange }).(pulumi.StringPtrOutput)
}

// The name of the VPC. Must be unique and may only contain alphanumeric characters, dashes, and periods.
func (o VpcsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpcs) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The slug identifier for the region where the VPC will be created.
func (o VpcsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpcs) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o VpcsOutput) Vpc() VpcPtrOutput {
	return o.ApplyT(func(v *Vpcs) VpcPtrOutput { return v.Vpc }).(VpcPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcsInput)(nil)).Elem(), &Vpcs{})
	pulumi.RegisterOutputType(VpcsOutput{})
}
