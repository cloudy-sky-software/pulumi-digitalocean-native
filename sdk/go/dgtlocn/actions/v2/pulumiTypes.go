// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type Action struct {
	// A time value given in ISO8601 combined date and time format that represents when the action was completed.
	CompletedAt *string `pulumi:"completedAt"`
	// A unique numeric ID that can be used to identify and reference an action.
	Id         *int              `pulumi:"id"`
	Region     *Region           `pulumi:"region"`
	RegionSlug *ActionRegionSlug `pulumi:"regionSlug"`
	// A unique identifier for the resource that the action is associated with.
	ResourceId *int `pulumi:"resourceId"`
	// The type of resource that the action is associated with.
	ResourceType *string `pulumi:"resourceType"`
	// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
	StartedAt *string `pulumi:"startedAt"`
	// The current status of the action. This can be "in-progress", "completed", or "errored".
	Status *ActionStatus `pulumi:"status"`
	// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for Action
func (val *Action) Defaults() *Action {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Status == nil {
		status_ := ActionStatus("in-progress")
		tmp.Status = &status_
	}
	return &tmp
}

type ActionOutput struct{ *pulumi.OutputState }

func (ActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Action)(nil)).Elem()
}

func (o ActionOutput) ToActionOutput() ActionOutput {
	return o
}

func (o ActionOutput) ToActionOutputWithContext(ctx context.Context) ActionOutput {
	return o
}

// A time value given in ISO8601 combined date and time format that represents when the action was completed.
func (o ActionOutput) CompletedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Action) *string { return v.CompletedAt }).(pulumi.StringPtrOutput)
}

// A unique numeric ID that can be used to identify and reference an action.
func (o ActionOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Action) *int { return v.Id }).(pulumi.IntPtrOutput)
}

func (o ActionOutput) Region() RegionPtrOutput {
	return o.ApplyT(func(v Action) *Region { return v.Region }).(RegionPtrOutput)
}

func (o ActionOutput) RegionSlug() ActionRegionSlugPtrOutput {
	return o.ApplyT(func(v Action) *ActionRegionSlug { return v.RegionSlug }).(ActionRegionSlugPtrOutput)
}

// A unique identifier for the resource that the action is associated with.
func (o ActionOutput) ResourceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Action) *int { return v.ResourceId }).(pulumi.IntPtrOutput)
}

// The type of resource that the action is associated with.
func (o ActionOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Action) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
func (o ActionOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Action) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

// The current status of the action. This can be "in-progress", "completed", or "errored".
func (o ActionOutput) Status() ActionStatusPtrOutput {
	return o.ApplyT(func(v Action) *ActionStatus { return v.Status }).(ActionStatusPtrOutput)
}

// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
func (o ActionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Action) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ActionPtrOutput struct{ *pulumi.OutputState }

func (ActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Action)(nil)).Elem()
}

func (o ActionPtrOutput) ToActionPtrOutput() ActionPtrOutput {
	return o
}

func (o ActionPtrOutput) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return o
}

func (o ActionPtrOutput) Elem() ActionOutput {
	return o.ApplyT(func(v *Action) Action {
		if v != nil {
			return *v
		}
		var ret Action
		return ret
	}).(ActionOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the action was completed.
func (o ActionPtrOutput) CompletedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) *string {
		if v == nil {
			return nil
		}
		return v.CompletedAt
	}).(pulumi.StringPtrOutput)
}

// A unique numeric ID that can be used to identify and reference an action.
func (o ActionPtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Action) *int {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.IntPtrOutput)
}

func (o ActionPtrOutput) Region() RegionPtrOutput {
	return o.ApplyT(func(v *Action) *Region {
		if v == nil {
			return nil
		}
		return v.Region
	}).(RegionPtrOutput)
}

func (o ActionPtrOutput) RegionSlug() ActionRegionSlugPtrOutput {
	return o.ApplyT(func(v *Action) *ActionRegionSlug {
		if v == nil {
			return nil
		}
		return v.RegionSlug
	}).(ActionRegionSlugPtrOutput)
}

// A unique identifier for the resource that the action is associated with.
func (o ActionPtrOutput) ResourceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Action) *int {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.IntPtrOutput)
}

// The type of resource that the action is associated with.
func (o ActionPtrOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) *string {
		if v == nil {
			return nil
		}
		return v.ResourceType
	}).(pulumi.StringPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
func (o ActionPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// The current status of the action. This can be "in-progress", "completed", or "errored".
func (o ActionPtrOutput) Status() ActionStatusPtrOutput {
	return o.ApplyT(func(v *Action) *ActionStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(ActionStatusPtrOutput)
}

// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
func (o ActionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ActionArrayOutput struct{ *pulumi.OutputState }

func (ActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Action)(nil)).Elem()
}

func (o ActionArrayOutput) ToActionArrayOutput() ActionArrayOutput {
	return o
}

func (o ActionArrayOutput) ToActionArrayOutputWithContext(ctx context.Context) ActionArrayOutput {
	return o
}

func (o ActionArrayOutput) Index(i pulumi.IntInput) ActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Action {
		return vs[0].([]Action)[vs[1].(int)]
	}).(ActionOutput)
}

type ActionRegionSlug struct {
}

type ActionRegionSlugOutput struct{ *pulumi.OutputState }

func (ActionRegionSlugOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRegionSlug)(nil)).Elem()
}

func (o ActionRegionSlugOutput) ToActionRegionSlugOutput() ActionRegionSlugOutput {
	return o
}

func (o ActionRegionSlugOutput) ToActionRegionSlugOutputWithContext(ctx context.Context) ActionRegionSlugOutput {
	return o
}

type ActionRegionSlugPtrOutput struct{ *pulumi.OutputState }

func (ActionRegionSlugPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRegionSlug)(nil)).Elem()
}

func (o ActionRegionSlugPtrOutput) ToActionRegionSlugPtrOutput() ActionRegionSlugPtrOutput {
	return o
}

func (o ActionRegionSlugPtrOutput) ToActionRegionSlugPtrOutputWithContext(ctx context.Context) ActionRegionSlugPtrOutput {
	return o
}

func (o ActionRegionSlugPtrOutput) Elem() ActionRegionSlugOutput {
	return o.ApplyT(func(v *ActionRegionSlug) ActionRegionSlug {
		if v != nil {
			return *v
		}
		var ret ActionRegionSlug
		return ret
	}).(ActionRegionSlugOutput)
}

type GetActionsProperties struct {
	Action *Action `pulumi:"action"`
}

// Defaults sets the appropriate defaults for GetActionsProperties
func (val *GetActionsProperties) Defaults() *GetActionsProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Action = tmp.Action.Defaults()

	return &tmp
}

type GetActionsPropertiesOutput struct{ *pulumi.OutputState }

func (GetActionsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionsProperties)(nil)).Elem()
}

func (o GetActionsPropertiesOutput) ToGetActionsPropertiesOutput() GetActionsPropertiesOutput {
	return o
}

func (o GetActionsPropertiesOutput) ToGetActionsPropertiesOutputWithContext(ctx context.Context) GetActionsPropertiesOutput {
	return o
}

func (o GetActionsPropertiesOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v GetActionsProperties) *Action { return v.Action }).(ActionPtrOutput)
}

type ListActions struct {
	Actions []Action   `pulumi:"actions"`
	Links   *PageLinks `pulumi:"links"`
	Meta    MetaMeta   `pulumi:"meta"`
}

type ListActionsOutput struct{ *pulumi.OutputState }

func (ListActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListActions)(nil)).Elem()
}

func (o ListActionsOutput) ToListActionsOutput() ListActionsOutput {
	return o
}

func (o ListActionsOutput) ToListActionsOutputWithContext(ctx context.Context) ListActionsOutput {
	return o
}

func (o ListActionsOutput) Actions() ActionArrayOutput {
	return o.ApplyT(func(v ListActions) []Action { return v.Actions }).(ActionArrayOutput)
}

func (o ListActionsOutput) Links() PageLinksPtrOutput {
	return o.ApplyT(func(v ListActions) *PageLinks { return v.Links }).(PageLinksPtrOutput)
}

func (o ListActionsOutput) Meta() MetaMetaOutput {
	return o.ApplyT(func(v ListActions) MetaMeta { return v.Meta }).(MetaMetaOutput)
}

type MetaMeta struct {
	// Number of objects returned by the request.
	Total *int `pulumi:"total"`
}

type MetaMetaOutput struct{ *pulumi.OutputState }

func (MetaMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetaMeta)(nil)).Elem()
}

func (o MetaMetaOutput) ToMetaMetaOutput() MetaMetaOutput {
	return o
}

func (o MetaMetaOutput) ToMetaMetaOutputWithContext(ctx context.Context) MetaMetaOutput {
	return o
}

// Number of objects returned by the request.
func (o MetaMetaOutput) Total() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetaMeta) *int { return v.Total }).(pulumi.IntPtrOutput)
}

type PageLinks struct {
	Pages *PageLinksPagesProperties `pulumi:"pages"`
}

type PageLinksOutput struct{ *pulumi.OutputState }

func (PageLinksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PageLinks)(nil)).Elem()
}

func (o PageLinksOutput) ToPageLinksOutput() PageLinksOutput {
	return o
}

func (o PageLinksOutput) ToPageLinksOutputWithContext(ctx context.Context) PageLinksOutput {
	return o
}

func (o PageLinksOutput) Pages() PageLinksPagesPropertiesPtrOutput {
	return o.ApplyT(func(v PageLinks) *PageLinksPagesProperties { return v.Pages }).(PageLinksPagesPropertiesPtrOutput)
}

type PageLinksPtrOutput struct{ *pulumi.OutputState }

func (PageLinksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PageLinks)(nil)).Elem()
}

func (o PageLinksPtrOutput) ToPageLinksPtrOutput() PageLinksPtrOutput {
	return o
}

func (o PageLinksPtrOutput) ToPageLinksPtrOutputWithContext(ctx context.Context) PageLinksPtrOutput {
	return o
}

func (o PageLinksPtrOutput) Elem() PageLinksOutput {
	return o.ApplyT(func(v *PageLinks) PageLinks {
		if v != nil {
			return *v
		}
		var ret PageLinks
		return ret
	}).(PageLinksOutput)
}

func (o PageLinksPtrOutput) Pages() PageLinksPagesPropertiesPtrOutput {
	return o.ApplyT(func(v *PageLinks) *PageLinksPagesProperties {
		if v == nil {
			return nil
		}
		return v.Pages
	}).(PageLinksPagesPropertiesPtrOutput)
}

type PageLinksPagesProperties struct {
	First *string `pulumi:"first"`
	Last  *string `pulumi:"last"`
	Next  *string `pulumi:"next"`
	Prev  *string `pulumi:"prev"`
}

type PageLinksPagesPropertiesOutput struct{ *pulumi.OutputState }

func (PageLinksPagesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PageLinksPagesProperties)(nil)).Elem()
}

func (o PageLinksPagesPropertiesOutput) ToPageLinksPagesPropertiesOutput() PageLinksPagesPropertiesOutput {
	return o
}

func (o PageLinksPagesPropertiesOutput) ToPageLinksPagesPropertiesOutputWithContext(ctx context.Context) PageLinksPagesPropertiesOutput {
	return o
}

func (o PageLinksPagesPropertiesOutput) First() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.First }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Last() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Last }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Next() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Next }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Prev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Prev }).(pulumi.StringPtrOutput)
}

type PageLinksPagesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PageLinksPagesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PageLinksPagesProperties)(nil)).Elem()
}

func (o PageLinksPagesPropertiesPtrOutput) ToPageLinksPagesPropertiesPtrOutput() PageLinksPagesPropertiesPtrOutput {
	return o
}

func (o PageLinksPagesPropertiesPtrOutput) ToPageLinksPagesPropertiesPtrOutputWithContext(ctx context.Context) PageLinksPagesPropertiesPtrOutput {
	return o
}

func (o PageLinksPagesPropertiesPtrOutput) Elem() PageLinksPagesPropertiesOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) PageLinksPagesProperties {
		if v != nil {
			return *v
		}
		var ret PageLinksPagesProperties
		return ret
	}).(PageLinksPagesPropertiesOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) First() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.First
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Last() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Last
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Next() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Next
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Prev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Prev
	}).(pulumi.StringPtrOutput)
}

type Region struct {
	// This is a boolean value that represents whether new Droplets can be created in this region.
	Available bool `pulumi:"available"`
	// This attribute is set to an array which contains features available in this region
	Features []string `pulumi:"features"`
	// The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
	Name string `pulumi:"name"`
	// This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
	Sizes []string `pulumi:"sizes"`
	// A human-readable string that is used as a unique identifier for each region.
	Slug string `pulumi:"slug"`
}

type RegionOutput struct{ *pulumi.OutputState }

func (RegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Region)(nil)).Elem()
}

func (o RegionOutput) ToRegionOutput() RegionOutput {
	return o
}

func (o RegionOutput) ToRegionOutputWithContext(ctx context.Context) RegionOutput {
	return o
}

// This is a boolean value that represents whether new Droplets can be created in this region.
func (o RegionOutput) Available() pulumi.BoolOutput {
	return o.ApplyT(func(v Region) bool { return v.Available }).(pulumi.BoolOutput)
}

// This attribute is set to an array which contains features available in this region
func (o RegionOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Region) []string { return v.Features }).(pulumi.StringArrayOutput)
}

// The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
func (o RegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Region) string { return v.Name }).(pulumi.StringOutput)
}

// This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
func (o RegionOutput) Sizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Region) []string { return v.Sizes }).(pulumi.StringArrayOutput)
}

// A human-readable string that is used as a unique identifier for each region.
func (o RegionOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v Region) string { return v.Slug }).(pulumi.StringOutput)
}

type RegionPtrOutput struct{ *pulumi.OutputState }

func (RegionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Region)(nil)).Elem()
}

func (o RegionPtrOutput) ToRegionPtrOutput() RegionPtrOutput {
	return o
}

func (o RegionPtrOutput) ToRegionPtrOutputWithContext(ctx context.Context) RegionPtrOutput {
	return o
}

func (o RegionPtrOutput) Elem() RegionOutput {
	return o.ApplyT(func(v *Region) Region {
		if v != nil {
			return *v
		}
		var ret Region
		return ret
	}).(RegionOutput)
}

// This is a boolean value that represents whether new Droplets can be created in this region.
func (o RegionPtrOutput) Available() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Region) *bool {
		if v == nil {
			return nil
		}
		return &v.Available
	}).(pulumi.BoolPtrOutput)
}

// This attribute is set to an array which contains features available in this region
func (o RegionPtrOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Region) []string {
		if v == nil {
			return nil
		}
		return v.Features
	}).(pulumi.StringArrayOutput)
}

// The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
func (o RegionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Region) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
func (o RegionPtrOutput) Sizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Region) []string {
		if v == nil {
			return nil
		}
		return v.Sizes
	}).(pulumi.StringArrayOutput)
}

// A human-readable string that is used as a unique identifier for each region.
func (o RegionPtrOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Region) *string {
		if v == nil {
			return nil
		}
		return &v.Slug
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionOutput{})
	pulumi.RegisterOutputType(ActionPtrOutput{})
	pulumi.RegisterOutputType(ActionArrayOutput{})
	pulumi.RegisterOutputType(ActionRegionSlugOutput{})
	pulumi.RegisterOutputType(ActionRegionSlugPtrOutput{})
	pulumi.RegisterOutputType(GetActionsPropertiesOutput{})
	pulumi.RegisterOutputType(ListActionsOutput{})
	pulumi.RegisterOutputType(MetaMetaOutput{})
	pulumi.RegisterOutputType(PageLinksOutput{})
	pulumi.RegisterOutputType(PageLinksPtrOutput{})
	pulumi.RegisterOutputType(PageLinksPagesPropertiesOutput{})
	pulumi.RegisterOutputType(PageLinksPagesPropertiesPtrOutput{})
	pulumi.RegisterOutputType(RegionOutput{})
	pulumi.RegisterOutputType(RegionPtrOutput{})
}
