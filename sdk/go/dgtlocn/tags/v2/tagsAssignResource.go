// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TagsAssignResource struct {
	pulumi.CustomResourceState

	// An array of objects containing resource_id and resource_type  attributes.
	Resources ResourcesItemPropertiesArrayOutput `pulumi:"resources"`
}

// NewTagsAssignResource registers a new resource with the given unique name, arguments, and options.
func NewTagsAssignResource(ctx *pulumi.Context,
	name string, args *TagsAssignResourceArgs, opts ...pulumi.ResourceOption) (*TagsAssignResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Resources == nil {
		return nil, errors.New("invalid value for required argument 'Resources'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TagsAssignResource
	err := ctx.RegisterResource("digitalocean-native:tags/v2:TagsAssignResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagsAssignResource gets an existing TagsAssignResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagsAssignResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagsAssignResourceState, opts ...pulumi.ResourceOption) (*TagsAssignResource, error) {
	var resource TagsAssignResource
	err := ctx.ReadResource("digitalocean-native:tags/v2:TagsAssignResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagsAssignResource resources.
type tagsAssignResourceState struct {
}

type TagsAssignResourceState struct {
}

func (TagsAssignResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagsAssignResourceState)(nil)).Elem()
}

type tagsAssignResourceArgs struct {
	// An array of objects containing resource_id and resource_type  attributes.
	Resources []ResourcesItemProperties `pulumi:"resources"`
	// The name of the tag. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per tag.
	TagId *string `pulumi:"tagId"`
}

// The set of arguments for constructing a TagsAssignResource resource.
type TagsAssignResourceArgs struct {
	// An array of objects containing resource_id and resource_type  attributes.
	Resources ResourcesItemPropertiesArrayInput
	// The name of the tag. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per tag.
	TagId pulumi.StringPtrInput
}

func (TagsAssignResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagsAssignResourceArgs)(nil)).Elem()
}

type TagsAssignResourceInput interface {
	pulumi.Input

	ToTagsAssignResourceOutput() TagsAssignResourceOutput
	ToTagsAssignResourceOutputWithContext(ctx context.Context) TagsAssignResourceOutput
}

func (*TagsAssignResource) ElementType() reflect.Type {
	return reflect.TypeOf((**TagsAssignResource)(nil)).Elem()
}

func (i *TagsAssignResource) ToTagsAssignResourceOutput() TagsAssignResourceOutput {
	return i.ToTagsAssignResourceOutputWithContext(context.Background())
}

func (i *TagsAssignResource) ToTagsAssignResourceOutputWithContext(ctx context.Context) TagsAssignResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsAssignResourceOutput)
}

type TagsAssignResourceOutput struct{ *pulumi.OutputState }

func (TagsAssignResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagsAssignResource)(nil)).Elem()
}

func (o TagsAssignResourceOutput) ToTagsAssignResourceOutput() TagsAssignResourceOutput {
	return o
}

func (o TagsAssignResourceOutput) ToTagsAssignResourceOutputWithContext(ctx context.Context) TagsAssignResourceOutput {
	return o
}

// An array of objects containing resource_id and resource_type  attributes.
func (o TagsAssignResourceOutput) Resources() ResourcesItemPropertiesArrayOutput {
	return o.ApplyT(func(v *TagsAssignResource) ResourcesItemPropertiesArrayOutput { return v.Resources }).(ResourcesItemPropertiesArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TagsAssignResourceInput)(nil)).Elem(), &TagsAssignResource{})
	pulumi.RegisterOutputType(TagsAssignResourceOutput{})
}
