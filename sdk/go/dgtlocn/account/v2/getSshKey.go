// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupSshKey(ctx *pulumi.Context, args *LookupSshKeyArgs, opts ...pulumi.InvokeOption) (*LookupSshKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSshKeyResult
	err := ctx.Invoke("digitalocean-native:account/v2:getSshKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSshKeyArgs struct {
	// Either the ID or the fingerprint of an existing SSH key.
	SshKeyIdentifier string `pulumi:"sshKeyIdentifier"`
}

type LookupSshKeyResult struct {
	SshKey *SshKeys `pulumi:"sshKey"`
}

func LookupSshKeyOutput(ctx *pulumi.Context, args LookupSshKeyOutputArgs, opts ...pulumi.InvokeOption) LookupSshKeyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSshKeyResultOutput, error) {
			args := v.(LookupSshKeyArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupSshKeyResult
			secret, err := ctx.InvokePackageRaw("digitalocean-native:account/v2:getSshKey", args, &rv, "", opts...)
			if err != nil {
				return LookupSshKeyResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupSshKeyResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupSshKeyResultOutput), nil
			}
			return output, nil
		}).(LookupSshKeyResultOutput)
}

type LookupSshKeyOutputArgs struct {
	// Either the ID or the fingerprint of an existing SSH key.
	SshKeyIdentifier pulumi.StringInput `pulumi:"sshKeyIdentifier"`
}

func (LookupSshKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSshKeyArgs)(nil)).Elem()
}

type LookupSshKeyResultOutput struct{ *pulumi.OutputState }

func (LookupSshKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSshKeyResult)(nil)).Elem()
}

func (o LookupSshKeyResultOutput) ToLookupSshKeyResultOutput() LookupSshKeyResultOutput {
	return o
}

func (o LookupSshKeyResultOutput) ToLookupSshKeyResultOutputWithContext(ctx context.Context) LookupSshKeyResultOutput {
	return o
}

func (o LookupSshKeyResultOutput) SshKey() SshKeysPtrOutput {
	return o.ApplyT(func(v LookupSshKeyResult) *SshKeys { return v.SshKey }).(SshKeysPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSshKeyResultOutput{})
}
