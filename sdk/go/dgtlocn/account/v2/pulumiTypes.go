// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type Account struct {
	// The total number of Droplets current user or team may have active at one time.
	DropletLimit int `pulumi:"dropletLimit"`
	// The email address used by the current user to register for DigitalOcean.
	Email string `pulumi:"email"`
	// If true, the user has verified their account via email. False otherwise.
	EmailVerified bool `pulumi:"emailVerified"`
	// The total number of Floating IPs the current user or team may have.
	FloatingIpLimit int `pulumi:"floatingIpLimit"`
	// The display name for the current user.
	Name *string `pulumi:"name"`
	// This value is one of "active", "warning" or "locked".
	Status AccountStatus `pulumi:"status"`
	// A human-readable message giving more details about the status of the account.
	StatusMessage string `pulumi:"statusMessage"`
	// When authorized in a team context, includes information about the current team.
	Team *AccountTeamProperties `pulumi:"team"`
	// The unique universal identifier for the current user.
	Uuid string `pulumi:"uuid"`
}

// Defaults sets the appropriate defaults for Account
func (val *Account) Defaults() *Account {
	if val == nil {
		return nil
	}
	tmp := *val
	if internal.IsZero(tmp.EmailVerified) {
		tmp.EmailVerified = false
	}
	if internal.IsZero(tmp.Status) {
		tmp.Status = AccountStatus("active")
	}
	return &tmp
}

type AccountOutput struct{ *pulumi.OutputState }

func (AccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Account)(nil)).Elem()
}

func (o AccountOutput) ToAccountOutput() AccountOutput {
	return o
}

func (o AccountOutput) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return o
}

// The total number of Droplets current user or team may have active at one time.
func (o AccountOutput) DropletLimit() pulumi.IntOutput {
	return o.ApplyT(func(v Account) int { return v.DropletLimit }).(pulumi.IntOutput)
}

// The email address used by the current user to register for DigitalOcean.
func (o AccountOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v Account) string { return v.Email }).(pulumi.StringOutput)
}

// If true, the user has verified their account via email. False otherwise.
func (o AccountOutput) EmailVerified() pulumi.BoolOutput {
	return o.ApplyT(func(v Account) bool { return v.EmailVerified }).(pulumi.BoolOutput)
}

// The total number of Floating IPs the current user or team may have.
func (o AccountOutput) FloatingIpLimit() pulumi.IntOutput {
	return o.ApplyT(func(v Account) int { return v.FloatingIpLimit }).(pulumi.IntOutput)
}

// The display name for the current user.
func (o AccountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Account) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// This value is one of "active", "warning" or "locked".
func (o AccountOutput) Status() AccountStatusOutput {
	return o.ApplyT(func(v Account) AccountStatus { return v.Status }).(AccountStatusOutput)
}

// A human-readable message giving more details about the status of the account.
func (o AccountOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v Account) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// When authorized in a team context, includes information about the current team.
func (o AccountOutput) Team() AccountTeamPropertiesPtrOutput {
	return o.ApplyT(func(v Account) *AccountTeamProperties { return v.Team }).(AccountTeamPropertiesPtrOutput)
}

// The unique universal identifier for the current user.
func (o AccountOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v Account) string { return v.Uuid }).(pulumi.StringOutput)
}

type AccountPtrOutput struct{ *pulumi.OutputState }

func (AccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (o AccountPtrOutput) ToAccountPtrOutput() AccountPtrOutput {
	return o
}

func (o AccountPtrOutput) ToAccountPtrOutputWithContext(ctx context.Context) AccountPtrOutput {
	return o
}

func (o AccountPtrOutput) Elem() AccountOutput {
	return o.ApplyT(func(v *Account) Account {
		if v != nil {
			return *v
		}
		var ret Account
		return ret
	}).(AccountOutput)
}

// The total number of Droplets current user or team may have active at one time.
func (o AccountPtrOutput) DropletLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Account) *int {
		if v == nil {
			return nil
		}
		return &v.DropletLimit
	}).(pulumi.IntPtrOutput)
}

// The email address used by the current user to register for DigitalOcean.
func (o AccountPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Account) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// If true, the user has verified their account via email. False otherwise.
func (o AccountPtrOutput) EmailVerified() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Account) *bool {
		if v == nil {
			return nil
		}
		return &v.EmailVerified
	}).(pulumi.BoolPtrOutput)
}

// The total number of Floating IPs the current user or team may have.
func (o AccountPtrOutput) FloatingIpLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Account) *int {
		if v == nil {
			return nil
		}
		return &v.FloatingIpLimit
	}).(pulumi.IntPtrOutput)
}

// The display name for the current user.
func (o AccountPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Account) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// This value is one of "active", "warning" or "locked".
func (o AccountPtrOutput) Status() AccountStatusPtrOutput {
	return o.ApplyT(func(v *Account) *AccountStatus {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(AccountStatusPtrOutput)
}

// A human-readable message giving more details about the status of the account.
func (o AccountPtrOutput) StatusMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Account) *string {
		if v == nil {
			return nil
		}
		return &v.StatusMessage
	}).(pulumi.StringPtrOutput)
}

// When authorized in a team context, includes information about the current team.
func (o AccountPtrOutput) Team() AccountTeamPropertiesPtrOutput {
	return o.ApplyT(func(v *Account) *AccountTeamProperties {
		if v == nil {
			return nil
		}
		return v.Team
	}).(AccountTeamPropertiesPtrOutput)
}

// The unique universal identifier for the current user.
func (o AccountPtrOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Account) *string {
		if v == nil {
			return nil
		}
		return &v.Uuid
	}).(pulumi.StringPtrOutput)
}

// When authorized in a team context, includes information about the current team.
type AccountTeamProperties struct {
	// The name for the current team.
	Name *string `pulumi:"name"`
	// The unique universal identifier for the current team.
	Uuid *string `pulumi:"uuid"`
}

// When authorized in a team context, includes information about the current team.
type AccountTeamPropertiesOutput struct{ *pulumi.OutputState }

func (AccountTeamPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountTeamProperties)(nil)).Elem()
}

func (o AccountTeamPropertiesOutput) ToAccountTeamPropertiesOutput() AccountTeamPropertiesOutput {
	return o
}

func (o AccountTeamPropertiesOutput) ToAccountTeamPropertiesOutputWithContext(ctx context.Context) AccountTeamPropertiesOutput {
	return o
}

// The name for the current team.
func (o AccountTeamPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountTeamProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The unique universal identifier for the current team.
func (o AccountTeamPropertiesOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountTeamProperties) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

type AccountTeamPropertiesPtrOutput struct{ *pulumi.OutputState }

func (AccountTeamPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountTeamProperties)(nil)).Elem()
}

func (o AccountTeamPropertiesPtrOutput) ToAccountTeamPropertiesPtrOutput() AccountTeamPropertiesPtrOutput {
	return o
}

func (o AccountTeamPropertiesPtrOutput) ToAccountTeamPropertiesPtrOutputWithContext(ctx context.Context) AccountTeamPropertiesPtrOutput {
	return o
}

func (o AccountTeamPropertiesPtrOutput) Elem() AccountTeamPropertiesOutput {
	return o.ApplyT(func(v *AccountTeamProperties) AccountTeamProperties {
		if v != nil {
			return *v
		}
		var ret AccountTeamProperties
		return ret
	}).(AccountTeamPropertiesOutput)
}

// The name for the current team.
func (o AccountTeamPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountTeamProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The unique universal identifier for the current team.
func (o AccountTeamPropertiesPtrOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountTeamProperties) *string {
		if v == nil {
			return nil
		}
		return v.Uuid
	}).(pulumi.StringPtrOutput)
}

type GetAccountProperties struct {
	Account *Account `pulumi:"account"`
}

// Defaults sets the appropriate defaults for GetAccountProperties
func (val *GetAccountProperties) Defaults() *GetAccountProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Account = tmp.Account.Defaults()

	return &tmp
}

type GetAccountPropertiesOutput struct{ *pulumi.OutputState }

func (GetAccountPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountProperties)(nil)).Elem()
}

func (o GetAccountPropertiesOutput) ToGetAccountPropertiesOutput() GetAccountPropertiesOutput {
	return o
}

func (o GetAccountPropertiesOutput) ToGetAccountPropertiesOutputWithContext(ctx context.Context) GetAccountPropertiesOutput {
	return o
}

func (o GetAccountPropertiesOutput) Account() AccountPtrOutput {
	return o.ApplyT(func(v GetAccountProperties) *Account { return v.Account }).(AccountPtrOutput)
}

type GetSshKeysProperties struct {
	SshKey *SshKeysType `pulumi:"sshKey"`
}

type GetSshKeysPropertiesOutput struct{ *pulumi.OutputState }

func (GetSshKeysPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSshKeysProperties)(nil)).Elem()
}

func (o GetSshKeysPropertiesOutput) ToGetSshKeysPropertiesOutput() GetSshKeysPropertiesOutput {
	return o
}

func (o GetSshKeysPropertiesOutput) ToGetSshKeysPropertiesOutputWithContext(ctx context.Context) GetSshKeysPropertiesOutput {
	return o
}

func (o GetSshKeysPropertiesOutput) SshKey() SshKeysTypePtrOutput {
	return o.ApplyT(func(v GetSshKeysProperties) *SshKeysType { return v.SshKey }).(SshKeysTypePtrOutput)
}

type ListSshKeysItems struct {
	Links   *PageLinks    `pulumi:"links"`
	Meta    MetaMeta      `pulumi:"meta"`
	SshKeys []SshKeysType `pulumi:"sshKeys"`
}

type ListSshKeysItemsOutput struct{ *pulumi.OutputState }

func (ListSshKeysItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListSshKeysItems)(nil)).Elem()
}

func (o ListSshKeysItemsOutput) ToListSshKeysItemsOutput() ListSshKeysItemsOutput {
	return o
}

func (o ListSshKeysItemsOutput) ToListSshKeysItemsOutputWithContext(ctx context.Context) ListSshKeysItemsOutput {
	return o
}

func (o ListSshKeysItemsOutput) Links() PageLinksPtrOutput {
	return o.ApplyT(func(v ListSshKeysItems) *PageLinks { return v.Links }).(PageLinksPtrOutput)
}

func (o ListSshKeysItemsOutput) Meta() MetaMetaOutput {
	return o.ApplyT(func(v ListSshKeysItems) MetaMeta { return v.Meta }).(MetaMetaOutput)
}

func (o ListSshKeysItemsOutput) SshKeys() SshKeysTypeArrayOutput {
	return o.ApplyT(func(v ListSshKeysItems) []SshKeysType { return v.SshKeys }).(SshKeysTypeArrayOutput)
}

type MetaMeta struct {
	// Number of objects returned by the request.
	Total *int `pulumi:"total"`
}

type MetaMetaOutput struct{ *pulumi.OutputState }

func (MetaMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetaMeta)(nil)).Elem()
}

func (o MetaMetaOutput) ToMetaMetaOutput() MetaMetaOutput {
	return o
}

func (o MetaMetaOutput) ToMetaMetaOutputWithContext(ctx context.Context) MetaMetaOutput {
	return o
}

// Number of objects returned by the request.
func (o MetaMetaOutput) Total() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetaMeta) *int { return v.Total }).(pulumi.IntPtrOutput)
}

type PageLinks struct {
	Pages *PageLinksPagesProperties `pulumi:"pages"`
}

type PageLinksOutput struct{ *pulumi.OutputState }

func (PageLinksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PageLinks)(nil)).Elem()
}

func (o PageLinksOutput) ToPageLinksOutput() PageLinksOutput {
	return o
}

func (o PageLinksOutput) ToPageLinksOutputWithContext(ctx context.Context) PageLinksOutput {
	return o
}

func (o PageLinksOutput) Pages() PageLinksPagesPropertiesPtrOutput {
	return o.ApplyT(func(v PageLinks) *PageLinksPagesProperties { return v.Pages }).(PageLinksPagesPropertiesPtrOutput)
}

type PageLinksPtrOutput struct{ *pulumi.OutputState }

func (PageLinksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PageLinks)(nil)).Elem()
}

func (o PageLinksPtrOutput) ToPageLinksPtrOutput() PageLinksPtrOutput {
	return o
}

func (o PageLinksPtrOutput) ToPageLinksPtrOutputWithContext(ctx context.Context) PageLinksPtrOutput {
	return o
}

func (o PageLinksPtrOutput) Elem() PageLinksOutput {
	return o.ApplyT(func(v *PageLinks) PageLinks {
		if v != nil {
			return *v
		}
		var ret PageLinks
		return ret
	}).(PageLinksOutput)
}

func (o PageLinksPtrOutput) Pages() PageLinksPagesPropertiesPtrOutput {
	return o.ApplyT(func(v *PageLinks) *PageLinksPagesProperties {
		if v == nil {
			return nil
		}
		return v.Pages
	}).(PageLinksPagesPropertiesPtrOutput)
}

type PageLinksPagesProperties struct {
	First *string `pulumi:"first"`
	Last  *string `pulumi:"last"`
	Next  *string `pulumi:"next"`
	Prev  *string `pulumi:"prev"`
}

type PageLinksPagesPropertiesOutput struct{ *pulumi.OutputState }

func (PageLinksPagesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PageLinksPagesProperties)(nil)).Elem()
}

func (o PageLinksPagesPropertiesOutput) ToPageLinksPagesPropertiesOutput() PageLinksPagesPropertiesOutput {
	return o
}

func (o PageLinksPagesPropertiesOutput) ToPageLinksPagesPropertiesOutputWithContext(ctx context.Context) PageLinksPagesPropertiesOutput {
	return o
}

func (o PageLinksPagesPropertiesOutput) First() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.First }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Last() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Last }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Next() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Next }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Prev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Prev }).(pulumi.StringPtrOutput)
}

type PageLinksPagesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PageLinksPagesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PageLinksPagesProperties)(nil)).Elem()
}

func (o PageLinksPagesPropertiesPtrOutput) ToPageLinksPagesPropertiesPtrOutput() PageLinksPagesPropertiesPtrOutput {
	return o
}

func (o PageLinksPagesPropertiesPtrOutput) ToPageLinksPagesPropertiesPtrOutputWithContext(ctx context.Context) PageLinksPagesPropertiesPtrOutput {
	return o
}

func (o PageLinksPagesPropertiesPtrOutput) Elem() PageLinksPagesPropertiesOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) PageLinksPagesProperties {
		if v != nil {
			return *v
		}
		var ret PageLinksPagesProperties
		return ret
	}).(PageLinksPagesPropertiesOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) First() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.First
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Last() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Last
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Next() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Next
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Prev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Prev
	}).(pulumi.StringPtrOutput)
}

type SshKeysType struct {
	// A unique identifier that differentiates this key from other keys using  a format that SSH recognizes. The fingerprint is created when the key is added to your account.
	Fingerprint *string `pulumi:"fingerprint"`
	// A unique identification number for this key. Can be used to embed a  specific SSH key into a Droplet.
	Id *int `pulumi:"id"`
	// A human-readable display name for this key, used to easily identify the SSH keys when they are displayed.
	Name string `pulumi:"name"`
	// The entire public key string that was uploaded. Embedded into the root user's `authorized_keys` file if you include this key during Droplet creation.
	PublicKey string `pulumi:"publicKey"`
}

type SshKeysTypeOutput struct{ *pulumi.OutputState }

func (SshKeysTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshKeysType)(nil)).Elem()
}

func (o SshKeysTypeOutput) ToSshKeysTypeOutput() SshKeysTypeOutput {
	return o
}

func (o SshKeysTypeOutput) ToSshKeysTypeOutputWithContext(ctx context.Context) SshKeysTypeOutput {
	return o
}

// A unique identifier that differentiates this key from other keys using  a format that SSH recognizes. The fingerprint is created when the key is added to your account.
func (o SshKeysTypeOutput) Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshKeysType) *string { return v.Fingerprint }).(pulumi.StringPtrOutput)
}

// A unique identification number for this key. Can be used to embed a  specific SSH key into a Droplet.
func (o SshKeysTypeOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SshKeysType) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// A human-readable display name for this key, used to easily identify the SSH keys when they are displayed.
func (o SshKeysTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SshKeysType) string { return v.Name }).(pulumi.StringOutput)
}

// The entire public key string that was uploaded. Embedded into the root user's `authorized_keys` file if you include this key during Droplet creation.
func (o SshKeysTypeOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v SshKeysType) string { return v.PublicKey }).(pulumi.StringOutput)
}

type SshKeysTypePtrOutput struct{ *pulumi.OutputState }

func (SshKeysTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshKeysType)(nil)).Elem()
}

func (o SshKeysTypePtrOutput) ToSshKeysTypePtrOutput() SshKeysTypePtrOutput {
	return o
}

func (o SshKeysTypePtrOutput) ToSshKeysTypePtrOutputWithContext(ctx context.Context) SshKeysTypePtrOutput {
	return o
}

func (o SshKeysTypePtrOutput) Elem() SshKeysTypeOutput {
	return o.ApplyT(func(v *SshKeysType) SshKeysType {
		if v != nil {
			return *v
		}
		var ret SshKeysType
		return ret
	}).(SshKeysTypeOutput)
}

// A unique identifier that differentiates this key from other keys using  a format that SSH recognizes. The fingerprint is created when the key is added to your account.
func (o SshKeysTypePtrOutput) Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshKeysType) *string {
		if v == nil {
			return nil
		}
		return v.Fingerprint
	}).(pulumi.StringPtrOutput)
}

// A unique identification number for this key. Can be used to embed a  specific SSH key into a Droplet.
func (o SshKeysTypePtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SshKeysType) *int {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.IntPtrOutput)
}

// A human-readable display name for this key, used to easily identify the SSH keys when they are displayed.
func (o SshKeysTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshKeysType) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The entire public key string that was uploaded. Embedded into the root user's `authorized_keys` file if you include this key during Droplet creation.
func (o SshKeysTypePtrOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshKeysType) *string {
		if v == nil {
			return nil
		}
		return &v.PublicKey
	}).(pulumi.StringPtrOutput)
}

type SshKeysTypeArrayOutput struct{ *pulumi.OutputState }

func (SshKeysTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshKeysType)(nil)).Elem()
}

func (o SshKeysTypeArrayOutput) ToSshKeysTypeArrayOutput() SshKeysTypeArrayOutput {
	return o
}

func (o SshKeysTypeArrayOutput) ToSshKeysTypeArrayOutputWithContext(ctx context.Context) SshKeysTypeArrayOutput {
	return o
}

func (o SshKeysTypeArrayOutput) Index(i pulumi.IntInput) SshKeysTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SshKeysType {
		return vs[0].([]SshKeysType)[vs[1].(int)]
	}).(SshKeysTypeOutput)
}

func init() {
	pulumi.RegisterOutputType(AccountOutput{})
	pulumi.RegisterOutputType(AccountPtrOutput{})
	pulumi.RegisterOutputType(AccountTeamPropertiesOutput{})
	pulumi.RegisterOutputType(AccountTeamPropertiesPtrOutput{})
	pulumi.RegisterOutputType(GetAccountPropertiesOutput{})
	pulumi.RegisterOutputType(GetSshKeysPropertiesOutput{})
	pulumi.RegisterOutputType(ListSshKeysItemsOutput{})
	pulumi.RegisterOutputType(MetaMetaOutput{})
	pulumi.RegisterOutputType(PageLinksOutput{})
	pulumi.RegisterOutputType(PageLinksPtrOutput{})
	pulumi.RegisterOutputType(PageLinksPagesPropertiesOutput{})
	pulumi.RegisterOutputType(PageLinksPagesPropertiesPtrOutput{})
	pulumi.RegisterOutputType(SshKeysTypeOutput{})
	pulumi.RegisterOutputType(SshKeysTypePtrOutput{})
	pulumi.RegisterOutputType(SshKeysTypeArrayOutput{})
}
