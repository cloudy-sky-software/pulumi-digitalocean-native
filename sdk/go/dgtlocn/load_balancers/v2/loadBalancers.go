// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LoadBalancers struct {
	pulumi.CustomResourceState

	LoadBalancer LoadBalancerPtrOutput `pulumi:"loadBalancer"`
}

// NewLoadBalancers registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancers(ctx *pulumi.Context,
	name string, args *LoadBalancersArgs, opts ...pulumi.ResourceOption) (*LoadBalancers, error) {
	if args == nil {
		args = &LoadBalancersArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadBalancers
	err := ctx.RegisterResource("digitalocean-native:load_balancers/v2:LoadBalancers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancers gets an existing LoadBalancers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancersState, opts ...pulumi.ResourceOption) (*LoadBalancers, error) {
	var resource LoadBalancers
	err := ctx.ReadResource("digitalocean-native:load_balancers/v2:LoadBalancers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancers resources.
type loadBalancersState struct {
}

type LoadBalancersState struct {
}

func (LoadBalancersState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancersState)(nil)).Elem()
}

type loadBalancersArgs struct {
}

// The set of arguments for constructing a LoadBalancers resource.
type LoadBalancersArgs struct {
}

func (LoadBalancersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancersArgs)(nil)).Elem()
}

type LoadBalancersInput interface {
	pulumi.Input

	ToLoadBalancersOutput() LoadBalancersOutput
	ToLoadBalancersOutputWithContext(ctx context.Context) LoadBalancersOutput
}

func (*LoadBalancers) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancers)(nil)).Elem()
}

func (i *LoadBalancers) ToLoadBalancersOutput() LoadBalancersOutput {
	return i.ToLoadBalancersOutputWithContext(context.Background())
}

func (i *LoadBalancers) ToLoadBalancersOutputWithContext(ctx context.Context) LoadBalancersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancersOutput)
}

type LoadBalancersOutput struct{ *pulumi.OutputState }

func (LoadBalancersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancers)(nil)).Elem()
}

func (o LoadBalancersOutput) ToLoadBalancersOutput() LoadBalancersOutput {
	return o
}

func (o LoadBalancersOutput) ToLoadBalancersOutputWithContext(ctx context.Context) LoadBalancersOutput {
	return o
}

func (o LoadBalancersOutput) LoadBalancer() LoadBalancerPtrOutput {
	return o.ApplyT(func(v *LoadBalancers) LoadBalancerPtrOutput { return v.LoadBalancer }).(LoadBalancerPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancersInput)(nil)).Elem(), &LoadBalancers{})
	pulumi.RegisterOutputType(LoadBalancersOutput{})
}
