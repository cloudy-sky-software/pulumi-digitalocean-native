// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LoadBalancersDroplet struct {
	pulumi.CustomResourceState

	// An array containing the IDs of the Droplets assigned to the load balancer.
	DropletIds pulumi.IntArrayOutput `pulumi:"dropletIds"`
}

// NewLoadBalancersDroplet registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancersDroplet(ctx *pulumi.Context,
	name string, args *LoadBalancersDropletArgs, opts ...pulumi.ResourceOption) (*LoadBalancersDroplet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DropletIds == nil {
		return nil, errors.New("invalid value for required argument 'DropletIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadBalancersDroplet
	err := ctx.RegisterResource("digitalocean-native:load_balancers/v2:LoadBalancersDroplet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancersDroplet gets an existing LoadBalancersDroplet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancersDroplet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancersDropletState, opts ...pulumi.ResourceOption) (*LoadBalancersDroplet, error) {
	var resource LoadBalancersDroplet
	err := ctx.ReadResource("digitalocean-native:load_balancers/v2:LoadBalancersDroplet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancersDroplet resources.
type loadBalancersDropletState struct {
}

type LoadBalancersDropletState struct {
}

func (LoadBalancersDropletState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancersDropletState)(nil)).Elem()
}

type loadBalancersDropletArgs struct {
	// An array containing the IDs of the Droplets assigned to the load balancer.
	DropletIds []int `pulumi:"dropletIds"`
	// A unique identifier for a load balancer.
	LbId *string `pulumi:"lbId"`
}

// The set of arguments for constructing a LoadBalancersDroplet resource.
type LoadBalancersDropletArgs struct {
	// An array containing the IDs of the Droplets assigned to the load balancer.
	DropletIds pulumi.IntArrayInput
	// A unique identifier for a load balancer.
	LbId pulumi.StringPtrInput
}

func (LoadBalancersDropletArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancersDropletArgs)(nil)).Elem()
}

type LoadBalancersDropletInput interface {
	pulumi.Input

	ToLoadBalancersDropletOutput() LoadBalancersDropletOutput
	ToLoadBalancersDropletOutputWithContext(ctx context.Context) LoadBalancersDropletOutput
}

func (*LoadBalancersDroplet) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancersDroplet)(nil)).Elem()
}

func (i *LoadBalancersDroplet) ToLoadBalancersDropletOutput() LoadBalancersDropletOutput {
	return i.ToLoadBalancersDropletOutputWithContext(context.Background())
}

func (i *LoadBalancersDroplet) ToLoadBalancersDropletOutputWithContext(ctx context.Context) LoadBalancersDropletOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancersDropletOutput)
}

type LoadBalancersDropletOutput struct{ *pulumi.OutputState }

func (LoadBalancersDropletOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancersDroplet)(nil)).Elem()
}

func (o LoadBalancersDropletOutput) ToLoadBalancersDropletOutput() LoadBalancersDropletOutput {
	return o
}

func (o LoadBalancersDropletOutput) ToLoadBalancersDropletOutputWithContext(ctx context.Context) LoadBalancersDropletOutput {
	return o
}

// An array containing the IDs of the Droplets assigned to the load balancer.
func (o LoadBalancersDropletOutput) DropletIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *LoadBalancersDroplet) pulumi.IntArrayOutput { return v.DropletIds }).(pulumi.IntArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancersDropletInput)(nil)).Elem(), &LoadBalancersDroplet{})
	pulumi.RegisterOutputType(LoadBalancersDropletOutput{})
}
