// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LoadBalancersDroplets struct {
	pulumi.CustomResourceState

	// An array containing the IDs of the Droplets assigned to the load balancer.
	DropletIds pulumi.IntArrayOutput `pulumi:"dropletIds"`
}

// NewLoadBalancersDroplets registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancersDroplets(ctx *pulumi.Context,
	name string, args *LoadBalancersDropletsArgs, opts ...pulumi.ResourceOption) (*LoadBalancersDroplets, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DropletIds == nil {
		return nil, errors.New("invalid value for required argument 'DropletIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadBalancersDroplets
	err := ctx.RegisterResource("digitalocean-native:load_balancers/v2:LoadBalancersDroplets", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancersDroplets gets an existing LoadBalancersDroplets resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancersDroplets(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancersDropletsState, opts ...pulumi.ResourceOption) (*LoadBalancersDroplets, error) {
	var resource LoadBalancersDroplets
	err := ctx.ReadResource("digitalocean-native:load_balancers/v2:LoadBalancersDroplets", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancersDroplets resources.
type loadBalancersDropletsState struct {
}

type LoadBalancersDropletsState struct {
}

func (LoadBalancersDropletsState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancersDropletsState)(nil)).Elem()
}

type loadBalancersDropletsArgs struct {
	// An array containing the IDs of the Droplets assigned to the load balancer.
	DropletIds []int `pulumi:"dropletIds"`
	// A unique identifier for a load balancer.
	LbId *string `pulumi:"lbId"`
}

// The set of arguments for constructing a LoadBalancersDroplets resource.
type LoadBalancersDropletsArgs struct {
	// An array containing the IDs of the Droplets assigned to the load balancer.
	DropletIds pulumi.IntArrayInput
	// A unique identifier for a load balancer.
	LbId pulumi.StringPtrInput
}

func (LoadBalancersDropletsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancersDropletsArgs)(nil)).Elem()
}

type LoadBalancersDropletsInput interface {
	pulumi.Input

	ToLoadBalancersDropletsOutput() LoadBalancersDropletsOutput
	ToLoadBalancersDropletsOutputWithContext(ctx context.Context) LoadBalancersDropletsOutput
}

func (*LoadBalancersDroplets) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancersDroplets)(nil)).Elem()
}

func (i *LoadBalancersDroplets) ToLoadBalancersDropletsOutput() LoadBalancersDropletsOutput {
	return i.ToLoadBalancersDropletsOutputWithContext(context.Background())
}

func (i *LoadBalancersDroplets) ToLoadBalancersDropletsOutputWithContext(ctx context.Context) LoadBalancersDropletsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancersDropletsOutput)
}

type LoadBalancersDropletsOutput struct{ *pulumi.OutputState }

func (LoadBalancersDropletsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancersDroplets)(nil)).Elem()
}

func (o LoadBalancersDropletsOutput) ToLoadBalancersDropletsOutput() LoadBalancersDropletsOutput {
	return o
}

func (o LoadBalancersDropletsOutput) ToLoadBalancersDropletsOutputWithContext(ctx context.Context) LoadBalancersDropletsOutput {
	return o
}

// An array containing the IDs of the Droplets assigned to the load balancer.
func (o LoadBalancersDropletsOutput) DropletIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *LoadBalancersDroplets) pulumi.IntArrayOutput { return v.DropletIds }).(pulumi.IntArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancersDropletsInput)(nil)).Elem(), &LoadBalancersDroplets{})
	pulumi.RegisterOutputType(LoadBalancersDropletsOutput{})
}
