// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UptimeCheck struct {
	pulumi.CustomResourceState

	Check CheckPtrOutput `pulumi:"check"`
	// A boolean value indicating whether the check is enabled/disabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// A human-friendly display name.
	Name pulumi.StringOutput `pulumi:"name"`
	// An array containing the selected regions to perform healthchecks from.
	Regions CheckUpdatableRegionsItemArrayOutput `pulumi:"regions"`
	// The endpoint to perform healthchecks on.
	Target pulumi.StringOutput `pulumi:"target"`
	// The type of health check to perform.
	Type CheckUpdatableTypeOutput `pulumi:"type"`
}

// NewUptimeCheck registers a new resource with the given unique name, arguments, and options.
func NewUptimeCheck(ctx *pulumi.Context,
	name string, args *UptimeCheckArgs, opts ...pulumi.ResourceOption) (*UptimeCheck, error) {
	if args == nil {
		args = &UptimeCheckArgs{}
	}

	if args.Enabled == nil {
		args.Enabled = pulumi.BoolPtr(true)
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UptimeCheck
	err := ctx.RegisterResource("digitalocean-native:uptime/v2:UptimeCheck", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUptimeCheck gets an existing UptimeCheck resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUptimeCheck(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UptimeCheckState, opts ...pulumi.ResourceOption) (*UptimeCheck, error) {
	var resource UptimeCheck
	err := ctx.ReadResource("digitalocean-native:uptime/v2:UptimeCheck", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UptimeCheck resources.
type uptimeCheckState struct {
}

type UptimeCheckState struct {
}

func (UptimeCheckState) ElementType() reflect.Type {
	return reflect.TypeOf((*uptimeCheckState)(nil)).Elem()
}

type uptimeCheckArgs struct {
	// A boolean value indicating whether the check is enabled/disabled.
	Enabled *bool `pulumi:"enabled"`
	// A human-friendly display name.
	Name *string `pulumi:"name"`
	// An array containing the selected regions to perform healthchecks from.
	Regions []CheckUpdatableRegionsItem `pulumi:"regions"`
	// The endpoint to perform healthchecks on.
	Target *string `pulumi:"target"`
	// The type of health check to perform.
	Type *CheckUpdatableType `pulumi:"type"`
}

// The set of arguments for constructing a UptimeCheck resource.
type UptimeCheckArgs struct {
	// A boolean value indicating whether the check is enabled/disabled.
	Enabled pulumi.BoolPtrInput
	// A human-friendly display name.
	Name pulumi.StringPtrInput
	// An array containing the selected regions to perform healthchecks from.
	Regions CheckUpdatableRegionsItemArrayInput
	// The endpoint to perform healthchecks on.
	Target pulumi.StringPtrInput
	// The type of health check to perform.
	Type CheckUpdatableTypePtrInput
}

func (UptimeCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*uptimeCheckArgs)(nil)).Elem()
}

type UptimeCheckInput interface {
	pulumi.Input

	ToUptimeCheckOutput() UptimeCheckOutput
	ToUptimeCheckOutputWithContext(ctx context.Context) UptimeCheckOutput
}

func (*UptimeCheck) ElementType() reflect.Type {
	return reflect.TypeOf((**UptimeCheck)(nil)).Elem()
}

func (i *UptimeCheck) ToUptimeCheckOutput() UptimeCheckOutput {
	return i.ToUptimeCheckOutputWithContext(context.Background())
}

func (i *UptimeCheck) ToUptimeCheckOutputWithContext(ctx context.Context) UptimeCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UptimeCheckOutput)
}

type UptimeCheckOutput struct{ *pulumi.OutputState }

func (UptimeCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UptimeCheck)(nil)).Elem()
}

func (o UptimeCheckOutput) ToUptimeCheckOutput() UptimeCheckOutput {
	return o
}

func (o UptimeCheckOutput) ToUptimeCheckOutputWithContext(ctx context.Context) UptimeCheckOutput {
	return o
}

func (o UptimeCheckOutput) Check() CheckPtrOutput {
	return o.ApplyT(func(v *UptimeCheck) CheckPtrOutput { return v.Check }).(CheckPtrOutput)
}

// A boolean value indicating whether the check is enabled/disabled.
func (o UptimeCheckOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *UptimeCheck) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// A human-friendly display name.
func (o UptimeCheckOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UptimeCheck) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An array containing the selected regions to perform healthchecks from.
func (o UptimeCheckOutput) Regions() CheckUpdatableRegionsItemArrayOutput {
	return o.ApplyT(func(v *UptimeCheck) CheckUpdatableRegionsItemArrayOutput { return v.Regions }).(CheckUpdatableRegionsItemArrayOutput)
}

// The endpoint to perform healthchecks on.
func (o UptimeCheckOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *UptimeCheck) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

// The type of health check to perform.
func (o UptimeCheckOutput) Type() CheckUpdatableTypeOutput {
	return o.ApplyT(func(v *UptimeCheck) CheckUpdatableTypeOutput { return v.Type }).(CheckUpdatableTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UptimeCheckInput)(nil)).Elem(), &UptimeCheck{})
	pulumi.RegisterOutputType(UptimeCheckOutput{})
}
