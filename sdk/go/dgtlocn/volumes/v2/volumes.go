// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Volumes struct {
	pulumi.CustomResourceState

	Volume VolumeFullPtrOutput `pulumi:"volume"`
}

// NewVolumes registers a new resource with the given unique name, arguments, and options.
func NewVolumes(ctx *pulumi.Context,
	name string, args *VolumesArgs, opts ...pulumi.ResourceOption) (*Volumes, error) {
	if args == nil {
		args = &VolumesArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Volumes
	err := ctx.RegisterResource("digitalocean-native:volumes/v2:Volumes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumes gets an existing Volumes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumesState, opts ...pulumi.ResourceOption) (*Volumes, error) {
	var resource Volumes
	err := ctx.ReadResource("digitalocean-native:volumes/v2:Volumes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volumes resources.
type volumesState struct {
}

type VolumesState struct {
}

func (VolumesState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumesState)(nil)).Elem()
}

type volumesArgs struct {
}

// The set of arguments for constructing a Volumes resource.
type VolumesArgs struct {
}

func (VolumesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumesArgs)(nil)).Elem()
}

type VolumesInput interface {
	pulumi.Input

	ToVolumesOutput() VolumesOutput
	ToVolumesOutputWithContext(ctx context.Context) VolumesOutput
}

func (*Volumes) ElementType() reflect.Type {
	return reflect.TypeOf((**Volumes)(nil)).Elem()
}

func (i *Volumes) ToVolumesOutput() VolumesOutput {
	return i.ToVolumesOutputWithContext(context.Background())
}

func (i *Volumes) ToVolumesOutputWithContext(ctx context.Context) VolumesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumesOutput)
}

type VolumesOutput struct{ *pulumi.OutputState }

func (VolumesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Volumes)(nil)).Elem()
}

func (o VolumesOutput) ToVolumesOutput() VolumesOutput {
	return o
}

func (o VolumesOutput) ToVolumesOutputWithContext(ctx context.Context) VolumesOutput {
	return o
}

func (o VolumesOutput) Volume() VolumeFullPtrOutput {
	return o.ApplyT(func(v *Volumes) VolumeFullPtrOutput { return v.Volume }).(VolumeFullPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumesInput)(nil)).Elem(), &Volumes{})
	pulumi.RegisterOutputType(VolumesOutput{})
}
