// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Attach struct {
	pulumi.CustomResourceState

	Action VolumeActionPtrOutput `pulumi:"action"`
	// The unique identifier for the Droplet the volume will be attached or detached from.
	DropletId pulumi.IntPtrOutput `pulumi:"dropletId"`
	// The slug identifier for the region where the resource will initially be  available.
	Region VolumeActionCreateBaseRegionPtrOutput `pulumi:"region"`
	// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The volume action to initiate.
	Type VolumeActionCreateBaseTypePtrOutput `pulumi:"type"`
}

// NewAttach registers a new resource with the given unique name, arguments, and options.
func NewAttach(ctx *pulumi.Context,
	name string, args *AttachArgs, opts ...pulumi.ResourceOption) (*Attach, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DropletId == nil {
		return nil, errors.New("invalid value for required argument 'DropletId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Attach
	err := ctx.RegisterResource("digitalocean-native:volumes/v2:Attach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttach gets an existing Attach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttachState, opts ...pulumi.ResourceOption) (*Attach, error) {
	var resource Attach
	err := ctx.ReadResource("digitalocean-native:volumes/v2:Attach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Attach resources.
type attachState struct {
}

type AttachState struct {
}

func (AttachState) ElementType() reflect.Type {
	return reflect.TypeOf((*attachState)(nil)).Elem()
}

type attachArgs struct {
	// The unique identifier for the Droplet the volume will be attached or detached from.
	DropletId int `pulumi:"dropletId"`
	// The slug identifier for the region where the resource will initially be  available.
	Region *VolumeActionCreateBaseRegion `pulumi:"region"`
	// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
	Tags []string `pulumi:"tags"`
	// The volume action to initiate.
	Type VolumeActionCreateBaseType `pulumi:"type"`
	// The ID of the block storage volume.
	VolumeId *string `pulumi:"volumeId"`
}

// The set of arguments for constructing a Attach resource.
type AttachArgs struct {
	// The unique identifier for the Droplet the volume will be attached or detached from.
	DropletId pulumi.IntInput
	// The slug identifier for the region where the resource will initially be  available.
	Region VolumeActionCreateBaseRegionPtrInput
	// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
	Tags pulumi.StringArrayInput
	// The volume action to initiate.
	Type VolumeActionCreateBaseTypeInput
	// The ID of the block storage volume.
	VolumeId pulumi.StringPtrInput
}

func (AttachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attachArgs)(nil)).Elem()
}

type AttachInput interface {
	pulumi.Input

	ToAttachOutput() AttachOutput
	ToAttachOutputWithContext(ctx context.Context) AttachOutput
}

func (*Attach) ElementType() reflect.Type {
	return reflect.TypeOf((**Attach)(nil)).Elem()
}

func (i *Attach) ToAttachOutput() AttachOutput {
	return i.ToAttachOutputWithContext(context.Background())
}

func (i *Attach) ToAttachOutputWithContext(ctx context.Context) AttachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachOutput)
}

type AttachOutput struct{ *pulumi.OutputState }

func (AttachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Attach)(nil)).Elem()
}

func (o AttachOutput) ToAttachOutput() AttachOutput {
	return o
}

func (o AttachOutput) ToAttachOutputWithContext(ctx context.Context) AttachOutput {
	return o
}

func (o AttachOutput) Action() VolumeActionPtrOutput {
	return o.ApplyT(func(v *Attach) VolumeActionPtrOutput { return v.Action }).(VolumeActionPtrOutput)
}

// The unique identifier for the Droplet the volume will be attached or detached from.
func (o AttachOutput) DropletId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Attach) pulumi.IntPtrOutput { return v.DropletId }).(pulumi.IntPtrOutput)
}

// The slug identifier for the region where the resource will initially be  available.
func (o AttachOutput) Region() VolumeActionCreateBaseRegionPtrOutput {
	return o.ApplyT(func(v *Attach) VolumeActionCreateBaseRegionPtrOutput { return v.Region }).(VolumeActionCreateBaseRegionPtrOutput)
}

// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
func (o AttachOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Attach) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The volume action to initiate.
func (o AttachOutput) Type() VolumeActionCreateBaseTypePtrOutput {
	return o.ApplyT(func(v *Attach) VolumeActionCreateBaseTypePtrOutput { return v.Type }).(VolumeActionCreateBaseTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttachInput)(nil)).Elem(), &Attach{})
	pulumi.RegisterOutputType(AttachOutput{})
}
