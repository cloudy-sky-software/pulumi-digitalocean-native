// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VolumeActionsByIdResize struct {
	pulumi.CustomResourceState

	Action VolumeActionPtrOutput `pulumi:"action"`
	// The slug identifier for the region where the resource will initially be  available.
	Region VolumeActionPostBaseRegionPtrOutput `pulumi:"region"`
	// The new size of the block storage volume in GiB (1024^3).
	SizeGigabytes pulumi.IntPtrOutput `pulumi:"sizeGigabytes"`
	// The volume action to initiate.
	Type VolumeActionPostBaseTypePtrOutput `pulumi:"type"`
}

// NewVolumeActionsByIdResize registers a new resource with the given unique name, arguments, and options.
func NewVolumeActionsByIdResize(ctx *pulumi.Context,
	name string, args *VolumeActionsByIdResizeArgs, opts ...pulumi.ResourceOption) (*VolumeActionsByIdResize, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SizeGigabytes == nil {
		return nil, errors.New("invalid value for required argument 'SizeGigabytes'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeActionsByIdResize
	err := ctx.RegisterResource("digitalocean-native:volumes/v2:VolumeActionsByIdResize", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeActionsByIdResize gets an existing VolumeActionsByIdResize resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeActionsByIdResize(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeActionsByIdResizeState, opts ...pulumi.ResourceOption) (*VolumeActionsByIdResize, error) {
	var resource VolumeActionsByIdResize
	err := ctx.ReadResource("digitalocean-native:volumes/v2:VolumeActionsByIdResize", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeActionsByIdResize resources.
type volumeActionsByIdResizeState struct {
}

type VolumeActionsByIdResizeState struct {
}

func (VolumeActionsByIdResizeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeActionsByIdResizeState)(nil)).Elem()
}

type volumeActionsByIdResizeArgs struct {
	// The slug identifier for the region where the resource will initially be  available.
	Region *VolumeActionPostBaseRegion `pulumi:"region"`
	// The new size of the block storage volume in GiB (1024^3).
	SizeGigabytes int `pulumi:"sizeGigabytes"`
	// The volume action to initiate.
	Type VolumeActionPostBaseType `pulumi:"type"`
	// The ID of the block storage volume.
	VolumeId *string `pulumi:"volumeId"`
}

// The set of arguments for constructing a VolumeActionsByIdResize resource.
type VolumeActionsByIdResizeArgs struct {
	// The slug identifier for the region where the resource will initially be  available.
	Region VolumeActionPostBaseRegionPtrInput
	// The new size of the block storage volume in GiB (1024^3).
	SizeGigabytes pulumi.IntInput
	// The volume action to initiate.
	Type VolumeActionPostBaseTypeInput
	// The ID of the block storage volume.
	VolumeId pulumi.StringPtrInput
}

func (VolumeActionsByIdResizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeActionsByIdResizeArgs)(nil)).Elem()
}

type VolumeActionsByIdResizeInput interface {
	pulumi.Input

	ToVolumeActionsByIdResizeOutput() VolumeActionsByIdResizeOutput
	ToVolumeActionsByIdResizeOutputWithContext(ctx context.Context) VolumeActionsByIdResizeOutput
}

func (*VolumeActionsByIdResize) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeActionsByIdResize)(nil)).Elem()
}

func (i *VolumeActionsByIdResize) ToVolumeActionsByIdResizeOutput() VolumeActionsByIdResizeOutput {
	return i.ToVolumeActionsByIdResizeOutputWithContext(context.Background())
}

func (i *VolumeActionsByIdResize) ToVolumeActionsByIdResizeOutputWithContext(ctx context.Context) VolumeActionsByIdResizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeActionsByIdResizeOutput)
}

type VolumeActionsByIdResizeOutput struct{ *pulumi.OutputState }

func (VolumeActionsByIdResizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeActionsByIdResize)(nil)).Elem()
}

func (o VolumeActionsByIdResizeOutput) ToVolumeActionsByIdResizeOutput() VolumeActionsByIdResizeOutput {
	return o
}

func (o VolumeActionsByIdResizeOutput) ToVolumeActionsByIdResizeOutputWithContext(ctx context.Context) VolumeActionsByIdResizeOutput {
	return o
}

func (o VolumeActionsByIdResizeOutput) Action() VolumeActionPtrOutput {
	return o.ApplyT(func(v *VolumeActionsByIdResize) VolumeActionPtrOutput { return v.Action }).(VolumeActionPtrOutput)
}

// The slug identifier for the region where the resource will initially be  available.
func (o VolumeActionsByIdResizeOutput) Region() VolumeActionPostBaseRegionPtrOutput {
	return o.ApplyT(func(v *VolumeActionsByIdResize) VolumeActionPostBaseRegionPtrOutput { return v.Region }).(VolumeActionPostBaseRegionPtrOutput)
}

// The new size of the block storage volume in GiB (1024^3).
func (o VolumeActionsByIdResizeOutput) SizeGigabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeActionsByIdResize) pulumi.IntPtrOutput { return v.SizeGigabytes }).(pulumi.IntPtrOutput)
}

// The volume action to initiate.
func (o VolumeActionsByIdResizeOutput) Type() VolumeActionPostBaseTypePtrOutput {
	return o.ApplyT(func(v *VolumeActionsByIdResize) VolumeActionPostBaseTypePtrOutput { return v.Type }).(VolumeActionPostBaseTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeActionsByIdResizeInput)(nil)).Elem(), &VolumeActionsByIdResize{})
	pulumi.RegisterOutputType(VolumeActionsByIdResizeOutput{})
}
