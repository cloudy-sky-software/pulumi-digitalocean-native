// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Detach struct {
	pulumi.CustomResourceState

	Action VolumeActionPtrOutput `pulumi:"action"`
	// The unique identifier for the Droplet the volume will be attached or detached from.
	DropletId pulumi.IntPtrOutput `pulumi:"dropletId"`
	// The slug identifier for the region where the resource will initially be  available.
	Region DetachVolumeActionCreateBaseRegionPtrOutput `pulumi:"region"`
	// The volume action to initiate.
	Type DetachVolumeActionCreateBaseTypePtrOutput `pulumi:"type"`
}

// NewDetach registers a new resource with the given unique name, arguments, and options.
func NewDetach(ctx *pulumi.Context,
	name string, args *DetachArgs, opts ...pulumi.ResourceOption) (*Detach, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DropletId == nil {
		return nil, errors.New("invalid value for required argument 'DropletId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Detach
	err := ctx.RegisterResource("digitalocean-native:volumes/v2:Detach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDetach gets an existing Detach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDetach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DetachState, opts ...pulumi.ResourceOption) (*Detach, error) {
	var resource Detach
	err := ctx.ReadResource("digitalocean-native:volumes/v2:Detach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Detach resources.
type detachState struct {
}

type DetachState struct {
}

func (DetachState) ElementType() reflect.Type {
	return reflect.TypeOf((*detachState)(nil)).Elem()
}

type detachArgs struct {
	// The unique identifier for the Droplet the volume will be attached or detached from.
	DropletId int `pulumi:"dropletId"`
	// The slug identifier for the region where the resource will initially be  available.
	Region *DetachVolumeActionCreateBaseRegion `pulumi:"region"`
	// The volume action to initiate.
	Type DetachVolumeActionCreateBaseType `pulumi:"type"`
	// The ID of the block storage volume.
	VolumeId *string `pulumi:"volumeId"`
}

// The set of arguments for constructing a Detach resource.
type DetachArgs struct {
	// The unique identifier for the Droplet the volume will be attached or detached from.
	DropletId pulumi.IntInput
	// The slug identifier for the region where the resource will initially be  available.
	Region DetachVolumeActionCreateBaseRegionPtrInput
	// The volume action to initiate.
	Type DetachVolumeActionCreateBaseTypeInput
	// The ID of the block storage volume.
	VolumeId pulumi.StringPtrInput
}

func (DetachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*detachArgs)(nil)).Elem()
}

type DetachInput interface {
	pulumi.Input

	ToDetachOutput() DetachOutput
	ToDetachOutputWithContext(ctx context.Context) DetachOutput
}

func (*Detach) ElementType() reflect.Type {
	return reflect.TypeOf((**Detach)(nil)).Elem()
}

func (i *Detach) ToDetachOutput() DetachOutput {
	return i.ToDetachOutputWithContext(context.Background())
}

func (i *Detach) ToDetachOutputWithContext(ctx context.Context) DetachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetachOutput)
}

type DetachOutput struct{ *pulumi.OutputState }

func (DetachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Detach)(nil)).Elem()
}

func (o DetachOutput) ToDetachOutput() DetachOutput {
	return o
}

func (o DetachOutput) ToDetachOutputWithContext(ctx context.Context) DetachOutput {
	return o
}

func (o DetachOutput) Action() VolumeActionPtrOutput {
	return o.ApplyT(func(v *Detach) VolumeActionPtrOutput { return v.Action }).(VolumeActionPtrOutput)
}

// The unique identifier for the Droplet the volume will be attached or detached from.
func (o DetachOutput) DropletId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Detach) pulumi.IntPtrOutput { return v.DropletId }).(pulumi.IntPtrOutput)
}

// The slug identifier for the region where the resource will initially be  available.
func (o DetachOutput) Region() DetachVolumeActionCreateBaseRegionPtrOutput {
	return o.ApplyT(func(v *Detach) DetachVolumeActionCreateBaseRegionPtrOutput { return v.Region }).(DetachVolumeActionCreateBaseRegionPtrOutput)
}

// The volume action to initiate.
func (o DetachOutput) Type() DetachVolumeActionCreateBaseTypePtrOutput {
	return o.ApplyT(func(v *Detach) DetachVolumeActionCreateBaseTypePtrOutput { return v.Type }).(DetachVolumeActionCreateBaseTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DetachInput)(nil)).Elem(), &Detach{})
	pulumi.RegisterOutputType(DetachOutput{})
}
