// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Ext4 struct {
	pulumi.CustomResourceState

	// A time value given in ISO8601 combined date and time format that represents when the block storage volume was created.
	CreatedAt pulumi.StringPtrOutput `pulumi:"createdAt"`
	// An optional free-form text field to describe a block storage volume.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An array containing the IDs of the Droplets the volume is attached to. Note that at this time, a volume can only be attached to a single Droplet.
	DropletIds      pulumi.IntArrayOutput  `pulumi:"dropletIds"`
	FilesystemLabel pulumi.StringPtrOutput `pulumi:"filesystemLabel"`
	// The name of the filesystem type to be used on the volume. When provided, the volume will automatically be formatted to the specified filesystem type. Currently, the available options are `ext4` and `xfs`. Pre-formatted volumes are automatically mounted when attached to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS Droplets created on or after April 26, 2018. Attaching pre-formatted volumes to other Droplets is not recommended.
	FilesystemType pulumi.StringPtrOutput `pulumi:"filesystemType"`
	// A human-readable name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters. The name must begin with a letter.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The slug identifier for the region where the resource will initially be  available.
	Region Ext4PropertiesRegionPtrOutput `pulumi:"region"`
	// The size of the block storage volume in GiB (1024^3). This field does not apply  when creating a volume from a snapshot.
	SizeGigabytes pulumi.IntPtrOutput `pulumi:"sizeGigabytes"`
	// The unique identifier for the volume snapshot from which to create the volume.
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
	// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
	Tags   pulumi.StringArrayOutput `pulumi:"tags"`
	Volume VolumeFullPtrOutput      `pulumi:"volume"`
}

// NewExt4 registers a new resource with the given unique name, arguments, and options.
func NewExt4(ctx *pulumi.Context,
	name string, args *Ext4Args, opts ...pulumi.ResourceOption) (*Ext4, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ext4
	err := ctx.RegisterResource("digitalocean-native:volumes/v2:Ext4", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExt4 gets an existing Ext4 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExt4(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ext4State, opts ...pulumi.ResourceOption) (*Ext4, error) {
	var resource Ext4
	err := ctx.ReadResource("digitalocean-native:volumes/v2:Ext4", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ext4 resources.
type ext4State struct {
}

type Ext4State struct {
}

func (Ext4State) ElementType() reflect.Type {
	return reflect.TypeOf((*ext4State)(nil)).Elem()
}

type ext4Args struct {
	// A time value given in ISO8601 combined date and time format that represents when the block storage volume was created.
	CreatedAt *string `pulumi:"createdAt"`
	// An optional free-form text field to describe a block storage volume.
	Description *string `pulumi:"description"`
	// An array containing the IDs of the Droplets the volume is attached to. Note that at this time, a volume can only be attached to a single Droplet.
	DropletIds      []int   `pulumi:"dropletIds"`
	FilesystemLabel *string `pulumi:"filesystemLabel"`
	// The name of the filesystem type to be used on the volume. When provided, the volume will automatically be formatted to the specified filesystem type. Currently, the available options are `ext4` and `xfs`. Pre-formatted volumes are automatically mounted when attached to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS Droplets created on or after April 26, 2018. Attaching pre-formatted volumes to other Droplets is not recommended.
	FilesystemType *string `pulumi:"filesystemType"`
	// A human-readable name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters. The name must begin with a letter.
	Name *string `pulumi:"name"`
	// The slug identifier for the region where the resource will initially be  available.
	Region Ext4PropertiesRegion `pulumi:"region"`
	// The size of the block storage volume in GiB (1024^3). This field does not apply  when creating a volume from a snapshot.
	SizeGigabytes *int `pulumi:"sizeGigabytes"`
	// The unique identifier for the volume snapshot from which to create the volume.
	SnapshotId *string `pulumi:"snapshotId"`
	// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Ext4 resource.
type Ext4Args struct {
	// A time value given in ISO8601 combined date and time format that represents when the block storage volume was created.
	CreatedAt pulumi.StringPtrInput
	// An optional free-form text field to describe a block storage volume.
	Description pulumi.StringPtrInput
	// An array containing the IDs of the Droplets the volume is attached to. Note that at this time, a volume can only be attached to a single Droplet.
	DropletIds      pulumi.IntArrayInput
	FilesystemLabel pulumi.StringPtrInput
	// The name of the filesystem type to be used on the volume. When provided, the volume will automatically be formatted to the specified filesystem type. Currently, the available options are `ext4` and `xfs`. Pre-formatted volumes are automatically mounted when attached to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS Droplets created on or after April 26, 2018. Attaching pre-formatted volumes to other Droplets is not recommended.
	FilesystemType pulumi.StringPtrInput
	// A human-readable name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters. The name must begin with a letter.
	Name pulumi.StringPtrInput
	// The slug identifier for the region where the resource will initially be  available.
	Region Ext4PropertiesRegionInput
	// The size of the block storage volume in GiB (1024^3). This field does not apply  when creating a volume from a snapshot.
	SizeGigabytes pulumi.IntPtrInput
	// The unique identifier for the volume snapshot from which to create the volume.
	SnapshotId pulumi.StringPtrInput
	// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
	Tags pulumi.StringArrayInput
}

func (Ext4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ext4Args)(nil)).Elem()
}

type Ext4Input interface {
	pulumi.Input

	ToExt4Output() Ext4Output
	ToExt4OutputWithContext(ctx context.Context) Ext4Output
}

func (*Ext4) ElementType() reflect.Type {
	return reflect.TypeOf((**Ext4)(nil)).Elem()
}

func (i *Ext4) ToExt4Output() Ext4Output {
	return i.ToExt4OutputWithContext(context.Background())
}

func (i *Ext4) ToExt4OutputWithContext(ctx context.Context) Ext4Output {
	return pulumi.ToOutputWithContext(ctx, i).(Ext4Output)
}

type Ext4Output struct{ *pulumi.OutputState }

func (Ext4Output) ElementType() reflect.Type {
	return reflect.TypeOf((**Ext4)(nil)).Elem()
}

func (o Ext4Output) ToExt4Output() Ext4Output {
	return o
}

func (o Ext4Output) ToExt4OutputWithContext(ctx context.Context) Ext4Output {
	return o
}

// A time value given in ISO8601 combined date and time format that represents when the block storage volume was created.
func (o Ext4Output) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ext4) pulumi.StringPtrOutput { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// An optional free-form text field to describe a block storage volume.
func (o Ext4Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ext4) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An array containing the IDs of the Droplets the volume is attached to. Note that at this time, a volume can only be attached to a single Droplet.
func (o Ext4Output) DropletIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Ext4) pulumi.IntArrayOutput { return v.DropletIds }).(pulumi.IntArrayOutput)
}

func (o Ext4Output) FilesystemLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ext4) pulumi.StringPtrOutput { return v.FilesystemLabel }).(pulumi.StringPtrOutput)
}

// The name of the filesystem type to be used on the volume. When provided, the volume will automatically be formatted to the specified filesystem type. Currently, the available options are `ext4` and `xfs`. Pre-formatted volumes are automatically mounted when attached to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS Droplets created on or after April 26, 2018. Attaching pre-formatted volumes to other Droplets is not recommended.
func (o Ext4Output) FilesystemType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ext4) pulumi.StringPtrOutput { return v.FilesystemType }).(pulumi.StringPtrOutput)
}

// A human-readable name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters. The name must begin with a letter.
func (o Ext4Output) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ext4) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The slug identifier for the region where the resource will initially be  available.
func (o Ext4Output) Region() Ext4PropertiesRegionPtrOutput {
	return o.ApplyT(func(v *Ext4) Ext4PropertiesRegionPtrOutput { return v.Region }).(Ext4PropertiesRegionPtrOutput)
}

// The size of the block storage volume in GiB (1024^3). This field does not apply  when creating a volume from a snapshot.
func (o Ext4Output) SizeGigabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ext4) pulumi.IntPtrOutput { return v.SizeGigabytes }).(pulumi.IntPtrOutput)
}

// The unique identifier for the volume snapshot from which to create the volume.
func (o Ext4Output) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ext4) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
func (o Ext4Output) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Ext4) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o Ext4Output) Volume() VolumeFullPtrOutput {
	return o.ApplyT(func(v *Ext4) VolumeFullPtrOutput { return v.Volume }).(VolumeFullPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ext4Input)(nil)).Elem(), &Ext4{})
	pulumi.RegisterOutputType(Ext4Output{})
}
