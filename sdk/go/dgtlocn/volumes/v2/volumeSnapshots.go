// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VolumeSnapshots struct {
	pulumi.CustomResourceState

	// A human-readable name for the volume snapshot.
	Name     pulumi.StringOutput `pulumi:"name"`
	Snapshot SnapshotsPtrOutput  `pulumi:"snapshot"`
	// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewVolumeSnapshots registers a new resource with the given unique name, arguments, and options.
func NewVolumeSnapshots(ctx *pulumi.Context,
	name string, args *VolumeSnapshotsArgs, opts ...pulumi.ResourceOption) (*VolumeSnapshots, error) {
	if args == nil {
		args = &VolumeSnapshotsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeSnapshots
	err := ctx.RegisterResource("digitalocean-native:volumes/v2:VolumeSnapshots", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeSnapshots gets an existing VolumeSnapshots resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeSnapshots(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeSnapshotsState, opts ...pulumi.ResourceOption) (*VolumeSnapshots, error) {
	var resource VolumeSnapshots
	err := ctx.ReadResource("digitalocean-native:volumes/v2:VolumeSnapshots", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeSnapshots resources.
type volumeSnapshotsState struct {
}

type VolumeSnapshotsState struct {
}

func (VolumeSnapshotsState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeSnapshotsState)(nil)).Elem()
}

type volumeSnapshotsArgs struct {
	// A human-readable name for the volume snapshot.
	Name *string `pulumi:"name"`
	// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
	Tags []string `pulumi:"tags"`
	// The ID of the block storage volume.
	VolumeId *string `pulumi:"volumeId"`
}

// The set of arguments for constructing a VolumeSnapshots resource.
type VolumeSnapshotsArgs struct {
	// A human-readable name for the volume snapshot.
	Name pulumi.StringPtrInput
	// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
	Tags pulumi.StringArrayInput
	// The ID of the block storage volume.
	VolumeId pulumi.StringPtrInput
}

func (VolumeSnapshotsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeSnapshotsArgs)(nil)).Elem()
}

type VolumeSnapshotsInput interface {
	pulumi.Input

	ToVolumeSnapshotsOutput() VolumeSnapshotsOutput
	ToVolumeSnapshotsOutputWithContext(ctx context.Context) VolumeSnapshotsOutput
}

func (*VolumeSnapshots) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshots)(nil)).Elem()
}

func (i *VolumeSnapshots) ToVolumeSnapshotsOutput() VolumeSnapshotsOutput {
	return i.ToVolumeSnapshotsOutputWithContext(context.Background())
}

func (i *VolumeSnapshots) ToVolumeSnapshotsOutputWithContext(ctx context.Context) VolumeSnapshotsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotsOutput)
}

type VolumeSnapshotsOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshots)(nil)).Elem()
}

func (o VolumeSnapshotsOutput) ToVolumeSnapshotsOutput() VolumeSnapshotsOutput {
	return o
}

func (o VolumeSnapshotsOutput) ToVolumeSnapshotsOutputWithContext(ctx context.Context) VolumeSnapshotsOutput {
	return o
}

// A human-readable name for the volume snapshot.
func (o VolumeSnapshotsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeSnapshots) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VolumeSnapshotsOutput) Snapshot() SnapshotsPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshots) SnapshotsPtrOutput { return v.Snapshot }).(SnapshotsPtrOutput)
}

// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
func (o VolumeSnapshotsOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VolumeSnapshots) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSnapshotsInput)(nil)).Elem(), &VolumeSnapshots{})
	pulumi.RegisterOutputType(VolumeSnapshotsOutput{})
}
