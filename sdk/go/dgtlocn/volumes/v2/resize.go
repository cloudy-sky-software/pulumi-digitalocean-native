// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Resize struct {
	pulumi.CustomResourceState

	Action VolumeActionPtrOutput `pulumi:"action"`
	// The slug identifier for the region where the resource will initially be  available.
	Region VolumeActionCreateBaseRegionPtrOutput `pulumi:"region"`
	// The new size of the block storage volume in GiB (1024^3).
	SizeGigabytes pulumi.IntPtrOutput `pulumi:"sizeGigabytes"`
	// The volume action to initiate.
	Type VolumeActionCreateBaseTypePtrOutput `pulumi:"type"`
}

// NewResize registers a new resource with the given unique name, arguments, and options.
func NewResize(ctx *pulumi.Context,
	name string, args *ResizeArgs, opts ...pulumi.ResourceOption) (*Resize, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SizeGigabytes == nil {
		return nil, errors.New("invalid value for required argument 'SizeGigabytes'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Resize
	err := ctx.RegisterResource("digitalocean-native:volumes/v2:Resize", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResize gets an existing Resize resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResize(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResizeState, opts ...pulumi.ResourceOption) (*Resize, error) {
	var resource Resize
	err := ctx.ReadResource("digitalocean-native:volumes/v2:Resize", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Resize resources.
type resizeState struct {
}

type ResizeState struct {
}

func (ResizeState) ElementType() reflect.Type {
	return reflect.TypeOf((*resizeState)(nil)).Elem()
}

type resizeArgs struct {
	// The slug identifier for the region where the resource will initially be  available.
	Region *VolumeActionCreateBaseRegion `pulumi:"region"`
	// The new size of the block storage volume in GiB (1024^3).
	SizeGigabytes int `pulumi:"sizeGigabytes"`
	// The volume action to initiate.
	Type VolumeActionCreateBaseType `pulumi:"type"`
	// The ID of the block storage volume.
	VolumeId *string `pulumi:"volumeId"`
}

// The set of arguments for constructing a Resize resource.
type ResizeArgs struct {
	// The slug identifier for the region where the resource will initially be  available.
	Region VolumeActionCreateBaseRegionPtrInput
	// The new size of the block storage volume in GiB (1024^3).
	SizeGigabytes pulumi.IntInput
	// The volume action to initiate.
	Type VolumeActionCreateBaseTypeInput
	// The ID of the block storage volume.
	VolumeId pulumi.StringPtrInput
}

func (ResizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resizeArgs)(nil)).Elem()
}

type ResizeInput interface {
	pulumi.Input

	ToResizeOutput() ResizeOutput
	ToResizeOutputWithContext(ctx context.Context) ResizeOutput
}

func (*Resize) ElementType() reflect.Type {
	return reflect.TypeOf((**Resize)(nil)).Elem()
}

func (i *Resize) ToResizeOutput() ResizeOutput {
	return i.ToResizeOutputWithContext(context.Background())
}

func (i *Resize) ToResizeOutputWithContext(ctx context.Context) ResizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResizeOutput)
}

type ResizeOutput struct{ *pulumi.OutputState }

func (ResizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resize)(nil)).Elem()
}

func (o ResizeOutput) ToResizeOutput() ResizeOutput {
	return o
}

func (o ResizeOutput) ToResizeOutputWithContext(ctx context.Context) ResizeOutput {
	return o
}

func (o ResizeOutput) Action() VolumeActionPtrOutput {
	return o.ApplyT(func(v *Resize) VolumeActionPtrOutput { return v.Action }).(VolumeActionPtrOutput)
}

// The slug identifier for the region where the resource will initially be  available.
func (o ResizeOutput) Region() VolumeActionCreateBaseRegionPtrOutput {
	return o.ApplyT(func(v *Resize) VolumeActionCreateBaseRegionPtrOutput { return v.Region }).(VolumeActionCreateBaseRegionPtrOutput)
}

// The new size of the block storage volume in GiB (1024^3).
func (o ResizeOutput) SizeGigabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Resize) pulumi.IntPtrOutput { return v.SizeGigabytes }).(pulumi.IntPtrOutput)
}

// The volume action to initiate.
func (o ResizeOutput) Type() VolumeActionCreateBaseTypePtrOutput {
	return o.ApplyT(func(v *Resize) VolumeActionCreateBaseTypePtrOutput { return v.Type }).(VolumeActionCreateBaseTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResizeInput)(nil)).Elem(), &Resize{})
	pulumi.RegisterOutputType(ResizeOutput{})
}
