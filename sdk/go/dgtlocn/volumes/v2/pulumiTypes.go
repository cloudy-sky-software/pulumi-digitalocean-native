// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ActionRegionSlug struct {
}

type ActionRegionSlugOutput struct{ *pulumi.OutputState }

func (ActionRegionSlugOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRegionSlug)(nil)).Elem()
}

func (o ActionRegionSlugOutput) ToActionRegionSlugOutput() ActionRegionSlugOutput {
	return o
}

func (o ActionRegionSlugOutput) ToActionRegionSlugOutputWithContext(ctx context.Context) ActionRegionSlugOutput {
	return o
}

type ActionRegionSlugPtrOutput struct{ *pulumi.OutputState }

func (ActionRegionSlugPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRegionSlug)(nil)).Elem()
}

func (o ActionRegionSlugPtrOutput) ToActionRegionSlugPtrOutput() ActionRegionSlugPtrOutput {
	return o
}

func (o ActionRegionSlugPtrOutput) ToActionRegionSlugPtrOutputWithContext(ctx context.Context) ActionRegionSlugPtrOutput {
	return o
}

func (o ActionRegionSlugPtrOutput) Elem() ActionRegionSlugOutput {
	return o.ApplyT(func(v *ActionRegionSlug) ActionRegionSlug {
		if v != nil {
			return *v
		}
		var ret ActionRegionSlug
		return ret
	}).(ActionRegionSlugOutput)
}

type GetVolumeActionsProperties struct {
	Action *VolumeAction `pulumi:"action"`
}

// Defaults sets the appropriate defaults for GetVolumeActionsProperties
func (val *GetVolumeActionsProperties) Defaults() *GetVolumeActionsProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Action = tmp.Action.Defaults()

	return &tmp
}

type GetVolumeActionsPropertiesOutput struct{ *pulumi.OutputState }

func (GetVolumeActionsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeActionsProperties)(nil)).Elem()
}

func (o GetVolumeActionsPropertiesOutput) ToGetVolumeActionsPropertiesOutput() GetVolumeActionsPropertiesOutput {
	return o
}

func (o GetVolumeActionsPropertiesOutput) ToGetVolumeActionsPropertiesOutputWithContext(ctx context.Context) GetVolumeActionsPropertiesOutput {
	return o
}

func (o GetVolumeActionsPropertiesOutput) Action() VolumeActionPtrOutput {
	return o.ApplyT(func(v GetVolumeActionsProperties) *VolumeAction { return v.Action }).(VolumeActionPtrOutput)
}

type GetVolumeSnapshotsByIdProperties struct {
	Snapshot *Snapshots `pulumi:"snapshot"`
}

type GetVolumeSnapshotsByIdPropertiesOutput struct{ *pulumi.OutputState }

func (GetVolumeSnapshotsByIdPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeSnapshotsByIdProperties)(nil)).Elem()
}

func (o GetVolumeSnapshotsByIdPropertiesOutput) ToGetVolumeSnapshotsByIdPropertiesOutput() GetVolumeSnapshotsByIdPropertiesOutput {
	return o
}

func (o GetVolumeSnapshotsByIdPropertiesOutput) ToGetVolumeSnapshotsByIdPropertiesOutputWithContext(ctx context.Context) GetVolumeSnapshotsByIdPropertiesOutput {
	return o
}

func (o GetVolumeSnapshotsByIdPropertiesOutput) Snapshot() SnapshotsPtrOutput {
	return o.ApplyT(func(v GetVolumeSnapshotsByIdProperties) *Snapshots { return v.Snapshot }).(SnapshotsPtrOutput)
}

type GetVolumesProperties struct {
	Volume *VolumeFull `pulumi:"volume"`
}

type GetVolumesPropertiesOutput struct{ *pulumi.OutputState }

func (GetVolumesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesProperties)(nil)).Elem()
}

func (o GetVolumesPropertiesOutput) ToGetVolumesPropertiesOutput() GetVolumesPropertiesOutput {
	return o
}

func (o GetVolumesPropertiesOutput) ToGetVolumesPropertiesOutputWithContext(ctx context.Context) GetVolumesPropertiesOutput {
	return o
}

func (o GetVolumesPropertiesOutput) Volume() VolumeFullPtrOutput {
	return o.ApplyT(func(v GetVolumesProperties) *VolumeFull { return v.Volume }).(VolumeFullPtrOutput)
}

type ListVolumeActions struct {
	Actions []VolumeAction `pulumi:"actions"`
	Links   *PageLinks     `pulumi:"links"`
	Meta    MetaMeta       `pulumi:"meta"`
}

type ListVolumeActionsOutput struct{ *pulumi.OutputState }

func (ListVolumeActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListVolumeActions)(nil)).Elem()
}

func (o ListVolumeActionsOutput) ToListVolumeActionsOutput() ListVolumeActionsOutput {
	return o
}

func (o ListVolumeActionsOutput) ToListVolumeActionsOutputWithContext(ctx context.Context) ListVolumeActionsOutput {
	return o
}

func (o ListVolumeActionsOutput) Actions() VolumeActionArrayOutput {
	return o.ApplyT(func(v ListVolumeActions) []VolumeAction { return v.Actions }).(VolumeActionArrayOutput)
}

func (o ListVolumeActionsOutput) Links() PageLinksPtrOutput {
	return o.ApplyT(func(v ListVolumeActions) *PageLinks { return v.Links }).(PageLinksPtrOutput)
}

func (o ListVolumeActionsOutput) Meta() MetaMetaOutput {
	return o.ApplyT(func(v ListVolumeActions) MetaMeta { return v.Meta }).(MetaMetaOutput)
}

type ListVolumeSnapshots struct {
	Links     *PageLinks  `pulumi:"links"`
	Meta      MetaMeta    `pulumi:"meta"`
	Snapshots []Snapshots `pulumi:"snapshots"`
}

type ListVolumeSnapshotsOutput struct{ *pulumi.OutputState }

func (ListVolumeSnapshotsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListVolumeSnapshots)(nil)).Elem()
}

func (o ListVolumeSnapshotsOutput) ToListVolumeSnapshotsOutput() ListVolumeSnapshotsOutput {
	return o
}

func (o ListVolumeSnapshotsOutput) ToListVolumeSnapshotsOutputWithContext(ctx context.Context) ListVolumeSnapshotsOutput {
	return o
}

func (o ListVolumeSnapshotsOutput) Links() PageLinksPtrOutput {
	return o.ApplyT(func(v ListVolumeSnapshots) *PageLinks { return v.Links }).(PageLinksPtrOutput)
}

func (o ListVolumeSnapshotsOutput) Meta() MetaMetaOutput {
	return o.ApplyT(func(v ListVolumeSnapshots) MetaMeta { return v.Meta }).(MetaMetaOutput)
}

func (o ListVolumeSnapshotsOutput) Snapshots() SnapshotsArrayOutput {
	return o.ApplyT(func(v ListVolumeSnapshots) []Snapshots { return v.Snapshots }).(SnapshotsArrayOutput)
}

type ListVolumes struct {
	Links *PageLinks `pulumi:"links"`
	Meta  MetaMeta   `pulumi:"meta"`
	// Array of volumes.
	Volumes []VolumeFull `pulumi:"volumes"`
}

type ListVolumesOutput struct{ *pulumi.OutputState }

func (ListVolumesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListVolumes)(nil)).Elem()
}

func (o ListVolumesOutput) ToListVolumesOutput() ListVolumesOutput {
	return o
}

func (o ListVolumesOutput) ToListVolumesOutputWithContext(ctx context.Context) ListVolumesOutput {
	return o
}

func (o ListVolumesOutput) Links() PageLinksPtrOutput {
	return o.ApplyT(func(v ListVolumes) *PageLinks { return v.Links }).(PageLinksPtrOutput)
}

func (o ListVolumesOutput) Meta() MetaMetaOutput {
	return o.ApplyT(func(v ListVolumes) MetaMeta { return v.Meta }).(MetaMetaOutput)
}

// Array of volumes.
func (o ListVolumesOutput) Volumes() VolumeFullArrayOutput {
	return o.ApplyT(func(v ListVolumes) []VolumeFull { return v.Volumes }).(VolumeFullArrayOutput)
}

type MetaMeta struct {
	// Number of objects returned by the request.
	Total *int `pulumi:"total"`
}

type MetaMetaOutput struct{ *pulumi.OutputState }

func (MetaMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetaMeta)(nil)).Elem()
}

func (o MetaMetaOutput) ToMetaMetaOutput() MetaMetaOutput {
	return o
}

func (o MetaMetaOutput) ToMetaMetaOutputWithContext(ctx context.Context) MetaMetaOutput {
	return o
}

// Number of objects returned by the request.
func (o MetaMetaOutput) Total() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetaMeta) *int { return v.Total }).(pulumi.IntPtrOutput)
}

type PageLinks struct {
	Pages *PageLinksPagesProperties `pulumi:"pages"`
}

type PageLinksOutput struct{ *pulumi.OutputState }

func (PageLinksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PageLinks)(nil)).Elem()
}

func (o PageLinksOutput) ToPageLinksOutput() PageLinksOutput {
	return o
}

func (o PageLinksOutput) ToPageLinksOutputWithContext(ctx context.Context) PageLinksOutput {
	return o
}

func (o PageLinksOutput) Pages() PageLinksPagesPropertiesPtrOutput {
	return o.ApplyT(func(v PageLinks) *PageLinksPagesProperties { return v.Pages }).(PageLinksPagesPropertiesPtrOutput)
}

type PageLinksPtrOutput struct{ *pulumi.OutputState }

func (PageLinksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PageLinks)(nil)).Elem()
}

func (o PageLinksPtrOutput) ToPageLinksPtrOutput() PageLinksPtrOutput {
	return o
}

func (o PageLinksPtrOutput) ToPageLinksPtrOutputWithContext(ctx context.Context) PageLinksPtrOutput {
	return o
}

func (o PageLinksPtrOutput) Elem() PageLinksOutput {
	return o.ApplyT(func(v *PageLinks) PageLinks {
		if v != nil {
			return *v
		}
		var ret PageLinks
		return ret
	}).(PageLinksOutput)
}

func (o PageLinksPtrOutput) Pages() PageLinksPagesPropertiesPtrOutput {
	return o.ApplyT(func(v *PageLinks) *PageLinksPagesProperties {
		if v == nil {
			return nil
		}
		return v.Pages
	}).(PageLinksPagesPropertiesPtrOutput)
}

type PageLinksPagesProperties struct {
	First *string `pulumi:"first"`
	Last  *string `pulumi:"last"`
	Next  *string `pulumi:"next"`
	Prev  *string `pulumi:"prev"`
}

type PageLinksPagesPropertiesOutput struct{ *pulumi.OutputState }

func (PageLinksPagesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PageLinksPagesProperties)(nil)).Elem()
}

func (o PageLinksPagesPropertiesOutput) ToPageLinksPagesPropertiesOutput() PageLinksPagesPropertiesOutput {
	return o
}

func (o PageLinksPagesPropertiesOutput) ToPageLinksPagesPropertiesOutputWithContext(ctx context.Context) PageLinksPagesPropertiesOutput {
	return o
}

func (o PageLinksPagesPropertiesOutput) First() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.First }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Last() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Last }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Next() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Next }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Prev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Prev }).(pulumi.StringPtrOutput)
}

type PageLinksPagesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PageLinksPagesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PageLinksPagesProperties)(nil)).Elem()
}

func (o PageLinksPagesPropertiesPtrOutput) ToPageLinksPagesPropertiesPtrOutput() PageLinksPagesPropertiesPtrOutput {
	return o
}

func (o PageLinksPagesPropertiesPtrOutput) ToPageLinksPagesPropertiesPtrOutputWithContext(ctx context.Context) PageLinksPagesPropertiesPtrOutput {
	return o
}

func (o PageLinksPagesPropertiesPtrOutput) Elem() PageLinksPagesPropertiesOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) PageLinksPagesProperties {
		if v != nil {
			return *v
		}
		var ret PageLinksPagesProperties
		return ret
	}).(PageLinksPagesPropertiesOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) First() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.First
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Last() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Last
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Next() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Next
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Prev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Prev
	}).(pulumi.StringPtrOutput)
}

type Region struct {
	// This is a boolean value that represents whether new Droplets can be created in this region.
	Available bool `pulumi:"available"`
	// This attribute is set to an array which contains features available in this region
	Features []string `pulumi:"features"`
	// The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
	Name string `pulumi:"name"`
	// This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
	Sizes []string `pulumi:"sizes"`
	// A human-readable string that is used as a unique identifier for each region.
	Slug string `pulumi:"slug"`
}

type RegionOutput struct{ *pulumi.OutputState }

func (RegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Region)(nil)).Elem()
}

func (o RegionOutput) ToRegionOutput() RegionOutput {
	return o
}

func (o RegionOutput) ToRegionOutputWithContext(ctx context.Context) RegionOutput {
	return o
}

// This is a boolean value that represents whether new Droplets can be created in this region.
func (o RegionOutput) Available() pulumi.BoolOutput {
	return o.ApplyT(func(v Region) bool { return v.Available }).(pulumi.BoolOutput)
}

// This attribute is set to an array which contains features available in this region
func (o RegionOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Region) []string { return v.Features }).(pulumi.StringArrayOutput)
}

// The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
func (o RegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Region) string { return v.Name }).(pulumi.StringOutput)
}

// This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
func (o RegionOutput) Sizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Region) []string { return v.Sizes }).(pulumi.StringArrayOutput)
}

// A human-readable string that is used as a unique identifier for each region.
func (o RegionOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v Region) string { return v.Slug }).(pulumi.StringOutput)
}

type RegionPtrOutput struct{ *pulumi.OutputState }

func (RegionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Region)(nil)).Elem()
}

func (o RegionPtrOutput) ToRegionPtrOutput() RegionPtrOutput {
	return o
}

func (o RegionPtrOutput) ToRegionPtrOutputWithContext(ctx context.Context) RegionPtrOutput {
	return o
}

func (o RegionPtrOutput) Elem() RegionOutput {
	return o.ApplyT(func(v *Region) Region {
		if v != nil {
			return *v
		}
		var ret Region
		return ret
	}).(RegionOutput)
}

// This is a boolean value that represents whether new Droplets can be created in this region.
func (o RegionPtrOutput) Available() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Region) *bool {
		if v == nil {
			return nil
		}
		return &v.Available
	}).(pulumi.BoolPtrOutput)
}

// This attribute is set to an array which contains features available in this region
func (o RegionPtrOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Region) []string {
		if v == nil {
			return nil
		}
		return v.Features
	}).(pulumi.StringArrayOutput)
}

// The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
func (o RegionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Region) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
func (o RegionPtrOutput) Sizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Region) []string {
		if v == nil {
			return nil
		}
		return v.Sizes
	}).(pulumi.StringArrayOutput)
}

// A human-readable string that is used as a unique identifier for each region.
func (o RegionPtrOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Region) *string {
		if v == nil {
			return nil
		}
		return &v.Slug
	}).(pulumi.StringPtrOutput)
}

type Snapshots struct {
	// A time value given in ISO8601 combined date and time format that represents when the snapshot was created.
	CreatedAt string `pulumi:"createdAt"`
	// The minimum size in GB required for a volume or Droplet to use this snapshot.
	MinDiskSize int `pulumi:"minDiskSize"`
	// A human-readable name for the snapshot.
	Name string `pulumi:"name"`
	// An array of the regions that the snapshot is available in. The regions are represented by their identifying slug values.
	Regions []string `pulumi:"regions"`
	// The unique identifier for the resource that the snapshot originated from.
	ResourceId string `pulumi:"resourceId"`
	// The type of resource that the snapshot originated from.
	ResourceType SnapshotsPropertiesResourceType `pulumi:"resourceType"`
	// The billable size of the snapshot in gigabytes.
	SizeGigabytes float64 `pulumi:"sizeGigabytes"`
	// An array of Tags the snapshot has been tagged with.
	Tags []string `pulumi:"tags"`
}

type SnapshotsOutput struct{ *pulumi.OutputState }

func (SnapshotsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Snapshots)(nil)).Elem()
}

func (o SnapshotsOutput) ToSnapshotsOutput() SnapshotsOutput {
	return o
}

func (o SnapshotsOutput) ToSnapshotsOutputWithContext(ctx context.Context) SnapshotsOutput {
	return o
}

// A time value given in ISO8601 combined date and time format that represents when the snapshot was created.
func (o SnapshotsOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v Snapshots) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The minimum size in GB required for a volume or Droplet to use this snapshot.
func (o SnapshotsOutput) MinDiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v Snapshots) int { return v.MinDiskSize }).(pulumi.IntOutput)
}

// A human-readable name for the snapshot.
func (o SnapshotsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Snapshots) string { return v.Name }).(pulumi.StringOutput)
}

// An array of the regions that the snapshot is available in. The regions are represented by their identifying slug values.
func (o SnapshotsOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Snapshots) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// The unique identifier for the resource that the snapshot originated from.
func (o SnapshotsOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v Snapshots) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The type of resource that the snapshot originated from.
func (o SnapshotsOutput) ResourceType() SnapshotsPropertiesResourceTypeOutput {
	return o.ApplyT(func(v Snapshots) SnapshotsPropertiesResourceType { return v.ResourceType }).(SnapshotsPropertiesResourceTypeOutput)
}

// The billable size of the snapshot in gigabytes.
func (o SnapshotsOutput) SizeGigabytes() pulumi.Float64Output {
	return o.ApplyT(func(v Snapshots) float64 { return v.SizeGigabytes }).(pulumi.Float64Output)
}

// An array of Tags the snapshot has been tagged with.
func (o SnapshotsOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Snapshots) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type SnapshotsPtrOutput struct{ *pulumi.OutputState }

func (SnapshotsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshots)(nil)).Elem()
}

func (o SnapshotsPtrOutput) ToSnapshotsPtrOutput() SnapshotsPtrOutput {
	return o
}

func (o SnapshotsPtrOutput) ToSnapshotsPtrOutputWithContext(ctx context.Context) SnapshotsPtrOutput {
	return o
}

func (o SnapshotsPtrOutput) Elem() SnapshotsOutput {
	return o.ApplyT(func(v *Snapshots) Snapshots {
		if v != nil {
			return *v
		}
		var ret Snapshots
		return ret
	}).(SnapshotsOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the snapshot was created.
func (o SnapshotsPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snapshots) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// The minimum size in GB required for a volume or Droplet to use this snapshot.
func (o SnapshotsPtrOutput) MinDiskSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Snapshots) *int {
		if v == nil {
			return nil
		}
		return &v.MinDiskSize
	}).(pulumi.IntPtrOutput)
}

// A human-readable name for the snapshot.
func (o SnapshotsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snapshots) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// An array of the regions that the snapshot is available in. The regions are represented by their identifying slug values.
func (o SnapshotsPtrOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Snapshots) []string {
		if v == nil {
			return nil
		}
		return v.Regions
	}).(pulumi.StringArrayOutput)
}

// The unique identifier for the resource that the snapshot originated from.
func (o SnapshotsPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snapshots) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The type of resource that the snapshot originated from.
func (o SnapshotsPtrOutput) ResourceType() SnapshotsPropertiesResourceTypePtrOutput {
	return o.ApplyT(func(v *Snapshots) *SnapshotsPropertiesResourceType {
		if v == nil {
			return nil
		}
		return &v.ResourceType
	}).(SnapshotsPropertiesResourceTypePtrOutput)
}

// The billable size of the snapshot in gigabytes.
func (o SnapshotsPtrOutput) SizeGigabytes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Snapshots) *float64 {
		if v == nil {
			return nil
		}
		return &v.SizeGigabytes
	}).(pulumi.Float64PtrOutput)
}

// An array of Tags the snapshot has been tagged with.
func (o SnapshotsPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Snapshots) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

type SnapshotsArrayOutput struct{ *pulumi.OutputState }

func (SnapshotsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Snapshots)(nil)).Elem()
}

func (o SnapshotsArrayOutput) ToSnapshotsArrayOutput() SnapshotsArrayOutput {
	return o
}

func (o SnapshotsArrayOutput) ToSnapshotsArrayOutputWithContext(ctx context.Context) SnapshotsArrayOutput {
	return o
}

func (o SnapshotsArrayOutput) Index(i pulumi.IntInput) SnapshotsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Snapshots {
		return vs[0].([]Snapshots)[vs[1].(int)]
	}).(SnapshotsOutput)
}

type VolumeAction struct {
	// A time value given in ISO8601 combined date and time format that represents when the action was completed.
	CompletedAt *string `pulumi:"completedAt"`
	// A unique numeric ID that can be used to identify and reference an action.
	Id         *int              `pulumi:"id"`
	Region     *Region           `pulumi:"region"`
	RegionSlug *ActionRegionSlug `pulumi:"regionSlug"`
	// A unique identifier for the resource that the action is associated with.
	ResourceId *int `pulumi:"resourceId"`
	// The type of resource that the action is associated with.
	ResourceType *string `pulumi:"resourceType"`
	// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
	StartedAt *string `pulumi:"startedAt"`
	// The current status of the action. This can be "in-progress", "completed", or "errored".
	Status *ActionStatus `pulumi:"status"`
	// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for VolumeAction
func (val *VolumeAction) Defaults() *VolumeAction {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Status == nil {
		status_ := ActionStatus("in-progress")
		tmp.Status = &status_
	}
	return &tmp
}

type VolumeActionOutput struct{ *pulumi.OutputState }

func (VolumeActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAction)(nil)).Elem()
}

func (o VolumeActionOutput) ToVolumeActionOutput() VolumeActionOutput {
	return o
}

func (o VolumeActionOutput) ToVolumeActionOutputWithContext(ctx context.Context) VolumeActionOutput {
	return o
}

// A time value given in ISO8601 combined date and time format that represents when the action was completed.
func (o VolumeActionOutput) CompletedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAction) *string { return v.CompletedAt }).(pulumi.StringPtrOutput)
}

// A unique numeric ID that can be used to identify and reference an action.
func (o VolumeActionOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeAction) *int { return v.Id }).(pulumi.IntPtrOutput)
}

func (o VolumeActionOutput) Region() RegionPtrOutput {
	return o.ApplyT(func(v VolumeAction) *Region { return v.Region }).(RegionPtrOutput)
}

func (o VolumeActionOutput) RegionSlug() ActionRegionSlugPtrOutput {
	return o.ApplyT(func(v VolumeAction) *ActionRegionSlug { return v.RegionSlug }).(ActionRegionSlugPtrOutput)
}

// A unique identifier for the resource that the action is associated with.
func (o VolumeActionOutput) ResourceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeAction) *int { return v.ResourceId }).(pulumi.IntPtrOutput)
}

// The type of resource that the action is associated with.
func (o VolumeActionOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAction) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
func (o VolumeActionOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAction) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

// The current status of the action. This can be "in-progress", "completed", or "errored".
func (o VolumeActionOutput) Status() ActionStatusPtrOutput {
	return o.ApplyT(func(v VolumeAction) *ActionStatus { return v.Status }).(ActionStatusPtrOutput)
}

// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
func (o VolumeActionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAction) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VolumeActionPtrOutput struct{ *pulumi.OutputState }

func (VolumeActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAction)(nil)).Elem()
}

func (o VolumeActionPtrOutput) ToVolumeActionPtrOutput() VolumeActionPtrOutput {
	return o
}

func (o VolumeActionPtrOutput) ToVolumeActionPtrOutputWithContext(ctx context.Context) VolumeActionPtrOutput {
	return o
}

func (o VolumeActionPtrOutput) Elem() VolumeActionOutput {
	return o.ApplyT(func(v *VolumeAction) VolumeAction {
		if v != nil {
			return *v
		}
		var ret VolumeAction
		return ret
	}).(VolumeActionOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the action was completed.
func (o VolumeActionPtrOutput) CompletedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAction) *string {
		if v == nil {
			return nil
		}
		return v.CompletedAt
	}).(pulumi.StringPtrOutput)
}

// A unique numeric ID that can be used to identify and reference an action.
func (o VolumeActionPtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeAction) *int {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.IntPtrOutput)
}

func (o VolumeActionPtrOutput) Region() RegionPtrOutput {
	return o.ApplyT(func(v *VolumeAction) *Region {
		if v == nil {
			return nil
		}
		return v.Region
	}).(RegionPtrOutput)
}

func (o VolumeActionPtrOutput) RegionSlug() ActionRegionSlugPtrOutput {
	return o.ApplyT(func(v *VolumeAction) *ActionRegionSlug {
		if v == nil {
			return nil
		}
		return v.RegionSlug
	}).(ActionRegionSlugPtrOutput)
}

// A unique identifier for the resource that the action is associated with.
func (o VolumeActionPtrOutput) ResourceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeAction) *int {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.IntPtrOutput)
}

// The type of resource that the action is associated with.
func (o VolumeActionPtrOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAction) *string {
		if v == nil {
			return nil
		}
		return v.ResourceType
	}).(pulumi.StringPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
func (o VolumeActionPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAction) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// The current status of the action. This can be "in-progress", "completed", or "errored".
func (o VolumeActionPtrOutput) Status() ActionStatusPtrOutput {
	return o.ApplyT(func(v *VolumeAction) *ActionStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(ActionStatusPtrOutput)
}

// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
func (o VolumeActionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAction) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type VolumeActionArrayOutput struct{ *pulumi.OutputState }

func (VolumeActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeAction)(nil)).Elem()
}

func (o VolumeActionArrayOutput) ToVolumeActionArrayOutput() VolumeActionArrayOutput {
	return o
}

func (o VolumeActionArrayOutput) ToVolumeActionArrayOutputWithContext(ctx context.Context) VolumeActionArrayOutput {
	return o
}

func (o VolumeActionArrayOutput) Index(i pulumi.IntInput) VolumeActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeAction {
		return vs[0].([]VolumeAction)[vs[1].(int)]
	}).(VolumeActionOutput)
}

type VolumeFull struct {
	// A time value given in ISO8601 combined date and time format that represents when the block storage volume was created.
	CreatedAt *string `pulumi:"createdAt"`
	// An optional free-form text field to describe a block storage volume.
	Description *string `pulumi:"description"`
	// An array containing the IDs of the Droplets the volume is attached to. Note that at this time, a volume can only be attached to a single Droplet.
	DropletIds []int `pulumi:"dropletIds"`
	// The label currently applied to the filesystem.
	FilesystemLabel *string `pulumi:"filesystemLabel"`
	// The type of filesystem currently in-use on the volume.
	FilesystemType *string `pulumi:"filesystemType"`
	// The unique identifier for the block storage volume.
	Id *string `pulumi:"id"`
	// A human-readable name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters. The name must begin with a letter.
	Name   *string                     `pulumi:"name"`
	Region *VolumeFullPropertiesRegion `pulumi:"region"`
	// The size of the block storage volume in GiB (1024^3). This field does not apply  when creating a volume from a snapshot.
	SizeGigabytes *int `pulumi:"sizeGigabytes"`
	// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
	Tags []string `pulumi:"tags"`
}

type VolumeFullOutput struct{ *pulumi.OutputState }

func (VolumeFullOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeFull)(nil)).Elem()
}

func (o VolumeFullOutput) ToVolumeFullOutput() VolumeFullOutput {
	return o
}

func (o VolumeFullOutput) ToVolumeFullOutputWithContext(ctx context.Context) VolumeFullOutput {
	return o
}

// A time value given in ISO8601 combined date and time format that represents when the block storage volume was created.
func (o VolumeFullOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeFull) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// An optional free-form text field to describe a block storage volume.
func (o VolumeFullOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeFull) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// An array containing the IDs of the Droplets the volume is attached to. Note that at this time, a volume can only be attached to a single Droplet.
func (o VolumeFullOutput) DropletIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v VolumeFull) []int { return v.DropletIds }).(pulumi.IntArrayOutput)
}

// The label currently applied to the filesystem.
func (o VolumeFullOutput) FilesystemLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeFull) *string { return v.FilesystemLabel }).(pulumi.StringPtrOutput)
}

// The type of filesystem currently in-use on the volume.
func (o VolumeFullOutput) FilesystemType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeFull) *string { return v.FilesystemType }).(pulumi.StringPtrOutput)
}

// The unique identifier for the block storage volume.
func (o VolumeFullOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeFull) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A human-readable name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters. The name must begin with a letter.
func (o VolumeFullOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeFull) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o VolumeFullOutput) Region() VolumeFullPropertiesRegionPtrOutput {
	return o.ApplyT(func(v VolumeFull) *VolumeFullPropertiesRegion { return v.Region }).(VolumeFullPropertiesRegionPtrOutput)
}

// The size of the block storage volume in GiB (1024^3). This field does not apply  when creating a volume from a snapshot.
func (o VolumeFullOutput) SizeGigabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeFull) *int { return v.SizeGigabytes }).(pulumi.IntPtrOutput)
}

// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
func (o VolumeFullOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeFull) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type VolumeFullPtrOutput struct{ *pulumi.OutputState }

func (VolumeFullPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeFull)(nil)).Elem()
}

func (o VolumeFullPtrOutput) ToVolumeFullPtrOutput() VolumeFullPtrOutput {
	return o
}

func (o VolumeFullPtrOutput) ToVolumeFullPtrOutputWithContext(ctx context.Context) VolumeFullPtrOutput {
	return o
}

func (o VolumeFullPtrOutput) Elem() VolumeFullOutput {
	return o.ApplyT(func(v *VolumeFull) VolumeFull {
		if v != nil {
			return *v
		}
		var ret VolumeFull
		return ret
	}).(VolumeFullOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the block storage volume was created.
func (o VolumeFullPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeFull) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// An optional free-form text field to describe a block storage volume.
func (o VolumeFullPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeFull) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// An array containing the IDs of the Droplets the volume is attached to. Note that at this time, a volume can only be attached to a single Droplet.
func (o VolumeFullPtrOutput) DropletIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *VolumeFull) []int {
		if v == nil {
			return nil
		}
		return v.DropletIds
	}).(pulumi.IntArrayOutput)
}

// The label currently applied to the filesystem.
func (o VolumeFullPtrOutput) FilesystemLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeFull) *string {
		if v == nil {
			return nil
		}
		return v.FilesystemLabel
	}).(pulumi.StringPtrOutput)
}

// The type of filesystem currently in-use on the volume.
func (o VolumeFullPtrOutput) FilesystemType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeFull) *string {
		if v == nil {
			return nil
		}
		return v.FilesystemType
	}).(pulumi.StringPtrOutput)
}

// The unique identifier for the block storage volume.
func (o VolumeFullPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeFull) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// A human-readable name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters. The name must begin with a letter.
func (o VolumeFullPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeFull) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o VolumeFullPtrOutput) Region() VolumeFullPropertiesRegionPtrOutput {
	return o.ApplyT(func(v *VolumeFull) *VolumeFullPropertiesRegion {
		if v == nil {
			return nil
		}
		return v.Region
	}).(VolumeFullPropertiesRegionPtrOutput)
}

// The size of the block storage volume in GiB (1024^3). This field does not apply  when creating a volume from a snapshot.
func (o VolumeFullPtrOutput) SizeGigabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeFull) *int {
		if v == nil {
			return nil
		}
		return v.SizeGigabytes
	}).(pulumi.IntPtrOutput)
}

// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
func (o VolumeFullPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VolumeFull) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

type VolumeFullArrayOutput struct{ *pulumi.OutputState }

func (VolumeFullArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeFull)(nil)).Elem()
}

func (o VolumeFullArrayOutput) ToVolumeFullArrayOutput() VolumeFullArrayOutput {
	return o
}

func (o VolumeFullArrayOutput) ToVolumeFullArrayOutputWithContext(ctx context.Context) VolumeFullArrayOutput {
	return o
}

func (o VolumeFullArrayOutput) Index(i pulumi.IntInput) VolumeFullOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeFull {
		return vs[0].([]VolumeFull)[vs[1].(int)]
	}).(VolumeFullOutput)
}

type VolumeFullPropertiesRegion struct {
	// This is a boolean value that represents whether new Droplets can be created in this region.
	Available bool `pulumi:"available"`
	// This attribute is set to an array which contains features available in this region
	Features []string `pulumi:"features"`
	// The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
	Name string `pulumi:"name"`
	// This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
	Sizes []string `pulumi:"sizes"`
	// A human-readable string that is used as a unique identifier for each region.
	Slug string `pulumi:"slug"`
}

type VolumeFullPropertiesRegionOutput struct{ *pulumi.OutputState }

func (VolumeFullPropertiesRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeFullPropertiesRegion)(nil)).Elem()
}

func (o VolumeFullPropertiesRegionOutput) ToVolumeFullPropertiesRegionOutput() VolumeFullPropertiesRegionOutput {
	return o
}

func (o VolumeFullPropertiesRegionOutput) ToVolumeFullPropertiesRegionOutputWithContext(ctx context.Context) VolumeFullPropertiesRegionOutput {
	return o
}

// This is a boolean value that represents whether new Droplets can be created in this region.
func (o VolumeFullPropertiesRegionOutput) Available() pulumi.BoolOutput {
	return o.ApplyT(func(v VolumeFullPropertiesRegion) bool { return v.Available }).(pulumi.BoolOutput)
}

// This attribute is set to an array which contains features available in this region
func (o VolumeFullPropertiesRegionOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeFullPropertiesRegion) []string { return v.Features }).(pulumi.StringArrayOutput)
}

// The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
func (o VolumeFullPropertiesRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeFullPropertiesRegion) string { return v.Name }).(pulumi.StringOutput)
}

// This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
func (o VolumeFullPropertiesRegionOutput) Sizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeFullPropertiesRegion) []string { return v.Sizes }).(pulumi.StringArrayOutput)
}

// A human-readable string that is used as a unique identifier for each region.
func (o VolumeFullPropertiesRegionOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeFullPropertiesRegion) string { return v.Slug }).(pulumi.StringOutput)
}

type VolumeFullPropertiesRegionPtrOutput struct{ *pulumi.OutputState }

func (VolumeFullPropertiesRegionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeFullPropertiesRegion)(nil)).Elem()
}

func (o VolumeFullPropertiesRegionPtrOutput) ToVolumeFullPropertiesRegionPtrOutput() VolumeFullPropertiesRegionPtrOutput {
	return o
}

func (o VolumeFullPropertiesRegionPtrOutput) ToVolumeFullPropertiesRegionPtrOutputWithContext(ctx context.Context) VolumeFullPropertiesRegionPtrOutput {
	return o
}

func (o VolumeFullPropertiesRegionPtrOutput) Elem() VolumeFullPropertiesRegionOutput {
	return o.ApplyT(func(v *VolumeFullPropertiesRegion) VolumeFullPropertiesRegion {
		if v != nil {
			return *v
		}
		var ret VolumeFullPropertiesRegion
		return ret
	}).(VolumeFullPropertiesRegionOutput)
}

// This is a boolean value that represents whether new Droplets can be created in this region.
func (o VolumeFullPropertiesRegionPtrOutput) Available() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeFullPropertiesRegion) *bool {
		if v == nil {
			return nil
		}
		return &v.Available
	}).(pulumi.BoolPtrOutput)
}

// This attribute is set to an array which contains features available in this region
func (o VolumeFullPropertiesRegionPtrOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VolumeFullPropertiesRegion) []string {
		if v == nil {
			return nil
		}
		return v.Features
	}).(pulumi.StringArrayOutput)
}

// The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
func (o VolumeFullPropertiesRegionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeFullPropertiesRegion) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
func (o VolumeFullPropertiesRegionPtrOutput) Sizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VolumeFullPropertiesRegion) []string {
		if v == nil {
			return nil
		}
		return v.Sizes
	}).(pulumi.StringArrayOutput)
}

// A human-readable string that is used as a unique identifier for each region.
func (o VolumeFullPropertiesRegionPtrOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeFullPropertiesRegion) *string {
		if v == nil {
			return nil
		}
		return &v.Slug
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionRegionSlugOutput{})
	pulumi.RegisterOutputType(ActionRegionSlugPtrOutput{})
	pulumi.RegisterOutputType(GetVolumeActionsPropertiesOutput{})
	pulumi.RegisterOutputType(GetVolumeSnapshotsByIdPropertiesOutput{})
	pulumi.RegisterOutputType(GetVolumesPropertiesOutput{})
	pulumi.RegisterOutputType(ListVolumeActionsOutput{})
	pulumi.RegisterOutputType(ListVolumeSnapshotsOutput{})
	pulumi.RegisterOutputType(ListVolumesOutput{})
	pulumi.RegisterOutputType(MetaMetaOutput{})
	pulumi.RegisterOutputType(PageLinksOutput{})
	pulumi.RegisterOutputType(PageLinksPtrOutput{})
	pulumi.RegisterOutputType(PageLinksPagesPropertiesOutput{})
	pulumi.RegisterOutputType(PageLinksPagesPropertiesPtrOutput{})
	pulumi.RegisterOutputType(RegionOutput{})
	pulumi.RegisterOutputType(RegionPtrOutput{})
	pulumi.RegisterOutputType(SnapshotsOutput{})
	pulumi.RegisterOutputType(SnapshotsPtrOutput{})
	pulumi.RegisterOutputType(SnapshotsArrayOutput{})
	pulumi.RegisterOutputType(VolumeActionOutput{})
	pulumi.RegisterOutputType(VolumeActionPtrOutput{})
	pulumi.RegisterOutputType(VolumeActionArrayOutput{})
	pulumi.RegisterOutputType(VolumeFullOutput{})
	pulumi.RegisterOutputType(VolumeFullPtrOutput{})
	pulumi.RegisterOutputType(VolumeFullArrayOutput{})
	pulumi.RegisterOutputType(VolumeFullPropertiesRegionOutput{})
	pulumi.RegisterOutputType(VolumeFullPropertiesRegionPtrOutput{})
}
