// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VolumeActionsByIdAttach struct {
	pulumi.CustomResourceState

	Action VolumeActionPtrOutput `pulumi:"action"`
	// The unique identifier for the Droplet the volume will be attached or detached from.
	DropletId pulumi.IntPtrOutput `pulumi:"dropletId"`
	// The slug identifier for the region where the resource will initially be  available.
	Region VolumeActionPostBaseRegionPtrOutput `pulumi:"region"`
	// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The volume action to initiate.
	Type VolumeActionPostBaseTypePtrOutput `pulumi:"type"`
}

// NewVolumeActionsByIdAttach registers a new resource with the given unique name, arguments, and options.
func NewVolumeActionsByIdAttach(ctx *pulumi.Context,
	name string, args *VolumeActionsByIdAttachArgs, opts ...pulumi.ResourceOption) (*VolumeActionsByIdAttach, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DropletId == nil {
		return nil, errors.New("invalid value for required argument 'DropletId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeActionsByIdAttach
	err := ctx.RegisterResource("digitalocean-native:volumes/v2:VolumeActionsByIdAttach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeActionsByIdAttach gets an existing VolumeActionsByIdAttach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeActionsByIdAttach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeActionsByIdAttachState, opts ...pulumi.ResourceOption) (*VolumeActionsByIdAttach, error) {
	var resource VolumeActionsByIdAttach
	err := ctx.ReadResource("digitalocean-native:volumes/v2:VolumeActionsByIdAttach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeActionsByIdAttach resources.
type volumeActionsByIdAttachState struct {
}

type VolumeActionsByIdAttachState struct {
}

func (VolumeActionsByIdAttachState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeActionsByIdAttachState)(nil)).Elem()
}

type volumeActionsByIdAttachArgs struct {
	// The unique identifier for the Droplet the volume will be attached or detached from.
	DropletId int `pulumi:"dropletId"`
	// The slug identifier for the region where the resource will initially be  available.
	Region *VolumeActionPostBaseRegion `pulumi:"region"`
	// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
	Tags []string `pulumi:"tags"`
	// The volume action to initiate.
	Type VolumeActionPostBaseType `pulumi:"type"`
	// The ID of the block storage volume.
	VolumeId *string `pulumi:"volumeId"`
}

// The set of arguments for constructing a VolumeActionsByIdAttach resource.
type VolumeActionsByIdAttachArgs struct {
	// The unique identifier for the Droplet the volume will be attached or detached from.
	DropletId pulumi.IntInput
	// The slug identifier for the region where the resource will initially be  available.
	Region VolumeActionPostBaseRegionPtrInput
	// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
	Tags pulumi.StringArrayInput
	// The volume action to initiate.
	Type VolumeActionPostBaseTypeInput
	// The ID of the block storage volume.
	VolumeId pulumi.StringPtrInput
}

func (VolumeActionsByIdAttachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeActionsByIdAttachArgs)(nil)).Elem()
}

type VolumeActionsByIdAttachInput interface {
	pulumi.Input

	ToVolumeActionsByIdAttachOutput() VolumeActionsByIdAttachOutput
	ToVolumeActionsByIdAttachOutputWithContext(ctx context.Context) VolumeActionsByIdAttachOutput
}

func (*VolumeActionsByIdAttach) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeActionsByIdAttach)(nil)).Elem()
}

func (i *VolumeActionsByIdAttach) ToVolumeActionsByIdAttachOutput() VolumeActionsByIdAttachOutput {
	return i.ToVolumeActionsByIdAttachOutputWithContext(context.Background())
}

func (i *VolumeActionsByIdAttach) ToVolumeActionsByIdAttachOutputWithContext(ctx context.Context) VolumeActionsByIdAttachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeActionsByIdAttachOutput)
}

type VolumeActionsByIdAttachOutput struct{ *pulumi.OutputState }

func (VolumeActionsByIdAttachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeActionsByIdAttach)(nil)).Elem()
}

func (o VolumeActionsByIdAttachOutput) ToVolumeActionsByIdAttachOutput() VolumeActionsByIdAttachOutput {
	return o
}

func (o VolumeActionsByIdAttachOutput) ToVolumeActionsByIdAttachOutputWithContext(ctx context.Context) VolumeActionsByIdAttachOutput {
	return o
}

func (o VolumeActionsByIdAttachOutput) Action() VolumeActionPtrOutput {
	return o.ApplyT(func(v *VolumeActionsByIdAttach) VolumeActionPtrOutput { return v.Action }).(VolumeActionPtrOutput)
}

// The unique identifier for the Droplet the volume will be attached or detached from.
func (o VolumeActionsByIdAttachOutput) DropletId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VolumeActionsByIdAttach) pulumi.IntPtrOutput { return v.DropletId }).(pulumi.IntPtrOutput)
}

// The slug identifier for the region where the resource will initially be  available.
func (o VolumeActionsByIdAttachOutput) Region() VolumeActionPostBaseRegionPtrOutput {
	return o.ApplyT(func(v *VolumeActionsByIdAttach) VolumeActionPostBaseRegionPtrOutput { return v.Region }).(VolumeActionPostBaseRegionPtrOutput)
}

// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
func (o VolumeActionsByIdAttachOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VolumeActionsByIdAttach) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The volume action to initiate.
func (o VolumeActionsByIdAttachOutput) Type() VolumeActionPostBaseTypePtrOutput {
	return o.ApplyT(func(v *VolumeActionsByIdAttach) VolumeActionPostBaseTypePtrOutput { return v.Type }).(VolumeActionPostBaseTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeActionsByIdAttachInput)(nil)).Elem(), &VolumeActionsByIdAttach{})
	pulumi.RegisterOutputType(VolumeActionsByIdAttachOutput{})
}
