// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AppsListMetricsBandwidthDaily struct {
	pulumi.CustomResourceState

	// A list of bandwidth usage details by app.
	AppBandwidthUsage AppMetricsBandwidthUsageDetailsArrayOutput `pulumi:"appBandwidthUsage"`
	// A list of app IDs to query bandwidth metrics for.
	AppIds pulumi.StringArrayOutput `pulumi:"appIds"`
	// The date for the metrics data.
	Date pulumi.StringPtrOutput `pulumi:"date"`
}

// NewAppsListMetricsBandwidthDaily registers a new resource with the given unique name, arguments, and options.
func NewAppsListMetricsBandwidthDaily(ctx *pulumi.Context,
	name string, args *AppsListMetricsBandwidthDailyArgs, opts ...pulumi.ResourceOption) (*AppsListMetricsBandwidthDaily, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppIds == nil {
		return nil, errors.New("invalid value for required argument 'AppIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppsListMetricsBandwidthDaily
	err := ctx.RegisterResource("digitalocean-native:apps/v2:AppsListMetricsBandwidthDaily", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppsListMetricsBandwidthDaily gets an existing AppsListMetricsBandwidthDaily resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppsListMetricsBandwidthDaily(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppsListMetricsBandwidthDailyState, opts ...pulumi.ResourceOption) (*AppsListMetricsBandwidthDaily, error) {
	var resource AppsListMetricsBandwidthDaily
	err := ctx.ReadResource("digitalocean-native:apps/v2:AppsListMetricsBandwidthDaily", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppsListMetricsBandwidthDaily resources.
type appsListMetricsBandwidthDailyState struct {
}

type AppsListMetricsBandwidthDailyState struct {
}

func (AppsListMetricsBandwidthDailyState) ElementType() reflect.Type {
	return reflect.TypeOf((*appsListMetricsBandwidthDailyState)(nil)).Elem()
}

type appsListMetricsBandwidthDailyArgs struct {
	// A list of app IDs to query bandwidth metrics for.
	AppIds []string `pulumi:"appIds"`
	// Optional day to query. Only the date component of the timestamp will be considered. Default: yesterday.
	Date *string `pulumi:"date"`
}

// The set of arguments for constructing a AppsListMetricsBandwidthDaily resource.
type AppsListMetricsBandwidthDailyArgs struct {
	// A list of app IDs to query bandwidth metrics for.
	AppIds pulumi.StringArrayInput
	// Optional day to query. Only the date component of the timestamp will be considered. Default: yesterday.
	Date pulumi.StringPtrInput
}

func (AppsListMetricsBandwidthDailyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appsListMetricsBandwidthDailyArgs)(nil)).Elem()
}

type AppsListMetricsBandwidthDailyInput interface {
	pulumi.Input

	ToAppsListMetricsBandwidthDailyOutput() AppsListMetricsBandwidthDailyOutput
	ToAppsListMetricsBandwidthDailyOutputWithContext(ctx context.Context) AppsListMetricsBandwidthDailyOutput
}

func (*AppsListMetricsBandwidthDaily) ElementType() reflect.Type {
	return reflect.TypeOf((**AppsListMetricsBandwidthDaily)(nil)).Elem()
}

func (i *AppsListMetricsBandwidthDaily) ToAppsListMetricsBandwidthDailyOutput() AppsListMetricsBandwidthDailyOutput {
	return i.ToAppsListMetricsBandwidthDailyOutputWithContext(context.Background())
}

func (i *AppsListMetricsBandwidthDaily) ToAppsListMetricsBandwidthDailyOutputWithContext(ctx context.Context) AppsListMetricsBandwidthDailyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppsListMetricsBandwidthDailyOutput)
}

type AppsListMetricsBandwidthDailyOutput struct{ *pulumi.OutputState }

func (AppsListMetricsBandwidthDailyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppsListMetricsBandwidthDaily)(nil)).Elem()
}

func (o AppsListMetricsBandwidthDailyOutput) ToAppsListMetricsBandwidthDailyOutput() AppsListMetricsBandwidthDailyOutput {
	return o
}

func (o AppsListMetricsBandwidthDailyOutput) ToAppsListMetricsBandwidthDailyOutputWithContext(ctx context.Context) AppsListMetricsBandwidthDailyOutput {
	return o
}

// A list of bandwidth usage details by app.
func (o AppsListMetricsBandwidthDailyOutput) AppBandwidthUsage() AppMetricsBandwidthUsageDetailsArrayOutput {
	return o.ApplyT(func(v *AppsListMetricsBandwidthDaily) AppMetricsBandwidthUsageDetailsArrayOutput {
		return v.AppBandwidthUsage
	}).(AppMetricsBandwidthUsageDetailsArrayOutput)
}

// A list of app IDs to query bandwidth metrics for.
func (o AppsListMetricsBandwidthDailyOutput) AppIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppsListMetricsBandwidthDaily) pulumi.StringArrayOutput { return v.AppIds }).(pulumi.StringArrayOutput)
}

// The date for the metrics data.
func (o AppsListMetricsBandwidthDailyOutput) Date() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppsListMetricsBandwidthDaily) pulumi.StringPtrOutput { return v.Date }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppsListMetricsBandwidthDailyInput)(nil)).Elem(), &AppsListMetricsBandwidthDaily{})
	pulumi.RegisterOutputType(AppsListMetricsBandwidthDailyOutput{})
}
