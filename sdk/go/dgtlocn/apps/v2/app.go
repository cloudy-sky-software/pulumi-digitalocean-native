// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type App struct {
	pulumi.CustomResourceState

	// An application's configuration and status.
	App AppTypePtrOutput `pulumi:"app"`
	// The ID of the project the app should be assigned to. If omitted, it will be assigned to your default project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// The desired configuration of an application.
	Spec AppSpecOutput `pulumi:"spec"`
}

// NewApp registers a new resource with the given unique name, arguments, and options.
func NewApp(ctx *pulumi.Context,
	name string, args *AppArgs, opts ...pulumi.ResourceOption) (*App, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource App
	err := ctx.RegisterResource("digitalocean-native:apps/v2:App", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApp gets an existing App resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppState, opts ...pulumi.ResourceOption) (*App, error) {
	var resource App
	err := ctx.ReadResource("digitalocean-native:apps/v2:App", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering App resources.
type appState struct {
}

type AppState struct {
}

func (AppState) ElementType() reflect.Type {
	return reflect.TypeOf((*appState)(nil)).Elem()
}

type appArgs struct {
	// The ID of the project the app should be assigned to. If omitted, it will be assigned to your default project.
	ProjectId *string `pulumi:"projectId"`
	// The desired configuration of an application.
	Spec AppSpec `pulumi:"spec"`
}

// The set of arguments for constructing a App resource.
type AppArgs struct {
	// The ID of the project the app should be assigned to. If omitted, it will be assigned to your default project.
	ProjectId pulumi.StringPtrInput
	// The desired configuration of an application.
	Spec AppSpecInput
}

func (AppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appArgs)(nil)).Elem()
}

type AppInput interface {
	pulumi.Input

	ToAppOutput() AppOutput
	ToAppOutputWithContext(ctx context.Context) AppOutput
}

func (*App) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (i *App) ToAppOutput() AppOutput {
	return i.ToAppOutputWithContext(context.Background())
}

func (i *App) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppOutput)
}

type AppOutput struct{ *pulumi.OutputState }

func (AppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (o AppOutput) ToAppOutput() AppOutput {
	return o
}

func (o AppOutput) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return o
}

// An application's configuration and status.
func (o AppOutput) App() AppTypePtrOutput {
	return o.ApplyT(func(v *App) AppTypePtrOutput { return v.App }).(AppTypePtrOutput)
}

// The ID of the project the app should be assigned to. If omitted, it will be assigned to your default project.
func (o AppOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *App) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The desired configuration of an application.
func (o AppOutput) Spec() AppSpecOutput {
	return o.ApplyT(func(v *App) AppSpecOutput { return v.Spec }).(AppSpecOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppInput)(nil)).Elem(), &App{})
	pulumi.RegisterOutputType(AppOutput{})
}
