// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetAppsLogsActiveDeploymentAggregate(ctx *pulumi.Context, args *GetAppsLogsActiveDeploymentAggregateArgs, opts ...pulumi.InvokeOption) (*GetAppsLogsActiveDeploymentAggregateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAppsLogsActiveDeploymentAggregateResult
	err := ctx.Invoke("digitalocean-native:apps/v2:getAppsLogsActiveDeploymentAggregate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetAppsLogsActiveDeploymentAggregateArgs struct {
	// The app ID
	AppId string `pulumi:"appId"`
}

type GetAppsLogsActiveDeploymentAggregateResult struct {
	HistoricUrls []string `pulumi:"historicUrls"`
	// A URL of the real-time live logs. This URL may use either the `https://` or `wss://` protocols and will keep pushing live logs as they become available.
	LiveUrl *string `pulumi:"liveUrl"`
}

func GetAppsLogsActiveDeploymentAggregateOutput(ctx *pulumi.Context, args GetAppsLogsActiveDeploymentAggregateOutputArgs, opts ...pulumi.InvokeOption) GetAppsLogsActiveDeploymentAggregateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetAppsLogsActiveDeploymentAggregateResultOutput, error) {
			args := v.(GetAppsLogsActiveDeploymentAggregateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("digitalocean-native:apps/v2:getAppsLogsActiveDeploymentAggregate", args, GetAppsLogsActiveDeploymentAggregateResultOutput{}, options).(GetAppsLogsActiveDeploymentAggregateResultOutput), nil
		}).(GetAppsLogsActiveDeploymentAggregateResultOutput)
}

type GetAppsLogsActiveDeploymentAggregateOutputArgs struct {
	// The app ID
	AppId pulumi.StringInput `pulumi:"appId"`
}

func (GetAppsLogsActiveDeploymentAggregateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppsLogsActiveDeploymentAggregateArgs)(nil)).Elem()
}

type GetAppsLogsActiveDeploymentAggregateResultOutput struct{ *pulumi.OutputState }

func (GetAppsLogsActiveDeploymentAggregateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppsLogsActiveDeploymentAggregateResult)(nil)).Elem()
}

func (o GetAppsLogsActiveDeploymentAggregateResultOutput) ToGetAppsLogsActiveDeploymentAggregateResultOutput() GetAppsLogsActiveDeploymentAggregateResultOutput {
	return o
}

func (o GetAppsLogsActiveDeploymentAggregateResultOutput) ToGetAppsLogsActiveDeploymentAggregateResultOutputWithContext(ctx context.Context) GetAppsLogsActiveDeploymentAggregateResultOutput {
	return o
}

func (o GetAppsLogsActiveDeploymentAggregateResultOutput) HistoricUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAppsLogsActiveDeploymentAggregateResult) []string { return v.HistoricUrls }).(pulumi.StringArrayOutput)
}

// A URL of the real-time live logs. This URL may use either the `https://` or `wss://` protocols and will keep pushing live logs as they become available.
func (o GetAppsLogsActiveDeploymentAggregateResultOutput) LiveUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppsLogsActiveDeploymentAggregateResult) *string { return v.LiveUrl }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAppsLogsActiveDeploymentAggregateResultOutput{})
}
