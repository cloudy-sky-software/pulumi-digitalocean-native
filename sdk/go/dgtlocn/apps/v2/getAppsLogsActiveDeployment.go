// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetAppsLogsActiveDeployment(ctx *pulumi.Context, args *GetAppsLogsActiveDeploymentArgs, opts ...pulumi.InvokeOption) (*GetAppsLogsActiveDeploymentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAppsLogsActiveDeploymentResult
	err := ctx.Invoke("digitalocean-native:apps/v2:getAppsLogsActiveDeployment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetAppsLogsActiveDeploymentArgs struct {
	// The app ID
	AppId string `pulumi:"appId"`
	// An optional component name. If set, logs will be limited to this component only.
	ComponentName string `pulumi:"componentName"`
}

type GetAppsLogsActiveDeploymentResult struct {
	HistoricUrls []string `pulumi:"historicUrls"`
	// A URL of the real-time live logs. This URL may use either the `https://` or `wss://` protocols and will keep pushing live logs as they become available.
	LiveUrl *string `pulumi:"liveUrl"`
}

func GetAppsLogsActiveDeploymentOutput(ctx *pulumi.Context, args GetAppsLogsActiveDeploymentOutputArgs, opts ...pulumi.InvokeOption) GetAppsLogsActiveDeploymentResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetAppsLogsActiveDeploymentResultOutput, error) {
			args := v.(GetAppsLogsActiveDeploymentArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("digitalocean-native:apps/v2:getAppsLogsActiveDeployment", args, GetAppsLogsActiveDeploymentResultOutput{}, options).(GetAppsLogsActiveDeploymentResultOutput), nil
		}).(GetAppsLogsActiveDeploymentResultOutput)
}

type GetAppsLogsActiveDeploymentOutputArgs struct {
	// The app ID
	AppId pulumi.StringInput `pulumi:"appId"`
	// An optional component name. If set, logs will be limited to this component only.
	ComponentName pulumi.StringInput `pulumi:"componentName"`
}

func (GetAppsLogsActiveDeploymentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppsLogsActiveDeploymentArgs)(nil)).Elem()
}

type GetAppsLogsActiveDeploymentResultOutput struct{ *pulumi.OutputState }

func (GetAppsLogsActiveDeploymentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppsLogsActiveDeploymentResult)(nil)).Elem()
}

func (o GetAppsLogsActiveDeploymentResultOutput) ToGetAppsLogsActiveDeploymentResultOutput() GetAppsLogsActiveDeploymentResultOutput {
	return o
}

func (o GetAppsLogsActiveDeploymentResultOutput) ToGetAppsLogsActiveDeploymentResultOutputWithContext(ctx context.Context) GetAppsLogsActiveDeploymentResultOutput {
	return o
}

func (o GetAppsLogsActiveDeploymentResultOutput) HistoricUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAppsLogsActiveDeploymentResult) []string { return v.HistoricUrls }).(pulumi.StringArrayOutput)
}

// A URL of the real-time live logs. This URL may use either the `https://` or `wss://` protocols and will keep pushing live logs as they become available.
func (o GetAppsLogsActiveDeploymentResultOutput) LiveUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAppsLogsActiveDeploymentResult) *string { return v.LiveUrl }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAppsLogsActiveDeploymentResultOutput{})
}
