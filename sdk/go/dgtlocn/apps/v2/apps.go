// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Apps struct {
	pulumi.CustomResourceState

	// An application's configuration and status.
	App AppPtrOutput `pulumi:"app"`
	// The ID of the project the app should be assigned to. If omitted, it will be assigned to your default project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// The desired configuration of an application.
	Spec AppSpecOutput `pulumi:"spec"`
}

// NewApps registers a new resource with the given unique name, arguments, and options.
func NewApps(ctx *pulumi.Context,
	name string, args *AppsArgs, opts ...pulumi.ResourceOption) (*Apps, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Apps
	err := ctx.RegisterResource("digitalocean-native:apps/v2:Apps", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApps gets an existing Apps resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApps(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppsState, opts ...pulumi.ResourceOption) (*Apps, error) {
	var resource Apps
	err := ctx.ReadResource("digitalocean-native:apps/v2:Apps", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Apps resources.
type appsState struct {
}

type AppsState struct {
}

func (AppsState) ElementType() reflect.Type {
	return reflect.TypeOf((*appsState)(nil)).Elem()
}

type appsArgs struct {
	// The ID of the project the app should be assigned to. If omitted, it will be assigned to your default project.
	ProjectId *string `pulumi:"projectId"`
	// The desired configuration of an application.
	Spec AppSpec `pulumi:"spec"`
}

// The set of arguments for constructing a Apps resource.
type AppsArgs struct {
	// The ID of the project the app should be assigned to. If omitted, it will be assigned to your default project.
	ProjectId pulumi.StringPtrInput
	// The desired configuration of an application.
	Spec AppSpecInput
}

func (AppsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appsArgs)(nil)).Elem()
}

type AppsInput interface {
	pulumi.Input

	ToAppsOutput() AppsOutput
	ToAppsOutputWithContext(ctx context.Context) AppsOutput
}

func (*Apps) ElementType() reflect.Type {
	return reflect.TypeOf((**Apps)(nil)).Elem()
}

func (i *Apps) ToAppsOutput() AppsOutput {
	return i.ToAppsOutputWithContext(context.Background())
}

func (i *Apps) ToAppsOutputWithContext(ctx context.Context) AppsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppsOutput)
}

type AppsOutput struct{ *pulumi.OutputState }

func (AppsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Apps)(nil)).Elem()
}

func (o AppsOutput) ToAppsOutput() AppsOutput {
	return o
}

func (o AppsOutput) ToAppsOutputWithContext(ctx context.Context) AppsOutput {
	return o
}

// An application's configuration and status.
func (o AppsOutput) App() AppPtrOutput {
	return o.ApplyT(func(v *Apps) AppPtrOutput { return v.App }).(AppPtrOutput)
}

// The ID of the project the app should be assigned to. If omitted, it will be assigned to your default project.
func (o AppsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Apps) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The desired configuration of an application.
func (o AppsOutput) Spec() AppSpecOutput {
	return o.ApplyT(func(v *Apps) AppSpecOutput { return v.Spec }).(AppSpecOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppsInput)(nil)).Elem(), &Apps{})
	pulumi.RegisterOutputType(AppsOutput{})
}
