// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RegistryUpdateSubscription struct {
	pulumi.CustomResourceState

	Subscription SubscriptionPtrOutput `pulumi:"subscription"`
	// The slug of the subscription tier to sign up for.
	TierSlug RegistryUpdateSubscriptionTierSlugPtrOutput `pulumi:"tierSlug"`
}

// NewRegistryUpdateSubscription registers a new resource with the given unique name, arguments, and options.
func NewRegistryUpdateSubscription(ctx *pulumi.Context,
	name string, args *RegistryUpdateSubscriptionArgs, opts ...pulumi.ResourceOption) (*RegistryUpdateSubscription, error) {
	if args == nil {
		args = &RegistryUpdateSubscriptionArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegistryUpdateSubscription
	err := ctx.RegisterResource("digitalocean-native:registry/v2:RegistryUpdateSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryUpdateSubscription gets an existing RegistryUpdateSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryUpdateSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryUpdateSubscriptionState, opts ...pulumi.ResourceOption) (*RegistryUpdateSubscription, error) {
	var resource RegistryUpdateSubscription
	err := ctx.ReadResource("digitalocean-native:registry/v2:RegistryUpdateSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryUpdateSubscription resources.
type registryUpdateSubscriptionState struct {
}

type RegistryUpdateSubscriptionState struct {
}

func (RegistryUpdateSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryUpdateSubscriptionState)(nil)).Elem()
}

type registryUpdateSubscriptionArgs struct {
	// The slug of the subscription tier to sign up for.
	TierSlug *RegistryUpdateSubscriptionTierSlug `pulumi:"tierSlug"`
}

// The set of arguments for constructing a RegistryUpdateSubscription resource.
type RegistryUpdateSubscriptionArgs struct {
	// The slug of the subscription tier to sign up for.
	TierSlug RegistryUpdateSubscriptionTierSlugPtrInput
}

func (RegistryUpdateSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryUpdateSubscriptionArgs)(nil)).Elem()
}

type RegistryUpdateSubscriptionInput interface {
	pulumi.Input

	ToRegistryUpdateSubscriptionOutput() RegistryUpdateSubscriptionOutput
	ToRegistryUpdateSubscriptionOutputWithContext(ctx context.Context) RegistryUpdateSubscriptionOutput
}

func (*RegistryUpdateSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryUpdateSubscription)(nil)).Elem()
}

func (i *RegistryUpdateSubscription) ToRegistryUpdateSubscriptionOutput() RegistryUpdateSubscriptionOutput {
	return i.ToRegistryUpdateSubscriptionOutputWithContext(context.Background())
}

func (i *RegistryUpdateSubscription) ToRegistryUpdateSubscriptionOutputWithContext(ctx context.Context) RegistryUpdateSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryUpdateSubscriptionOutput)
}

type RegistryUpdateSubscriptionOutput struct{ *pulumi.OutputState }

func (RegistryUpdateSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryUpdateSubscription)(nil)).Elem()
}

func (o RegistryUpdateSubscriptionOutput) ToRegistryUpdateSubscriptionOutput() RegistryUpdateSubscriptionOutput {
	return o
}

func (o RegistryUpdateSubscriptionOutput) ToRegistryUpdateSubscriptionOutputWithContext(ctx context.Context) RegistryUpdateSubscriptionOutput {
	return o
}

func (o RegistryUpdateSubscriptionOutput) Subscription() SubscriptionPtrOutput {
	return o.ApplyT(func(v *RegistryUpdateSubscription) SubscriptionPtrOutput { return v.Subscription }).(SubscriptionPtrOutput)
}

// The slug of the subscription tier to sign up for.
func (o RegistryUpdateSubscriptionOutput) TierSlug() RegistryUpdateSubscriptionTierSlugPtrOutput {
	return o.ApplyT(func(v *RegistryUpdateSubscription) RegistryUpdateSubscriptionTierSlugPtrOutput { return v.TierSlug }).(RegistryUpdateSubscriptionTierSlugPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryUpdateSubscriptionInput)(nil)).Elem(), &RegistryUpdateSubscription{})
	pulumi.RegisterOutputType(RegistryUpdateSubscriptionOutput{})
}
