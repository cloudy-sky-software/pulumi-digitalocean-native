// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RegistryValidateName struct {
	pulumi.CustomResourceState

	// A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewRegistryValidateName registers a new resource with the given unique name, arguments, and options.
func NewRegistryValidateName(ctx *pulumi.Context,
	name string, args *RegistryValidateNameArgs, opts ...pulumi.ResourceOption) (*RegistryValidateName, error) {
	if args == nil {
		args = &RegistryValidateNameArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegistryValidateName
	err := ctx.RegisterResource("digitalocean-native:registry/v2:RegistryValidateName", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryValidateName gets an existing RegistryValidateName resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryValidateName(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryValidateNameState, opts ...pulumi.ResourceOption) (*RegistryValidateName, error) {
	var resource RegistryValidateName
	err := ctx.ReadResource("digitalocean-native:registry/v2:RegistryValidateName", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryValidateName resources.
type registryValidateNameState struct {
}

type RegistryValidateNameState struct {
}

func (RegistryValidateNameState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryValidateNameState)(nil)).Elem()
}

type registryValidateNameArgs struct {
	// A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a RegistryValidateName resource.
type RegistryValidateNameArgs struct {
	// A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.
	Name pulumi.StringPtrInput
}

func (RegistryValidateNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryValidateNameArgs)(nil)).Elem()
}

type RegistryValidateNameInput interface {
	pulumi.Input

	ToRegistryValidateNameOutput() RegistryValidateNameOutput
	ToRegistryValidateNameOutputWithContext(ctx context.Context) RegistryValidateNameOutput
}

func (*RegistryValidateName) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryValidateName)(nil)).Elem()
}

func (i *RegistryValidateName) ToRegistryValidateNameOutput() RegistryValidateNameOutput {
	return i.ToRegistryValidateNameOutputWithContext(context.Background())
}

func (i *RegistryValidateName) ToRegistryValidateNameOutputWithContext(ctx context.Context) RegistryValidateNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryValidateNameOutput)
}

type RegistryValidateNameOutput struct{ *pulumi.OutputState }

func (RegistryValidateNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryValidateName)(nil)).Elem()
}

func (o RegistryValidateNameOutput) ToRegistryValidateNameOutput() RegistryValidateNameOutput {
	return o
}

func (o RegistryValidateNameOutput) ToRegistryValidateNameOutputWithContext(ctx context.Context) RegistryValidateNameOutput {
	return o
}

// A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.
func (o RegistryValidateNameOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryValidateName) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryValidateNameInput)(nil)).Elem(), &RegistryValidateName{})
	pulumi.RegisterOutputType(RegistryValidateNameOutput{})
}
