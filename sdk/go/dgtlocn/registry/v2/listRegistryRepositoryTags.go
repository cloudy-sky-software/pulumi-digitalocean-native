// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func ListRegistryRepositoryTags(ctx *pulumi.Context, args *ListRegistryRepositoryTagsArgs, opts ...pulumi.InvokeOption) (*ListRegistryRepositoryTagsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ListRegistryRepositoryTagsResult
	err := ctx.Invoke("digitalocean-native:registry/v2:listRegistryRepositoryTags", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ListRegistryRepositoryTagsArgs struct {
	// The name of a container registry.
	RegistryName string `pulumi:"registryName"`
	// The name of a container registry repository. If the name contains `/` characters, they must be URL-encoded, e.g. `%2F`.
	RepositoryName string `pulumi:"repositoryName"`
}

type ListRegistryRepositoryTagsResult struct {
	Links *PageLinks      `pulumi:"links"`
	Meta  MetaMeta        `pulumi:"meta"`
	Tags  []RepositoryTag `pulumi:"tags"`
}

func ListRegistryRepositoryTagsOutput(ctx *pulumi.Context, args ListRegistryRepositoryTagsOutputArgs, opts ...pulumi.InvokeOption) ListRegistryRepositoryTagsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ListRegistryRepositoryTagsResultOutput, error) {
			args := v.(ListRegistryRepositoryTagsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv ListRegistryRepositoryTagsResult
			secret, err := ctx.InvokePackageRaw("digitalocean-native:registry/v2:listRegistryRepositoryTags", args, &rv, "", opts...)
			if err != nil {
				return ListRegistryRepositoryTagsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(ListRegistryRepositoryTagsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(ListRegistryRepositoryTagsResultOutput), nil
			}
			return output, nil
		}).(ListRegistryRepositoryTagsResultOutput)
}

type ListRegistryRepositoryTagsOutputArgs struct {
	// The name of a container registry.
	RegistryName pulumi.StringInput `pulumi:"registryName"`
	// The name of a container registry repository. If the name contains `/` characters, they must be URL-encoded, e.g. `%2F`.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
}

func (ListRegistryRepositoryTagsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListRegistryRepositoryTagsArgs)(nil)).Elem()
}

type ListRegistryRepositoryTagsResultOutput struct{ *pulumi.OutputState }

func (ListRegistryRepositoryTagsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListRegistryRepositoryTagsResult)(nil)).Elem()
}

func (o ListRegistryRepositoryTagsResultOutput) ToListRegistryRepositoryTagsResultOutput() ListRegistryRepositoryTagsResultOutput {
	return o
}

func (o ListRegistryRepositoryTagsResultOutput) ToListRegistryRepositoryTagsResultOutputWithContext(ctx context.Context) ListRegistryRepositoryTagsResultOutput {
	return o
}

func (o ListRegistryRepositoryTagsResultOutput) Links() PageLinksPtrOutput {
	return o.ApplyT(func(v ListRegistryRepositoryTagsResult) *PageLinks { return v.Links }).(PageLinksPtrOutput)
}

func (o ListRegistryRepositoryTagsResultOutput) Meta() MetaMetaOutput {
	return o.ApplyT(func(v ListRegistryRepositoryTagsResult) MetaMeta { return v.Meta }).(MetaMetaOutput)
}

func (o ListRegistryRepositoryTagsResultOutput) Tags() RepositoryTagArrayOutput {
	return o.ApplyT(func(v ListRegistryRepositoryTagsResult) []RepositoryTag { return v.Tags }).(RepositoryTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ListRegistryRepositoryTagsResultOutput{})
}
