// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Registry struct {
	pulumi.CustomResourceState

	// A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Slug of the region where registry data is stored. When not provided, a region will be selected.
	Region   RegistryRegionPtrOutput `pulumi:"region"`
	Registry RegistryTypePtrOutput   `pulumi:"registry"`
	// The slug of the subscription tier to sign up for. Valid values can be retrieved using the options endpoint.
	SubscriptionTierSlug RegistrySubscriptionTierSlugOutput `pulumi:"subscriptionTierSlug"`
}

// NewRegistry registers a new resource with the given unique name, arguments, and options.
func NewRegistry(ctx *pulumi.Context,
	name string, args *RegistryArgs, opts ...pulumi.ResourceOption) (*Registry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubscriptionTierSlug == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionTierSlug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Registry
	err := ctx.RegisterResource("digitalocean-native:registry/v2:Registry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistry gets an existing Registry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryState, opts ...pulumi.ResourceOption) (*Registry, error) {
	var resource Registry
	err := ctx.ReadResource("digitalocean-native:registry/v2:Registry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Registry resources.
type registryState struct {
}

type RegistryState struct {
}

func (RegistryState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryState)(nil)).Elem()
}

type registryArgs struct {
	// A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.
	Name *string `pulumi:"name"`
	// Slug of the region where registry data is stored. When not provided, a region will be selected.
	Region *RegistryRegion `pulumi:"region"`
	// The slug of the subscription tier to sign up for. Valid values can be retrieved using the options endpoint.
	SubscriptionTierSlug RegistrySubscriptionTierSlug `pulumi:"subscriptionTierSlug"`
}

// The set of arguments for constructing a Registry resource.
type RegistryArgs struct {
	// A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.
	Name pulumi.StringPtrInput
	// Slug of the region where registry data is stored. When not provided, a region will be selected.
	Region RegistryRegionPtrInput
	// The slug of the subscription tier to sign up for. Valid values can be retrieved using the options endpoint.
	SubscriptionTierSlug RegistrySubscriptionTierSlugInput
}

func (RegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryArgs)(nil)).Elem()
}

type RegistryInput interface {
	pulumi.Input

	ToRegistryOutput() RegistryOutput
	ToRegistryOutputWithContext(ctx context.Context) RegistryOutput
}

func (*Registry) ElementType() reflect.Type {
	return reflect.TypeOf((**Registry)(nil)).Elem()
}

func (i *Registry) ToRegistryOutput() RegistryOutput {
	return i.ToRegistryOutputWithContext(context.Background())
}

func (i *Registry) ToRegistryOutputWithContext(ctx context.Context) RegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryOutput)
}

type RegistryOutput struct{ *pulumi.OutputState }

func (RegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Registry)(nil)).Elem()
}

func (o RegistryOutput) ToRegistryOutput() RegistryOutput {
	return o
}

func (o RegistryOutput) ToRegistryOutputWithContext(ctx context.Context) RegistryOutput {
	return o
}

// A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.
func (o RegistryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Registry) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Slug of the region where registry data is stored. When not provided, a region will be selected.
func (o RegistryOutput) Region() RegistryRegionPtrOutput {
	return o.ApplyT(func(v *Registry) RegistryRegionPtrOutput { return v.Region }).(RegistryRegionPtrOutput)
}

func (o RegistryOutput) Registry() RegistryTypePtrOutput {
	return o.ApplyT(func(v *Registry) RegistryTypePtrOutput { return v.Registry }).(RegistryTypePtrOutput)
}

// The slug of the subscription tier to sign up for. Valid values can be retrieved using the options endpoint.
func (o RegistryOutput) SubscriptionTierSlug() RegistrySubscriptionTierSlugOutput {
	return o.ApplyT(func(v *Registry) RegistrySubscriptionTierSlugOutput { return v.SubscriptionTierSlug }).(RegistrySubscriptionTierSlugOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryInput)(nil)).Elem(), &Registry{})
	pulumi.RegisterOutputType(RegistryOutput{})
}
