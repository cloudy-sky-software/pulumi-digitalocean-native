// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type DockerCredentials struct {
	Auths *DockerCredentialsAuthsProperties `pulumi:"auths"`
}

type DockerCredentialsOutput struct{ *pulumi.OutputState }

func (DockerCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerCredentials)(nil)).Elem()
}

func (o DockerCredentialsOutput) ToDockerCredentialsOutput() DockerCredentialsOutput {
	return o
}

func (o DockerCredentialsOutput) ToDockerCredentialsOutputWithContext(ctx context.Context) DockerCredentialsOutput {
	return o
}

func (o DockerCredentialsOutput) Auths() DockerCredentialsAuthsPropertiesPtrOutput {
	return o.ApplyT(func(v DockerCredentials) *DockerCredentialsAuthsProperties { return v.Auths }).(DockerCredentialsAuthsPropertiesPtrOutput)
}

type DockerCredentialsAuthsProperties struct {
	RegistryDigitaloceanCom *DockerCredentialsAuthsPropertiesRegistryDigitaloceanComProperties `pulumi:"registryDigitaloceanCom"`
}

type DockerCredentialsAuthsPropertiesOutput struct{ *pulumi.OutputState }

func (DockerCredentialsAuthsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerCredentialsAuthsProperties)(nil)).Elem()
}

func (o DockerCredentialsAuthsPropertiesOutput) ToDockerCredentialsAuthsPropertiesOutput() DockerCredentialsAuthsPropertiesOutput {
	return o
}

func (o DockerCredentialsAuthsPropertiesOutput) ToDockerCredentialsAuthsPropertiesOutputWithContext(ctx context.Context) DockerCredentialsAuthsPropertiesOutput {
	return o
}

func (o DockerCredentialsAuthsPropertiesOutput) RegistryDigitaloceanCom() DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesPtrOutput {
	return o.ApplyT(func(v DockerCredentialsAuthsProperties) *DockerCredentialsAuthsPropertiesRegistryDigitaloceanComProperties {
		return v.RegistryDigitaloceanCom
	}).(DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesPtrOutput)
}

type DockerCredentialsAuthsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DockerCredentialsAuthsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerCredentialsAuthsProperties)(nil)).Elem()
}

func (o DockerCredentialsAuthsPropertiesPtrOutput) ToDockerCredentialsAuthsPropertiesPtrOutput() DockerCredentialsAuthsPropertiesPtrOutput {
	return o
}

func (o DockerCredentialsAuthsPropertiesPtrOutput) ToDockerCredentialsAuthsPropertiesPtrOutputWithContext(ctx context.Context) DockerCredentialsAuthsPropertiesPtrOutput {
	return o
}

func (o DockerCredentialsAuthsPropertiesPtrOutput) Elem() DockerCredentialsAuthsPropertiesOutput {
	return o.ApplyT(func(v *DockerCredentialsAuthsProperties) DockerCredentialsAuthsProperties {
		if v != nil {
			return *v
		}
		var ret DockerCredentialsAuthsProperties
		return ret
	}).(DockerCredentialsAuthsPropertiesOutput)
}

func (o DockerCredentialsAuthsPropertiesPtrOutput) RegistryDigitaloceanCom() DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesPtrOutput {
	return o.ApplyT(func(v *DockerCredentialsAuthsProperties) *DockerCredentialsAuthsPropertiesRegistryDigitaloceanComProperties {
		if v == nil {
			return nil
		}
		return v.RegistryDigitaloceanCom
	}).(DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesPtrOutput)
}

type DockerCredentialsAuthsPropertiesRegistryDigitaloceanComProperties struct {
	// A base64 encoded string containing credentials for the container registry.
	Auth *string `pulumi:"auth"`
}

type DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesOutput struct{ *pulumi.OutputState }

func (DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerCredentialsAuthsPropertiesRegistryDigitaloceanComProperties)(nil)).Elem()
}

func (o DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesOutput) ToDockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesOutput() DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesOutput {
	return o
}

func (o DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesOutput) ToDockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesOutputWithContext(ctx context.Context) DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesOutput {
	return o
}

// A base64 encoded string containing credentials for the container registry.
func (o DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesOutput) Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerCredentialsAuthsPropertiesRegistryDigitaloceanComProperties) *string { return v.Auth }).(pulumi.StringPtrOutput)
}

type DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerCredentialsAuthsPropertiesRegistryDigitaloceanComProperties)(nil)).Elem()
}

func (o DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesPtrOutput) ToDockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesPtrOutput() DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesPtrOutput {
	return o
}

func (o DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesPtrOutput) ToDockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesPtrOutputWithContext(ctx context.Context) DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesPtrOutput {
	return o
}

func (o DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesPtrOutput) Elem() DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesOutput {
	return o.ApplyT(func(v *DockerCredentialsAuthsPropertiesRegistryDigitaloceanComProperties) DockerCredentialsAuthsPropertiesRegistryDigitaloceanComProperties {
		if v != nil {
			return *v
		}
		var ret DockerCredentialsAuthsPropertiesRegistryDigitaloceanComProperties
		return ret
	}).(DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesOutput)
}

// A base64 encoded string containing credentials for the container registry.
func (o DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesPtrOutput) Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerCredentialsAuthsPropertiesRegistryDigitaloceanComProperties) *string {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(pulumi.StringPtrOutput)
}

type GarbageCollection struct {
	// The number of blobs deleted as a result of this garbage collection.
	BlobsDeleted *int `pulumi:"blobsDeleted"`
	// The time the garbage collection was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The number of bytes freed as a result of this garbage collection.
	FreedBytes *int `pulumi:"freedBytes"`
	// The name of the container registry.
	RegistryName *string `pulumi:"registryName"`
	// The current status of this garbage collection.
	Status *GarbageCollectionStatus `pulumi:"status"`
	// The time the garbage collection was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
	// A string specifying the UUID of the garbage collection.
	Uuid *string `pulumi:"uuid"`
}

type GarbageCollectionOutput struct{ *pulumi.OutputState }

func (GarbageCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GarbageCollection)(nil)).Elem()
}

func (o GarbageCollectionOutput) ToGarbageCollectionOutput() GarbageCollectionOutput {
	return o
}

func (o GarbageCollectionOutput) ToGarbageCollectionOutputWithContext(ctx context.Context) GarbageCollectionOutput {
	return o
}

// The number of blobs deleted as a result of this garbage collection.
func (o GarbageCollectionOutput) BlobsDeleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GarbageCollection) *int { return v.BlobsDeleted }).(pulumi.IntPtrOutput)
}

// The time the garbage collection was created.
func (o GarbageCollectionOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GarbageCollection) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The number of bytes freed as a result of this garbage collection.
func (o GarbageCollectionOutput) FreedBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GarbageCollection) *int { return v.FreedBytes }).(pulumi.IntPtrOutput)
}

// The name of the container registry.
func (o GarbageCollectionOutput) RegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GarbageCollection) *string { return v.RegistryName }).(pulumi.StringPtrOutput)
}

// The current status of this garbage collection.
func (o GarbageCollectionOutput) Status() GarbageCollectionStatusPtrOutput {
	return o.ApplyT(func(v GarbageCollection) *GarbageCollectionStatus { return v.Status }).(GarbageCollectionStatusPtrOutput)
}

// The time the garbage collection was last updated.
func (o GarbageCollectionOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GarbageCollection) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

// A string specifying the UUID of the garbage collection.
func (o GarbageCollectionOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GarbageCollection) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

type GarbageCollectionArrayOutput struct{ *pulumi.OutputState }

func (GarbageCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GarbageCollection)(nil)).Elem()
}

func (o GarbageCollectionArrayOutput) ToGarbageCollectionArrayOutput() GarbageCollectionArrayOutput {
	return o
}

func (o GarbageCollectionArrayOutput) ToGarbageCollectionArrayOutputWithContext(ctx context.Context) GarbageCollectionArrayOutput {
	return o
}

func (o GarbageCollectionArrayOutput) Index(i pulumi.IntInput) GarbageCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GarbageCollection {
		return vs[0].([]GarbageCollection)[vs[1].(int)]
	}).(GarbageCollectionOutput)
}

type GetRegistryOptionProperties struct {
	Options *GetRegistryOptionPropertiesOptionsProperties `pulumi:"options"`
}

type GetRegistryOptionPropertiesOutput struct{ *pulumi.OutputState }

func (GetRegistryOptionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryOptionProperties)(nil)).Elem()
}

func (o GetRegistryOptionPropertiesOutput) ToGetRegistryOptionPropertiesOutput() GetRegistryOptionPropertiesOutput {
	return o
}

func (o GetRegistryOptionPropertiesOutput) ToGetRegistryOptionPropertiesOutputWithContext(ctx context.Context) GetRegistryOptionPropertiesOutput {
	return o
}

func (o GetRegistryOptionPropertiesOutput) Options() GetRegistryOptionPropertiesOptionsPropertiesPtrOutput {
	return o.ApplyT(func(v GetRegistryOptionProperties) *GetRegistryOptionPropertiesOptionsProperties { return v.Options }).(GetRegistryOptionPropertiesOptionsPropertiesPtrOutput)
}

type GetRegistryOptionPropertiesOptionsProperties struct {
	AvailableRegions  []string                                                            `pulumi:"availableRegions"`
	SubscriptionTiers []GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem `pulumi:"subscriptionTiers"`
}

type GetRegistryOptionPropertiesOptionsPropertiesOutput struct{ *pulumi.OutputState }

func (GetRegistryOptionPropertiesOptionsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryOptionPropertiesOptionsProperties)(nil)).Elem()
}

func (o GetRegistryOptionPropertiesOptionsPropertiesOutput) ToGetRegistryOptionPropertiesOptionsPropertiesOutput() GetRegistryOptionPropertiesOptionsPropertiesOutput {
	return o
}

func (o GetRegistryOptionPropertiesOptionsPropertiesOutput) ToGetRegistryOptionPropertiesOptionsPropertiesOutputWithContext(ctx context.Context) GetRegistryOptionPropertiesOptionsPropertiesOutput {
	return o
}

func (o GetRegistryOptionPropertiesOptionsPropertiesOutput) AvailableRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRegistryOptionPropertiesOptionsProperties) []string { return v.AvailableRegions }).(pulumi.StringArrayOutput)
}

func (o GetRegistryOptionPropertiesOptionsPropertiesOutput) SubscriptionTiers() GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemArrayOutput {
	return o.ApplyT(func(v GetRegistryOptionPropertiesOptionsProperties) []GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem {
		return v.SubscriptionTiers
	}).(GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemArrayOutput)
}

type GetRegistryOptionPropertiesOptionsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (GetRegistryOptionPropertiesOptionsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetRegistryOptionPropertiesOptionsProperties)(nil)).Elem()
}

func (o GetRegistryOptionPropertiesOptionsPropertiesPtrOutput) ToGetRegistryOptionPropertiesOptionsPropertiesPtrOutput() GetRegistryOptionPropertiesOptionsPropertiesPtrOutput {
	return o
}

func (o GetRegistryOptionPropertiesOptionsPropertiesPtrOutput) ToGetRegistryOptionPropertiesOptionsPropertiesPtrOutputWithContext(ctx context.Context) GetRegistryOptionPropertiesOptionsPropertiesPtrOutput {
	return o
}

func (o GetRegistryOptionPropertiesOptionsPropertiesPtrOutput) Elem() GetRegistryOptionPropertiesOptionsPropertiesOutput {
	return o.ApplyT(func(v *GetRegistryOptionPropertiesOptionsProperties) GetRegistryOptionPropertiesOptionsProperties {
		if v != nil {
			return *v
		}
		var ret GetRegistryOptionPropertiesOptionsProperties
		return ret
	}).(GetRegistryOptionPropertiesOptionsPropertiesOutput)
}

func (o GetRegistryOptionPropertiesOptionsPropertiesPtrOutput) AvailableRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetRegistryOptionPropertiesOptionsProperties) []string {
		if v == nil {
			return nil
		}
		return v.AvailableRegions
	}).(pulumi.StringArrayOutput)
}

func (o GetRegistryOptionPropertiesOptionsPropertiesPtrOutput) SubscriptionTiers() GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemArrayOutput {
	return o.ApplyT(func(v *GetRegistryOptionPropertiesOptionsProperties) []GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem {
		if v == nil {
			return nil
		}
		return v.SubscriptionTiers
	}).(GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemArrayOutput)
}

type GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem struct {
	// A boolean indicating whether the subscription tier supports additional storage above what is included in the base plan at an additional cost per GiB used.
	AllowStorageOverage *bool `pulumi:"allowStorageOverage"`
	// If your account is not eligible to use a certain subscription tier, this will include a list of reasons that prevent you from using the tier.
	EligibilityReasons []SubscriptionTierExtendedEligibilityReasonsItem `pulumi:"eligibilityReasons"`
	// A boolean indicating whether your account it eligible to use a certain subscription tier.
	Eligible *bool `pulumi:"eligible"`
	// The amount of outbound data transfer included in the subscription tier in bytes.
	IncludedBandwidthBytes *int `pulumi:"includedBandwidthBytes"`
	// The number of repositories included in the subscription tier. `0` indicates that the subscription tier includes unlimited repositories.
	IncludedRepositories *int `pulumi:"includedRepositories"`
	// The amount of storage included in the subscription tier in bytes.
	IncludedStorageBytes *int `pulumi:"includedStorageBytes"`
	// The monthly cost of the subscription tier in cents.
	MonthlyPriceInCents *int `pulumi:"monthlyPriceInCents"`
	// The name of the subscription tier.
	Name *string `pulumi:"name"`
	// The slug identifier of the subscription tier.
	Slug *string `pulumi:"slug"`
	// The price paid in cents per GiB for additional storage beyond what is included in the subscription plan.
	StorageOveragePriceInCents *int `pulumi:"storageOveragePriceInCents"`
}

type GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput struct{ *pulumi.OutputState }

func (GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem)(nil)).Elem()
}

func (o GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput) ToGetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput() GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput {
	return o
}

func (o GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput) ToGetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutputWithContext(ctx context.Context) GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput {
	return o
}

// A boolean indicating whether the subscription tier supports additional storage above what is included in the base plan at an additional cost per GiB used.
func (o GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput) AllowStorageOverage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem) *bool {
		return v.AllowStorageOverage
	}).(pulumi.BoolPtrOutput)
}

// If your account is not eligible to use a certain subscription tier, this will include a list of reasons that prevent you from using the tier.
func (o GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput) EligibilityReasons() SubscriptionTierExtendedEligibilityReasonsItemArrayOutput {
	return o.ApplyT(func(v GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem) []SubscriptionTierExtendedEligibilityReasonsItem {
		return v.EligibilityReasons
	}).(SubscriptionTierExtendedEligibilityReasonsItemArrayOutput)
}

// A boolean indicating whether your account it eligible to use a certain subscription tier.
func (o GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput) Eligible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem) *bool { return v.Eligible }).(pulumi.BoolPtrOutput)
}

// The amount of outbound data transfer included in the subscription tier in bytes.
func (o GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput) IncludedBandwidthBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem) *int {
		return v.IncludedBandwidthBytes
	}).(pulumi.IntPtrOutput)
}

// The number of repositories included in the subscription tier. `0` indicates that the subscription tier includes unlimited repositories.
func (o GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput) IncludedRepositories() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem) *int {
		return v.IncludedRepositories
	}).(pulumi.IntPtrOutput)
}

// The amount of storage included in the subscription tier in bytes.
func (o GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput) IncludedStorageBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem) *int {
		return v.IncludedStorageBytes
	}).(pulumi.IntPtrOutput)
}

// The monthly cost of the subscription tier in cents.
func (o GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput) MonthlyPriceInCents() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem) *int {
		return v.MonthlyPriceInCents
	}).(pulumi.IntPtrOutput)
}

// The name of the subscription tier.
func (o GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The slug identifier of the subscription tier.
func (o GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem) *string { return v.Slug }).(pulumi.StringPtrOutput)
}

// The price paid in cents per GiB for additional storage beyond what is included in the subscription plan.
func (o GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput) StorageOveragePriceInCents() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem) *int {
		return v.StorageOveragePriceInCents
	}).(pulumi.IntPtrOutput)
}

type GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemArrayOutput struct{ *pulumi.OutputState }

func (GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem)(nil)).Elem()
}

func (o GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemArrayOutput) ToGetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemArrayOutput() GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemArrayOutput {
	return o
}

func (o GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemArrayOutput) ToGetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemArrayOutputWithContext(ctx context.Context) GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemArrayOutput {
	return o
}

func (o GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemArrayOutput) Index(i pulumi.IntInput) GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem {
		return vs[0].([]GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItem)[vs[1].(int)]
	}).(GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput)
}

type GetRegistryProperties struct {
	Registry *RegistryType `pulumi:"registry"`
}

type GetRegistryPropertiesOutput struct{ *pulumi.OutputState }

func (GetRegistryPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryProperties)(nil)).Elem()
}

func (o GetRegistryPropertiesOutput) ToGetRegistryPropertiesOutput() GetRegistryPropertiesOutput {
	return o
}

func (o GetRegistryPropertiesOutput) ToGetRegistryPropertiesOutputWithContext(ctx context.Context) GetRegistryPropertiesOutput {
	return o
}

func (o GetRegistryPropertiesOutput) Registry() RegistryTypePtrOutput {
	return o.ApplyT(func(v GetRegistryProperties) *RegistryType { return v.Registry }).(RegistryTypePtrOutput)
}

type GetRegistrySubscriptionProperties struct {
	Subscription *Subscription `pulumi:"subscription"`
}

type GetRegistrySubscriptionPropertiesOutput struct{ *pulumi.OutputState }

func (GetRegistrySubscriptionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistrySubscriptionProperties)(nil)).Elem()
}

func (o GetRegistrySubscriptionPropertiesOutput) ToGetRegistrySubscriptionPropertiesOutput() GetRegistrySubscriptionPropertiesOutput {
	return o
}

func (o GetRegistrySubscriptionPropertiesOutput) ToGetRegistrySubscriptionPropertiesOutputWithContext(ctx context.Context) GetRegistrySubscriptionPropertiesOutput {
	return o
}

func (o GetRegistrySubscriptionPropertiesOutput) Subscription() SubscriptionPtrOutput {
	return o.ApplyT(func(v GetRegistrySubscriptionProperties) *Subscription { return v.Subscription }).(SubscriptionPtrOutput)
}

type ListRegistryGarbageCollectionsProperties struct {
	GarbageCollections []GarbageCollection `pulumi:"garbageCollections"`
}

type ListRegistryGarbageCollectionsPropertiesOutput struct{ *pulumi.OutputState }

func (ListRegistryGarbageCollectionsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListRegistryGarbageCollectionsProperties)(nil)).Elem()
}

func (o ListRegistryGarbageCollectionsPropertiesOutput) ToListRegistryGarbageCollectionsPropertiesOutput() ListRegistryGarbageCollectionsPropertiesOutput {
	return o
}

func (o ListRegistryGarbageCollectionsPropertiesOutput) ToListRegistryGarbageCollectionsPropertiesOutputWithContext(ctx context.Context) ListRegistryGarbageCollectionsPropertiesOutput {
	return o
}

func (o ListRegistryGarbageCollectionsPropertiesOutput) GarbageCollections() GarbageCollectionArrayOutput {
	return o.ApplyT(func(v ListRegistryGarbageCollectionsProperties) []GarbageCollection { return v.GarbageCollections }).(GarbageCollectionArrayOutput)
}

type ListRegistryRepositoriesItems struct {
	Links        *PageLinks   `pulumi:"links"`
	Meta         MetaMeta     `pulumi:"meta"`
	Repositories []Repository `pulumi:"repositories"`
}

type ListRegistryRepositoriesItemsOutput struct{ *pulumi.OutputState }

func (ListRegistryRepositoriesItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListRegistryRepositoriesItems)(nil)).Elem()
}

func (o ListRegistryRepositoriesItemsOutput) ToListRegistryRepositoriesItemsOutput() ListRegistryRepositoriesItemsOutput {
	return o
}

func (o ListRegistryRepositoriesItemsOutput) ToListRegistryRepositoriesItemsOutputWithContext(ctx context.Context) ListRegistryRepositoriesItemsOutput {
	return o
}

func (o ListRegistryRepositoriesItemsOutput) Links() PageLinksPtrOutput {
	return o.ApplyT(func(v ListRegistryRepositoriesItems) *PageLinks { return v.Links }).(PageLinksPtrOutput)
}

func (o ListRegistryRepositoriesItemsOutput) Meta() MetaMetaOutput {
	return o.ApplyT(func(v ListRegistryRepositoriesItems) MetaMeta { return v.Meta }).(MetaMetaOutput)
}

func (o ListRegistryRepositoriesItemsOutput) Repositories() RepositoryArrayOutput {
	return o.ApplyT(func(v ListRegistryRepositoriesItems) []Repository { return v.Repositories }).(RepositoryArrayOutput)
}

type ListRegistryRepositoriesV2Items struct {
	Links        *PageLinks     `pulumi:"links"`
	Meta         MetaMeta       `pulumi:"meta"`
	Repositories []RepositoryV2 `pulumi:"repositories"`
}

type ListRegistryRepositoriesV2ItemsOutput struct{ *pulumi.OutputState }

func (ListRegistryRepositoriesV2ItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListRegistryRepositoriesV2Items)(nil)).Elem()
}

func (o ListRegistryRepositoriesV2ItemsOutput) ToListRegistryRepositoriesV2ItemsOutput() ListRegistryRepositoriesV2ItemsOutput {
	return o
}

func (o ListRegistryRepositoriesV2ItemsOutput) ToListRegistryRepositoriesV2ItemsOutputWithContext(ctx context.Context) ListRegistryRepositoriesV2ItemsOutput {
	return o
}

func (o ListRegistryRepositoriesV2ItemsOutput) Links() PageLinksPtrOutput {
	return o.ApplyT(func(v ListRegistryRepositoriesV2Items) *PageLinks { return v.Links }).(PageLinksPtrOutput)
}

func (o ListRegistryRepositoriesV2ItemsOutput) Meta() MetaMetaOutput {
	return o.ApplyT(func(v ListRegistryRepositoriesV2Items) MetaMeta { return v.Meta }).(MetaMetaOutput)
}

func (o ListRegistryRepositoriesV2ItemsOutput) Repositories() RepositoryV2ArrayOutput {
	return o.ApplyT(func(v ListRegistryRepositoriesV2Items) []RepositoryV2 { return v.Repositories }).(RepositoryV2ArrayOutput)
}

type ListRegistryRepositoryManifestsItems struct {
	Links     *PageLinks           `pulumi:"links"`
	Manifests []RepositoryManifest `pulumi:"manifests"`
	Meta      MetaMeta             `pulumi:"meta"`
}

type ListRegistryRepositoryManifestsItemsOutput struct{ *pulumi.OutputState }

func (ListRegistryRepositoryManifestsItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListRegistryRepositoryManifestsItems)(nil)).Elem()
}

func (o ListRegistryRepositoryManifestsItemsOutput) ToListRegistryRepositoryManifestsItemsOutput() ListRegistryRepositoryManifestsItemsOutput {
	return o
}

func (o ListRegistryRepositoryManifestsItemsOutput) ToListRegistryRepositoryManifestsItemsOutputWithContext(ctx context.Context) ListRegistryRepositoryManifestsItemsOutput {
	return o
}

func (o ListRegistryRepositoryManifestsItemsOutput) Links() PageLinksPtrOutput {
	return o.ApplyT(func(v ListRegistryRepositoryManifestsItems) *PageLinks { return v.Links }).(PageLinksPtrOutput)
}

func (o ListRegistryRepositoryManifestsItemsOutput) Manifests() RepositoryManifestArrayOutput {
	return o.ApplyT(func(v ListRegistryRepositoryManifestsItems) []RepositoryManifest { return v.Manifests }).(RepositoryManifestArrayOutput)
}

func (o ListRegistryRepositoryManifestsItemsOutput) Meta() MetaMetaOutput {
	return o.ApplyT(func(v ListRegistryRepositoryManifestsItems) MetaMeta { return v.Meta }).(MetaMetaOutput)
}

type ListRegistryRepositoryTagsItems struct {
	Links *PageLinks      `pulumi:"links"`
	Meta  MetaMeta        `pulumi:"meta"`
	Tags  []RepositoryTag `pulumi:"tags"`
}

type ListRegistryRepositoryTagsItemsOutput struct{ *pulumi.OutputState }

func (ListRegistryRepositoryTagsItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListRegistryRepositoryTagsItems)(nil)).Elem()
}

func (o ListRegistryRepositoryTagsItemsOutput) ToListRegistryRepositoryTagsItemsOutput() ListRegistryRepositoryTagsItemsOutput {
	return o
}

func (o ListRegistryRepositoryTagsItemsOutput) ToListRegistryRepositoryTagsItemsOutputWithContext(ctx context.Context) ListRegistryRepositoryTagsItemsOutput {
	return o
}

func (o ListRegistryRepositoryTagsItemsOutput) Links() PageLinksPtrOutput {
	return o.ApplyT(func(v ListRegistryRepositoryTagsItems) *PageLinks { return v.Links }).(PageLinksPtrOutput)
}

func (o ListRegistryRepositoryTagsItemsOutput) Meta() MetaMetaOutput {
	return o.ApplyT(func(v ListRegistryRepositoryTagsItems) MetaMeta { return v.Meta }).(MetaMetaOutput)
}

func (o ListRegistryRepositoryTagsItemsOutput) Tags() RepositoryTagArrayOutput {
	return o.ApplyT(func(v ListRegistryRepositoryTagsItems) []RepositoryTag { return v.Tags }).(RepositoryTagArrayOutput)
}

type MetaMeta struct {
	// Number of objects returned by the request.
	Total *int `pulumi:"total"`
}

type MetaMetaOutput struct{ *pulumi.OutputState }

func (MetaMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetaMeta)(nil)).Elem()
}

func (o MetaMetaOutput) ToMetaMetaOutput() MetaMetaOutput {
	return o
}

func (o MetaMetaOutput) ToMetaMetaOutputWithContext(ctx context.Context) MetaMetaOutput {
	return o
}

// Number of objects returned by the request.
func (o MetaMetaOutput) Total() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetaMeta) *int { return v.Total }).(pulumi.IntPtrOutput)
}

type PageLinks struct {
	Pages *PageLinksPagesProperties `pulumi:"pages"`
}

type PageLinksOutput struct{ *pulumi.OutputState }

func (PageLinksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PageLinks)(nil)).Elem()
}

func (o PageLinksOutput) ToPageLinksOutput() PageLinksOutput {
	return o
}

func (o PageLinksOutput) ToPageLinksOutputWithContext(ctx context.Context) PageLinksOutput {
	return o
}

func (o PageLinksOutput) Pages() PageLinksPagesPropertiesPtrOutput {
	return o.ApplyT(func(v PageLinks) *PageLinksPagesProperties { return v.Pages }).(PageLinksPagesPropertiesPtrOutput)
}

type PageLinksPtrOutput struct{ *pulumi.OutputState }

func (PageLinksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PageLinks)(nil)).Elem()
}

func (o PageLinksPtrOutput) ToPageLinksPtrOutput() PageLinksPtrOutput {
	return o
}

func (o PageLinksPtrOutput) ToPageLinksPtrOutputWithContext(ctx context.Context) PageLinksPtrOutput {
	return o
}

func (o PageLinksPtrOutput) Elem() PageLinksOutput {
	return o.ApplyT(func(v *PageLinks) PageLinks {
		if v != nil {
			return *v
		}
		var ret PageLinks
		return ret
	}).(PageLinksOutput)
}

func (o PageLinksPtrOutput) Pages() PageLinksPagesPropertiesPtrOutput {
	return o.ApplyT(func(v *PageLinks) *PageLinksPagesProperties {
		if v == nil {
			return nil
		}
		return v.Pages
	}).(PageLinksPagesPropertiesPtrOutput)
}

type PageLinksPagesProperties struct {
	First *string `pulumi:"first"`
	Last  *string `pulumi:"last"`
	Next  *string `pulumi:"next"`
	Prev  *string `pulumi:"prev"`
}

type PageLinksPagesPropertiesOutput struct{ *pulumi.OutputState }

func (PageLinksPagesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PageLinksPagesProperties)(nil)).Elem()
}

func (o PageLinksPagesPropertiesOutput) ToPageLinksPagesPropertiesOutput() PageLinksPagesPropertiesOutput {
	return o
}

func (o PageLinksPagesPropertiesOutput) ToPageLinksPagesPropertiesOutputWithContext(ctx context.Context) PageLinksPagesPropertiesOutput {
	return o
}

func (o PageLinksPagesPropertiesOutput) First() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.First }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Last() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Last }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Next() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Next }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Prev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Prev }).(pulumi.StringPtrOutput)
}

type PageLinksPagesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PageLinksPagesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PageLinksPagesProperties)(nil)).Elem()
}

func (o PageLinksPagesPropertiesPtrOutput) ToPageLinksPagesPropertiesPtrOutput() PageLinksPagesPropertiesPtrOutput {
	return o
}

func (o PageLinksPagesPropertiesPtrOutput) ToPageLinksPagesPropertiesPtrOutputWithContext(ctx context.Context) PageLinksPagesPropertiesPtrOutput {
	return o
}

func (o PageLinksPagesPropertiesPtrOutput) Elem() PageLinksPagesPropertiesOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) PageLinksPagesProperties {
		if v != nil {
			return *v
		}
		var ret PageLinksPagesProperties
		return ret
	}).(PageLinksPagesPropertiesOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) First() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.First
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Last() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Last
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Next() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Next
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Prev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Prev
	}).(pulumi.StringPtrOutput)
}

type RegistryType struct {
	// A time value given in ISO8601 combined date and time format that represents when the registry was created.
	CreatedAt *string `pulumi:"createdAt"`
	// A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.
	Name *string `pulumi:"name"`
	// Slug of the region where registry data is stored
	Region *string `pulumi:"region"`
	// The amount of storage used in the registry in bytes.
	StorageUsageBytes *int `pulumi:"storageUsageBytes"`
	// The time at which the storage usage was updated. Storage usage is calculated asynchronously, and may not immediately reflect pushes to the registry.
	StorageUsageBytesUpdatedAt *string               `pulumi:"storageUsageBytesUpdatedAt"`
	Subscription               *RegistrySubscription `pulumi:"subscription"`
}

type RegistryTypeOutput struct{ *pulumi.OutputState }

func (RegistryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryType)(nil)).Elem()
}

func (o RegistryTypeOutput) ToRegistryTypeOutput() RegistryTypeOutput {
	return o
}

func (o RegistryTypeOutput) ToRegistryTypeOutputWithContext(ctx context.Context) RegistryTypeOutput {
	return o
}

// A time value given in ISO8601 combined date and time format that represents when the registry was created.
func (o RegistryTypeOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryType) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.
func (o RegistryTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Slug of the region where registry data is stored
func (o RegistryTypeOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryType) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The amount of storage used in the registry in bytes.
func (o RegistryTypeOutput) StorageUsageBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegistryType) *int { return v.StorageUsageBytes }).(pulumi.IntPtrOutput)
}

// The time at which the storage usage was updated. Storage usage is calculated asynchronously, and may not immediately reflect pushes to the registry.
func (o RegistryTypeOutput) StorageUsageBytesUpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryType) *string { return v.StorageUsageBytesUpdatedAt }).(pulumi.StringPtrOutput)
}

func (o RegistryTypeOutput) Subscription() RegistrySubscriptionPtrOutput {
	return o.ApplyT(func(v RegistryType) *RegistrySubscription { return v.Subscription }).(RegistrySubscriptionPtrOutput)
}

type RegistryTypePtrOutput struct{ *pulumi.OutputState }

func (RegistryTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryType)(nil)).Elem()
}

func (o RegistryTypePtrOutput) ToRegistryTypePtrOutput() RegistryTypePtrOutput {
	return o
}

func (o RegistryTypePtrOutput) ToRegistryTypePtrOutputWithContext(ctx context.Context) RegistryTypePtrOutput {
	return o
}

func (o RegistryTypePtrOutput) Elem() RegistryTypeOutput {
	return o.ApplyT(func(v *RegistryType) RegistryType {
		if v != nil {
			return *v
		}
		var ret RegistryType
		return ret
	}).(RegistryTypeOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the registry was created.
func (o RegistryTypePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryType) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.
func (o RegistryTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Slug of the region where registry data is stored
func (o RegistryTypePtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryType) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// The amount of storage used in the registry in bytes.
func (o RegistryTypePtrOutput) StorageUsageBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegistryType) *int {
		if v == nil {
			return nil
		}
		return v.StorageUsageBytes
	}).(pulumi.IntPtrOutput)
}

// The time at which the storage usage was updated. Storage usage is calculated asynchronously, and may not immediately reflect pushes to the registry.
func (o RegistryTypePtrOutput) StorageUsageBytesUpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryType) *string {
		if v == nil {
			return nil
		}
		return v.StorageUsageBytesUpdatedAt
	}).(pulumi.StringPtrOutput)
}

func (o RegistryTypePtrOutput) Subscription() RegistrySubscriptionPtrOutput {
	return o.ApplyT(func(v *RegistryType) *RegistrySubscription {
		if v == nil {
			return nil
		}
		return v.Subscription
	}).(RegistrySubscriptionPtrOutput)
}

type RegistrySubscription struct {
	// The time at which the subscription was created.
	CreatedAt *string               `pulumi:"createdAt"`
	Tier      *SubscriptionTierBase `pulumi:"tier"`
	// The time at which the subscription was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type RegistrySubscriptionOutput struct{ *pulumi.OutputState }

func (RegistrySubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrySubscription)(nil)).Elem()
}

func (o RegistrySubscriptionOutput) ToRegistrySubscriptionOutput() RegistrySubscriptionOutput {
	return o
}

func (o RegistrySubscriptionOutput) ToRegistrySubscriptionOutputWithContext(ctx context.Context) RegistrySubscriptionOutput {
	return o
}

// The time at which the subscription was created.
func (o RegistrySubscriptionOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrySubscription) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o RegistrySubscriptionOutput) Tier() SubscriptionTierBasePtrOutput {
	return o.ApplyT(func(v RegistrySubscription) *SubscriptionTierBase { return v.Tier }).(SubscriptionTierBasePtrOutput)
}

// The time at which the subscription was last updated.
func (o RegistrySubscriptionOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrySubscription) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type RegistrySubscriptionPtrOutput struct{ *pulumi.OutputState }

func (RegistrySubscriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrySubscription)(nil)).Elem()
}

func (o RegistrySubscriptionPtrOutput) ToRegistrySubscriptionPtrOutput() RegistrySubscriptionPtrOutput {
	return o
}

func (o RegistrySubscriptionPtrOutput) ToRegistrySubscriptionPtrOutputWithContext(ctx context.Context) RegistrySubscriptionPtrOutput {
	return o
}

func (o RegistrySubscriptionPtrOutput) Elem() RegistrySubscriptionOutput {
	return o.ApplyT(func(v *RegistrySubscription) RegistrySubscription {
		if v != nil {
			return *v
		}
		var ret RegistrySubscription
		return ret
	}).(RegistrySubscriptionOutput)
}

// The time at which the subscription was created.
func (o RegistrySubscriptionPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySubscription) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

func (o RegistrySubscriptionPtrOutput) Tier() SubscriptionTierBasePtrOutput {
	return o.ApplyT(func(v *RegistrySubscription) *SubscriptionTierBase {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(SubscriptionTierBasePtrOutput)
}

// The time at which the subscription was last updated.
func (o RegistrySubscriptionPtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrySubscription) *string {
		if v == nil {
			return nil
		}
		return v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

type Repository struct {
	LatestTag *RepositoryTag `pulumi:"latestTag"`
	// The name of the repository.
	Name *string `pulumi:"name"`
	// The name of the container registry.
	RegistryName *string `pulumi:"registryName"`
	// The number of tags in the repository.
	TagCount *int `pulumi:"tagCount"`
}

type RepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Repository)(nil)).Elem()
}

func (o RepositoryOutput) ToRepositoryOutput() RepositoryOutput {
	return o
}

func (o RepositoryOutput) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return o
}

func (o RepositoryOutput) LatestTag() RepositoryTagPtrOutput {
	return o.ApplyT(func(v Repository) *RepositoryTag { return v.LatestTag }).(RepositoryTagPtrOutput)
}

// The name of the repository.
func (o RepositoryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Repository) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The name of the container registry.
func (o RepositoryOutput) RegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Repository) *string { return v.RegistryName }).(pulumi.StringPtrOutput)
}

// The number of tags in the repository.
func (o RepositoryOutput) TagCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Repository) *int { return v.TagCount }).(pulumi.IntPtrOutput)
}

type RepositoryArrayOutput struct{ *pulumi.OutputState }

func (RepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Repository)(nil)).Elem()
}

func (o RepositoryArrayOutput) ToRepositoryArrayOutput() RepositoryArrayOutput {
	return o
}

func (o RepositoryArrayOutput) ToRepositoryArrayOutputWithContext(ctx context.Context) RepositoryArrayOutput {
	return o
}

func (o RepositoryArrayOutput) Index(i pulumi.IntInput) RepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Repository {
		return vs[0].([]Repository)[vs[1].(int)]
	}).(RepositoryOutput)
}

type RepositoryBlob struct {
	// The compressed size of the blob in bytes.
	CompressedSizeBytes *int `pulumi:"compressedSizeBytes"`
	// The digest of the blob
	Digest *string `pulumi:"digest"`
}

type RepositoryBlobOutput struct{ *pulumi.OutputState }

func (RepositoryBlobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryBlob)(nil)).Elem()
}

func (o RepositoryBlobOutput) ToRepositoryBlobOutput() RepositoryBlobOutput {
	return o
}

func (o RepositoryBlobOutput) ToRepositoryBlobOutputWithContext(ctx context.Context) RepositoryBlobOutput {
	return o
}

// The compressed size of the blob in bytes.
func (o RepositoryBlobOutput) CompressedSizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RepositoryBlob) *int { return v.CompressedSizeBytes }).(pulumi.IntPtrOutput)
}

// The digest of the blob
func (o RepositoryBlobOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryBlob) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

type RepositoryBlobArrayOutput struct{ *pulumi.OutputState }

func (RepositoryBlobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryBlob)(nil)).Elem()
}

func (o RepositoryBlobArrayOutput) ToRepositoryBlobArrayOutput() RepositoryBlobArrayOutput {
	return o
}

func (o RepositoryBlobArrayOutput) ToRepositoryBlobArrayOutputWithContext(ctx context.Context) RepositoryBlobArrayOutput {
	return o
}

func (o RepositoryBlobArrayOutput) Index(i pulumi.IntInput) RepositoryBlobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryBlob {
		return vs[0].([]RepositoryBlob)[vs[1].(int)]
	}).(RepositoryBlobOutput)
}

type RepositoryManifest struct {
	// All blobs associated with this manifest
	Blobs []RepositoryBlob `pulumi:"blobs"`
	// The compressed size of the manifest in bytes.
	CompressedSizeBytes *int `pulumi:"compressedSizeBytes"`
	// The manifest digest
	Digest *string `pulumi:"digest"`
	// The name of the container registry.
	RegistryName *string `pulumi:"registryName"`
	// The name of the repository.
	Repository *string `pulumi:"repository"`
	// The uncompressed size of the manifest in bytes (this size is calculated asynchronously so it may not be immediately available).
	SizeBytes *int `pulumi:"sizeBytes"`
	// All tags associated with this manifest
	Tags []string `pulumi:"tags"`
	// The time the manifest was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type RepositoryManifestOutput struct{ *pulumi.OutputState }

func (RepositoryManifestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryManifest)(nil)).Elem()
}

func (o RepositoryManifestOutput) ToRepositoryManifestOutput() RepositoryManifestOutput {
	return o
}

func (o RepositoryManifestOutput) ToRepositoryManifestOutputWithContext(ctx context.Context) RepositoryManifestOutput {
	return o
}

// All blobs associated with this manifest
func (o RepositoryManifestOutput) Blobs() RepositoryBlobArrayOutput {
	return o.ApplyT(func(v RepositoryManifest) []RepositoryBlob { return v.Blobs }).(RepositoryBlobArrayOutput)
}

// The compressed size of the manifest in bytes.
func (o RepositoryManifestOutput) CompressedSizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RepositoryManifest) *int { return v.CompressedSizeBytes }).(pulumi.IntPtrOutput)
}

// The manifest digest
func (o RepositoryManifestOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryManifest) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// The name of the container registry.
func (o RepositoryManifestOutput) RegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryManifest) *string { return v.RegistryName }).(pulumi.StringPtrOutput)
}

// The name of the repository.
func (o RepositoryManifestOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryManifest) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// The uncompressed size of the manifest in bytes (this size is calculated asynchronously so it may not be immediately available).
func (o RepositoryManifestOutput) SizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RepositoryManifest) *int { return v.SizeBytes }).(pulumi.IntPtrOutput)
}

// All tags associated with this manifest
func (o RepositoryManifestOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepositoryManifest) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The time the manifest was last updated.
func (o RepositoryManifestOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryManifest) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type RepositoryManifestPtrOutput struct{ *pulumi.OutputState }

func (RepositoryManifestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryManifest)(nil)).Elem()
}

func (o RepositoryManifestPtrOutput) ToRepositoryManifestPtrOutput() RepositoryManifestPtrOutput {
	return o
}

func (o RepositoryManifestPtrOutput) ToRepositoryManifestPtrOutputWithContext(ctx context.Context) RepositoryManifestPtrOutput {
	return o
}

func (o RepositoryManifestPtrOutput) Elem() RepositoryManifestOutput {
	return o.ApplyT(func(v *RepositoryManifest) RepositoryManifest {
		if v != nil {
			return *v
		}
		var ret RepositoryManifest
		return ret
	}).(RepositoryManifestOutput)
}

// All blobs associated with this manifest
func (o RepositoryManifestPtrOutput) Blobs() RepositoryBlobArrayOutput {
	return o.ApplyT(func(v *RepositoryManifest) []RepositoryBlob {
		if v == nil {
			return nil
		}
		return v.Blobs
	}).(RepositoryBlobArrayOutput)
}

// The compressed size of the manifest in bytes.
func (o RepositoryManifestPtrOutput) CompressedSizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RepositoryManifest) *int {
		if v == nil {
			return nil
		}
		return v.CompressedSizeBytes
	}).(pulumi.IntPtrOutput)
}

// The manifest digest
func (o RepositoryManifestPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryManifest) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// The name of the container registry.
func (o RepositoryManifestPtrOutput) RegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryManifest) *string {
		if v == nil {
			return nil
		}
		return v.RegistryName
	}).(pulumi.StringPtrOutput)
}

// The name of the repository.
func (o RepositoryManifestPtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryManifest) *string {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(pulumi.StringPtrOutput)
}

// The uncompressed size of the manifest in bytes (this size is calculated asynchronously so it may not be immediately available).
func (o RepositoryManifestPtrOutput) SizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RepositoryManifest) *int {
		if v == nil {
			return nil
		}
		return v.SizeBytes
	}).(pulumi.IntPtrOutput)
}

// All tags associated with this manifest
func (o RepositoryManifestPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepositoryManifest) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// The time the manifest was last updated.
func (o RepositoryManifestPtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryManifest) *string {
		if v == nil {
			return nil
		}
		return v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

type RepositoryManifestArrayOutput struct{ *pulumi.OutputState }

func (RepositoryManifestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryManifest)(nil)).Elem()
}

func (o RepositoryManifestArrayOutput) ToRepositoryManifestArrayOutput() RepositoryManifestArrayOutput {
	return o
}

func (o RepositoryManifestArrayOutput) ToRepositoryManifestArrayOutputWithContext(ctx context.Context) RepositoryManifestArrayOutput {
	return o
}

func (o RepositoryManifestArrayOutput) Index(i pulumi.IntInput) RepositoryManifestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryManifest {
		return vs[0].([]RepositoryManifest)[vs[1].(int)]
	}).(RepositoryManifestOutput)
}

type RepositoryTag struct {
	// The compressed size of the tag in bytes.
	CompressedSizeBytes *int `pulumi:"compressedSizeBytes"`
	// The digest of the manifest associated with the tag.
	ManifestDigest *string `pulumi:"manifestDigest"`
	// The name of the container registry.
	RegistryName *string `pulumi:"registryName"`
	// The name of the repository.
	Repository *string `pulumi:"repository"`
	// The uncompressed size of the tag in bytes (this size is calculated asynchronously so it may not be immediately available).
	SizeBytes *int `pulumi:"sizeBytes"`
	// The name of the tag.
	Tag *string `pulumi:"tag"`
	// The time the tag was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type RepositoryTagOutput struct{ *pulumi.OutputState }

func (RepositoryTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryTag)(nil)).Elem()
}

func (o RepositoryTagOutput) ToRepositoryTagOutput() RepositoryTagOutput {
	return o
}

func (o RepositoryTagOutput) ToRepositoryTagOutputWithContext(ctx context.Context) RepositoryTagOutput {
	return o
}

// The compressed size of the tag in bytes.
func (o RepositoryTagOutput) CompressedSizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RepositoryTag) *int { return v.CompressedSizeBytes }).(pulumi.IntPtrOutput)
}

// The digest of the manifest associated with the tag.
func (o RepositoryTagOutput) ManifestDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryTag) *string { return v.ManifestDigest }).(pulumi.StringPtrOutput)
}

// The name of the container registry.
func (o RepositoryTagOutput) RegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryTag) *string { return v.RegistryName }).(pulumi.StringPtrOutput)
}

// The name of the repository.
func (o RepositoryTagOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryTag) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// The uncompressed size of the tag in bytes (this size is calculated asynchronously so it may not be immediately available).
func (o RepositoryTagOutput) SizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RepositoryTag) *int { return v.SizeBytes }).(pulumi.IntPtrOutput)
}

// The name of the tag.
func (o RepositoryTagOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryTag) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The time the tag was last updated.
func (o RepositoryTagOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryTag) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type RepositoryTagPtrOutput struct{ *pulumi.OutputState }

func (RepositoryTagPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryTag)(nil)).Elem()
}

func (o RepositoryTagPtrOutput) ToRepositoryTagPtrOutput() RepositoryTagPtrOutput {
	return o
}

func (o RepositoryTagPtrOutput) ToRepositoryTagPtrOutputWithContext(ctx context.Context) RepositoryTagPtrOutput {
	return o
}

func (o RepositoryTagPtrOutput) Elem() RepositoryTagOutput {
	return o.ApplyT(func(v *RepositoryTag) RepositoryTag {
		if v != nil {
			return *v
		}
		var ret RepositoryTag
		return ret
	}).(RepositoryTagOutput)
}

// The compressed size of the tag in bytes.
func (o RepositoryTagPtrOutput) CompressedSizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RepositoryTag) *int {
		if v == nil {
			return nil
		}
		return v.CompressedSizeBytes
	}).(pulumi.IntPtrOutput)
}

// The digest of the manifest associated with the tag.
func (o RepositoryTagPtrOutput) ManifestDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryTag) *string {
		if v == nil {
			return nil
		}
		return v.ManifestDigest
	}).(pulumi.StringPtrOutput)
}

// The name of the container registry.
func (o RepositoryTagPtrOutput) RegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryTag) *string {
		if v == nil {
			return nil
		}
		return v.RegistryName
	}).(pulumi.StringPtrOutput)
}

// The name of the repository.
func (o RepositoryTagPtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryTag) *string {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(pulumi.StringPtrOutput)
}

// The uncompressed size of the tag in bytes (this size is calculated asynchronously so it may not be immediately available).
func (o RepositoryTagPtrOutput) SizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RepositoryTag) *int {
		if v == nil {
			return nil
		}
		return v.SizeBytes
	}).(pulumi.IntPtrOutput)
}

// The name of the tag.
func (o RepositoryTagPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryTag) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The time the tag was last updated.
func (o RepositoryTagPtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryTag) *string {
		if v == nil {
			return nil
		}
		return v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

type RepositoryTagArrayOutput struct{ *pulumi.OutputState }

func (RepositoryTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryTag)(nil)).Elem()
}

func (o RepositoryTagArrayOutput) ToRepositoryTagArrayOutput() RepositoryTagArrayOutput {
	return o
}

func (o RepositoryTagArrayOutput) ToRepositoryTagArrayOutputWithContext(ctx context.Context) RepositoryTagArrayOutput {
	return o
}

func (o RepositoryTagArrayOutput) Index(i pulumi.IntInput) RepositoryTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryTag {
		return vs[0].([]RepositoryTag)[vs[1].(int)]
	}).(RepositoryTagOutput)
}

type RepositoryV2 struct {
	LatestManifest *RepositoryManifest `pulumi:"latestManifest"`
	// The number of manifests in the repository.
	ManifestCount *int `pulumi:"manifestCount"`
	// The name of the repository.
	Name *string `pulumi:"name"`
	// The name of the container registry.
	RegistryName *string `pulumi:"registryName"`
	// The number of tags in the repository.
	TagCount *int `pulumi:"tagCount"`
}

type RepositoryV2Output struct{ *pulumi.OutputState }

func (RepositoryV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryV2)(nil)).Elem()
}

func (o RepositoryV2Output) ToRepositoryV2Output() RepositoryV2Output {
	return o
}

func (o RepositoryV2Output) ToRepositoryV2OutputWithContext(ctx context.Context) RepositoryV2Output {
	return o
}

func (o RepositoryV2Output) LatestManifest() RepositoryManifestPtrOutput {
	return o.ApplyT(func(v RepositoryV2) *RepositoryManifest { return v.LatestManifest }).(RepositoryManifestPtrOutput)
}

// The number of manifests in the repository.
func (o RepositoryV2Output) ManifestCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RepositoryV2) *int { return v.ManifestCount }).(pulumi.IntPtrOutput)
}

// The name of the repository.
func (o RepositoryV2Output) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryV2) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The name of the container registry.
func (o RepositoryV2Output) RegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryV2) *string { return v.RegistryName }).(pulumi.StringPtrOutput)
}

// The number of tags in the repository.
func (o RepositoryV2Output) TagCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RepositoryV2) *int { return v.TagCount }).(pulumi.IntPtrOutput)
}

type RepositoryV2ArrayOutput struct{ *pulumi.OutputState }

func (RepositoryV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryV2)(nil)).Elem()
}

func (o RepositoryV2ArrayOutput) ToRepositoryV2ArrayOutput() RepositoryV2ArrayOutput {
	return o
}

func (o RepositoryV2ArrayOutput) ToRepositoryV2ArrayOutputWithContext(ctx context.Context) RepositoryV2ArrayOutput {
	return o
}

func (o RepositoryV2ArrayOutput) Index(i pulumi.IntInput) RepositoryV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryV2 {
		return vs[0].([]RepositoryV2)[vs[1].(int)]
	}).(RepositoryV2Output)
}

type Subscription struct {
	// The time at which the subscription was created.
	CreatedAt *string               `pulumi:"createdAt"`
	Tier      *SubscriptionTierBase `pulumi:"tier"`
	// The time at which the subscription was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type SubscriptionOutput struct{ *pulumi.OutputState }

func (SubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Subscription)(nil)).Elem()
}

func (o SubscriptionOutput) ToSubscriptionOutput() SubscriptionOutput {
	return o
}

func (o SubscriptionOutput) ToSubscriptionOutputWithContext(ctx context.Context) SubscriptionOutput {
	return o
}

// The time at which the subscription was created.
func (o SubscriptionOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subscription) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o SubscriptionOutput) Tier() SubscriptionTierBasePtrOutput {
	return o.ApplyT(func(v Subscription) *SubscriptionTierBase { return v.Tier }).(SubscriptionTierBasePtrOutput)
}

// The time at which the subscription was last updated.
func (o SubscriptionOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subscription) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type SubscriptionPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subscription)(nil)).Elem()
}

func (o SubscriptionPtrOutput) ToSubscriptionPtrOutput() SubscriptionPtrOutput {
	return o
}

func (o SubscriptionPtrOutput) ToSubscriptionPtrOutputWithContext(ctx context.Context) SubscriptionPtrOutput {
	return o
}

func (o SubscriptionPtrOutput) Elem() SubscriptionOutput {
	return o.ApplyT(func(v *Subscription) Subscription {
		if v != nil {
			return *v
		}
		var ret Subscription
		return ret
	}).(SubscriptionOutput)
}

// The time at which the subscription was created.
func (o SubscriptionPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subscription) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

func (o SubscriptionPtrOutput) Tier() SubscriptionTierBasePtrOutput {
	return o.ApplyT(func(v *Subscription) *SubscriptionTierBase {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(SubscriptionTierBasePtrOutput)
}

// The time at which the subscription was last updated.
func (o SubscriptionPtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subscription) *string {
		if v == nil {
			return nil
		}
		return v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

type SubscriptionTierBase struct {
	// A boolean indicating whether the subscription tier supports additional storage above what is included in the base plan at an additional cost per GiB used.
	AllowStorageOverage *bool `pulumi:"allowStorageOverage"`
	// The amount of outbound data transfer included in the subscription tier in bytes.
	IncludedBandwidthBytes *int `pulumi:"includedBandwidthBytes"`
	// The number of repositories included in the subscription tier. `0` indicates that the subscription tier includes unlimited repositories.
	IncludedRepositories *int `pulumi:"includedRepositories"`
	// The amount of storage included in the subscription tier in bytes.
	IncludedStorageBytes *int `pulumi:"includedStorageBytes"`
	// The monthly cost of the subscription tier in cents.
	MonthlyPriceInCents *int `pulumi:"monthlyPriceInCents"`
	// The name of the subscription tier.
	Name *string `pulumi:"name"`
	// The slug identifier of the subscription tier.
	Slug *string `pulumi:"slug"`
	// The price paid in cents per GiB for additional storage beyond what is included in the subscription plan.
	StorageOveragePriceInCents *int `pulumi:"storageOveragePriceInCents"`
}

type SubscriptionTierBaseOutput struct{ *pulumi.OutputState }

func (SubscriptionTierBaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionTierBase)(nil)).Elem()
}

func (o SubscriptionTierBaseOutput) ToSubscriptionTierBaseOutput() SubscriptionTierBaseOutput {
	return o
}

func (o SubscriptionTierBaseOutput) ToSubscriptionTierBaseOutputWithContext(ctx context.Context) SubscriptionTierBaseOutput {
	return o
}

// A boolean indicating whether the subscription tier supports additional storage above what is included in the base plan at an additional cost per GiB used.
func (o SubscriptionTierBaseOutput) AllowStorageOverage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionTierBase) *bool { return v.AllowStorageOverage }).(pulumi.BoolPtrOutput)
}

// The amount of outbound data transfer included in the subscription tier in bytes.
func (o SubscriptionTierBaseOutput) IncludedBandwidthBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SubscriptionTierBase) *int { return v.IncludedBandwidthBytes }).(pulumi.IntPtrOutput)
}

// The number of repositories included in the subscription tier. `0` indicates that the subscription tier includes unlimited repositories.
func (o SubscriptionTierBaseOutput) IncludedRepositories() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SubscriptionTierBase) *int { return v.IncludedRepositories }).(pulumi.IntPtrOutput)
}

// The amount of storage included in the subscription tier in bytes.
func (o SubscriptionTierBaseOutput) IncludedStorageBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SubscriptionTierBase) *int { return v.IncludedStorageBytes }).(pulumi.IntPtrOutput)
}

// The monthly cost of the subscription tier in cents.
func (o SubscriptionTierBaseOutput) MonthlyPriceInCents() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SubscriptionTierBase) *int { return v.MonthlyPriceInCents }).(pulumi.IntPtrOutput)
}

// The name of the subscription tier.
func (o SubscriptionTierBaseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionTierBase) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The slug identifier of the subscription tier.
func (o SubscriptionTierBaseOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionTierBase) *string { return v.Slug }).(pulumi.StringPtrOutput)
}

// The price paid in cents per GiB for additional storage beyond what is included in the subscription plan.
func (o SubscriptionTierBaseOutput) StorageOveragePriceInCents() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SubscriptionTierBase) *int { return v.StorageOveragePriceInCents }).(pulumi.IntPtrOutput)
}

type SubscriptionTierBasePtrOutput struct{ *pulumi.OutputState }

func (SubscriptionTierBasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionTierBase)(nil)).Elem()
}

func (o SubscriptionTierBasePtrOutput) ToSubscriptionTierBasePtrOutput() SubscriptionTierBasePtrOutput {
	return o
}

func (o SubscriptionTierBasePtrOutput) ToSubscriptionTierBasePtrOutputWithContext(ctx context.Context) SubscriptionTierBasePtrOutput {
	return o
}

func (o SubscriptionTierBasePtrOutput) Elem() SubscriptionTierBaseOutput {
	return o.ApplyT(func(v *SubscriptionTierBase) SubscriptionTierBase {
		if v != nil {
			return *v
		}
		var ret SubscriptionTierBase
		return ret
	}).(SubscriptionTierBaseOutput)
}

// A boolean indicating whether the subscription tier supports additional storage above what is included in the base plan at an additional cost per GiB used.
func (o SubscriptionTierBasePtrOutput) AllowStorageOverage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionTierBase) *bool {
		if v == nil {
			return nil
		}
		return v.AllowStorageOverage
	}).(pulumi.BoolPtrOutput)
}

// The amount of outbound data transfer included in the subscription tier in bytes.
func (o SubscriptionTierBasePtrOutput) IncludedBandwidthBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SubscriptionTierBase) *int {
		if v == nil {
			return nil
		}
		return v.IncludedBandwidthBytes
	}).(pulumi.IntPtrOutput)
}

// The number of repositories included in the subscription tier. `0` indicates that the subscription tier includes unlimited repositories.
func (o SubscriptionTierBasePtrOutput) IncludedRepositories() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SubscriptionTierBase) *int {
		if v == nil {
			return nil
		}
		return v.IncludedRepositories
	}).(pulumi.IntPtrOutput)
}

// The amount of storage included in the subscription tier in bytes.
func (o SubscriptionTierBasePtrOutput) IncludedStorageBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SubscriptionTierBase) *int {
		if v == nil {
			return nil
		}
		return v.IncludedStorageBytes
	}).(pulumi.IntPtrOutput)
}

// The monthly cost of the subscription tier in cents.
func (o SubscriptionTierBasePtrOutput) MonthlyPriceInCents() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SubscriptionTierBase) *int {
		if v == nil {
			return nil
		}
		return v.MonthlyPriceInCents
	}).(pulumi.IntPtrOutput)
}

// The name of the subscription tier.
func (o SubscriptionTierBasePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionTierBase) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The slug identifier of the subscription tier.
func (o SubscriptionTierBasePtrOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionTierBase) *string {
		if v == nil {
			return nil
		}
		return v.Slug
	}).(pulumi.StringPtrOutput)
}

// The price paid in cents per GiB for additional storage beyond what is included in the subscription plan.
func (o SubscriptionTierBasePtrOutput) StorageOveragePriceInCents() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SubscriptionTierBase) *int {
		if v == nil {
			return nil
		}
		return v.StorageOveragePriceInCents
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DockerCredentialsOutput{})
	pulumi.RegisterOutputType(DockerCredentialsAuthsPropertiesOutput{})
	pulumi.RegisterOutputType(DockerCredentialsAuthsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesOutput{})
	pulumi.RegisterOutputType(DockerCredentialsAuthsPropertiesRegistryDigitaloceanComPropertiesPtrOutput{})
	pulumi.RegisterOutputType(GarbageCollectionOutput{})
	pulumi.RegisterOutputType(GarbageCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetRegistryOptionPropertiesOutput{})
	pulumi.RegisterOutputType(GetRegistryOptionPropertiesOptionsPropertiesOutput{})
	pulumi.RegisterOutputType(GetRegistryOptionPropertiesOptionsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemOutput{})
	pulumi.RegisterOutputType(GetRegistryOptionPropertiesOptionsPropertiesSubscriptionTiersItemArrayOutput{})
	pulumi.RegisterOutputType(GetRegistryPropertiesOutput{})
	pulumi.RegisterOutputType(GetRegistrySubscriptionPropertiesOutput{})
	pulumi.RegisterOutputType(ListRegistryGarbageCollectionsPropertiesOutput{})
	pulumi.RegisterOutputType(ListRegistryRepositoriesItemsOutput{})
	pulumi.RegisterOutputType(ListRegistryRepositoriesV2ItemsOutput{})
	pulumi.RegisterOutputType(ListRegistryRepositoryManifestsItemsOutput{})
	pulumi.RegisterOutputType(ListRegistryRepositoryTagsItemsOutput{})
	pulumi.RegisterOutputType(MetaMetaOutput{})
	pulumi.RegisterOutputType(PageLinksOutput{})
	pulumi.RegisterOutputType(PageLinksPtrOutput{})
	pulumi.RegisterOutputType(PageLinksPagesPropertiesOutput{})
	pulumi.RegisterOutputType(PageLinksPagesPropertiesPtrOutput{})
	pulumi.RegisterOutputType(RegistryTypeOutput{})
	pulumi.RegisterOutputType(RegistryTypePtrOutput{})
	pulumi.RegisterOutputType(RegistrySubscriptionOutput{})
	pulumi.RegisterOutputType(RegistrySubscriptionPtrOutput{})
	pulumi.RegisterOutputType(RepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryArrayOutput{})
	pulumi.RegisterOutputType(RepositoryBlobOutput{})
	pulumi.RegisterOutputType(RepositoryBlobArrayOutput{})
	pulumi.RegisterOutputType(RepositoryManifestOutput{})
	pulumi.RegisterOutputType(RepositoryManifestPtrOutput{})
	pulumi.RegisterOutputType(RepositoryManifestArrayOutput{})
	pulumi.RegisterOutputType(RepositoryTagOutput{})
	pulumi.RegisterOutputType(RepositoryTagPtrOutput{})
	pulumi.RegisterOutputType(RepositoryTagArrayOutput{})
	pulumi.RegisterOutputType(RepositoryV2Output{})
	pulumi.RegisterOutputType(RepositoryV2ArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionOutput{})
	pulumi.RegisterOutputType(SubscriptionPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionTierBaseOutput{})
	pulumi.RegisterOutputType(SubscriptionTierBasePtrOutput{})
}
