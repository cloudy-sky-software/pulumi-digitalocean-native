// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ReservedIPs struct {
	pulumi.CustomResourceState

	Links      LinksPropertiesPtrOutput `pulumi:"links"`
	ReservedIp ReservedIpPtrOutput      `pulumi:"reservedIp"`
}

// NewReservedIPs registers a new resource with the given unique name, arguments, and options.
func NewReservedIPs(ctx *pulumi.Context,
	name string, args *ReservedIPsArgs, opts ...pulumi.ResourceOption) (*ReservedIPs, error) {
	if args == nil {
		args = &ReservedIPsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReservedIPs
	err := ctx.RegisterResource("digitalocean-native:reserved_ips/v2:ReservedIPs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReservedIPs gets an existing ReservedIPs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReservedIPs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReservedIPsState, opts ...pulumi.ResourceOption) (*ReservedIPs, error) {
	var resource ReservedIPs
	err := ctx.ReadResource("digitalocean-native:reserved_ips/v2:ReservedIPs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReservedIPs resources.
type reservedIPsState struct {
}

type ReservedIPsState struct {
}

func (ReservedIPsState) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedIPsState)(nil)).Elem()
}

type reservedIPsArgs struct {
}

// The set of arguments for constructing a ReservedIPs resource.
type ReservedIPsArgs struct {
}

func (ReservedIPsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedIPsArgs)(nil)).Elem()
}

type ReservedIPsInput interface {
	pulumi.Input

	ToReservedIPsOutput() ReservedIPsOutput
	ToReservedIPsOutputWithContext(ctx context.Context) ReservedIPsOutput
}

func (*ReservedIPs) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedIPs)(nil)).Elem()
}

func (i *ReservedIPs) ToReservedIPsOutput() ReservedIPsOutput {
	return i.ToReservedIPsOutputWithContext(context.Background())
}

func (i *ReservedIPs) ToReservedIPsOutputWithContext(ctx context.Context) ReservedIPsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedIPsOutput)
}

type ReservedIPsOutput struct{ *pulumi.OutputState }

func (ReservedIPsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedIPs)(nil)).Elem()
}

func (o ReservedIPsOutput) ToReservedIPsOutput() ReservedIPsOutput {
	return o
}

func (o ReservedIPsOutput) ToReservedIPsOutputWithContext(ctx context.Context) ReservedIPsOutput {
	return o
}

func (o ReservedIPsOutput) Links() LinksPropertiesPtrOutput {
	return o.ApplyT(func(v *ReservedIPs) LinksPropertiesPtrOutput { return v.Links }).(LinksPropertiesPtrOutput)
}

func (o ReservedIPsOutput) ReservedIp() ReservedIpPtrOutput {
	return o.ApplyT(func(v *ReservedIPs) ReservedIpPtrOutput { return v.ReservedIp }).(ReservedIpPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedIPsInput)(nil)).Elem(), &ReservedIPs{})
	pulumi.RegisterOutputType(ReservedIPsOutput{})
}
