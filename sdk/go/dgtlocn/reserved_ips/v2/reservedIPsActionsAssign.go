// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ReservedIPsActionsAssign struct {
	pulumi.CustomResourceState

	Action ActionPtrOutput `pulumi:"action"`
	// The ID of the Droplet that the reserved IP will be assigned to.
	DropletId pulumi.IntPtrOutput `pulumi:"dropletId"`
	// The type of action to initiate for the reserved IP.
	Type ReservedIpActionTypeTypePtrOutput `pulumi:"type"`
}

// NewReservedIPsActionsAssign registers a new resource with the given unique name, arguments, and options.
func NewReservedIPsActionsAssign(ctx *pulumi.Context,
	name string, args *ReservedIPsActionsAssignArgs, opts ...pulumi.ResourceOption) (*ReservedIPsActionsAssign, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DropletId == nil {
		return nil, errors.New("invalid value for required argument 'DropletId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReservedIPsActionsAssign
	err := ctx.RegisterResource("digitalocean-native:reserved_ips/v2:ReservedIPsActionsAssign", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReservedIPsActionsAssign gets an existing ReservedIPsActionsAssign resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReservedIPsActionsAssign(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReservedIPsActionsAssignState, opts ...pulumi.ResourceOption) (*ReservedIPsActionsAssign, error) {
	var resource ReservedIPsActionsAssign
	err := ctx.ReadResource("digitalocean-native:reserved_ips/v2:ReservedIPsActionsAssign", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReservedIPsActionsAssign resources.
type reservedIPsActionsAssignState struct {
}

type ReservedIPsActionsAssignState struct {
}

func (ReservedIPsActionsAssignState) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedIPsActionsAssignState)(nil)).Elem()
}

type reservedIPsActionsAssignArgs struct {
	// The ID of the Droplet that the reserved IP will be assigned to.
	DropletId int `pulumi:"dropletId"`
	// A reserved IP address.
	ReservedIp *string `pulumi:"reservedIp"`
	// The type of action to initiate for the reserved IP.
	Type ReservedIpActionTypeType `pulumi:"type"`
}

// The set of arguments for constructing a ReservedIPsActionsAssign resource.
type ReservedIPsActionsAssignArgs struct {
	// The ID of the Droplet that the reserved IP will be assigned to.
	DropletId pulumi.IntInput
	// A reserved IP address.
	ReservedIp pulumi.StringPtrInput
	// The type of action to initiate for the reserved IP.
	Type ReservedIpActionTypeTypeInput
}

func (ReservedIPsActionsAssignArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedIPsActionsAssignArgs)(nil)).Elem()
}

type ReservedIPsActionsAssignInput interface {
	pulumi.Input

	ToReservedIPsActionsAssignOutput() ReservedIPsActionsAssignOutput
	ToReservedIPsActionsAssignOutputWithContext(ctx context.Context) ReservedIPsActionsAssignOutput
}

func (*ReservedIPsActionsAssign) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedIPsActionsAssign)(nil)).Elem()
}

func (i *ReservedIPsActionsAssign) ToReservedIPsActionsAssignOutput() ReservedIPsActionsAssignOutput {
	return i.ToReservedIPsActionsAssignOutputWithContext(context.Background())
}

func (i *ReservedIPsActionsAssign) ToReservedIPsActionsAssignOutputWithContext(ctx context.Context) ReservedIPsActionsAssignOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedIPsActionsAssignOutput)
}

type ReservedIPsActionsAssignOutput struct{ *pulumi.OutputState }

func (ReservedIPsActionsAssignOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedIPsActionsAssign)(nil)).Elem()
}

func (o ReservedIPsActionsAssignOutput) ToReservedIPsActionsAssignOutput() ReservedIPsActionsAssignOutput {
	return o
}

func (o ReservedIPsActionsAssignOutput) ToReservedIPsActionsAssignOutputWithContext(ctx context.Context) ReservedIPsActionsAssignOutput {
	return o
}

func (o ReservedIPsActionsAssignOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v *ReservedIPsActionsAssign) ActionPtrOutput { return v.Action }).(ActionPtrOutput)
}

// The ID of the Droplet that the reserved IP will be assigned to.
func (o ReservedIPsActionsAssignOutput) DropletId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReservedIPsActionsAssign) pulumi.IntPtrOutput { return v.DropletId }).(pulumi.IntPtrOutput)
}

// The type of action to initiate for the reserved IP.
func (o ReservedIPsActionsAssignOutput) Type() ReservedIpActionTypeTypePtrOutput {
	return o.ApplyT(func(v *ReservedIPsActionsAssign) ReservedIpActionTypeTypePtrOutput { return v.Type }).(ReservedIpActionTypeTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedIPsActionsAssignInput)(nil)).Elem(), &ReservedIPsActionsAssign{})
	pulumi.RegisterOutputType(ReservedIPsActionsAssignOutput{})
}
