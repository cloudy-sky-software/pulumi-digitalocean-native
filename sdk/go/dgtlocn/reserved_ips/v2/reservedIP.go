// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ReservedIP struct {
	pulumi.CustomResourceState

	Links LinksPropertiesPtrOutput `pulumi:"links"`
	// The UUID of the project to which the reserved IP will be assigned.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// The slug identifier for the region the reserved IP will be reserved to.
	Region     pulumi.StringPtrOutput  `pulumi:"region"`
	ReservedIp ReservedIpTypePtrOutput `pulumi:"reservedIp"`
}

// NewReservedIP registers a new resource with the given unique name, arguments, and options.
func NewReservedIP(ctx *pulumi.Context,
	name string, args *ReservedIPArgs, opts ...pulumi.ResourceOption) (*ReservedIP, error) {
	if args == nil {
		args = &ReservedIPArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReservedIP
	err := ctx.RegisterResource("digitalocean-native:reserved_ips/v2:ReservedIP", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReservedIP gets an existing ReservedIP resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReservedIP(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReservedIPState, opts ...pulumi.ResourceOption) (*ReservedIP, error) {
	var resource ReservedIP
	err := ctx.ReadResource("digitalocean-native:reserved_ips/v2:ReservedIP", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReservedIP resources.
type reservedIPState struct {
}

type ReservedIPState struct {
}

func (ReservedIPState) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedIPState)(nil)).Elem()
}

type reservedIPArgs struct {
	// The UUID of the project to which the reserved IP will be assigned.
	ProjectId *string `pulumi:"projectId"`
	// The slug identifier for the region the reserved IP will be reserved to.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a ReservedIP resource.
type ReservedIPArgs struct {
	// The UUID of the project to which the reserved IP will be assigned.
	ProjectId pulumi.StringPtrInput
	// The slug identifier for the region the reserved IP will be reserved to.
	Region pulumi.StringPtrInput
}

func (ReservedIPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedIPArgs)(nil)).Elem()
}

type ReservedIPInput interface {
	pulumi.Input

	ToReservedIPOutput() ReservedIPOutput
	ToReservedIPOutputWithContext(ctx context.Context) ReservedIPOutput
}

func (*ReservedIP) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedIP)(nil)).Elem()
}

func (i *ReservedIP) ToReservedIPOutput() ReservedIPOutput {
	return i.ToReservedIPOutputWithContext(context.Background())
}

func (i *ReservedIP) ToReservedIPOutputWithContext(ctx context.Context) ReservedIPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedIPOutput)
}

type ReservedIPOutput struct{ *pulumi.OutputState }

func (ReservedIPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedIP)(nil)).Elem()
}

func (o ReservedIPOutput) ToReservedIPOutput() ReservedIPOutput {
	return o
}

func (o ReservedIPOutput) ToReservedIPOutputWithContext(ctx context.Context) ReservedIPOutput {
	return o
}

func (o ReservedIPOutput) Links() LinksPropertiesPtrOutput {
	return o.ApplyT(func(v *ReservedIP) LinksPropertiesPtrOutput { return v.Links }).(LinksPropertiesPtrOutput)
}

// The UUID of the project to which the reserved IP will be assigned.
func (o ReservedIPOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservedIP) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The slug identifier for the region the reserved IP will be reserved to.
func (o ReservedIPOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservedIP) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

func (o ReservedIPOutput) ReservedIp() ReservedIpTypePtrOutput {
	return o.ApplyT(func(v *ReservedIP) ReservedIpTypePtrOutput { return v.ReservedIp }).(ReservedIpTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedIPInput)(nil)).Elem(), &ReservedIP{})
	pulumi.RegisterOutputType(ReservedIPOutput{})
}
