// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type Action struct {
	// A time value given in ISO8601 combined date and time format that represents when the action was completed.
	CompletedAt *string `pulumi:"completedAt"`
	// A unique numeric ID that can be used to identify and reference an action.
	Id *int `pulumi:"id"`
	// The UUID of the project to which the reserved IP currently belongs.
	ProjectId  *string           `pulumi:"projectId"`
	Region     *Region           `pulumi:"region"`
	RegionSlug *ActionRegionSlug `pulumi:"regionSlug"`
	// A unique identifier for the resource that the action is associated with.
	ResourceId *int `pulumi:"resourceId"`
	// The type of resource that the action is associated with.
	ResourceType *string `pulumi:"resourceType"`
	// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
	StartedAt *string `pulumi:"startedAt"`
	// The current status of the action. This can be "in-progress", "completed", or "errored".
	Status *ActionStatus `pulumi:"status"`
	// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for Action
func (val *Action) Defaults() *Action {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Status == nil {
		status_ := ActionStatus("in-progress")
		tmp.Status = &status_
	}
	return &tmp
}

type ActionOutput struct{ *pulumi.OutputState }

func (ActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Action)(nil)).Elem()
}

func (o ActionOutput) ToActionOutput() ActionOutput {
	return o
}

func (o ActionOutput) ToActionOutputWithContext(ctx context.Context) ActionOutput {
	return o
}

// A time value given in ISO8601 combined date and time format that represents when the action was completed.
func (o ActionOutput) CompletedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Action) *string { return v.CompletedAt }).(pulumi.StringPtrOutput)
}

// A unique numeric ID that can be used to identify and reference an action.
func (o ActionOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Action) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The UUID of the project to which the reserved IP currently belongs.
func (o ActionOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Action) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o ActionOutput) Region() RegionPtrOutput {
	return o.ApplyT(func(v Action) *Region { return v.Region }).(RegionPtrOutput)
}

func (o ActionOutput) RegionSlug() ActionRegionSlugPtrOutput {
	return o.ApplyT(func(v Action) *ActionRegionSlug { return v.RegionSlug }).(ActionRegionSlugPtrOutput)
}

// A unique identifier for the resource that the action is associated with.
func (o ActionOutput) ResourceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Action) *int { return v.ResourceId }).(pulumi.IntPtrOutput)
}

// The type of resource that the action is associated with.
func (o ActionOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Action) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
func (o ActionOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Action) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

// The current status of the action. This can be "in-progress", "completed", or "errored".
func (o ActionOutput) Status() ActionStatusPtrOutput {
	return o.ApplyT(func(v Action) *ActionStatus { return v.Status }).(ActionStatusPtrOutput)
}

// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
func (o ActionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Action) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ActionPtrOutput struct{ *pulumi.OutputState }

func (ActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Action)(nil)).Elem()
}

func (o ActionPtrOutput) ToActionPtrOutput() ActionPtrOutput {
	return o
}

func (o ActionPtrOutput) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return o
}

func (o ActionPtrOutput) Elem() ActionOutput {
	return o.ApplyT(func(v *Action) Action {
		if v != nil {
			return *v
		}
		var ret Action
		return ret
	}).(ActionOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the action was completed.
func (o ActionPtrOutput) CompletedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) *string {
		if v == nil {
			return nil
		}
		return v.CompletedAt
	}).(pulumi.StringPtrOutput)
}

// A unique numeric ID that can be used to identify and reference an action.
func (o ActionPtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Action) *int {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.IntPtrOutput)
}

// The UUID of the project to which the reserved IP currently belongs.
func (o ActionPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

func (o ActionPtrOutput) Region() RegionPtrOutput {
	return o.ApplyT(func(v *Action) *Region {
		if v == nil {
			return nil
		}
		return v.Region
	}).(RegionPtrOutput)
}

func (o ActionPtrOutput) RegionSlug() ActionRegionSlugPtrOutput {
	return o.ApplyT(func(v *Action) *ActionRegionSlug {
		if v == nil {
			return nil
		}
		return v.RegionSlug
	}).(ActionRegionSlugPtrOutput)
}

// A unique identifier for the resource that the action is associated with.
func (o ActionPtrOutput) ResourceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Action) *int {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.IntPtrOutput)
}

// The type of resource that the action is associated with.
func (o ActionPtrOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) *string {
		if v == nil {
			return nil
		}
		return v.ResourceType
	}).(pulumi.StringPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
func (o ActionPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// The current status of the action. This can be "in-progress", "completed", or "errored".
func (o ActionPtrOutput) Status() ActionStatusPtrOutput {
	return o.ApplyT(func(v *Action) *ActionStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(ActionStatusPtrOutput)
}

// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
func (o ActionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ActionArrayOutput struct{ *pulumi.OutputState }

func (ActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Action)(nil)).Elem()
}

func (o ActionArrayOutput) ToActionArrayOutput() ActionArrayOutput {
	return o
}

func (o ActionArrayOutput) ToActionArrayOutputWithContext(ctx context.Context) ActionArrayOutput {
	return o
}

func (o ActionArrayOutput) Index(i pulumi.IntInput) ActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Action {
		return vs[0].([]Action)[vs[1].(int)]
	}).(ActionOutput)
}

// The linked actions can be used to check the status of a Droplet's create event.
type ActionLink struct {
	// A URL that can be used to access the action.
	Href *string `pulumi:"href"`
	// A unique numeric ID that can be used to identify and reference an action.
	Id *int `pulumi:"id"`
	// A string specifying the type of the related action.
	Rel *string `pulumi:"rel"`
}

// The linked actions can be used to check the status of a Droplet's create event.
type ActionLinkOutput struct{ *pulumi.OutputState }

func (ActionLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionLink)(nil)).Elem()
}

func (o ActionLinkOutput) ToActionLinkOutput() ActionLinkOutput {
	return o
}

func (o ActionLinkOutput) ToActionLinkOutputWithContext(ctx context.Context) ActionLinkOutput {
	return o
}

// A URL that can be used to access the action.
func (o ActionLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

// A unique numeric ID that can be used to identify and reference an action.
func (o ActionLinkOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ActionLink) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// A string specifying the type of the related action.
func (o ActionLinkOutput) Rel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionLink) *string { return v.Rel }).(pulumi.StringPtrOutput)
}

type ActionLinkArrayOutput struct{ *pulumi.OutputState }

func (ActionLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionLink)(nil)).Elem()
}

func (o ActionLinkArrayOutput) ToActionLinkArrayOutput() ActionLinkArrayOutput {
	return o
}

func (o ActionLinkArrayOutput) ToActionLinkArrayOutputWithContext(ctx context.Context) ActionLinkArrayOutput {
	return o
}

func (o ActionLinkArrayOutput) Index(i pulumi.IntInput) ActionLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionLink {
		return vs[0].([]ActionLink)[vs[1].(int)]
	}).(ActionLinkOutput)
}

type ActionRegionSlug struct {
}

type ActionRegionSlugOutput struct{ *pulumi.OutputState }

func (ActionRegionSlugOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRegionSlug)(nil)).Elem()
}

func (o ActionRegionSlugOutput) ToActionRegionSlugOutput() ActionRegionSlugOutput {
	return o
}

func (o ActionRegionSlugOutput) ToActionRegionSlugOutputWithContext(ctx context.Context) ActionRegionSlugOutput {
	return o
}

type ActionRegionSlugPtrOutput struct{ *pulumi.OutputState }

func (ActionRegionSlugPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRegionSlug)(nil)).Elem()
}

func (o ActionRegionSlugPtrOutput) ToActionRegionSlugPtrOutput() ActionRegionSlugPtrOutput {
	return o
}

func (o ActionRegionSlugPtrOutput) ToActionRegionSlugPtrOutputWithContext(ctx context.Context) ActionRegionSlugPtrOutput {
	return o
}

func (o ActionRegionSlugPtrOutput) Elem() ActionRegionSlugOutput {
	return o.ApplyT(func(v *ActionRegionSlug) ActionRegionSlug {
		if v != nil {
			return *v
		}
		var ret ActionRegionSlug
		return ret
	}).(ActionRegionSlugOutput)
}

type Droplet struct {
	// An array of backup IDs of any backups that have been taken of the Droplet instance.  Droplet backups are enabled at the time of the instance creation.
	BackupIds []int `pulumi:"backupIds"`
	// A time value given in ISO8601 combined date and time format that represents when the Droplet was created.
	CreatedAt string `pulumi:"createdAt"`
	// The size of the Droplet's disk in gigabytes.
	Disk int `pulumi:"disk"`
	// An array of features enabled on this Droplet.
	Features []string `pulumi:"features"`
	// A unique identifier for each Droplet instance. This is automatically generated upon Droplet creation.
	Id    int   `pulumi:"id"`
	Image Image `pulumi:"image"`
	// **Note**: All Droplets created after March 2017 use internal kernels by default.
	// These Droplets will have this attribute set to `null`.
	//
	// The current [kernel](https://www.digitalocean.com/docs/droplets/how-to/kernel/)
	// for Droplets with externally managed kernels. This will initially be set to
	// the kernel of the base image when the Droplet is created.
	Kernel *Kernel `pulumi:"kernel"`
	// A boolean value indicating whether the Droplet has been locked, preventing actions by users.
	Locked bool `pulumi:"locked"`
	// Memory of the Droplet in megabytes.
	Memory int `pulumi:"memory"`
	// The human-readable name set for the Droplet instance.
	Name string `pulumi:"name"`
	// The details of the network that are configured for the Droplet instance.  This is an object that contains keys for IPv4 and IPv6.  The value of each of these is an array that contains objects describing an individual IP resource allocated to the Droplet.  These will define attributes like the IP address, netmask, and gateway of the specific network depending on the type of network it is.
	Networks DropletNetworksProperties `pulumi:"networks"`
	// The details of the Droplet's backups feature, if backups are configured for the Droplet. This object contains keys for the start and end times of the window during which the backup will start.
	NextBackupWindow DropletNextBackupWindowProperties `pulumi:"nextBackupWindow"`
	Region           Region                            `pulumi:"region"`
	Size             Size                              `pulumi:"size"`
	// The unique slug identifier for the size of this Droplet.
	SizeSlug string `pulumi:"sizeSlug"`
	// An array of snapshot IDs of any snapshots created from the Droplet instance.
	SnapshotIds []int `pulumi:"snapshotIds"`
	// A status string indicating the state of the Droplet instance. This may be "new", "active", "off", or "archive".
	Status DropletStatus `pulumi:"status"`
	// An array of Tags the Droplet has been tagged with.
	Tags []string `pulumi:"tags"`
	// The number of virtual CPUs.
	Vcpus int `pulumi:"vcpus"`
	// A flat array including the unique identifier for each Block Storage volume attached to the Droplet.
	VolumeIds []string `pulumi:"volumeIds"`
	// A string specifying the UUID of the VPC to which the Droplet is assigned.
	VpcUuid *string `pulumi:"vpcUuid"`
}

// Defaults sets the appropriate defaults for Droplet
func (val *Droplet) Defaults() *Droplet {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Size = *tmp.Size.Defaults()

	return &tmp
}

type DropletOutput struct{ *pulumi.OutputState }

func (DropletOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Droplet)(nil)).Elem()
}

func (o DropletOutput) ToDropletOutput() DropletOutput {
	return o
}

func (o DropletOutput) ToDropletOutputWithContext(ctx context.Context) DropletOutput {
	return o
}

// An array of backup IDs of any backups that have been taken of the Droplet instance.  Droplet backups are enabled at the time of the instance creation.
func (o DropletOutput) BackupIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v Droplet) []int { return v.BackupIds }).(pulumi.IntArrayOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the Droplet was created.
func (o DropletOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v Droplet) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The size of the Droplet's disk in gigabytes.
func (o DropletOutput) Disk() pulumi.IntOutput {
	return o.ApplyT(func(v Droplet) int { return v.Disk }).(pulumi.IntOutput)
}

// An array of features enabled on this Droplet.
func (o DropletOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Droplet) []string { return v.Features }).(pulumi.StringArrayOutput)
}

// A unique identifier for each Droplet instance. This is automatically generated upon Droplet creation.
func (o DropletOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v Droplet) int { return v.Id }).(pulumi.IntOutput)
}

func (o DropletOutput) Image() ImageOutput {
	return o.ApplyT(func(v Droplet) Image { return v.Image }).(ImageOutput)
}

// **Note**: All Droplets created after March 2017 use internal kernels by default.
// These Droplets will have this attribute set to `null`.
//
// The current [kernel](https://www.digitalocean.com/docs/droplets/how-to/kernel/)
// for Droplets with externally managed kernels. This will initially be set to
// the kernel of the base image when the Droplet is created.
func (o DropletOutput) Kernel() KernelPtrOutput {
	return o.ApplyT(func(v Droplet) *Kernel { return v.Kernel }).(KernelPtrOutput)
}

// A boolean value indicating whether the Droplet has been locked, preventing actions by users.
func (o DropletOutput) Locked() pulumi.BoolOutput {
	return o.ApplyT(func(v Droplet) bool { return v.Locked }).(pulumi.BoolOutput)
}

// Memory of the Droplet in megabytes.
func (o DropletOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v Droplet) int { return v.Memory }).(pulumi.IntOutput)
}

// The human-readable name set for the Droplet instance.
func (o DropletOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Droplet) string { return v.Name }).(pulumi.StringOutput)
}

// The details of the network that are configured for the Droplet instance.  This is an object that contains keys for IPv4 and IPv6.  The value of each of these is an array that contains objects describing an individual IP resource allocated to the Droplet.  These will define attributes like the IP address, netmask, and gateway of the specific network depending on the type of network it is.
func (o DropletOutput) Networks() DropletNetworksPropertiesOutput {
	return o.ApplyT(func(v Droplet) DropletNetworksProperties { return v.Networks }).(DropletNetworksPropertiesOutput)
}

// The details of the Droplet's backups feature, if backups are configured for the Droplet. This object contains keys for the start and end times of the window during which the backup will start.
func (o DropletOutput) NextBackupWindow() DropletNextBackupWindowPropertiesOutput {
	return o.ApplyT(func(v Droplet) DropletNextBackupWindowProperties { return v.NextBackupWindow }).(DropletNextBackupWindowPropertiesOutput)
}

func (o DropletOutput) Region() RegionOutput {
	return o.ApplyT(func(v Droplet) Region { return v.Region }).(RegionOutput)
}

func (o DropletOutput) Size() SizeOutput {
	return o.ApplyT(func(v Droplet) Size { return v.Size }).(SizeOutput)
}

// The unique slug identifier for the size of this Droplet.
func (o DropletOutput) SizeSlug() pulumi.StringOutput {
	return o.ApplyT(func(v Droplet) string { return v.SizeSlug }).(pulumi.StringOutput)
}

// An array of snapshot IDs of any snapshots created from the Droplet instance.
func (o DropletOutput) SnapshotIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v Droplet) []int { return v.SnapshotIds }).(pulumi.IntArrayOutput)
}

// A status string indicating the state of the Droplet instance. This may be "new", "active", "off", or "archive".
func (o DropletOutput) Status() DropletStatusOutput {
	return o.ApplyT(func(v Droplet) DropletStatus { return v.Status }).(DropletStatusOutput)
}

// An array of Tags the Droplet has been tagged with.
func (o DropletOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Droplet) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The number of virtual CPUs.
func (o DropletOutput) Vcpus() pulumi.IntOutput {
	return o.ApplyT(func(v Droplet) int { return v.Vcpus }).(pulumi.IntOutput)
}

// A flat array including the unique identifier for each Block Storage volume attached to the Droplet.
func (o DropletOutput) VolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Droplet) []string { return v.VolumeIds }).(pulumi.StringArrayOutput)
}

// A string specifying the UUID of the VPC to which the Droplet is assigned.
func (o DropletOutput) VpcUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Droplet) *string { return v.VpcUuid }).(pulumi.StringPtrOutput)
}

type DropletPtrOutput struct{ *pulumi.OutputState }

func (DropletPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Droplet)(nil)).Elem()
}

func (o DropletPtrOutput) ToDropletPtrOutput() DropletPtrOutput {
	return o
}

func (o DropletPtrOutput) ToDropletPtrOutputWithContext(ctx context.Context) DropletPtrOutput {
	return o
}

func (o DropletPtrOutput) Elem() DropletOutput {
	return o.ApplyT(func(v *Droplet) Droplet {
		if v != nil {
			return *v
		}
		var ret Droplet
		return ret
	}).(DropletOutput)
}

// An array of backup IDs of any backups that have been taken of the Droplet instance.  Droplet backups are enabled at the time of the instance creation.
func (o DropletPtrOutput) BackupIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Droplet) []int {
		if v == nil {
			return nil
		}
		return v.BackupIds
	}).(pulumi.IntArrayOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the Droplet was created.
func (o DropletPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Droplet) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// The size of the Droplet's disk in gigabytes.
func (o DropletPtrOutput) Disk() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Droplet) *int {
		if v == nil {
			return nil
		}
		return &v.Disk
	}).(pulumi.IntPtrOutput)
}

// An array of features enabled on this Droplet.
func (o DropletPtrOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Droplet) []string {
		if v == nil {
			return nil
		}
		return v.Features
	}).(pulumi.StringArrayOutput)
}

// A unique identifier for each Droplet instance. This is automatically generated upon Droplet creation.
func (o DropletPtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Droplet) *int {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.IntPtrOutput)
}

func (o DropletPtrOutput) Image() ImagePtrOutput {
	return o.ApplyT(func(v *Droplet) *Image {
		if v == nil {
			return nil
		}
		return &v.Image
	}).(ImagePtrOutput)
}

// **Note**: All Droplets created after March 2017 use internal kernels by default.
// These Droplets will have this attribute set to `null`.
//
// The current [kernel](https://www.digitalocean.com/docs/droplets/how-to/kernel/)
// for Droplets with externally managed kernels. This will initially be set to
// the kernel of the base image when the Droplet is created.
func (o DropletPtrOutput) Kernel() KernelPtrOutput {
	return o.ApplyT(func(v *Droplet) *Kernel {
		if v == nil {
			return nil
		}
		return v.Kernel
	}).(KernelPtrOutput)
}

// A boolean value indicating whether the Droplet has been locked, preventing actions by users.
func (o DropletPtrOutput) Locked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Droplet) *bool {
		if v == nil {
			return nil
		}
		return &v.Locked
	}).(pulumi.BoolPtrOutput)
}

// Memory of the Droplet in megabytes.
func (o DropletPtrOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Droplet) *int {
		if v == nil {
			return nil
		}
		return &v.Memory
	}).(pulumi.IntPtrOutput)
}

// The human-readable name set for the Droplet instance.
func (o DropletPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Droplet) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The details of the network that are configured for the Droplet instance.  This is an object that contains keys for IPv4 and IPv6.  The value of each of these is an array that contains objects describing an individual IP resource allocated to the Droplet.  These will define attributes like the IP address, netmask, and gateway of the specific network depending on the type of network it is.
func (o DropletPtrOutput) Networks() DropletNetworksPropertiesPtrOutput {
	return o.ApplyT(func(v *Droplet) *DropletNetworksProperties {
		if v == nil {
			return nil
		}
		return &v.Networks
	}).(DropletNetworksPropertiesPtrOutput)
}

// The details of the Droplet's backups feature, if backups are configured for the Droplet. This object contains keys for the start and end times of the window during which the backup will start.
func (o DropletPtrOutput) NextBackupWindow() DropletNextBackupWindowPropertiesPtrOutput {
	return o.ApplyT(func(v *Droplet) *DropletNextBackupWindowProperties {
		if v == nil {
			return nil
		}
		return &v.NextBackupWindow
	}).(DropletNextBackupWindowPropertiesPtrOutput)
}

func (o DropletPtrOutput) Region() RegionPtrOutput {
	return o.ApplyT(func(v *Droplet) *Region {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(RegionPtrOutput)
}

func (o DropletPtrOutput) Size() SizePtrOutput {
	return o.ApplyT(func(v *Droplet) *Size {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(SizePtrOutput)
}

// The unique slug identifier for the size of this Droplet.
func (o DropletPtrOutput) SizeSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Droplet) *string {
		if v == nil {
			return nil
		}
		return &v.SizeSlug
	}).(pulumi.StringPtrOutput)
}

// An array of snapshot IDs of any snapshots created from the Droplet instance.
func (o DropletPtrOutput) SnapshotIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Droplet) []int {
		if v == nil {
			return nil
		}
		return v.SnapshotIds
	}).(pulumi.IntArrayOutput)
}

// A status string indicating the state of the Droplet instance. This may be "new", "active", "off", or "archive".
func (o DropletPtrOutput) Status() DropletStatusPtrOutput {
	return o.ApplyT(func(v *Droplet) *DropletStatus {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(DropletStatusPtrOutput)
}

// An array of Tags the Droplet has been tagged with.
func (o DropletPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Droplet) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// The number of virtual CPUs.
func (o DropletPtrOutput) Vcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Droplet) *int {
		if v == nil {
			return nil
		}
		return &v.Vcpus
	}).(pulumi.IntPtrOutput)
}

// A flat array including the unique identifier for each Block Storage volume attached to the Droplet.
func (o DropletPtrOutput) VolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Droplet) []string {
		if v == nil {
			return nil
		}
		return v.VolumeIds
	}).(pulumi.StringArrayOutput)
}

// A string specifying the UUID of the VPC to which the Droplet is assigned.
func (o DropletPtrOutput) VpcUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Droplet) *string {
		if v == nil {
			return nil
		}
		return v.VpcUuid
	}).(pulumi.StringPtrOutput)
}

// The details of the network that are configured for the Droplet instance.  This is an object that contains keys for IPv4 and IPv6.  The value of each of these is an array that contains objects describing an individual IP resource allocated to the Droplet.  These will define attributes like the IP address, netmask, and gateway of the specific network depending on the type of network it is.
type DropletNetworksProperties struct {
	V4 []NetworkV4 `pulumi:"v4"`
	V6 []NetworkV6 `pulumi:"v6"`
}

// The details of the network that are configured for the Droplet instance.  This is an object that contains keys for IPv4 and IPv6.  The value of each of these is an array that contains objects describing an individual IP resource allocated to the Droplet.  These will define attributes like the IP address, netmask, and gateway of the specific network depending on the type of network it is.
type DropletNetworksPropertiesOutput struct{ *pulumi.OutputState }

func (DropletNetworksPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DropletNetworksProperties)(nil)).Elem()
}

func (o DropletNetworksPropertiesOutput) ToDropletNetworksPropertiesOutput() DropletNetworksPropertiesOutput {
	return o
}

func (o DropletNetworksPropertiesOutput) ToDropletNetworksPropertiesOutputWithContext(ctx context.Context) DropletNetworksPropertiesOutput {
	return o
}

func (o DropletNetworksPropertiesOutput) V4() NetworkV4ArrayOutput {
	return o.ApplyT(func(v DropletNetworksProperties) []NetworkV4 { return v.V4 }).(NetworkV4ArrayOutput)
}

func (o DropletNetworksPropertiesOutput) V6() NetworkV6ArrayOutput {
	return o.ApplyT(func(v DropletNetworksProperties) []NetworkV6 { return v.V6 }).(NetworkV6ArrayOutput)
}

type DropletNetworksPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DropletNetworksPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletNetworksProperties)(nil)).Elem()
}

func (o DropletNetworksPropertiesPtrOutput) ToDropletNetworksPropertiesPtrOutput() DropletNetworksPropertiesPtrOutput {
	return o
}

func (o DropletNetworksPropertiesPtrOutput) ToDropletNetworksPropertiesPtrOutputWithContext(ctx context.Context) DropletNetworksPropertiesPtrOutput {
	return o
}

func (o DropletNetworksPropertiesPtrOutput) Elem() DropletNetworksPropertiesOutput {
	return o.ApplyT(func(v *DropletNetworksProperties) DropletNetworksProperties {
		if v != nil {
			return *v
		}
		var ret DropletNetworksProperties
		return ret
	}).(DropletNetworksPropertiesOutput)
}

func (o DropletNetworksPropertiesPtrOutput) V4() NetworkV4ArrayOutput {
	return o.ApplyT(func(v *DropletNetworksProperties) []NetworkV4 {
		if v == nil {
			return nil
		}
		return v.V4
	}).(NetworkV4ArrayOutput)
}

func (o DropletNetworksPropertiesPtrOutput) V6() NetworkV6ArrayOutput {
	return o.ApplyT(func(v *DropletNetworksProperties) []NetworkV6 {
		if v == nil {
			return nil
		}
		return v.V6
	}).(NetworkV6ArrayOutput)
}

// The details of the Droplet's backups feature, if backups are configured for the Droplet. This object contains keys for the start and end times of the window during which the backup will start.
type DropletNextBackupWindowProperties struct {
	// A time value given in ISO8601 combined date and time format specifying the end of the Droplet's backup window.
	End *string `pulumi:"end"`
	// A time value given in ISO8601 combined date and time format specifying the start of the Droplet's backup window.
	Start *string `pulumi:"start"`
}

// The details of the Droplet's backups feature, if backups are configured for the Droplet. This object contains keys for the start and end times of the window during which the backup will start.
type DropletNextBackupWindowPropertiesOutput struct{ *pulumi.OutputState }

func (DropletNextBackupWindowPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DropletNextBackupWindowProperties)(nil)).Elem()
}

func (o DropletNextBackupWindowPropertiesOutput) ToDropletNextBackupWindowPropertiesOutput() DropletNextBackupWindowPropertiesOutput {
	return o
}

func (o DropletNextBackupWindowPropertiesOutput) ToDropletNextBackupWindowPropertiesOutputWithContext(ctx context.Context) DropletNextBackupWindowPropertiesOutput {
	return o
}

// A time value given in ISO8601 combined date and time format specifying the end of the Droplet's backup window.
func (o DropletNextBackupWindowPropertiesOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DropletNextBackupWindowProperties) *string { return v.End }).(pulumi.StringPtrOutput)
}

// A time value given in ISO8601 combined date and time format specifying the start of the Droplet's backup window.
func (o DropletNextBackupWindowPropertiesOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DropletNextBackupWindowProperties) *string { return v.Start }).(pulumi.StringPtrOutput)
}

type DropletNextBackupWindowPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DropletNextBackupWindowPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DropletNextBackupWindowProperties)(nil)).Elem()
}

func (o DropletNextBackupWindowPropertiesPtrOutput) ToDropletNextBackupWindowPropertiesPtrOutput() DropletNextBackupWindowPropertiesPtrOutput {
	return o
}

func (o DropletNextBackupWindowPropertiesPtrOutput) ToDropletNextBackupWindowPropertiesPtrOutputWithContext(ctx context.Context) DropletNextBackupWindowPropertiesPtrOutput {
	return o
}

func (o DropletNextBackupWindowPropertiesPtrOutput) Elem() DropletNextBackupWindowPropertiesOutput {
	return o.ApplyT(func(v *DropletNextBackupWindowProperties) DropletNextBackupWindowProperties {
		if v != nil {
			return *v
		}
		var ret DropletNextBackupWindowProperties
		return ret
	}).(DropletNextBackupWindowPropertiesOutput)
}

// A time value given in ISO8601 combined date and time format specifying the end of the Droplet's backup window.
func (o DropletNextBackupWindowPropertiesPtrOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DropletNextBackupWindowProperties) *string {
		if v == nil {
			return nil
		}
		return v.End
	}).(pulumi.StringPtrOutput)
}

// A time value given in ISO8601 combined date and time format specifying the start of the Droplet's backup window.
func (o DropletNextBackupWindowPropertiesPtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DropletNextBackupWindowProperties) *string {
		if v == nil {
			return nil
		}
		return v.Start
	}).(pulumi.StringPtrOutput)
}

type GetReservedIPProperties struct {
	ReservedIp *ReservedIpType `pulumi:"reservedIp"`
}

// Defaults sets the appropriate defaults for GetReservedIPProperties
func (val *GetReservedIPProperties) Defaults() *GetReservedIPProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ReservedIp = tmp.ReservedIp.Defaults()

	return &tmp
}

type GetReservedIPPropertiesOutput struct{ *pulumi.OutputState }

func (GetReservedIPPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReservedIPProperties)(nil)).Elem()
}

func (o GetReservedIPPropertiesOutput) ToGetReservedIPPropertiesOutput() GetReservedIPPropertiesOutput {
	return o
}

func (o GetReservedIPPropertiesOutput) ToGetReservedIPPropertiesOutputWithContext(ctx context.Context) GetReservedIPPropertiesOutput {
	return o
}

func (o GetReservedIPPropertiesOutput) ReservedIp() ReservedIpTypePtrOutput {
	return o.ApplyT(func(v GetReservedIPProperties) *ReservedIpType { return v.ReservedIp }).(ReservedIpTypePtrOutput)
}

type GetReservedIPsActionProperties struct {
	Action *GetReservedIPsActionPropertiesAction `pulumi:"action"`
}

// Defaults sets the appropriate defaults for GetReservedIPsActionProperties
func (val *GetReservedIPsActionProperties) Defaults() *GetReservedIPsActionProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Action = tmp.Action.Defaults()

	return &tmp
}

type GetReservedIPsActionPropertiesOutput struct{ *pulumi.OutputState }

func (GetReservedIPsActionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReservedIPsActionProperties)(nil)).Elem()
}

func (o GetReservedIPsActionPropertiesOutput) ToGetReservedIPsActionPropertiesOutput() GetReservedIPsActionPropertiesOutput {
	return o
}

func (o GetReservedIPsActionPropertiesOutput) ToGetReservedIPsActionPropertiesOutputWithContext(ctx context.Context) GetReservedIPsActionPropertiesOutput {
	return o
}

func (o GetReservedIPsActionPropertiesOutput) Action() GetReservedIPsActionPropertiesActionPtrOutput {
	return o.ApplyT(func(v GetReservedIPsActionProperties) *GetReservedIPsActionPropertiesAction { return v.Action }).(GetReservedIPsActionPropertiesActionPtrOutput)
}

type GetReservedIPsActionPropertiesAction struct {
	// A time value given in ISO8601 combined date and time format that represents when the action was completed.
	CompletedAt *string `pulumi:"completedAt"`
	// A unique numeric ID that can be used to identify and reference an action.
	Id *int `pulumi:"id"`
	// The UUID of the project to which the reserved IP currently belongs.
	ProjectId  *string           `pulumi:"projectId"`
	Region     *Region           `pulumi:"region"`
	RegionSlug *ActionRegionSlug `pulumi:"regionSlug"`
	// A unique identifier for the resource that the action is associated with.
	ResourceId *int `pulumi:"resourceId"`
	// The type of resource that the action is associated with.
	ResourceType *string `pulumi:"resourceType"`
	// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
	StartedAt *string `pulumi:"startedAt"`
	// The current status of the action. This can be "in-progress", "completed", or "errored".
	Status *ActionStatus `pulumi:"status"`
	// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for GetReservedIPsActionPropertiesAction
func (val *GetReservedIPsActionPropertiesAction) Defaults() *GetReservedIPsActionPropertiesAction {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Status == nil {
		status_ := ActionStatus("in-progress")
		tmp.Status = &status_
	}
	return &tmp
}

type GetReservedIPsActionPropertiesActionOutput struct{ *pulumi.OutputState }

func (GetReservedIPsActionPropertiesActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReservedIPsActionPropertiesAction)(nil)).Elem()
}

func (o GetReservedIPsActionPropertiesActionOutput) ToGetReservedIPsActionPropertiesActionOutput() GetReservedIPsActionPropertiesActionOutput {
	return o
}

func (o GetReservedIPsActionPropertiesActionOutput) ToGetReservedIPsActionPropertiesActionOutputWithContext(ctx context.Context) GetReservedIPsActionPropertiesActionOutput {
	return o
}

// A time value given in ISO8601 combined date and time format that represents when the action was completed.
func (o GetReservedIPsActionPropertiesActionOutput) CompletedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetReservedIPsActionPropertiesAction) *string { return v.CompletedAt }).(pulumi.StringPtrOutput)
}

// A unique numeric ID that can be used to identify and reference an action.
func (o GetReservedIPsActionPropertiesActionOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetReservedIPsActionPropertiesAction) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The UUID of the project to which the reserved IP currently belongs.
func (o GetReservedIPsActionPropertiesActionOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetReservedIPsActionPropertiesAction) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o GetReservedIPsActionPropertiesActionOutput) Region() RegionPtrOutput {
	return o.ApplyT(func(v GetReservedIPsActionPropertiesAction) *Region { return v.Region }).(RegionPtrOutput)
}

func (o GetReservedIPsActionPropertiesActionOutput) RegionSlug() ActionRegionSlugPtrOutput {
	return o.ApplyT(func(v GetReservedIPsActionPropertiesAction) *ActionRegionSlug { return v.RegionSlug }).(ActionRegionSlugPtrOutput)
}

// A unique identifier for the resource that the action is associated with.
func (o GetReservedIPsActionPropertiesActionOutput) ResourceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetReservedIPsActionPropertiesAction) *int { return v.ResourceId }).(pulumi.IntPtrOutput)
}

// The type of resource that the action is associated with.
func (o GetReservedIPsActionPropertiesActionOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetReservedIPsActionPropertiesAction) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
func (o GetReservedIPsActionPropertiesActionOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetReservedIPsActionPropertiesAction) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

// The current status of the action. This can be "in-progress", "completed", or "errored".
func (o GetReservedIPsActionPropertiesActionOutput) Status() ActionStatusPtrOutput {
	return o.ApplyT(func(v GetReservedIPsActionPropertiesAction) *ActionStatus { return v.Status }).(ActionStatusPtrOutput)
}

// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
func (o GetReservedIPsActionPropertiesActionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetReservedIPsActionPropertiesAction) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GetReservedIPsActionPropertiesActionPtrOutput struct{ *pulumi.OutputState }

func (GetReservedIPsActionPropertiesActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetReservedIPsActionPropertiesAction)(nil)).Elem()
}

func (o GetReservedIPsActionPropertiesActionPtrOutput) ToGetReservedIPsActionPropertiesActionPtrOutput() GetReservedIPsActionPropertiesActionPtrOutput {
	return o
}

func (o GetReservedIPsActionPropertiesActionPtrOutput) ToGetReservedIPsActionPropertiesActionPtrOutputWithContext(ctx context.Context) GetReservedIPsActionPropertiesActionPtrOutput {
	return o
}

func (o GetReservedIPsActionPropertiesActionPtrOutput) Elem() GetReservedIPsActionPropertiesActionOutput {
	return o.ApplyT(func(v *GetReservedIPsActionPropertiesAction) GetReservedIPsActionPropertiesAction {
		if v != nil {
			return *v
		}
		var ret GetReservedIPsActionPropertiesAction
		return ret
	}).(GetReservedIPsActionPropertiesActionOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the action was completed.
func (o GetReservedIPsActionPropertiesActionPtrOutput) CompletedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetReservedIPsActionPropertiesAction) *string {
		if v == nil {
			return nil
		}
		return v.CompletedAt
	}).(pulumi.StringPtrOutput)
}

// A unique numeric ID that can be used to identify and reference an action.
func (o GetReservedIPsActionPropertiesActionPtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetReservedIPsActionPropertiesAction) *int {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.IntPtrOutput)
}

// The UUID of the project to which the reserved IP currently belongs.
func (o GetReservedIPsActionPropertiesActionPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetReservedIPsActionPropertiesAction) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

func (o GetReservedIPsActionPropertiesActionPtrOutput) Region() RegionPtrOutput {
	return o.ApplyT(func(v *GetReservedIPsActionPropertiesAction) *Region {
		if v == nil {
			return nil
		}
		return v.Region
	}).(RegionPtrOutput)
}

func (o GetReservedIPsActionPropertiesActionPtrOutput) RegionSlug() ActionRegionSlugPtrOutput {
	return o.ApplyT(func(v *GetReservedIPsActionPropertiesAction) *ActionRegionSlug {
		if v == nil {
			return nil
		}
		return v.RegionSlug
	}).(ActionRegionSlugPtrOutput)
}

// A unique identifier for the resource that the action is associated with.
func (o GetReservedIPsActionPropertiesActionPtrOutput) ResourceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetReservedIPsActionPropertiesAction) *int {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.IntPtrOutput)
}

// The type of resource that the action is associated with.
func (o GetReservedIPsActionPropertiesActionPtrOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetReservedIPsActionPropertiesAction) *string {
		if v == nil {
			return nil
		}
		return v.ResourceType
	}).(pulumi.StringPtrOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the action was initiated.
func (o GetReservedIPsActionPropertiesActionPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetReservedIPsActionPropertiesAction) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// The current status of the action. This can be "in-progress", "completed", or "errored".
func (o GetReservedIPsActionPropertiesActionPtrOutput) Status() ActionStatusPtrOutput {
	return o.ApplyT(func(v *GetReservedIPsActionPropertiesAction) *ActionStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(ActionStatusPtrOutput)
}

// This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.
func (o GetReservedIPsActionPropertiesActionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetReservedIPsActionPropertiesAction) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type Image struct {
	// A time value given in ISO8601 combined date and time format that represents when the image was created.
	CreatedAt *string `pulumi:"createdAt"`
	// An optional free-form text field to describe an image.
	Description *string `pulumi:"description"`
	// The name of a custom image's distribution. Currently, the valid values are  `Arch Linux`, `CentOS`, `CoreOS`, `Debian`, `Fedora`, `Fedora Atomic`,  `FreeBSD`, `Gentoo`, `openSUSE`, `RancherOS`, `Rocky Linux`, `Ubuntu`, and `Unknown`.  Any other value will be accepted but ignored, and `Unknown` will be used in its place.
	Distribution *ImageDistribution `pulumi:"distribution"`
	// A string containing information about errors that may occur when importing
	//  a custom image.
	ErrorMessage *string `pulumi:"errorMessage"`
	// A unique number that can be used to identify and reference a specific image.
	Id *int `pulumi:"id"`
	// The minimum disk size in GB required for a Droplet to use this image.
	MinDiskSize *int `pulumi:"minDiskSize"`
	// The display name that has been given to an image.  This is what is shown in the control panel and is generally a descriptive title for the image in question.
	Name *string `pulumi:"name"`
	// This is a boolean value that indicates whether the image in question is public or not. An image that is public is available to all accounts. A non-public image is only accessible from your account.
	Public *bool `pulumi:"public"`
	// This attribute is an array of the regions that the image is available in. The regions are represented by their identifying slug values.
	Regions []ImageRegionsItem `pulumi:"regions"`
	// The size of the image in gigabytes.
	SizeGigabytes *float64 `pulumi:"sizeGigabytes"`
	// A uniquely identifying string that is associated with each of the DigitalOcean-provided public images. These can be used to reference a public image as an alternative to the numeric id.
	Slug *string `pulumi:"slug"`
	// A status string indicating the state of a custom image. This may be `NEW`,
	//  `available`, `pending`, `deleted`, or `retired`.
	Status *ImageStatus `pulumi:"status"`
	// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
	Tags []string `pulumi:"tags"`
	// Describes the kind of image. It may be one of `base`, `snapshot`, `backup`, `custom`, or `admin`. Respectively, this specifies whether an image is a DigitalOcean base OS image, user-generated Droplet snapshot, automatically created Droplet backup, user-provided virtual machine image, or an image used for DigitalOcean managed resources (e.g. DOKS worker nodes).
	Type *ImageType `pulumi:"type"`
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

// A time value given in ISO8601 combined date and time format that represents when the image was created.
func (o ImageOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Image) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// An optional free-form text field to describe an image.
func (o ImageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Image) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of a custom image's distribution. Currently, the valid values are  `Arch Linux`, `CentOS`, `CoreOS`, `Debian`, `Fedora`, `Fedora Atomic`,  `FreeBSD`, `Gentoo`, `openSUSE`, `RancherOS`, `Rocky Linux`, `Ubuntu`, and `Unknown`.  Any other value will be accepted but ignored, and `Unknown` will be used in its place.
func (o ImageOutput) Distribution() ImageDistributionPtrOutput {
	return o.ApplyT(func(v Image) *ImageDistribution { return v.Distribution }).(ImageDistributionPtrOutput)
}

// A string containing information about errors that may occur when importing
//
//	a custom image.
func (o ImageOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Image) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// A unique number that can be used to identify and reference a specific image.
func (o ImageOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Image) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The minimum disk size in GB required for a Droplet to use this image.
func (o ImageOutput) MinDiskSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Image) *int { return v.MinDiskSize }).(pulumi.IntPtrOutput)
}

// The display name that has been given to an image.  This is what is shown in the control panel and is generally a descriptive title for the image in question.
func (o ImageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Image) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// This is a boolean value that indicates whether the image in question is public or not. An image that is public is available to all accounts. A non-public image is only accessible from your account.
func (o ImageOutput) Public() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Image) *bool { return v.Public }).(pulumi.BoolPtrOutput)
}

// This attribute is an array of the regions that the image is available in. The regions are represented by their identifying slug values.
func (o ImageOutput) Regions() ImageRegionsItemArrayOutput {
	return o.ApplyT(func(v Image) []ImageRegionsItem { return v.Regions }).(ImageRegionsItemArrayOutput)
}

// The size of the image in gigabytes.
func (o ImageOutput) SizeGigabytes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Image) *float64 { return v.SizeGigabytes }).(pulumi.Float64PtrOutput)
}

// A uniquely identifying string that is associated with each of the DigitalOcean-provided public images. These can be used to reference a public image as an alternative to the numeric id.
func (o ImageOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Image) *string { return v.Slug }).(pulumi.StringPtrOutput)
}

// A status string indicating the state of a custom image. This may be `NEW`,
//
//	`available`, `pending`, `deleted`, or `retired`.
func (o ImageOutput) Status() ImageStatusPtrOutput {
	return o.ApplyT(func(v Image) *ImageStatus { return v.Status }).(ImageStatusPtrOutput)
}

// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
func (o ImageOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Image) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Describes the kind of image. It may be one of `base`, `snapshot`, `backup`, `custom`, or `admin`. Respectively, this specifies whether an image is a DigitalOcean base OS image, user-generated Droplet snapshot, automatically created Droplet backup, user-provided virtual machine image, or an image used for DigitalOcean managed resources (e.g. DOKS worker nodes).
func (o ImageOutput) Type() ImageTypePtrOutput {
	return o.ApplyT(func(v Image) *ImageType { return v.Type }).(ImageTypePtrOutput)
}

type ImagePtrOutput struct{ *pulumi.OutputState }

func (ImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImagePtrOutput) ToImagePtrOutput() ImagePtrOutput {
	return o
}

func (o ImagePtrOutput) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return o
}

func (o ImagePtrOutput) Elem() ImageOutput {
	return o.ApplyT(func(v *Image) Image {
		if v != nil {
			return *v
		}
		var ret Image
		return ret
	}).(ImageOutput)
}

// A time value given in ISO8601 combined date and time format that represents when the image was created.
func (o ImagePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// An optional free-form text field to describe an image.
func (o ImagePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The name of a custom image's distribution. Currently, the valid values are  `Arch Linux`, `CentOS`, `CoreOS`, `Debian`, `Fedora`, `Fedora Atomic`,  `FreeBSD`, `Gentoo`, `openSUSE`, `RancherOS`, `Rocky Linux`, `Ubuntu`, and `Unknown`.  Any other value will be accepted but ignored, and `Unknown` will be used in its place.
func (o ImagePtrOutput) Distribution() ImageDistributionPtrOutput {
	return o.ApplyT(func(v *Image) *ImageDistribution {
		if v == nil {
			return nil
		}
		return v.Distribution
	}).(ImageDistributionPtrOutput)
}

// A string containing information about errors that may occur when importing
//
//	a custom image.
func (o ImagePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// A unique number that can be used to identify and reference a specific image.
func (o ImagePtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Image) *int {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.IntPtrOutput)
}

// The minimum disk size in GB required for a Droplet to use this image.
func (o ImagePtrOutput) MinDiskSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Image) *int {
		if v == nil {
			return nil
		}
		return v.MinDiskSize
	}).(pulumi.IntPtrOutput)
}

// The display name that has been given to an image.  This is what is shown in the control panel and is generally a descriptive title for the image in question.
func (o ImagePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// This is a boolean value that indicates whether the image in question is public or not. An image that is public is available to all accounts. A non-public image is only accessible from your account.
func (o ImagePtrOutput) Public() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Image) *bool {
		if v == nil {
			return nil
		}
		return v.Public
	}).(pulumi.BoolPtrOutput)
}

// This attribute is an array of the regions that the image is available in. The regions are represented by their identifying slug values.
func (o ImagePtrOutput) Regions() ImageRegionsItemArrayOutput {
	return o.ApplyT(func(v *Image) []ImageRegionsItem {
		if v == nil {
			return nil
		}
		return v.Regions
	}).(ImageRegionsItemArrayOutput)
}

// The size of the image in gigabytes.
func (o ImagePtrOutput) SizeGigabytes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Image) *float64 {
		if v == nil {
			return nil
		}
		return v.SizeGigabytes
	}).(pulumi.Float64PtrOutput)
}

// A uniquely identifying string that is associated with each of the DigitalOcean-provided public images. These can be used to reference a public image as an alternative to the numeric id.
func (o ImagePtrOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) *string {
		if v == nil {
			return nil
		}
		return v.Slug
	}).(pulumi.StringPtrOutput)
}

// A status string indicating the state of a custom image. This may be `NEW`,
//
//	`available`, `pending`, `deleted`, or `retired`.
func (o ImagePtrOutput) Status() ImageStatusPtrOutput {
	return o.ApplyT(func(v *Image) *ImageStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(ImageStatusPtrOutput)
}

// A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.
func (o ImagePtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Image) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// Describes the kind of image. It may be one of `base`, `snapshot`, `backup`, `custom`, or `admin`. Respectively, this specifies whether an image is a DigitalOcean base OS image, user-generated Droplet snapshot, automatically created Droplet backup, user-provided virtual machine image, or an image used for DigitalOcean managed resources (e.g. DOKS worker nodes).
func (o ImagePtrOutput) Type() ImageTypePtrOutput {
	return o.ApplyT(func(v *Image) *ImageType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ImageTypePtrOutput)
}

// **Note**: All Droplets created after March 2017 use internal kernels by default.
// These Droplets will have this attribute set to `null`.
//
// The current [kernel](https://www.digitalocean.com/docs/droplets/how-to/kernel/)
// for Droplets with externally managed kernels. This will initially be set to
// the kernel of the base image when the Droplet is created.
type Kernel struct {
	// A unique number used to identify and reference a specific kernel.
	Id *int `pulumi:"id"`
	// The display name of the kernel. This is shown in the web UI and is generally a descriptive title for the kernel in question.
	Name *string `pulumi:"name"`
	// A standard kernel version string representing the version, patch, and release information.
	Version *string `pulumi:"version"`
}

// **Note**: All Droplets created after March 2017 use internal kernels by default.
// These Droplets will have this attribute set to `null`.
//
// The current [kernel](https://www.digitalocean.com/docs/droplets/how-to/kernel/)
// for Droplets with externally managed kernels. This will initially be set to
// the kernel of the base image when the Droplet is created.
type KernelOutput struct{ *pulumi.OutputState }

func (KernelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Kernel)(nil)).Elem()
}

func (o KernelOutput) ToKernelOutput() KernelOutput {
	return o
}

func (o KernelOutput) ToKernelOutputWithContext(ctx context.Context) KernelOutput {
	return o
}

// A unique number used to identify and reference a specific kernel.
func (o KernelOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Kernel) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The display name of the kernel. This is shown in the web UI and is generally a descriptive title for the kernel in question.
func (o KernelOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kernel) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A standard kernel version string representing the version, patch, and release information.
func (o KernelOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kernel) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type KernelPtrOutput struct{ *pulumi.OutputState }

func (KernelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Kernel)(nil)).Elem()
}

func (o KernelPtrOutput) ToKernelPtrOutput() KernelPtrOutput {
	return o
}

func (o KernelPtrOutput) ToKernelPtrOutputWithContext(ctx context.Context) KernelPtrOutput {
	return o
}

func (o KernelPtrOutput) Elem() KernelOutput {
	return o.ApplyT(func(v *Kernel) Kernel {
		if v != nil {
			return *v
		}
		var ret Kernel
		return ret
	}).(KernelOutput)
}

// A unique number used to identify and reference a specific kernel.
func (o KernelPtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Kernel) *int {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.IntPtrOutput)
}

// The display name of the kernel. This is shown in the web UI and is generally a descriptive title for the kernel in question.
func (o KernelPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kernel) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A standard kernel version string representing the version, patch, and release information.
func (o KernelPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kernel) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type LinksProperties struct {
	Actions  []ActionLink `pulumi:"actions"`
	Droplets []ActionLink `pulumi:"droplets"`
}

type LinksPropertiesOutput struct{ *pulumi.OutputState }

func (LinksPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinksProperties)(nil)).Elem()
}

func (o LinksPropertiesOutput) ToLinksPropertiesOutput() LinksPropertiesOutput {
	return o
}

func (o LinksPropertiesOutput) ToLinksPropertiesOutputWithContext(ctx context.Context) LinksPropertiesOutput {
	return o
}

func (o LinksPropertiesOutput) Actions() ActionLinkArrayOutput {
	return o.ApplyT(func(v LinksProperties) []ActionLink { return v.Actions }).(ActionLinkArrayOutput)
}

func (o LinksPropertiesOutput) Droplets() ActionLinkArrayOutput {
	return o.ApplyT(func(v LinksProperties) []ActionLink { return v.Droplets }).(ActionLinkArrayOutput)
}

type LinksPropertiesPtrOutput struct{ *pulumi.OutputState }

func (LinksPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinksProperties)(nil)).Elem()
}

func (o LinksPropertiesPtrOutput) ToLinksPropertiesPtrOutput() LinksPropertiesPtrOutput {
	return o
}

func (o LinksPropertiesPtrOutput) ToLinksPropertiesPtrOutputWithContext(ctx context.Context) LinksPropertiesPtrOutput {
	return o
}

func (o LinksPropertiesPtrOutput) Elem() LinksPropertiesOutput {
	return o.ApplyT(func(v *LinksProperties) LinksProperties {
		if v != nil {
			return *v
		}
		var ret LinksProperties
		return ret
	}).(LinksPropertiesOutput)
}

func (o LinksPropertiesPtrOutput) Actions() ActionLinkArrayOutput {
	return o.ApplyT(func(v *LinksProperties) []ActionLink {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(ActionLinkArrayOutput)
}

func (o LinksPropertiesPtrOutput) Droplets() ActionLinkArrayOutput {
	return o.ApplyT(func(v *LinksProperties) []ActionLink {
		if v == nil {
			return nil
		}
		return v.Droplets
	}).(ActionLinkArrayOutput)
}

type ListReservedIPsActionsItems struct {
	Actions []Action   `pulumi:"actions"`
	Links   *PageLinks `pulumi:"links"`
	Meta    MetaMeta   `pulumi:"meta"`
}

type ListReservedIPsActionsItemsOutput struct{ *pulumi.OutputState }

func (ListReservedIPsActionsItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListReservedIPsActionsItems)(nil)).Elem()
}

func (o ListReservedIPsActionsItemsOutput) ToListReservedIPsActionsItemsOutput() ListReservedIPsActionsItemsOutput {
	return o
}

func (o ListReservedIPsActionsItemsOutput) ToListReservedIPsActionsItemsOutputWithContext(ctx context.Context) ListReservedIPsActionsItemsOutput {
	return o
}

func (o ListReservedIPsActionsItemsOutput) Actions() ActionArrayOutput {
	return o.ApplyT(func(v ListReservedIPsActionsItems) []Action { return v.Actions }).(ActionArrayOutput)
}

func (o ListReservedIPsActionsItemsOutput) Links() PageLinksPtrOutput {
	return o.ApplyT(func(v ListReservedIPsActionsItems) *PageLinks { return v.Links }).(PageLinksPtrOutput)
}

func (o ListReservedIPsActionsItemsOutput) Meta() MetaMetaOutput {
	return o.ApplyT(func(v ListReservedIPsActionsItems) MetaMeta { return v.Meta }).(MetaMetaOutput)
}

type ListReservedIPsItems struct {
	Links       *PageLinks       `pulumi:"links"`
	Meta        MetaMeta         `pulumi:"meta"`
	ReservedIps []ReservedIpType `pulumi:"reservedIps"`
}

type ListReservedIPsItemsOutput struct{ *pulumi.OutputState }

func (ListReservedIPsItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListReservedIPsItems)(nil)).Elem()
}

func (o ListReservedIPsItemsOutput) ToListReservedIPsItemsOutput() ListReservedIPsItemsOutput {
	return o
}

func (o ListReservedIPsItemsOutput) ToListReservedIPsItemsOutputWithContext(ctx context.Context) ListReservedIPsItemsOutput {
	return o
}

func (o ListReservedIPsItemsOutput) Links() PageLinksPtrOutput {
	return o.ApplyT(func(v ListReservedIPsItems) *PageLinks { return v.Links }).(PageLinksPtrOutput)
}

func (o ListReservedIPsItemsOutput) Meta() MetaMetaOutput {
	return o.ApplyT(func(v ListReservedIPsItems) MetaMeta { return v.Meta }).(MetaMetaOutput)
}

func (o ListReservedIPsItemsOutput) ReservedIps() ReservedIpTypeArrayOutput {
	return o.ApplyT(func(v ListReservedIPsItems) []ReservedIpType { return v.ReservedIps }).(ReservedIpTypeArrayOutput)
}

type MetaMeta struct {
	// Number of objects returned by the request.
	Total *int `pulumi:"total"`
}

type MetaMetaOutput struct{ *pulumi.OutputState }

func (MetaMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetaMeta)(nil)).Elem()
}

func (o MetaMetaOutput) ToMetaMetaOutput() MetaMetaOutput {
	return o
}

func (o MetaMetaOutput) ToMetaMetaOutputWithContext(ctx context.Context) MetaMetaOutput {
	return o
}

// Number of objects returned by the request.
func (o MetaMetaOutput) Total() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetaMeta) *int { return v.Total }).(pulumi.IntPtrOutput)
}

type NetworkV4 struct {
	// The gateway of the specified IPv4 network interface.
	//
	// For private interfaces, a gateway is not provided. This is denoted by
	// returning `nil` as its value.
	Gateway *string `pulumi:"gateway"`
	// The IP address of the IPv4 network interface.
	IpAddress *string `pulumi:"ipAddress"`
	// The netmask of the IPv4 network interface.
	Netmask *string `pulumi:"netmask"`
	// The type of the IPv4 network interface.
	Type *NetworkV4Type `pulumi:"type"`
}

type NetworkV4Output struct{ *pulumi.OutputState }

func (NetworkV4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkV4)(nil)).Elem()
}

func (o NetworkV4Output) ToNetworkV4Output() NetworkV4Output {
	return o
}

func (o NetworkV4Output) ToNetworkV4OutputWithContext(ctx context.Context) NetworkV4Output {
	return o
}

// The gateway of the specified IPv4 network interface.
//
// For private interfaces, a gateway is not provided. This is denoted by
// returning `nil` as its value.
func (o NetworkV4Output) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkV4) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

// The IP address of the IPv4 network interface.
func (o NetworkV4Output) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkV4) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// The netmask of the IPv4 network interface.
func (o NetworkV4Output) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkV4) *string { return v.Netmask }).(pulumi.StringPtrOutput)
}

// The type of the IPv4 network interface.
func (o NetworkV4Output) Type() NetworkV4TypePtrOutput {
	return o.ApplyT(func(v NetworkV4) *NetworkV4Type { return v.Type }).(NetworkV4TypePtrOutput)
}

type NetworkV4ArrayOutput struct{ *pulumi.OutputState }

func (NetworkV4ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkV4)(nil)).Elem()
}

func (o NetworkV4ArrayOutput) ToNetworkV4ArrayOutput() NetworkV4ArrayOutput {
	return o
}

func (o NetworkV4ArrayOutput) ToNetworkV4ArrayOutputWithContext(ctx context.Context) NetworkV4ArrayOutput {
	return o
}

func (o NetworkV4ArrayOutput) Index(i pulumi.IntInput) NetworkV4Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkV4 {
		return vs[0].([]NetworkV4)[vs[1].(int)]
	}).(NetworkV4Output)
}

type NetworkV6 struct {
	// The gateway of the specified IPv6 network interface.
	Gateway *string `pulumi:"gateway"`
	// The IP address of the IPv6 network interface.
	IpAddress *string `pulumi:"ipAddress"`
	// The netmask of the IPv6 network interface.
	Netmask *int `pulumi:"netmask"`
	// The type of the IPv6 network interface.
	//
	// **Note**: IPv6 private  networking is not currently supported.
	Type *NetworkV6Type `pulumi:"type"`
}

type NetworkV6Output struct{ *pulumi.OutputState }

func (NetworkV6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkV6)(nil)).Elem()
}

func (o NetworkV6Output) ToNetworkV6Output() NetworkV6Output {
	return o
}

func (o NetworkV6Output) ToNetworkV6OutputWithContext(ctx context.Context) NetworkV6Output {
	return o
}

// The gateway of the specified IPv6 network interface.
func (o NetworkV6Output) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkV6) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

// The IP address of the IPv6 network interface.
func (o NetworkV6Output) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkV6) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// The netmask of the IPv6 network interface.
func (o NetworkV6Output) Netmask() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkV6) *int { return v.Netmask }).(pulumi.IntPtrOutput)
}

// The type of the IPv6 network interface.
//
// **Note**: IPv6 private  networking is not currently supported.
func (o NetworkV6Output) Type() NetworkV6TypePtrOutput {
	return o.ApplyT(func(v NetworkV6) *NetworkV6Type { return v.Type }).(NetworkV6TypePtrOutput)
}

type NetworkV6ArrayOutput struct{ *pulumi.OutputState }

func (NetworkV6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkV6)(nil)).Elem()
}

func (o NetworkV6ArrayOutput) ToNetworkV6ArrayOutput() NetworkV6ArrayOutput {
	return o
}

func (o NetworkV6ArrayOutput) ToNetworkV6ArrayOutputWithContext(ctx context.Context) NetworkV6ArrayOutput {
	return o
}

func (o NetworkV6ArrayOutput) Index(i pulumi.IntInput) NetworkV6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkV6 {
		return vs[0].([]NetworkV6)[vs[1].(int)]
	}).(NetworkV6Output)
}

type PageLinks struct {
	Pages *PageLinksPagesProperties `pulumi:"pages"`
}

type PageLinksOutput struct{ *pulumi.OutputState }

func (PageLinksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PageLinks)(nil)).Elem()
}

func (o PageLinksOutput) ToPageLinksOutput() PageLinksOutput {
	return o
}

func (o PageLinksOutput) ToPageLinksOutputWithContext(ctx context.Context) PageLinksOutput {
	return o
}

func (o PageLinksOutput) Pages() PageLinksPagesPropertiesPtrOutput {
	return o.ApplyT(func(v PageLinks) *PageLinksPagesProperties { return v.Pages }).(PageLinksPagesPropertiesPtrOutput)
}

type PageLinksPtrOutput struct{ *pulumi.OutputState }

func (PageLinksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PageLinks)(nil)).Elem()
}

func (o PageLinksPtrOutput) ToPageLinksPtrOutput() PageLinksPtrOutput {
	return o
}

func (o PageLinksPtrOutput) ToPageLinksPtrOutputWithContext(ctx context.Context) PageLinksPtrOutput {
	return o
}

func (o PageLinksPtrOutput) Elem() PageLinksOutput {
	return o.ApplyT(func(v *PageLinks) PageLinks {
		if v != nil {
			return *v
		}
		var ret PageLinks
		return ret
	}).(PageLinksOutput)
}

func (o PageLinksPtrOutput) Pages() PageLinksPagesPropertiesPtrOutput {
	return o.ApplyT(func(v *PageLinks) *PageLinksPagesProperties {
		if v == nil {
			return nil
		}
		return v.Pages
	}).(PageLinksPagesPropertiesPtrOutput)
}

type PageLinksPagesProperties struct {
	First *string `pulumi:"first"`
	Last  *string `pulumi:"last"`
	Next  *string `pulumi:"next"`
	Prev  *string `pulumi:"prev"`
}

type PageLinksPagesPropertiesOutput struct{ *pulumi.OutputState }

func (PageLinksPagesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PageLinksPagesProperties)(nil)).Elem()
}

func (o PageLinksPagesPropertiesOutput) ToPageLinksPagesPropertiesOutput() PageLinksPagesPropertiesOutput {
	return o
}

func (o PageLinksPagesPropertiesOutput) ToPageLinksPagesPropertiesOutputWithContext(ctx context.Context) PageLinksPagesPropertiesOutput {
	return o
}

func (o PageLinksPagesPropertiesOutput) First() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.First }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Last() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Last }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Next() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Next }).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesOutput) Prev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PageLinksPagesProperties) *string { return v.Prev }).(pulumi.StringPtrOutput)
}

type PageLinksPagesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PageLinksPagesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PageLinksPagesProperties)(nil)).Elem()
}

func (o PageLinksPagesPropertiesPtrOutput) ToPageLinksPagesPropertiesPtrOutput() PageLinksPagesPropertiesPtrOutput {
	return o
}

func (o PageLinksPagesPropertiesPtrOutput) ToPageLinksPagesPropertiesPtrOutputWithContext(ctx context.Context) PageLinksPagesPropertiesPtrOutput {
	return o
}

func (o PageLinksPagesPropertiesPtrOutput) Elem() PageLinksPagesPropertiesOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) PageLinksPagesProperties {
		if v != nil {
			return *v
		}
		var ret PageLinksPagesProperties
		return ret
	}).(PageLinksPagesPropertiesOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) First() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.First
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Last() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Last
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Next() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Next
	}).(pulumi.StringPtrOutput)
}

func (o PageLinksPagesPropertiesPtrOutput) Prev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PageLinksPagesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Prev
	}).(pulumi.StringPtrOutput)
}

type Region struct {
	// This is a boolean value that represents whether new Droplets can be created in this region.
	Available bool `pulumi:"available"`
	// This attribute is set to an array which contains features available in this region
	Features []string `pulumi:"features"`
	// The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
	Name string `pulumi:"name"`
	// This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
	Sizes []string `pulumi:"sizes"`
	// A human-readable string that is used as a unique identifier for each region.
	Slug string `pulumi:"slug"`
}

type RegionOutput struct{ *pulumi.OutputState }

func (RegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Region)(nil)).Elem()
}

func (o RegionOutput) ToRegionOutput() RegionOutput {
	return o
}

func (o RegionOutput) ToRegionOutputWithContext(ctx context.Context) RegionOutput {
	return o
}

// This is a boolean value that represents whether new Droplets can be created in this region.
func (o RegionOutput) Available() pulumi.BoolOutput {
	return o.ApplyT(func(v Region) bool { return v.Available }).(pulumi.BoolOutput)
}

// This attribute is set to an array which contains features available in this region
func (o RegionOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Region) []string { return v.Features }).(pulumi.StringArrayOutput)
}

// The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
func (o RegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Region) string { return v.Name }).(pulumi.StringOutput)
}

// This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
func (o RegionOutput) Sizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Region) []string { return v.Sizes }).(pulumi.StringArrayOutput)
}

// A human-readable string that is used as a unique identifier for each region.
func (o RegionOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v Region) string { return v.Slug }).(pulumi.StringOutput)
}

type RegionPtrOutput struct{ *pulumi.OutputState }

func (RegionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Region)(nil)).Elem()
}

func (o RegionPtrOutput) ToRegionPtrOutput() RegionPtrOutput {
	return o
}

func (o RegionPtrOutput) ToRegionPtrOutputWithContext(ctx context.Context) RegionPtrOutput {
	return o
}

func (o RegionPtrOutput) Elem() RegionOutput {
	return o.ApplyT(func(v *Region) Region {
		if v != nil {
			return *v
		}
		var ret Region
		return ret
	}).(RegionOutput)
}

// This is a boolean value that represents whether new Droplets can be created in this region.
func (o RegionPtrOutput) Available() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Region) *bool {
		if v == nil {
			return nil
		}
		return &v.Available
	}).(pulumi.BoolPtrOutput)
}

// This attribute is set to an array which contains features available in this region
func (o RegionPtrOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Region) []string {
		if v == nil {
			return nil
		}
		return v.Features
	}).(pulumi.StringArrayOutput)
}

// The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
func (o RegionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Region) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
func (o RegionPtrOutput) Sizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Region) []string {
		if v == nil {
			return nil
		}
		return v.Sizes
	}).(pulumi.StringArrayOutput)
}

// A human-readable string that is used as a unique identifier for each region.
func (o RegionPtrOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Region) *string {
		if v == nil {
			return nil
		}
		return &v.Slug
	}).(pulumi.StringPtrOutput)
}

type ReservedIpType struct {
	Droplet *Droplet `pulumi:"droplet"`
	// The public IP address of the reserved IP. It also serves as its identifier.
	Ip *string `pulumi:"ip"`
	// A boolean value indicating whether or not the reserved IP has pending actions preventing new ones from being submitted.
	Locked *bool `pulumi:"locked"`
	// The UUID of the project to which the reserved IP currently belongs.
	ProjectId *string           `pulumi:"projectId"`
	Region    *ReservedIpRegion `pulumi:"region"`
}

// Defaults sets the appropriate defaults for ReservedIpType
func (val *ReservedIpType) Defaults() *ReservedIpType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Droplet = tmp.Droplet.Defaults()

	return &tmp
}

type ReservedIpTypeOutput struct{ *pulumi.OutputState }

func (ReservedIpTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservedIpType)(nil)).Elem()
}

func (o ReservedIpTypeOutput) ToReservedIpTypeOutput() ReservedIpTypeOutput {
	return o
}

func (o ReservedIpTypeOutput) ToReservedIpTypeOutputWithContext(ctx context.Context) ReservedIpTypeOutput {
	return o
}

func (o ReservedIpTypeOutput) Droplet() DropletPtrOutput {
	return o.ApplyT(func(v ReservedIpType) *Droplet { return v.Droplet }).(DropletPtrOutput)
}

// The public IP address of the reserved IP. It also serves as its identifier.
func (o ReservedIpTypeOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservedIpType) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// A boolean value indicating whether or not the reserved IP has pending actions preventing new ones from being submitted.
func (o ReservedIpTypeOutput) Locked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReservedIpType) *bool { return v.Locked }).(pulumi.BoolPtrOutput)
}

// The UUID of the project to which the reserved IP currently belongs.
func (o ReservedIpTypeOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservedIpType) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o ReservedIpTypeOutput) Region() ReservedIpRegionPtrOutput {
	return o.ApplyT(func(v ReservedIpType) *ReservedIpRegion { return v.Region }).(ReservedIpRegionPtrOutput)
}

type ReservedIpTypePtrOutput struct{ *pulumi.OutputState }

func (ReservedIpTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedIpType)(nil)).Elem()
}

func (o ReservedIpTypePtrOutput) ToReservedIpTypePtrOutput() ReservedIpTypePtrOutput {
	return o
}

func (o ReservedIpTypePtrOutput) ToReservedIpTypePtrOutputWithContext(ctx context.Context) ReservedIpTypePtrOutput {
	return o
}

func (o ReservedIpTypePtrOutput) Elem() ReservedIpTypeOutput {
	return o.ApplyT(func(v *ReservedIpType) ReservedIpType {
		if v != nil {
			return *v
		}
		var ret ReservedIpType
		return ret
	}).(ReservedIpTypeOutput)
}

func (o ReservedIpTypePtrOutput) Droplet() DropletPtrOutput {
	return o.ApplyT(func(v *ReservedIpType) *Droplet {
		if v == nil {
			return nil
		}
		return v.Droplet
	}).(DropletPtrOutput)
}

// The public IP address of the reserved IP. It also serves as its identifier.
func (o ReservedIpTypePtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservedIpType) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// A boolean value indicating whether or not the reserved IP has pending actions preventing new ones from being submitted.
func (o ReservedIpTypePtrOutput) Locked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReservedIpType) *bool {
		if v == nil {
			return nil
		}
		return v.Locked
	}).(pulumi.BoolPtrOutput)
}

// The UUID of the project to which the reserved IP currently belongs.
func (o ReservedIpTypePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservedIpType) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

func (o ReservedIpTypePtrOutput) Region() ReservedIpRegionPtrOutput {
	return o.ApplyT(func(v *ReservedIpType) *ReservedIpRegion {
		if v == nil {
			return nil
		}
		return v.Region
	}).(ReservedIpRegionPtrOutput)
}

type ReservedIpTypeArrayOutput struct{ *pulumi.OutputState }

func (ReservedIpTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReservedIpType)(nil)).Elem()
}

func (o ReservedIpTypeArrayOutput) ToReservedIpTypeArrayOutput() ReservedIpTypeArrayOutput {
	return o
}

func (o ReservedIpTypeArrayOutput) ToReservedIpTypeArrayOutputWithContext(ctx context.Context) ReservedIpTypeArrayOutput {
	return o
}

func (o ReservedIpTypeArrayOutput) Index(i pulumi.IntInput) ReservedIpTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReservedIpType {
		return vs[0].([]ReservedIpType)[vs[1].(int)]
	}).(ReservedIpTypeOutput)
}

type ReservedIpRegion struct {
	// This is a boolean value that represents whether new Droplets can be created in this region.
	Available bool `pulumi:"available"`
	// This attribute is set to an array which contains features available in this region
	Features []string `pulumi:"features"`
	// The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
	Name string `pulumi:"name"`
	// This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
	Sizes []string `pulumi:"sizes"`
	// A human-readable string that is used as a unique identifier for each region.
	Slug string `pulumi:"slug"`
}

type ReservedIpRegionOutput struct{ *pulumi.OutputState }

func (ReservedIpRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservedIpRegion)(nil)).Elem()
}

func (o ReservedIpRegionOutput) ToReservedIpRegionOutput() ReservedIpRegionOutput {
	return o
}

func (o ReservedIpRegionOutput) ToReservedIpRegionOutputWithContext(ctx context.Context) ReservedIpRegionOutput {
	return o
}

// This is a boolean value that represents whether new Droplets can be created in this region.
func (o ReservedIpRegionOutput) Available() pulumi.BoolOutput {
	return o.ApplyT(func(v ReservedIpRegion) bool { return v.Available }).(pulumi.BoolOutput)
}

// This attribute is set to an array which contains features available in this region
func (o ReservedIpRegionOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReservedIpRegion) []string { return v.Features }).(pulumi.StringArrayOutput)
}

// The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
func (o ReservedIpRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReservedIpRegion) string { return v.Name }).(pulumi.StringOutput)
}

// This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
func (o ReservedIpRegionOutput) Sizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReservedIpRegion) []string { return v.Sizes }).(pulumi.StringArrayOutput)
}

// A human-readable string that is used as a unique identifier for each region.
func (o ReservedIpRegionOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v ReservedIpRegion) string { return v.Slug }).(pulumi.StringOutput)
}

type ReservedIpRegionPtrOutput struct{ *pulumi.OutputState }

func (ReservedIpRegionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedIpRegion)(nil)).Elem()
}

func (o ReservedIpRegionPtrOutput) ToReservedIpRegionPtrOutput() ReservedIpRegionPtrOutput {
	return o
}

func (o ReservedIpRegionPtrOutput) ToReservedIpRegionPtrOutputWithContext(ctx context.Context) ReservedIpRegionPtrOutput {
	return o
}

func (o ReservedIpRegionPtrOutput) Elem() ReservedIpRegionOutput {
	return o.ApplyT(func(v *ReservedIpRegion) ReservedIpRegion {
		if v != nil {
			return *v
		}
		var ret ReservedIpRegion
		return ret
	}).(ReservedIpRegionOutput)
}

// This is a boolean value that represents whether new Droplets can be created in this region.
func (o ReservedIpRegionPtrOutput) Available() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReservedIpRegion) *bool {
		if v == nil {
			return nil
		}
		return &v.Available
	}).(pulumi.BoolPtrOutput)
}

// This attribute is set to an array which contains features available in this region
func (o ReservedIpRegionPtrOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReservedIpRegion) []string {
		if v == nil {
			return nil
		}
		return v.Features
	}).(pulumi.StringArrayOutput)
}

// The display name of the region.  This will be a full name that is used in the control panel and other interfaces.
func (o ReservedIpRegionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservedIpRegion) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// This attribute is set to an array which contains the identifying slugs for the sizes available in this region.
func (o ReservedIpRegionPtrOutput) Sizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReservedIpRegion) []string {
		if v == nil {
			return nil
		}
		return v.Sizes
	}).(pulumi.StringArrayOutput)
}

// A human-readable string that is used as a unique identifier for each region.
func (o ReservedIpRegionPtrOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservedIpRegion) *string {
		if v == nil {
			return nil
		}
		return &v.Slug
	}).(pulumi.StringPtrOutput)
}

type Size struct {
	// This is a boolean value that represents whether new Droplets can be created with this size.
	Available bool `pulumi:"available"`
	// A string describing the class of Droplets created from this size. For example: Basic, General Purpose, CPU-Optimized, Memory-Optimized, or Storage-Optimized.
	Description string `pulumi:"description"`
	// The amount of disk space set aside for Droplets of this size. The value is represented in gigabytes.
	Disk int `pulumi:"disk"`
	// The amount of RAM allocated to Droplets created of this size. The value is represented in megabytes.
	Memory int `pulumi:"memory"`
	// This describes the price of the Droplet size as measured hourly. The value is measured in US dollars.
	PriceHourly float64 `pulumi:"priceHourly"`
	// This attribute describes the monthly cost of this Droplet size if the Droplet is kept for an entire month. The value is measured in US dollars.
	PriceMonthly float64 `pulumi:"priceMonthly"`
	// An array containing the region slugs where this size is available for Droplet creates.
	Regions []string `pulumi:"regions"`
	// A human-readable string that is used to uniquely identify each size.
	Slug string `pulumi:"slug"`
	// The amount of transfer bandwidth that is available for Droplets created in this size. This only counts traffic on the public interface. The value is given in terabytes.
	Transfer float64 `pulumi:"transfer"`
	// The integer of number CPUs allocated to Droplets of this size.
	Vcpus int `pulumi:"vcpus"`
}

// Defaults sets the appropriate defaults for Size
func (val *Size) Defaults() *Size {
	if val == nil {
		return nil
	}
	tmp := *val
	if internal.IsZero(tmp.Available) {
		tmp.Available = true
	}
	return &tmp
}

type SizeOutput struct{ *pulumi.OutputState }

func (SizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Size)(nil)).Elem()
}

func (o SizeOutput) ToSizeOutput() SizeOutput {
	return o
}

func (o SizeOutput) ToSizeOutputWithContext(ctx context.Context) SizeOutput {
	return o
}

// This is a boolean value that represents whether new Droplets can be created with this size.
func (o SizeOutput) Available() pulumi.BoolOutput {
	return o.ApplyT(func(v Size) bool { return v.Available }).(pulumi.BoolOutput)
}

// A string describing the class of Droplets created from this size. For example: Basic, General Purpose, CPU-Optimized, Memory-Optimized, or Storage-Optimized.
func (o SizeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v Size) string { return v.Description }).(pulumi.StringOutput)
}

// The amount of disk space set aside for Droplets of this size. The value is represented in gigabytes.
func (o SizeOutput) Disk() pulumi.IntOutput {
	return o.ApplyT(func(v Size) int { return v.Disk }).(pulumi.IntOutput)
}

// The amount of RAM allocated to Droplets created of this size. The value is represented in megabytes.
func (o SizeOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v Size) int { return v.Memory }).(pulumi.IntOutput)
}

// This describes the price of the Droplet size as measured hourly. The value is measured in US dollars.
func (o SizeOutput) PriceHourly() pulumi.Float64Output {
	return o.ApplyT(func(v Size) float64 { return v.PriceHourly }).(pulumi.Float64Output)
}

// This attribute describes the monthly cost of this Droplet size if the Droplet is kept for an entire month. The value is measured in US dollars.
func (o SizeOutput) PriceMonthly() pulumi.Float64Output {
	return o.ApplyT(func(v Size) float64 { return v.PriceMonthly }).(pulumi.Float64Output)
}

// An array containing the region slugs where this size is available for Droplet creates.
func (o SizeOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Size) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// A human-readable string that is used to uniquely identify each size.
func (o SizeOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v Size) string { return v.Slug }).(pulumi.StringOutput)
}

// The amount of transfer bandwidth that is available for Droplets created in this size. This only counts traffic on the public interface. The value is given in terabytes.
func (o SizeOutput) Transfer() pulumi.Float64Output {
	return o.ApplyT(func(v Size) float64 { return v.Transfer }).(pulumi.Float64Output)
}

// The integer of number CPUs allocated to Droplets of this size.
func (o SizeOutput) Vcpus() pulumi.IntOutput {
	return o.ApplyT(func(v Size) int { return v.Vcpus }).(pulumi.IntOutput)
}

type SizePtrOutput struct{ *pulumi.OutputState }

func (SizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Size)(nil)).Elem()
}

func (o SizePtrOutput) ToSizePtrOutput() SizePtrOutput {
	return o
}

func (o SizePtrOutput) ToSizePtrOutputWithContext(ctx context.Context) SizePtrOutput {
	return o
}

func (o SizePtrOutput) Elem() SizeOutput {
	return o.ApplyT(func(v *Size) Size {
		if v != nil {
			return *v
		}
		var ret Size
		return ret
	}).(SizeOutput)
}

// This is a boolean value that represents whether new Droplets can be created with this size.
func (o SizePtrOutput) Available() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Size) *bool {
		if v == nil {
			return nil
		}
		return &v.Available
	}).(pulumi.BoolPtrOutput)
}

// A string describing the class of Droplets created from this size. For example: Basic, General Purpose, CPU-Optimized, Memory-Optimized, or Storage-Optimized.
func (o SizePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Size) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// The amount of disk space set aside for Droplets of this size. The value is represented in gigabytes.
func (o SizePtrOutput) Disk() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Size) *int {
		if v == nil {
			return nil
		}
		return &v.Disk
	}).(pulumi.IntPtrOutput)
}

// The amount of RAM allocated to Droplets created of this size. The value is represented in megabytes.
func (o SizePtrOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Size) *int {
		if v == nil {
			return nil
		}
		return &v.Memory
	}).(pulumi.IntPtrOutput)
}

// This describes the price of the Droplet size as measured hourly. The value is measured in US dollars.
func (o SizePtrOutput) PriceHourly() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Size) *float64 {
		if v == nil {
			return nil
		}
		return &v.PriceHourly
	}).(pulumi.Float64PtrOutput)
}

// This attribute describes the monthly cost of this Droplet size if the Droplet is kept for an entire month. The value is measured in US dollars.
func (o SizePtrOutput) PriceMonthly() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Size) *float64 {
		if v == nil {
			return nil
		}
		return &v.PriceMonthly
	}).(pulumi.Float64PtrOutput)
}

// An array containing the region slugs where this size is available for Droplet creates.
func (o SizePtrOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Size) []string {
		if v == nil {
			return nil
		}
		return v.Regions
	}).(pulumi.StringArrayOutput)
}

// A human-readable string that is used to uniquely identify each size.
func (o SizePtrOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Size) *string {
		if v == nil {
			return nil
		}
		return &v.Slug
	}).(pulumi.StringPtrOutput)
}

// The amount of transfer bandwidth that is available for Droplets created in this size. This only counts traffic on the public interface. The value is given in terabytes.
func (o SizePtrOutput) Transfer() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Size) *float64 {
		if v == nil {
			return nil
		}
		return &v.Transfer
	}).(pulumi.Float64PtrOutput)
}

// The integer of number CPUs allocated to Droplets of this size.
func (o SizePtrOutput) Vcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Size) *int {
		if v == nil {
			return nil
		}
		return &v.Vcpus
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionOutput{})
	pulumi.RegisterOutputType(ActionPtrOutput{})
	pulumi.RegisterOutputType(ActionArrayOutput{})
	pulumi.RegisterOutputType(ActionLinkOutput{})
	pulumi.RegisterOutputType(ActionLinkArrayOutput{})
	pulumi.RegisterOutputType(ActionRegionSlugOutput{})
	pulumi.RegisterOutputType(ActionRegionSlugPtrOutput{})
	pulumi.RegisterOutputType(DropletOutput{})
	pulumi.RegisterOutputType(DropletPtrOutput{})
	pulumi.RegisterOutputType(DropletNetworksPropertiesOutput{})
	pulumi.RegisterOutputType(DropletNetworksPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DropletNextBackupWindowPropertiesOutput{})
	pulumi.RegisterOutputType(DropletNextBackupWindowPropertiesPtrOutput{})
	pulumi.RegisterOutputType(GetReservedIPPropertiesOutput{})
	pulumi.RegisterOutputType(GetReservedIPsActionPropertiesOutput{})
	pulumi.RegisterOutputType(GetReservedIPsActionPropertiesActionOutput{})
	pulumi.RegisterOutputType(GetReservedIPsActionPropertiesActionPtrOutput{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImagePtrOutput{})
	pulumi.RegisterOutputType(KernelOutput{})
	pulumi.RegisterOutputType(KernelPtrOutput{})
	pulumi.RegisterOutputType(LinksPropertiesOutput{})
	pulumi.RegisterOutputType(LinksPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ListReservedIPsActionsItemsOutput{})
	pulumi.RegisterOutputType(ListReservedIPsItemsOutput{})
	pulumi.RegisterOutputType(MetaMetaOutput{})
	pulumi.RegisterOutputType(NetworkV4Output{})
	pulumi.RegisterOutputType(NetworkV4ArrayOutput{})
	pulumi.RegisterOutputType(NetworkV6Output{})
	pulumi.RegisterOutputType(NetworkV6ArrayOutput{})
	pulumi.RegisterOutputType(PageLinksOutput{})
	pulumi.RegisterOutputType(PageLinksPtrOutput{})
	pulumi.RegisterOutputType(PageLinksPagesPropertiesOutput{})
	pulumi.RegisterOutputType(PageLinksPagesPropertiesPtrOutput{})
	pulumi.RegisterOutputType(RegionOutput{})
	pulumi.RegisterOutputType(RegionPtrOutput{})
	pulumi.RegisterOutputType(ReservedIpTypeOutput{})
	pulumi.RegisterOutputType(ReservedIpTypePtrOutput{})
	pulumi.RegisterOutputType(ReservedIpTypeArrayOutput{})
	pulumi.RegisterOutputType(ReservedIpRegionOutput{})
	pulumi.RegisterOutputType(ReservedIpRegionPtrOutput{})
	pulumi.RegisterOutputType(SizeOutput{})
	pulumi.RegisterOutputType(SizePtrOutput{})
}
