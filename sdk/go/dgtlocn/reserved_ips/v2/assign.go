// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-digitalocean-native/sdk/go/dgtlocn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Assign struct {
	pulumi.CustomResourceState

	Action ActionPtrOutput `pulumi:"action"`
	// The ID of the Droplet that the reserved IP will be assigned to.
	DropletId pulumi.IntPtrOutput `pulumi:"dropletId"`
	// The type of action to initiate for the reserved IP.
	Type ReservedIpActionTypeTypePtrOutput `pulumi:"type"`
}

// NewAssign registers a new resource with the given unique name, arguments, and options.
func NewAssign(ctx *pulumi.Context,
	name string, args *AssignArgs, opts ...pulumi.ResourceOption) (*Assign, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DropletId == nil {
		return nil, errors.New("invalid value for required argument 'DropletId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Assign
	err := ctx.RegisterResource("digitalocean-native:reserved_ips/v2:Assign", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssign gets an existing Assign resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssign(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssignState, opts ...pulumi.ResourceOption) (*Assign, error) {
	var resource Assign
	err := ctx.ReadResource("digitalocean-native:reserved_ips/v2:Assign", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Assign resources.
type assignState struct {
}

type AssignState struct {
}

func (AssignState) ElementType() reflect.Type {
	return reflect.TypeOf((*assignState)(nil)).Elem()
}

type assignArgs struct {
	// The ID of the Droplet that the reserved IP will be assigned to.
	DropletId int `pulumi:"dropletId"`
	// A reserved IP address.
	ReservedIp *string `pulumi:"reservedIp"`
	// The type of action to initiate for the reserved IP.
	Type ReservedIpActionTypeType `pulumi:"type"`
}

// The set of arguments for constructing a Assign resource.
type AssignArgs struct {
	// The ID of the Droplet that the reserved IP will be assigned to.
	DropletId pulumi.IntInput
	// A reserved IP address.
	ReservedIp pulumi.StringPtrInput
	// The type of action to initiate for the reserved IP.
	Type ReservedIpActionTypeTypeInput
}

func (AssignArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assignArgs)(nil)).Elem()
}

type AssignInput interface {
	pulumi.Input

	ToAssignOutput() AssignOutput
	ToAssignOutputWithContext(ctx context.Context) AssignOutput
}

func (*Assign) ElementType() reflect.Type {
	return reflect.TypeOf((**Assign)(nil)).Elem()
}

func (i *Assign) ToAssignOutput() AssignOutput {
	return i.ToAssignOutputWithContext(context.Background())
}

func (i *Assign) ToAssignOutputWithContext(ctx context.Context) AssignOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignOutput)
}

type AssignOutput struct{ *pulumi.OutputState }

func (AssignOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Assign)(nil)).Elem()
}

func (o AssignOutput) ToAssignOutput() AssignOutput {
	return o
}

func (o AssignOutput) ToAssignOutputWithContext(ctx context.Context) AssignOutput {
	return o
}

func (o AssignOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v *Assign) ActionPtrOutput { return v.Action }).(ActionPtrOutput)
}

// The ID of the Droplet that the reserved IP will be assigned to.
func (o AssignOutput) DropletId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Assign) pulumi.IntPtrOutput { return v.DropletId }).(pulumi.IntPtrOutput)
}

// The type of action to initiate for the reserved IP.
func (o AssignOutput) Type() ReservedIpActionTypeTypePtrOutput {
	return o.ApplyT(func(v *Assign) ReservedIpActionTypeTypePtrOutput { return v.Type }).(ReservedIpActionTypeTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssignInput)(nil)).Elem(), &Assign{})
	pulumi.RegisterOutputType(AssignOutput{})
}
